// ****************************************************************************
// *  Projeto            : BoiTata
// *  Sistema            : Gerenciamento de Rebanho
// *  Desenvolvedor      : Hitalo Cordeiro Silva
// *  Versão             : 1
// *  Data               : 23/08/2002
// *  Documentação       : Animais - Definição das Classes.doc
// *  Código Classe      : 45
// *  Descrição Resumida : Cadastro de Animais
// ****************************************************************************
// *  Últimas Alterações
// *   Jerry    23/08/2002    Criação
// *   Hitalo   23/08/2002    Adiconar metodo Buscar.
// *   Carlos   20/08/2002    Adicionar método pesquisar.
// *   Hitalo   29/08/2002    Alteração do metodo Buscar(IndAnimaldoProprioProdutor,IndAnimalVendido).
// *   Arley    09/10/2002    Inclusão do método GerarRelatorio e seus dependentes
// *   Jerry    09/2002       Eventos
// *   Jerry    10/2002       Eventos
// *   Hitalo   01/11/2002    PesquisarEventos
// *   Arley    04/11/2002    Implementação do metodo interno GerarRelatorioConsolidado
// *   Hitalo   11/11/2002    Implementação do metodo interno GerarRelatorioEventos
// *   Carlos   21/11/2002    Adicionar o método DefinirPesoAnimal e AlterarPesoAnimal
// *   Carlos   12/12/2002    Adicionar o método DefinirPesagem e DefinirPesoAjustado
// *   Arley    08/01/2003    Implementação do método interno AlterarAtributoAnimal
// *   Fábio    08/04/2004    Alterar os métodos para marcar o código sisbov como utilizado sómente
// *                          durante a efeitivação do animal e desmarcar quando a efeitivação for desfeita
// *   Adalberto 24/05/2004    Implementação do método interno VerificaAnimalRm, para verificar a existencia do animal em um RM
// *                           antes de cadastra-lo em um evento Morte, Venda Criador. ou Venda Frigorifico
// *
// ****************************************************************************
unit uIntAnimais;

{$DEFINE MSSQL}


interface

uses uIntClassesBasicas, uIntAnimal,uIntAnimalResumido, dbtables, sysutils, db,
  uFerramentas, uIntFiliacao, uIntRegistro, uColecoes, uIntRelatorios,
  uPrintPDF, Variants, uIntCodigosSisbov, uConexao, uIntMensagens, DateUtils, uIntInventariosAnimais,
  uIntSoapSisbov, WsSISBOV1, InvokeRegistry, Rio, SOAPHTTPClient;
//  uIntPropriedadesRurais;

const MAX_SUBEVENTOS = 15;
      MAX_ANIMAIS_PESOS = 100;
      TAM_COD_MANEJO_SISBOV = 6;

type
  TDadosCategoria = record
    CodCategoriaAnimal : Integer;
    DesCategoriaAnimal : String;
    IndSexo : String;
    NumIdadeMinima : Integer;
    NumIdadeMaxima : Integer;
    IndAnimalCastrado : String;
    IndAnimalAtivo: String;
  end;

  TDadosRegimeAlimentar = record
    CodRegimeAlimentar : Integer;
    DesRegimeAlimentar : String;
    IndAnimalMamando : String;
  end;

  TDadosLote = record
    CodLote : Integer;
    CodFazenda : Integer;
    DesLote : String;
  end;

  TPesoAnimal = record
    CodAnimalManejo : string[8];
    PesoAnimal : real;
    IndCadastrado : string[1];
  end;

  TReproducaoAnimal = record
    CodAnimalManejo : string[8];
    IndVacaPTouroA : String[1];
    IndCadastrado : string[1];
  end;

  TPesosAnimais = array[1..MAX_ANIMAIS_PESOS] of TPesoAnimal;
  TReproducaoAnimais = array[1..MAX_ANIMAIS_PESOS] of TReproducaoAnimal;

  TDadosLocal = record
    CodLocal : Integer;
    CodFazenda : Integer;
    DesLocal : String;
  end;

  TDadosMorte = record
    CodTipoMorte : Integer;
    DesTipoMorte : String;
    CodCausaMorte : Integer;
    DesCausaMorte : String;
  end;

  TDadosLugar = record
    CodTipoLugar : Integer;
    CodFazenda: Integer;
    CodLocal: Integer;
    CodLote: Integer;
    NumImovel: String;
    CodLocalizacaoSISBOV: Integer;
    CodPropriedade: Integer;
    NumCNPJCPF: String;
    CodPessoa: Integer;
    CodPessoaSecundaria: Integer;
  end;

  TDadosSubEventoSanitario = record
    CodEntradaInsumo : Integer;
    DesTipoSubEventoSanitario: String;
    DesInsumo : String;
    DesSubTipoInsumo : String;
    CodTipoInsumo : Integer;
    CodSubTipoInsumo : Integer;
    QtdIntervaloMinimoAplicacao : Integer;
    IndSexoAnimalAplicacao : String;
  end;

  TDadosEvento = record
    CodEvento : Integer;
    CodTipoEvento : Integer;
    DesTipoEvento : String;
    IndEventoSisbov : String;
    DtaInicio : TDateTime;
    DtaFim : TDateTime;
    CodFazenda : Integer;
    CodSituacaoSisbov : String;
    QtdAnimais : Integer;
    DtaEfetivacaoCadastro : TDateTime;
    CodRegistroLog : Integer;
    CodEventoAssociado : Integer;
    DtaAplicacaoEvento : TDateTime;
    CodAptidao : Integer;
    CategoriaOrigem : TDadosCategoria;
    CategoriaDestino : TDadosCategoria;
    RegimeAlimentarOrigem : TDadosRegimeAlimentar;
    RegimeAlimentarDestino : TDadosRegimeAlimentar;
    LoteDestino : TDadosLote;
    LocalDestino : TDadosLocal;
    RegimeAlimentarMamando : TDadosRegimeAlimentar;
    RegimeAlimentarDesmamado : TDadosRegimeAlimentar;
    TipoMorte : TDadosMorte;
    NumGta : String;
    DtaEmissaoGta : TDateTime;
    LugarOrigem: TDadosLugar;
    LugarDestino: TDadosLugar;
    DadosSubEventoSanitario: Array[0..MAX_SUBEVENTOS] of TDadosSubEventoSanitario;
    IndDtaControlada: String;
    CodTipoAvaliacao: Integer;
    EventoAssociado: Boolean;
    CodTarefa: Integer;
  end;

  TDadosAnimal = record
    CodPessoaProdutor: Integer;
    CodAnimal : Integer;
    CodFazendaManejo : Integer;
    SglFazendaManejo: String;
    CodAnimalManejo : String;
    CodAnimalCertificadora: String;
    CodPaisSisbov : Integer;
    CodEstadoSisbov : Integer;
    CodMicroRegiaoSisbov : Integer;
    CodAnimalSisbov : Integer;
    NumDVSisbov : Integer;
    CodSituacaoSisbov : String;
    DtaIdentificacaoSisbov : TDateTime;
    NumImovelIdentificacao : String;
    CodLocalizacaoIdentificacao: Integer;
    CodPropriedadeIdentificacao : Integer;
    CodFazendaIdentificacao : Integer;
    DtaNascimento : TDatetime;
    NumImovelNascimento : String;
    CodLocalizacaoNascimento: Integer;
    CodPropriedadeNascimento : Integer;
    CodFazendaNascimento : Integer;
    DtaCompra : TDateTime;
    CodPessoaSecundariaCriador : Integer;
    NomAnimal : String;
    DesApelido : String;
    CodAssociacaoRaca : Integer;
    CodGrauSangue : Integer;
    CodEspecie : Integer;
    CodAptidao : Integer;
    CodRaca : Integer;
    CodPelagem : Integer;
    IndSexo : String;
    CodTipoOrigem : Integer;
    CodAnimalPai : Integer;
    CodAnimalMae : Integer;
    CodAnimalReceptor : Integer;
    IndAnimalCastrado: String;
    CodRegimeAlimentar : Integer;
    CodCategoriaAnimal : Integer;
    CodTipoLugar : Integer;
    CodLoteCorrente : Integer;
    CodLocalCorrente : Integer;
    CodFazendaCorrente : Integer;
    NumImovelCorrente : String;
    CodLocalizacaoCorrente: Integer;
    CodPropriedadeCorrente : Integer;
    NumCNPJCPFCorrente : String;
    CodPessoaCorrente : Integer;
    CodPessoaSecundariaCorrente : Integer;
    DtaUltimoEvento : TDateTime;
    DtaUltimoEventoAnterior : TDateTime;
    DtaAplicacaoUltimoEvento : TDateTime;
    DtaAplicacaoUltimoEventoAnterior : TDateTime;
    CodRegistroLog: Integer;
    DtaEfetivacaoCadastro: TDatetime;
    CodArquivoSisbov : Integer;
    CodAnimalAssociado : Integer;
    QtdPesoAnimal : extended;
    NumTransponder: String;
    CodTipoIdentificador1: Integer;
    CodPosicaoIdentificador1: Integer;
    CodTipoIdentificador2: Integer;
    CodPosicaoIdentificador2: Integer;
    CodTipoIdentificador3: Integer;
    CodPosicaoIdentificador3: Integer;
    CodTipoIdentificador4: Integer;
    CodPosicaoIdentificador4: Integer;
    NumGta: String;
    DtaEmissaoGta: TDateTime;
    NumNotaFiscal: Integer;
    IndAptoCobertura: String;
    IndTouroApto: String;
    IndVacaPrenha: String;
    DtaDesativacao: TDateTime;
    IndCodSisBovReservado: String;
    CodAutenticacaoSisbov: String;
    CodPessoaTecnico: Integer;
    NumRgd: String;
    DtaInsercaoRegistro: TDateTime;
    IndAnimalExpDesmCancelado: Boolean;
    IndAptidaoRegimeAlimentarInvalidaNoEvento: String;
    CodAnimalVendido: Integer;
    CodSituacaoAnimalVendido: String;
    DtaLiberacaoAbate: TDateTime;
    DtaInsercaoSisbov: TDateTime;
    IndTransmissaoSISBOV: String;
  end;

  TIdentificacaoDupla = record
    CodTipoIdentificador_1: Integer;
    CodTipoIdentificador_2: Integer;
  end;

  { TIntAnimais }
  TIntAnimais = class(TIntClasseBDNavegacaoBasica)
  private
    FIntAnimal : TIntAnimal;
    FIntAnimalResumido : TIntAnimalResumido;
//    FIntPropriedadesRurais : TIntPropriedadesRurais;
    FIntRegistro : TIntRegistro;
    FIntFiliacao : TIntFiliacao;
    FIntInventariosAnimais: TIntInventariosAnimais;
    FIntAnimaisProcessados : String;
    QtdProcessados: Integer;
    QtdRelacionados: Integer;
    QtdAnimalIncompativel: Integer;
    QtdRelacionadoIncompativel: Integer;
    NumNivelChamada : Integer;
    FIndLogMensagem: Boolean;
    FCodigosSisbov: TIntCodigosSisbov;

    // Variáveis para armazenar valores da última pesquisa
    FPCodFazendaManejo: Integer;
    FPCodManejoInicio: String;
    FPCodManejoFim: String;
    FPCodAnimalCertificadora: String;
    FPCodPaisSisBov: Integer;
    FPCodEstadoSisBov: Integer;
    FPCodMicroRegiaoSisBov: Integer;
    FPCodSisBovInicio: Integer;
    FPCodSisBovFim: Integer;
    FPCodSituacaoSisbov: String;
    FPDtaNascimentoInicio: TDateTime;
    FPDtaNascimentoFim: TDateTime;
    FPCodFazendaNascimento: Integer;
    FPDtaCompraInicio: TDateTime;
    FPDtaCompraFim: TDateTime;
    FPCodPessoaSecundariaCriador: Integer;
    FPNomAnimal: String;
    FPDesApelido: String;
    FPCodAptidao: Integer;
    FPCodRaca: String;
    FPIndSexo: String;
    FPCodOrigem: String;
    FPSglFazendaPai: String;
    FPCodAnimalPai: String;
    FPDesApelidoPai: String;
    FPSglFazendaMae: String;
    FPCodAnimalMae: String;
    FPIndAnimalCastrado: String;
    FPCodRegimeAlimentar: Integer;
    FPCodCategoria: String;
    FPIndConsiderarExterno: String;
    FPCodAssociacao: Integer;
    FPCodGrauSangue: Integer;
    FPNumRGD: String;
    FPCodTipoLugar: Integer;
    FPCodLocal: String;
    FPCodLote: String;
    FPCodFazendaCorrente: Integer;
    FPNumImovelCorrente: String;
    FPCodLocalizacaoCorrente: Integer;
    FPNumCPFCNPJCorrente: String;
    FPIndCadastroEfetivado: String;
    FPCodOrdenacao: String;
    FPCodEvento: Integer;
    FPIndEventoAplicado: String;
    FPIndAnimaisEvento: String;
    FPCodReprodutorMultiplo: Integer;
    FPIndTrazerComposicaoRacial : String;
    FPIndAgrupRaca1 : String;
    FPCodRaca1 : Integer;
    FPQtdCompRacialInicio1 : Double;
    FPQtdCompRacialFim1 : Double;
    FPIndAgrupRaca2 : String;
    FPCodRaca2 : Integer;
    FPQtdCompRacialInicio2 : Double;
    FPQtdCompRacialFim2 : Double;
    FPIndAgrupRaca3 : String;
    FPCodRaca3 : Integer;
    FPQtdCompRacialInicio3 : Double;
    FPQtdCompRacialFim3 : Double;
    FPIndAgrupRaca4 : String;
    FPCodRaca4 : Integer;
    FPQtdCompRacialInicio4 : Double;
    FPQtdCompRacialFim4 : Double;
    FPIndAptoCobertura : String;
    FPIndAutenticacao : String;
    FPCodEstacaoMonta : Integer;
    FPTxtObservacao : String;
    FPCodPessoaTecnico: Integer;

    FUsarSisbov : Boolean;
    FCodReprodutorMultiplo : Integer;
    FCodAnimalPai : Integer;
    FCodAnimalMae : Integer;
    FCodAnimalReceptor : Integer;
    FCodAptidaoMae : Integer;
    FQueryAux : THerdomQuery;
    FQueryAux1 : THerdomQuery;
    FQueryAux2 : THerdomQuery;

    procedure ZerarValoresUltimaPesquisa;

    // Tratamentos de eventos
    function ConsisteInsercaoEvento(DadosEvento: TDadosEvento): Integer;
    function InsereEventoAssociado(var DadosEvento: TDadosEvento) : Integer;
    function QtdFilhosMae(CodAnimaMae: Integer; CodTipoMae: String;
      IndFilhosMamando: Boolean) : Integer;

    function SelecionaAnimaisEvento(DadosEvento: TDadosEvento; CodAnimais: String; CodFazenda: Integer;
      CodAnimaisManejo: String; CodLote, CodLocal, CodEvento: Integer;
      IndRemover: Boolean; var QAnim: THerdomQuery): Integer;
    function VerificaEvento(CodEvento: Integer; Obrigatorio: Boolean;
      NomeCampo: String; var DadosEvento: TDadosEvento): Integer;
    function InserirAnimalEvento(DadosEvento: TDadosEvento; DadosAnimal: TDadosAnimal): Integer;
    function RemoverAnimalEvento(DadosEvento: TDadosEvento; DadosAnimal: TDadosAnimal): Integer;
    function InserirErroAplicacaoEvento(DadosEvento: TDadosEvento; DadosAnimal: TDadosAnimal;
      TxtMensagem, IndOperacaoRemocao: String): Integer; overload;
    function InserirErroAplicacaoEvento(DadosEvento: TDadosEvento; DadosAnimal: TDadosAnimal;
      TxtMensagem, IndOperacaoRemocao: String; CodTipoMensagem:Integer): Integer; overload;
    function InserirMsgAplicacaoEvento(DadosEvento: TDadosEvento; DadosAnimal: TDadosAnimal;
      TxtMensagem, IndOperacaoRemocao: String): Integer;
    function InserirErroOperacaoAnimal(DadosAnimal: TDadosAnimal; DtaOperacao: TDateTime;
      TxtMensagem: String; CodOperacaoCadastro, CodTipoMensagem: Integer): Integer;
    function VerificaCategoriaEvento(CodCategoria: Integer;
      var DadosCategoria: TDadosCategoria): Integer;
    function VerificaRegimeAlimentarEvento(CodRegimeAlimentar: Integer;
      var DadosRegimeAlimentar: TDadosRegimeAlimentar): Integer;
    function VerificaLoteEvento(CodFazenda, CodLote: Integer;
      var DadosLote: TDadosLote): Integer;
    function VerificaLocalEvento(CodFazenda, CodLocal: Integer;
      var DadosLocal: TDadosLocal): Integer;
    function VerificaMorteEvento(CodTipoMorte, CodcausaMorte: Integer;
      var DadosMorte: TDadosMorte): Integer;
    function ObtemFilhos(DadosAnimal: TDadosAnimal; var CodFilhos: String): Integer;
    function VerificaFazendaCorrente(DadosAnimal: TDadosAnimal;DadosEvento:TDadosEvento):integer;
    function ConsisteCodSisbovProdutor(CodProdutor,CodPropriedadeIdentificacao,CodEstadoSisbov,CodMicroRegiaoSisbov,CodAnimalSisbov:Integer):Integer;

    class function ValidarNIRFIdentificacao(EConexao: TConexao; EMensagem: TIntMensagens;
      ENumImovelReceitaFederal: String; ECodPropriedadeRural, ECodLocalizacaoSisbov,
      ECodPessoaProdutor: Integer; IndVerificaEfetivado: Boolean): Integer;

    class function ValidarNIRFNascimento(EConexao: TConexao; EMensagem: TIntMensagens;
      ENumImovelReceitaFederal: String; ECodPropriedadeRural, ECodLocalizacaoSisbov,
      ECodPessoaProdutor: Integer; IndVerificaEfetivado: Boolean): Integer;

    // Tratamentos de tipos de evento

    function ConsisteRemoverEventoAnimalInativo(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; var IndPodeExcluir: Boolean): Integer;

    // 01 - Mudança de regime alimentar
    function VerificaMudancaRegimeAlimentar(DadosEvento: TDadosEvento): Integer;
    function ConsisteMudancaRegimeAlimentar(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarMudancaRegimeAlimentar(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverMudancaRegimeAlimentar(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 02 - Desmame
    function VerificaDesmame(DadosEvento: TDadosEvento): Integer;
    function ConsisteDesmame(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarDesmame(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverDesmame(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 03 - Mudança de categoria
    function VerificaMudancaCategoria(DadosEvento: TDadosEvento): Integer;
    function ConsisteMudancaCategoria(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarMudancaCategoria(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverMudancaCategoria(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 04 - Seleção para reprodução
    function VerificaSelecaoReproducao(DadosEvento: TDadosEvento): Integer;
    function ConsisteSelecaoReproducao(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarSelecaoReproducao(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverSelecaoReproducao(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 05 - Castração
    function VerificaCastracao(DadosEvento: TDadosEvento): Integer;
    function ConsisteCastracao(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarCastracao(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverCastracao(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 06 - Mudança de Lote
    function VerificaMudancaLote(DadosEvento: TDadosEvento): Integer;
    function ConsisteMudancaLote(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarMudancaLote(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverMudancaLote(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 07 - Mudança de Local
    function VerificaMudancaLocal(DadosEvento: TDadosEvento): Integer;
    function ConsisteMudancaLocal(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarMudancaLocal(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverMudancaLocal(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 08 - Transferência
//    function VerificaTransferencia(DadosEvento: TDadosEvento): Integer;

    function ConsisteTransferencia(var DadosAnimal: TDadosAnimal;
                                   var DadosEvento: TDadosEvento): Integer;

    function AplicarTransferencia(DadosAnimal: TDadosAnimal;
                                  DadosEvento: TDadosEvento;
                                  AplicarAnimaisAssociados: Boolean): Integer;

    function RemoverTransferencia(DadosAnimal: TDadosAnimal;
                                  DadosEvento: TDadosEvento): Integer;

    function ConsisteRemoverTransferencia(var DadosAnimal: TDadosAnimal;
                                          var DadosEvento: TDadosEvento;
                                          var IndPodeRemover: Boolean): Integer;

    // 09 - Venda ao Criador
    function VerificaVendaCriador(DadosEvento: TDadosEvento): Integer;
    function ConsisteVendaCriador(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento; QueryAnimais: THerdomQuery): Integer;
    function AplicarVendaCriador(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverVendaCriador(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 10 - Venda ao Frigorífico
    function VerificaVendaFrigorifico(DadosEvento: TDadosEvento): Integer;
    function ConsisteVendaFrigorifico(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento; QueryAnimais: THerdomQuery): Integer;
    function AplicarVendaFrigorifico(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverVendaFrigorifico(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 11 - Desaparecimento
    function VerificaDesaparecimento(DadosEvento: TDadosEvento): Integer;
    function ConsisteDesaparecimento(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento; QueryAnimais: THerdomQuery): Integer;
    function AplicarDesaparecimento(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverDesaparecimento(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 12 - Morte
    function VerificaMorte(DadosEvento: TDadosEvento): Integer;
    function ConsisteMorte(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento; QueryAnimais: THerdomQuery): Integer;
    function AplicarMorte(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverMorte(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function VerificaAnimalRM(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 15 - Manejo Sanitário
    function VerificaSanitario(DadosEvento: TDadosEvento): Integer;
    function ConsisteSanitario
    (var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarSanitario(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function RemoverSanitario(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 16 - Emissão de Certificado
    function VerificaEmissaoCertificado(DadosEvento: TDadosEvento): Integer;
    function ConsisteEmissaoCertificado(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarEmissaoCertificado(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverEmissaoCertificado(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 17 - Desmame do Bezerro
    function VerificaDesmameBezerro(DadosEvento: TDadosEvento): Integer;
    function ConsisteDesmameBezerro(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarDesmameBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverDesmameBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 18 - Desaparecimento do Bezerro
    function VerificaDesaparecimentoBezerro(DadosEvento: TDadosEvento): Integer;
    function ConsisteDesaparecimentoBezerro(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarDesaparecimentoBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverDesaparecimentoBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 19 - Morte do Bezerro
    function VerificaMorteBezerro(DadosEvento: TDadosEvento): Integer;
    function ConsisteMorteBezerro(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarMorteBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverMorteBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 20 - Venda do Bezerro
    function VerificaVendaBezerro(DadosEvento: TDadosEvento): Integer;
    function ConsisteVendaBezerro(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarVendaBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverVendaBezerro(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 21 - Abate de animal Vendido
    function VerificaAbateAnimalVendido(DadosEvento: TDadosEvento): Integer;
    function ConsisteAbateAnimalVendido(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarAbateAnimalVendido(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverAbateAnimalVendido(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 24 - Estacao de Monta
    function VerificaEstacaoMonta(DadosEvento: TDadosEvento): Integer;
    function ConsisteEstacaoMonta(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento): Integer;
    function AplicarEstacaoMonta(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverEstacaoMonta(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 30 - Parto
    function ConsisteRemoverParto(DadosAnimal: TDadosAnimal;
                                  DadosEvento: TDadosEvento;
                                  var IndPartoExcluido: Boolean): Integer;

    function RemoverParto(DadosAnimal: TDadosAnimal;
                          DadosEvento: TDadosEvento): Integer;

    // 33 - Descarte
    function ConsisteDescarte(var DadosAnimal: TDadosAnimal;
                              var DadosEvento: TDadosEvento): Integer;

    function AplicarDescarte(DadosAnimal: TDadosAnimal;
                             DadosEvento: TDadosEvento;
                             AplicarAnimaisAssociados: Boolean): Integer;

    function RemoverDescarte(DadosAnimal: TDadosAnimal;
                             DadosEvento: TDadosEvento): Integer;

    // 36 - Retorno do Frigorífico
    function VerificaRetornoFrigorifico(DadosEvento: TDadosEvento): Integer;
    function ConsisteRetornoFrigorifico(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento; QueryAnimais: THerdomQuery): Integer;
    function AplicarRetornoFrigorifico(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverRetornoFrigorifico(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;

    // 28 - Diagnostico de Prenhez
    function VerificaDiagnosticoPrenhez(DadosEvento: TDadosEvento): Integer;

    function VerificaTipoPai(SglFazenda, CodManejo: String;
      var IndTipo: String): Integer;
    function ProximoCodAnimal: Integer;
    function ReservarCodigos(var CodAnimal, CodLogOperacao,
      CodRegistroLog: Integer; QtdAnimais: integer): Integer;
    function GravarLogOperacaoAnimal(NomeTabela, TxtDados: String;
      CodLogOperacao, CodRegistroLog, CodOperacao, CodMetodo: Integer): Integer;
    function VerificaCodigoVariavel(Prefixo, CodInicial, Sufixo: String;
      Quantidade, TamanhoMaximo: Integer; NomeCampo: String): Integer;
    function VerificaUtilizacaoCodAnimalManejo(CodFazendaManejo: Integer;
      TxtPrefixoAnimalManejo, CodInicialAnimalManejo,
      TxtSufixoAnimalManejo: String; QtdAnimais: Integer): Integer;
    function VerificaUtilizacaoCodAnimalCertificadora(
      TxtPrefixoAnimalCertificadora, CodInicialAnimalCertificadora,
      TxtSufixoAnimalCertificadora: String; QtdAnimais: Integer): Integer;
    function VerificaFazenda(Valor: Integer; Obrigatorio: Boolean;
      NomeCampo: String): Integer;
    function VerificaPropriedadeRural(Valor: Integer; Obrigatorio: Boolean;
      NomeCampo: String; var NIRF: String): Integer;
(*
    function VerificaPropriedadeEfetivada(var CodPropriedadeRural: Integer;
      var NumImovelReceitaFederal: String; var DtaInicioCertificacao: TDateTime;
      NomeCampo: String): Integer;
*)
    function ObtemMicroRegiaoPropriedade(CodPropriedadeRural: Integer;
      var CodEstadoSisbov, CodMicroRegiaoSisbov: Integer; NomeCampo: String): Integer;
(* Função desnecessário. A obtenção automatica do código SISBOV foi removida.

    function ObtemCodigoSisbov(var CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodAnimalSisbov, NumDVSisbov:Integer;CodProdutorTrabalho,CodPropriedadeIdentificacao: Integer): Integer;
    function VerificaNum(Valor: String; Tamanho: Integer;
      NomParametro: String; ValidaTamanho: Boolean): Integer;
*)
    function VerificaNumLetra(Valor: String; Tamanho: Integer;
      NomParametro: String): Integer; overload;
    function VerificaNumLetra(Valor: String; Tamanho: Integer;
      NomParametro: String; ValidaTamanho: Boolean): Integer; overload;
    function VerificaNumLetraPonto(Valor: String; Tamanho: Integer;
      NomParametro: String): Integer;
    function VerificaCodAnimalManejo(CodAnimalManejo: String): Integer;
    function VerificaCodAnimalFazendaManejo(Animal: Integer; AnimalManejo: String;
      FazendaManejo: Integer): Integer;
    function VerificaCodAnimalCertificadora(CodAnimal: Integer;
      CodAnimalCertificadora: String): Integer;
    function VerificaCodSituacaoSisbov(CodTipoOrigem: Integer;
      CodSituacaoSisbov: String): Integer;
    function VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov,
      CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov: Integer;
      TipoOperacao: String; CodTipoOrigem: Integer;
      CodSituacaoSisbov: String; QtdAnimais: Integer): Integer;
    function VerificaDtaIdentificacaoSisbov(DtaNascimentoAnimal,
      DtaIdentificacaoSisbov: TDateTime; CodSituacaoSisbov: String): Integer;
    function VerificaLocalIdentificacao(var NumImovelIdentificacao: String;
      var CodLocalizacaoSISBOV: Integer; CodPropriedadeIdentificacao,
      CodFazendaIdentificacao: Integer; CodSituacaoSisbov: String): Integer;
    function VerificaNomAnimal(CodAnimal: Integer; NomAnimal: String): Integer;
    function VerificaDesApelido(CodAnimal: Integer; DesApelido: String): Integer;
    function VerificaAssociacaoGrauSangue(CodAssociacaoRaca, CodGrauSangue: Integer;
      NumRGD: String): Integer;

    function VerificaIdentificadores(NumTransponder: String; CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4: Integer): Integer;

    function ValidaIdentificadoresAnimalNaoEspecificado(var CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2,
      CodPosicaoIdentificador2, CodTipoIdentificador3,
      CodPosicaoIdentificador3: Integer): Integer;

    function VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao: Integer): Integer;
    function VerificaPelagem(CodPelagem: Integer): Integer;
    function VerificaAnimalPai(CodEspecie, CodAptidao, CodRaca, CodFazendaManejoPai: Integer;
      CodAnimalPai: String): Integer;
    function VerificaAnimalMae(CodEspecie, CodAptidao, CodFazendaManejoMae: Integer;
      CodAnimalMae: String): Integer;
    function VerificaAnimalReceptor(CodEspecie, CodFazendaManejoReceptor: Integer;
      CodAnimalReceptor: String): Integer;
    function VerificaCategoria(CodCategoria: Integer; IndSexo, IndAnimalCastrado: String;
      CodAptidao: Integer; DtaNascimento: TDateTime): Integer;
    function VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer; var NumImovelCorrente: String; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer): Integer;
    function VerificaLocal(CodFazenda, CodLocal: Integer): Integer;
    function VerificaLote(CodFazenda, CodLote: Integer): Integer;
    function VerificaPessoa(CodPessoa, CodPapel: Integer; IndObrigatorio: Boolean;
      NomeCampo: String): Integer;
    function VerificaCNPJCPF(NumCNPJCPF: String): Integer;
    function VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazenda, CodLocal,
      CodCategoriaAnimal, CodAptidao: Integer): Integer;
    function VerificaLocalNascimento(var NumImovelNascimento: String;
      CodPropriedadeNascimento: Integer): Integer;
    function VerificaPessoaSecundaria(CodPessoa, CodPapel: Integer; IndObrigatorio: Boolean;
      NomeCampo: String): Integer;
    function CalculaAptoCoberturaAlt(CodCategoriaAnimal: Integer; DadosAnimal: TDadosAnimal): String;
    function CalculaAptoCoberturaIns(CodCategoriaAnimal: Integer): String;
    function VerificaDtaNascimento(DtaNascimento: TDateTime): Integer;
    function VerificaDtaCompra(DtaCompra: TDateTime): Integer;
    procedure MontaQueryInsert;
    procedure MontaQueryUpdate;
    procedure MontaQueryInsertAnimalEvento;
    procedure MontaQueryDeleteAnimalEvento;
    function VerificaDadosImportacao(CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
      DtaNascimento, DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime; NumGuiaImportacao,
      NumLicencaImportacao: String): Integer;
    function VerificaRegra08(DadosAnimal: TDadosAnimal; DtaNascimento: TDatetime;
      IndAnimalCastrado: String; CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar,
      CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente: Integer;
      NumImovelCorrente: String; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer) : Integer;
    function GeraCodAnimalCertificadora(var CodAnimalCertificadora: String;
      CodFazendaManejo: Integer; CodAnimalManejo: String; CodAnimal: Integer): Integer;

    function InserirAnimal(ECodFazendaManejo: Integer;
                           ECodAnimalManejo,
                           ECodAnimalCertificadora: String;
                           ECodPaisSisBov,
                           ECodEstadoSisBov,
                           ECodMicroRegiaoSisBov,
                           ECodAnimalSisbov,
                           ENumDVSisbov: Integer;
                           ECodSituacaoSisbov: String;
                           EDtaIdentificacaoSisbov: TDateTime;
                           ENumImovelIdentificacao: String;
                           ECodLocalizacaoIdentificacao,
                           ECodPropriedadeIdentificacao,
                           ECodFazendaIdentificacao: Integer;
                           EDtaNascimento: TDateTime;
                           ENumImovelNascimento: String;
                           ECodLocalizacaoNascimento,
                           ECodPropriedadeNascimento,
                           ECodFazendaNascimento: Integer;
                           EDtaCompra: TDatetime;
                           ECodPessoaSecundariaCriador: Integer;
                           ENomAnimal,
                           EDesApelido: String;
                           ECodAssociacaoRaca,
                           ECodGrauSangue: Integer;
                           ENumRGD,
                           ENumTransponder: String;
                           ECodTipoIdentificador1,
                           ECodPosicaoIdentificador1,
                           ECodTipoIdentificador2,
                           ECodPosicaoIdentificador2,
                           ECodTipoIdentificador3,
                           ECodPosicaoIdentificador3,
                           ECodTipoIdentificador4,
                           ECodPosicaoIdentificador4,
                           ECodEspecie,
                           ECodAptidao,
                           ECodRaca,
                           ECodPelagem: Integer;
                           EIndSexo: String;
                           ECodTipoOrigem,
                           ECodReprodutorMultiplo,
                           ECodAnimalPai,
                           ECodAnimalMae,
                           ECodAnimalReceptor: Integer;
                           EIndAnimalCastrado: String;
                           ECodRegimeAlimentar,
                           ECodCategoriaAnimal,
                           ECodTipoLugar,
                           ECodLoteCorrente,
                           ECodLocalCorrente,
                           ECodFazendaCorrente: Integer;
                           ENumImovelCorrente: String;
                           ECodPropriedadeCorrente: Integer;
                           ENumCNPJCPFCorrente: String;
                           ECodPessoaCorrente,
                           ECodPessoaSecundariaCorrente,
                           ECodPaisOrigem: Integer;
                           EDesPropriedadeOrigem: String;
                           EDtaAutorizacaoImportacao,
                           EDtaEntradaPais: TDatetime;
                           ENumGuiaImportacao,
                           ENumLicencaImportacao,
                           ETxtObservacao,
                           EOrigem,
                           ENumGta: String;
                           EDtaEmissaoGta: TDateTime;
                           ENumNotaFiscal: Integer;
                           EUsarSisbov: Boolean;
                           ECodMetodo: Integer;
                           EInsercaoMultipla: Boolean;
                           ECodAni,
                           ECodLog,
                           ECodReg: Integer;
                           EIndCodSisBovReservado,
                           ECodAutenticacaoSisbov: String;
                           ECodArquivoSisbov,
                           ECodArquivoImportacao,
                           ECodPessoaTecnico: Integer;
                           EnumCNPJCPFTecnico: String;
                           var EMsgTecnicoOS,
                           EMsgIdentificadorOS: Boolean): Integer;

    function AlterarAnimal(ECodAnimal,
                           ECodFazendaManejo: Integer;
                           ECodAnimalManejo,
                           ECodAnimalCertificadora: String;
                           ECodPaisSisBov,
                           ECodEstadoSisBov,
                           ECodMicroRegiaoSisBov,
                           ECodAnimalSisbov,
                           ENumDVSisbov: Integer;
                           EDtaIdentificacaoSisbov: TDateTime;
                           ENumImovelIdentificacao: String;
                           ECodLocalizacaoIdentificacao,
                           ECodPropriedadeIdentificacao,
                           ECodFazendaIdentificacao: Integer;
                           EDtaNascimento: TDateTime;
                           ENumImovelNascimento: String;
                           ECodLocalizacaoNascimento,
                           ECodPropriedadeNascimento,
                           ECodFazendaNascimento: Integer;
                           EDtaCompra: TDatetime;
                           ECodPessoaSecundariaCriador: Integer;
                           ENomAnimal,
                           EDesApelido,
                           ENumTransponder: String;
                           ECodTipoIdentificador1,
                           ECodPosicaoIdentificador1,
                           ECodTipoIdentificador2,
                           ECodPosicaoIdentificador2,
                           ECodTipoIdentificador3,
                           ECodPosicaoIdentificador3,
                           ECodTipoIdentificador4,
                           ECodPosicaoIdentificador4,
                           ECodRaca,
                           ECodPelagem: Integer;
                           EIndAnimalCastrado: String;
                           ECodRegimeAlimentar,
                           ECodCategoriaAnimal,
                           ECodTipoLugar,
                           ECodLoteCorrente,
                           ECodLocalCorrente,
                           ECodFazendaCorrente: Integer;
                           ENumImovelCorrente: String;
                           ECodLocalizacaoCorrente,
                           ECodPropriedadeCorrente: Integer;
                           ENumCNPJCPFCorrente: String;
                           ECodPessoaCorrente,
                           ECodPessoaSecundariaCorrente,
                           ECodPaisOrigem: Integer;
                           EDesPropriedadeOrigem: String;
                           EDtaAutorizacaoImportacao,
                           EDtaEntradaPais: TDatetime;
                           ENumGuiaImportacao,
                           ENumLicencaImportacao,
                           ETxtObservacao,
                           EOrigem,
                           ENumGta: String;
                           EDtaEmissaoGta: TDateTime;
                           ENumNotaFiscal: Integer;
                           EUsarSisbov: Boolean;
                           ECodMetodo: Integer;
                           EDadosAnimal: TDadosAnimal;
                           EIndCodSisBovReservado:String;
                           ECodPessoaTecnico: Integer;
                           EIndSexo: String): Integer;

    function ObtemDadosAnimal(CodAnimal: Integer; var DadosAnimal: TDadosAnimal): Integer;
//    function ObtemDadosAnimalSisbov(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
//      CodAnimalSisbov, NumDVSisbov: Integer; var DadosAnimal: TDadosAnimal): Integer;
    function ObtemDadosAnimalManejo(CodFazendaManejo: Integer; CodAnimalManejo: String;
        var DadosAnimal: TDadosAnimal): Integer;
//    function ObtemDadosAnimalCertificadora(CodAnimalCertificadora: String;
//        var DadosAnimal: TDadosAnimal): Integer;
    function BuscaDadosAnimal(CodAnimal, CodPaisSisbov, CodEstadoSisbov,
        CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, CodFazendaManejo: Integer;
        CodAnimalManejo, CodAnimalCertificadora: String;
        var DadosAnimal: TDadosAnimal): Integer;
    function SelecionaAnimaisMultiplos(CodFazendaManejo: Integer; CodInicialAnimalManejo,
      CodFinalAnimalManejo, CodAnimais: String): Integer;
    function PesquisarRelatorio(CodFazendaManejo: Integer;
      CodManejoInicio, CodManejoFim, CodAnimalCertificadora: String; CodPaisSisBov,
      CodEstadoSisBov, CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer;
      CodSituacaoSisbov: String; DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
      CodFazendaNascimento: Integer; DtaCompraInicio, DtaCompraFim: TDateTime;
      CodPessoaSecundariaCriador: Integer; NomAnimal, DesApelido: String;
      CodAptidao: Integer; CodRaca, IndSexo, CodOrigem, SglFazendaPai: String;
      CodAnimalPai, DesApelidoPai, SglFazendaMae: String; CodAnimalMae,
      IndAnimalCastrado: String; CodRegimeAlimentar: Integer; CodCategoria: String;
      IndConsiderarExterno:String; CodAssociacao, CodGrauSangue: Integer;
      NumRGD: String; CodTipoLugar: Integer; CodLocal, CodLote: String;
      CodFazendaCorrente: Integer; NumImovelCorrente: String;
      CodLocalizacaoCorrente: Integer; NumCPFCNPJCorrente,
      IndCadastroEfetivado, CodOrdenacao: String; CodEvento: Integer;
      IndEventoAplicado, IndAnimaisEvento: String;IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      IndAptoCobertura, IndAutenticacao: String;
      IndAnimalSemTecnico: String; CodPessoaTecnico: Integer): Integer;
    function AplicarEventoInt(CodAnimais: String; CodFazenda: Integer;
      CodAnimaisManejo: String; CodLote, CodLocal, CodEvento: Integer;
      IndLimparMensagens: String): Integer;
    function RemoverEventoInt(CodAnimais: String; CodFazenda: Integer;
      CodAnimaisManejo: String; CodLote, CodLocal,
      CodEvento: Integer; IndLimparMensagens: String): Integer;
    function PesquisarRelatorioConsolidado(Query: THerdomQuery; SglProdutor,
      NomPessoaProdutor, CodSituacaoSisbov: String; DtaNascimentoInicio,
      DtaNascimentoFim, DtaIdentificacaoInicio, DtaIdentifcacaoFim: TDateTime;
      CodMicroRegiaoSisbovNascimento: Integer;
      NomMicroRegiaoNascimento: String; CodEstadoNascimento: Integer;
      NumImovelNascimento: String; CodLocalizacaoNascimento,
      CodMicroRegiaoSisbovIdentificacao: Integer;
      NomMicroRegiaoIdentificacao: String; CodEstadoIdentificacao: Integer;
      NumImovelIdentificacao: String; CodLocalizacaoIdentificacao: Integer;
      DtaCompraInicio, DtaCompraFim: TDateTime;
      CodRaca, IndSexo, CodOrigem, IndAnimalCastrado: String;
      CodRegimeAlimentar: Integer; CodCategoria: String; CodAssociacaoRaca,
      CodGrauSangue, CodTipoLugar: Integer; NumImovelCorrente: String;
      CodLocalizacaoCorrente: Integer;
      NumCNPJCPFCorrente, NomPaisOrigem: String;IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      IndAptoCobertura: String; DtaInicioCertificado,
      DtaFimCertificado, DtaInicioCadastramento,
      DtaFimCadastramento: TDateTime; NumCNPJCPFTecnico,
      IndAnimalSemTecnico, IndAnimalCompradoComEvento: String;
      CodTarefa: Integer; DtaInicioCadastramentoHerdom, DtaFimCadastramentoHerdom: TDateTime): Integer;
    procedure ObtemAnimalSelecionado(var DadosAnimal: TDadosAnimal);
    procedure ObtemAnimalSelecionadoEvento(var DadosAnimal: TDadosAnimal;
      QAnim: THerdomQuery);
    function DefinirPesoAnimalInt(CodFazenda: Integer;
      CodAnimaisManejo, CodAnimais, QtdPesosAnimais: String; CodEvento: Integer; IndLimparMensagens, IndChamada: String): Integer;
    procedure MontaQueryInsertPesoAnimal;
    function VerificaPesagemAnimal(DadosEvento: TDadosEvento): Integer;
    function SelecionaAnimaisEventosEsp(CodFazenda: Integer;
     CodAnimaisManejo, CodAnimais: String; CodEvento: Integer;
     IndRemover: Boolean; var QAnim: THerdomQuery): Integer;
    function ConsistePesagemAnimal(var DadosAnimal: TDadosAnimal;
      var DadosEvento: TDadosEvento; PesoAnimal: real): Integer;
    function InserirAnimalPesagem(DadosEvento: TDadosEvento;
      DadosAnimal: TDadosAnimal; PesoAnimal: real): Integer;
    function PopulaPesoAnimal(CodAnimais,PesoAnimais: String;
      var DadosPesosAnimais: TPesosAnimais):integer;
    function BuscaPesoAnimal(CodAnimalManejo, CodAnimal: String; Qtd:Integer;
      var DadosPesosAnimais: TPesosAnimais):real;
    procedure LimpaDadosAnimal(var DadosAnimal :TDadosAnimal);
    function AnimalEstaCadastrado(CodAnimalManejo:String; CodFazenda:integer): integer;
    function AlterarPesoAnimalInt(CodAnimais, QtdPesosAnimais: String;
      CodEvento: Integer): Integer;
    function ObterCodFazenda(SglFazenda: String; var CodFazenda: Integer): Integer;
    function RemoverCoberturaRegPasto(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function AplicarCoberturaRegPasto(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
    function ConsisteCoberturaRegPasto(var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
    function VerificaCoberturaRegPasto(DadosEvento: TDadosEvento): Integer;
    function PopulaDiagnosticoAnimal(CodAnimais,IndVacaPTouroA: String;
      var DadosReprodutivosAnimais: TReproducaoAnimais):integer;
    function BuscaDiagnosticoAnimal(CodAnimalManejo, CodAnimal: String; Qtd:Integer;
      var DadosReprodutivosAnimais: TReproducaoAnimais):string;
    function DefinirDiagnosticoExame(CodFazenda: Integer;
      CodAnimaisManejo, CodAnimais, IndDiagnosticos: String; CodEvento: Integer; IndLimparMensagens:String; CodTipoEvento: Integer): Integer;
    procedure MontaQueryInsertDiagnosticoAnimal(IndVaca:String);
    function AplicarDiagnosticoPrenhez(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; IndVacaPrenha:String; AplicarAnimaisAssociados: Boolean): Integer;
    function ConsisteDiagnosticoPrenhez(
      var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento; IndDiagnostico:String): Integer;
    function InserirAnimalDiagnosticoExame(DadosEvento: TDadosEvento;
      DadosAnimal: TDadosAnimal;IndVacaPrenha:string;IndTouroApto:String): Integer;
    function RemoverDiagnosticoPrenhez(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function VerificaExameAndrologico(DadosEvento: TDadosEvento): Integer;
    function ConsisteExameAndrologico(
      var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento; IndDiagnostico:String): Integer;
    function AplicarExameAndrologico(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento; IndTouroApto:String; AplicarAnimaisAssociados: Boolean): Integer;
    function RemoverExameAndrologico(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function ConsisteEventoDtaControlada(
      DadosAnimal: TDadosAnimal; DadosEvento: TDadosEvento;Tipo:string): Integer;
    function RemoverCoberturaInseminArtificial(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function RemoverCoberturaMontaControlada(DadosAnimal: TDadosAnimal;
      DadosEvento: TDadosEvento): Integer;
    function VerificaCadastroParto(CodAnimal: Integer) : Integer;
    function VerificaRemocaoCobertura(
      var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
    function PesquisarRelatorioAutenticacao(SglProdutor, NomPessoaProdutor,
      CodOrigens, IndSexo: String; CodAptidao, CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer; CodRacas,
      CodCategorias: String; DtaInicioNascimento, DtaFimNascimento: TDateTime;
      CodRegimeAlimentar, CodTipoLugar: Integer; DtaInicioAutenticacao,
      DtaFimAutenticacao, DtaInicioAutenticacaoPrevista,
      DtaFimAutenticacaoPrevista: TDateTime;
      IndCertificadoEmitido: String): Integer;
    function BuscaAnimalLista(ListaAnimais: THerdomQuery; CodAnimal: Integer; var Encontrou: Boolean): Integer;
    function BuscaIdentificacaoDuplaSisbov(Query: THerdomQuery;
      DadosAnimal: TDadosAnimal; DtaSis: TDatetime;
      var IdentificacaoDuplaSisbov: String; IndLogMensagem: Boolean): Integer;
    function BuscaCodTecnico(NumCNPJCPFTecnico: String): Integer;

    function PesquisarRelatorioPesoAjustado(Origem: Integer;
     Sexo: String; Aptidao, CodFazendaManejo: Integer; CodManejoInicial,
     CodManejoFinal, Raca, SglFazendaPai,
     CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae: String;
     DtaNascimentoInicio, DtaNascimentoFim, DtaCompraInicio,
     DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
     CodCategoria, IndAnimalCastrado: String;
     CodRegimeAlimentar: Integer; CodLocal, CodLote: String; CodTipoLugar:
     Integer; NumIdadePadrao: Integer; QtdPesoMinimo,
     QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
     QtdGPMMaximo: Double; IndAgrupRaca1: String; CodRaca1: Integer;
     QtdCompRacialInicio1, QtdCompRacialFim1: Double;
     IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
     QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
     QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
     QtdCompRacialFim4: Double; Tipo, QtdQuebraRelatorio, CodTarefa: Integer): String;

    function PesquisarRelatorioPesagem(CodOrigem: Integer;
     IndSexoAnimal: String; CodAptidao, CodFazendaManejo: Integer;
     CodAnimalManejoInicio, CodAnimalManejoFim, CodRaca, SglFazendaPai,
     CodAnimalManejoPai, DesApelidoPai, SglFazendaMae,
     CodAnimalManejoMae: String; DtaNascimentoInicio, DtaNascimentoFim,
     DtaCompraInicio, DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
     CodCategoria, IndAnimalCastrado: String;
     CodRegimeAlimentar: Integer; CodLote, CodLocal: String;
     CodTipoLugar: Integer; DtaPesagemInicio, DtaPesagemFim: TDateTime;
     QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
     QtdGPMMaximo: Double; QtdUltimasPesagens: Integer; IndAgrupRaca1: String;
     CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
     IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
     QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
     QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
     QtdCompRacialFim4: Double; Tipo,QtdQuebraRelatorio, CodTarefa: Integer): String;

    function PesquisarRelatorioConsolidacaoCodigosSISBOV(EQuery: THerdomQuery;
                                                         ECodProdutor,
                                                         ENumCNPJCPFProdutor,
                                                         ENomProdutor,
                                                         ENumImovelReceitaFederal: String;
                                                         ECodExportacao: Integer;
                                                         ENomPropriedadeRural,
                                                         ENomMunicipioPropriedade: String;
                                                         ECodEstadoPropriedade: Integer;
                                                         EDtaInicioIdentificacaoAnimal,
                                                         EDtaFimIdentificacaoAnimal: TDateTime;
                                                         ENomTecnico,
                                                         ENumCNPJCPFTecnico: String;
                                                         ECodTipoRelatorio,
                                                         ECodTarefa: Integer): Integer;

    function ObterDadosAnimalSisbov(var Animal: TDadosAnimal): Integer;

    function AlterarAnimalSISBOV(DadosAnimal: TDadosAnimal; DtaIdentificacaoSisbov, DtaNascimento: TDateTime;
      NumRGD: String; CodPropriedadeNascimento, CodFazendaNascimento, CodPaisSISBOV, CodEstadoSISBOV,
      CodMicroRegiaoSISBOV, CodAnimalSISBOV, NumDVSISBOV, CodRaca, CodTipoIdentificador1,
      CodTipoIdentificador2, CodTipoIdentificador3, CodTipoIdentificador4: Integer;
      IndSexo: String; IndNaoTestarAtributos: Boolean): Integer;

    



  public
    constructor Create; override;
    destructor Destroy; override;
    function Inicializar(EConexaoBD: TConexao;
      EMensagens: TIntMensagens): Integer; override;

    function AlterarAnimalTmp(PDtaIdentificacaoSisbov,PDtaNascimento,PNumRgd,PCodIdPropriedadeSISBOV,PStrCodigoSisbov,PCodRacaSisbov,PCodIdentificadorSISBOV,PSexo:string):Integer;

    function InserirNascido(CodFazendaManejo: Integer; CodAnimalManejo,
      CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
      CodSituacaoSisbov: String;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; CodFazendaNascimento: Integer;
      NomAnimal, DesApelido: String; CodAssociacaoRaca,
      CodGrauSangue: Integer; NumRGD, NumTransponder: String;
      CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
      CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
      CodFazendaManejoPai: Integer; CodAnimalPai: String;
      CodFazendaManejoMae: Integer; CodAnimalMae: String;
      CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
      IndAnimalCastrado: String; CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function InserirComprado(CodFazendaManejo: Integer; CodAnimalManejo,
      CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
      CodSituacaoSisbov: String; DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String; CodPropriedadeIdentificacao,
      CodFazendaIdentificacao: Integer; DtaNascimento: TDateTime;
      NumImovelNascimento: String; CodPropriedadeNascimento: Integer;
      DtaCompra: TDateTime; CodPessoaSecundariaCriador: Integer; NomAnimal,
      DesApelido: String; CodAssociacaoRaca, CodGrauSangue: Integer;
      NumRGD, NumTransponder: String; CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
      CodPelagem: Integer; IndSexo: String; CodFazendaManejoPai: Integer;
      CodAnimalPai: String; CodFazendaManejoMae: Integer; CodAnimalMae: String;
      CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
      IndAnimalCastrado: String; CodRegimeAlimentar, CodCategoriaAnimal,
      CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer; TxtObservacao,
      NumGta: String; DtaEmissaoGta: TDateTime; NumNotaFiscal: Integer;
      IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      NumCNPJCPFTecnico: String; CodAnimalOrigemVenda: Integer;
      IndChamadaInterna: String = 'N'): Integer;
    function InserirImportado(CodFazendaManejo: Integer; CodAnimalManejo,
      CodAnimalCertificadora, CodSituacaoSisbov: String; DtaNascimento,
      DtaCompra: TDateTime; CodPessoaSecundariaCriador: Integer;
      NomAnimal, DesApelido: String; CodAssociacaoRaca,
      CodGrauSangue: Integer; NumRGD, NumTransponder: String;
      CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
      CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
      CodFazendaManejoPai: Integer; CodAnimalPai: String;
      CodFazendaManejoMae: Integer; CodAnimalMae: String;
      CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
      IndAnimalCastrado: String; CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente,
      CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
      DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime;
      NumGuiaImportacao, NumLicencaImportacao,
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function InserirExterno(CodAnimalManejo,
      CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
      CodSituacaoSisbov: String; DtaNascimento: TDateTime;
      NomAnimal, DesApelido: String; CodAssociacaoRaca,
      CodGrauSangue: Integer; NumRGD: String; CodEspecie,
      CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
      CodFazendaManejoPai: Integer; CodAnimalPai: String;
      CodFazendaManejoMae: Integer; CodAnimalMae: String;
      CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function InserirNaoEspecificado(CodFazendaManejo: Integer; CodAnimalManejo,
      CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
      CodSituacaoSisbov: String;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
      CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
      CodFazendaManejoPai: Integer; CodAnimalPai: String;
      CodFazendaManejoMae: Integer; CodAnimalMae: String;
      CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
      CodLocalCorrente, CodFazendaCorrente: Integer;
      CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao: String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function Buscar(CodAnimal: Integer; CodAnimalSisbov,IndAnimalDoProprioProdutor,IndAnimalVendido : String): Integer;
    function BuscarResumido(CodAnimal: Integer; CodAnimalSisBov: String): Integer;
    function AlterarNascido(CodAnimal, CodFazendaManejo: Integer;
      CodAnimalManejo, CodAnimalCertificadora: String;
      CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov,
      CodAnimalSisbov, NumDVSisbov: Integer;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; CodFazendaNascimento: Integer;
      NomAnimal, DesApelido, NumTransponder: String;
      CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodRaca,
      CodPelagem: Integer; IndAnimalCastrado: String;
      CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar,
      CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente: Integer;
      CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao: String;IndCodSisBovReservado:String;
      CodPessoaTecnico: Integer; IndSexo: String): Integer;
    function AlterarNaoEspecificado(CodAnimal, CodFazendaManejo: Integer;
      CodAnimalManejo, CodAnimalCertificadora: String;
      CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov,
      CodAnimalSisbov, NumDVSisbov: Integer;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; CodFazendaNascimento, CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodRaca,
      CodPelagem, CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar,
      CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente: Integer;
      CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao: String; CodPessoaTecnico: Integer; IndSexo: String): Integer;
    function AlterarComprado(CodAnimal, CodFazendaManejo: Integer;
      CodAnimalManejo, CodAnimalCertificadora: String;
      CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov,
      CodAnimalSisbov, NumDVSisbov: Integer;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; NumImovelNascimento: String;
      CodPropriedadeNascimento: Integer; DtaCompra: TDateTime;
      CodPessoaSecundariaCriador: Integer; NomAnimal, DesApelido,
      NumTransponder: String; CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2,
      CodPosicaoIdentificador2, CodTipoIdentificador3,
      CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4, CodRaca, CodPelagem: Integer;
      IndAnimalCastrado: String; CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao, NumGta: String; DtaEmissaoGta: TDateTime;
      NumNotaFiscal: Integer;IndCodSisBovReservado:String; CodPessoaTecnico: Integer; IndSexo: String): Integer;
    function AlterarImportado(CodAnimal, CodFazendaManejo: Integer;
      CodAnimalManejo, CodAnimalCertificadora: String;
      DtaNascimento, DtaCompra: TDateTime;
      CodPessoaSecundariaCriador: Integer; NomAnimal, DesApelido,
      NumTransponder: String; CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2,
      CodPosicaoIdentificador2, CodTipoIdentificador3,
      CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4, CodRaca, CodPelagem: Integer;
      IndAnimalCastrado: String; CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer;  CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente,
      CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
      DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime;
      NumGuiaImportacao, NumLicencaImportacao,
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer; IndSexo: String): Integer;
    function AlterarExterno(CodAnimal: Integer; CodAnimalManejo,
      CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
      DtaNascimento: TDateTime; NomAnimal, DesApelido: String;
      CodRaca, CodPelagem: Integer;
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer; IndSexo: String): Integer;
    function Pesquisar(CodFazendaManejo: Integer; CodManejoInicio,
      CodManejoFim, CodAnimalCertificadora: String;
      CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov, CodSisBovInicio,
      CodSisBovFim: Integer; CodSituacaoSisbov: String;
      DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
      CodFazendaNascimento: Integer; DtaCompraInicio, DtaCompraFim: TDateTime;
      CodPessoaSecundariaCriador: Integer; NomAnimal,
      DesApelido: String; CodAptidao: Integer; CodRaca, IndSexo,
      CodOrigem, SglFazendaPai: String; CodAnimalPai,
      DesApelidoPai, SglFazendaMae: String; CodAnimalMae,
      IndAnimalCastrado: String; CodRegimeAlimentar: Integer;
      CodCategoria: String; IndConsiderarExterno:String; CodAssociacao, CodGrauSangue: Integer;
      NumRGD: String; CodTipoLugar: Integer; CodLocal,
      CodLote: String; CodFazendaCorrente: Integer;
      NumImovelCorrente: String; CodLocalizacaoCorrente: Integer;
      NumCPFCNPJCorrente, IndCadastroEfetivado, CodOrdenacao: String;
      CodEvento: Integer; IndEventoAplicado, IndAnimaisEvento: String;
      CodReprodutorMultiplo: Integer; IndTrazerComposicaoRacial, IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialIncio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialIncio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialIncio4, QtdCompRacialFim4: Double;
      IndAptoCobertura, IndAutenticacao: String; CodEstacaoMonta: Integer;
      IndAnimalSemTecnico: String; CodPessoaTecnico: Integer; IndRestringeTecnico: String): Integer;
    function BuscarFiliacao(CodAnimal: Integer): Integer;
    function BuscarRegistro(CodAnimal: Integer): Integer;
    function AlterarFiliacao(CodAnimalFilho, CodAnimal,
      CodFazendaManejo: Integer; CodAnimalManejo, CodAnimalCertificadora,
      CodTipoFiliacao: String): Integer;
    function AlterarRegistro(CodAnimal, CodAssociacaoRaca,
      CodGrauSangue: Integer; NumRGD: String): Integer;
    function EfetivarCadastro(CodAnimal: Integer): Integer; overload;
    function EfetivarCadastro(CodAnimal: Integer; IndLogMensagem: Boolean): Integer; overload;
    function CancelarEfetivacao(CodAnimal: Integer): Integer;
    function InserirNascidos(QtdAnimais, CodFazendaManejo: Integer;
      TxtPrefixoAnimalManejo, CodInicialAnimalManejo, TxtSufixoAnimalManejo,
      TxtPrefixoAnimalCertificadora, CodInicialAnimalCertificadora,
      TxtSufixoAnimalCertificadora: String; CodPaisSisBov,
      CodEstadoSisBov, CodMicroRegiaoSisBov,
      CodInicialAnimalSisbov: Integer; CodSituacaoSisbov: String;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; CodFazendaNascimento,
      CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
      CodAptidao, CodRaca, CodPelagem: Integer; IndSexo,
      IndAnimalCastrado: String; CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function InserirNaoEspecificados(QtdAnimais, CodFazendaManejo: Integer;
      CodInicialAnimalManejo, CodInicialAnimalCertificadora: String;
      CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov,
      CodInicialAnimalSisbov: Integer; CodSituacaoSisbov: String;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime;
      CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
      CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
      CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
      CodLocalCorrente, CodFazendaCorrente: Integer;
      CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
      CodPessoaCorrente: Integer; TxtObservacao: String;
      CodPessoaTecnico: Integer; numCNPJCPFTecnico: String): Integer;
    function InserirComprados(QtdAnimais, CodFazendaManejo: Integer;
      TxtPrefixoAnimalManejo, CodInicialAnimalManejo,
      TxtSufixoAnimalManejo, TxtPrefixoAnimalCertificadora,
      CodInicialAnimalCertificadora,
      TxtSufixoAnimalCertificadora: String; CodPaisSisBov,
      CodEstadoSisBov, CodMicroRegiaoSisBov,
      CodInicialAnimalSisbov: Integer; CodSituacaoSisbov: String;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      DtaNascimento: TDateTime; NumImovelNascimento: String;
      CodPropriedadeNascimento: Integer; DtaCompra: TDateTime;
      CodPessoaSecundariaCriador, CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2,
      CodPosicaoIdentificador2, CodTipoIdentificador3,
      CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
      CodPelagem: Integer; IndSexo, IndAnimalCastrado: String;
      CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar,
      CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente: Integer;
      CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
      TxtObservacao, NumGta: String; DtaEmissaoGta: TDateTime;
      NumNotaFiscal: Integer;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function InserirImportados(QtdAnimais, CodFazendaManejo: Integer;
      TxtPrefixoAnimalManejo, CodInicialAnimalManejo,
      TxtSufixoAnimalManejo, TxtPrefixoAnimalCertificadora,
      CodInicialAnimalCertificadora, TxtSufixoAnimalCertificadora,
      CodSituacaoSisbov: String; DtaNascimento, DtaCompra: TDateTime;
      CodPessoaSecundariaCriador, CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2,
      CodPosicaoIdentificador2, CodTipoIdentificador3,
      CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
      CodPelagem: Integer; IndSexo, IndAnimalCastrado: String;
      CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar,
      CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente: Integer;
      CodPropriedadeCorrente: Integer;
      NumCNPJCPFCorrente: String; CodPessoaCorrente,
      CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
      DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime;
      NumGuiaImportacao, NumLicencaImportacao,
      TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;
    function PesquisarConsolidado(CodFazenda,
      CodAgrupamento: Integer): Integer;
    function AlterarSisbovParaN(CodAnimal: Integer): Integer;
    function AlterarSisbovParaP(CodAnimal, CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
      NumImovelNascimento: String;
      CodPropriedadeNascimento: Integer): Integer;

    function EfetivarCadastros(CodFazendaManejo: Integer;
                               CodInicialAnimalManejo,
                               CodFinalAnimalManejo,
                               CodAnimais: String): Integer;

    function CancelarEfetivacoes(CodFazendaManejo: Integer;
                                 CodInicialAnimalManejo,
                                 CodFinalAnimalManejo,
                                 CodAnimais: String): Integer;

    function Excluir(ECodFazendaManejo: Integer;
                     ECodInicialAnimalManejo,
                     ECodFinalAnimalManejo,
                     ECodAnimais: String): Integer;

    function ExcluirAnimalComprado(ECodAnimal: Integer): Integer;

    function AlterarSisbov(CodAnimal, CodFazendaManejo: Integer;
      CodAnimalManejo: String; CodPaisSisbov, CodEstadoSisbov,
      CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov: Integer;
      DtaIdentificacaoSisbov: TDateTime;
      NumImovelIdentificacao: String;
      CodPropriedadeIdentificacao,
      CodFazendaIdentificacao: Integer): Integer;
    function AplicarEvento(CodAnimais: String; CodFazenda: Integer;
      CodAnimaisManejo: String; CodLote, CodLocal, CodEvento: Integer;
      IndLimparMensagens: String): Integer;
    function AplicarEventoAnimaisPesquisados(CodEvento: Integer;
      IndLimparMensagens: String): Integer;
    function PesquisarMensagensAplicacaoEvento(CodEvento: Integer;
      IndOperacaoRemocao: String): Integer;
    function PesquisarMensagensOperacaoCadastro(CodOperacao: Integer): Integer;
    function RemoverEvento(CodAnimais: String; CodFazenda: Integer;
      CodAnimaisManejo: String; CodLote, CodLocal,
      CodEvento: Integer; IndLimparMensagens: String): Integer;
    function RemoverEventoAnimaisPesquisados(CodEvento: Integer;
      IndLimparMensagens: String): Integer;
    function LimparErrosOperacao(CodAnimal, CodOperacaoCadastro: Integer) : Integer;
    function GerarRelatorio(CodFazendaManejo: Integer;
      CodManejoInicio, CodManejoFim, CodAnimalCertificadora: String; CodPaisSisBov,
      CodEstadoSisBov, CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer;
      CodSituacaoSisbov: String; DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
      CodFazendaNascimento: Integer; DtaCompraInicio, DtaCompraFim: TDateTime;
      CodPessoaSecundariaCriador: Integer; NomAnimal, DesApelido: String;
      CodAptidao: Integer; CodRaca, IndSexo, CodOrigem, SglFazendaPai: String;
      CodAnimalPai, DesApelidoPai, SglFazendaMae: String; CodAnimalMae,
      IndAnimalCastrado: String; CodRegimeAlimentar: Integer; CodCategoria: String;
      IndConsiderarExterno:String; CodAssociacao, CodGrauSangue: Integer;
      NumRGD: String; CodTipoLugar: Integer; CodLocal, CodLote: String;
      CodFazendaCorrente: Integer; NumImovelCorrente: String;
      CodLocalizacaoCorrente: Integer; NumCPFCNPJCorrente,
      IndCadastroEfetivado, CodOrdenacao: String; CodEvento: Integer;
      IndEventoAplicado, IndAnimaisEvento: String; IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; IndAptoCobertura, IndAutenticacao: String;
      Tipo, QtdQuebraRelatorio: Integer; IndAnimalSemTecnico: String;
      CodPessoaTecnico: Integer): String;
    function PesquisarEventos(CodAnimal,CodGrupoEvento : Integer): Integer;
    function GerarRelatorioConsolidado(SglProdutor,
                                       NomPessoaProdutor,
                                       CodSituacaoSisbov: String;
                                       DtaNascimentoInicio,
                                       DtaNascimentoFim,
                                       DtaIdentificacaoInicio,
                                       DtaIdentifcacaoFim: TDateTime;
                                       CodMicroRegiaoSisbovNascimento: Integer;
                                       NomMicroRegiaoNascimento: String;
                                       CodEstadoNascimento: Integer;
                                       NumImovelNascimento: String;
                                       CodLocalizacaoNascimento,
                                       CodMicroRegiaoSisbovIdentificacao: Integer;
                                       NomMicroRegiaoIdentificacao: String;
                                       CodEstadoIdentificacao: Integer;
                                       NumImovelIdentificacao: String;
                                       CodLocalizacaoIdentificacao: Integer;
                                       DtaCompraInicio,
                                       DtaCompraFim: TDateTime;
                                       CodRaca,
                                       IndSexo,
                                       CodOrigem,
                                       IndAnimalCastrado: String;
                                       CodRegimeAlimentar: Integer;
                                       CodCategoria: String;
                                       CodAssociacaoRaca,
                                       CodGrauSangue,
                                       CodTipoLugar: Integer;
                                       NumImovelCorrente: String;
                                       CodLocalizacaoCorrente: Integer;
                                       NumCNPJCPFCorrente,
                                       NomPaisOrigem: String;
                                       IndAgrupRaca1: String;
                                       CodRaca1: Integer;
                                       QtdCompRacialInicio1,
                                       QtdCompRacialFim1: Double;
                                       IndAgrupRaca2: String;
                                       CodRaca2: Integer;
                                       QtdCompRacialInicio2,
                                       QtdCompRacialFim2: Double;
                                       IndAgrupRaca3: String;
                                       CodRaca3: Integer;
                                       QtdCompRacialInicio3,
                                       QtdCompRacialFim3: Double;
                                       IndAgrupRaca4: String;
                                       CodRaca4: Integer;
                                       QtdCompRacialInicio4,
                                       QtdCompRacialFim4: Double;
                                       IndAptoCobertura: String;
                                       DtaInicioCertificado,
                                       DtaFimCertificado,
                                       DtaInicioCadastramento,
                                       DtaFimCadastramento: TDateTime;
                                       Tipo,
                                       QtdQuebraRelatorio: Integer;
                                       NumCNPJCPFTecnico,
                                       IndAnimalSemTecnico: String;
                                       IndAnimalCompradoComEvento: String;                                       
                                       CodTarefa: Integer;
                                       DtaInicioCadastramentoHerdom,
                                       DtaFimCadastramentoHerdom: TDateTime): String;

    function GerarRelatorioEventos(CodAnimal,CodGrupoEvento, Tipo,QtdQuebraRelatorio: Integer): String;
    function DefinirPesoAnimal(CodEvento, CodFazendaManejo: Integer;
     CodAnimais, CodAnimaisManejo, QtdPesosAnimais,
     IndLimparMensagens: String): Integer;
    function AlterarPesoAnimal(CodEvento: Integer; CodAnimais,
     QtdPesosAnimais: String): Integer;

    function GerarRelatorioPesoAjustado(Origem: Integer;
     Sexo: String; Aptidao, CodFazendaManejo: Integer; CodManejoInicial,
     CodManejoFinal, Raca, SglFazendaPai,
     CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae: String;
     DtaNascimentoInicio, DtaNascimentoFim, DtaCompraInicio,
     DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
     CodCategoria, IndAnimalCastrado: String;
     CodRegimeAlimentar: Integer; CodLocal, CodLote: String; CodTipoLugar:
     Integer; NumIdadePadrao: Integer; QtdPesoMinimo,
     QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
     QtdGPMMaximo: Double; IndAgrupRaca1: String; CodRaca1: Integer;
     QtdCompRacialInicio1, QtdCompRacialFim1: Double;
     IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
     QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
     QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
     QtdCompRacialFim4: Double; Tipo, QtdQuebraRelatorio, CodTarefa, CodPessoaProdutor: Integer): String;

    function GerarRelatorioPesagem(CodOrigem: Integer;
     IndSexoAnimal: String; CodAptidao, CodFazendaManejo: Integer;
     CodAnimalManejoInicio, CodAnimalManejoFim, CodRaca, SglFazendaPai,
     CodAnimalManejoPai, DesApelidoPai, SglFazendaMae,
     CodAnimalManejoMae: String; DtaNascimentoInicio, DtaNascimentoFim,
     DtaCompraInicio, DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
     CodCategoria, IndAnimalCastrado: String;
     CodRegimeAlimentar: Integer; CodLote, CodLocal: String;
     CodTipoLugar: Integer; DtaPesagemInicio, DtaPesagemFim: TDateTime;
     QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
     QtdGPMMaximo: Double; QtdUltimasPesagens: Integer; IndAgrupRaca1: String;
     CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
     IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
     QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
     QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
     QtdCompRacialFim4: Double; Tipo,QtdQuebraRelatorio, CodTarefa, CodPessoaProdutor: Integer): String;
    function DefinirComposicaoRacial(CodAnimal, CodRaca: Integer;
     QtdComposicaoRacial: Double): Integer;
    function PesquisarComposicaoRacial(CodAnimal: Integer;
     CodOrdenacao: String): Integer;
    function AlterarAtributo(CodAnimal, CodAtributo: Integer;
      Valor1, Valor2: Variant): Integer;
    function CalcularCompRacial(CodAnimal: Integer): Integer;
    function CalcularCompRacialDescendentes(CodAnimal: Integer; CodAnimalRM: Integer): Integer;
    function RecalcularTodasCompRacial: Integer;
    function LimparComposicaoRacial(CodAnimal: Integer): Integer;
    function PesquisarGenealogia(CodAnimais: String;
      CodFazendaManejo: Integer; CodAnimaisManejo: String): Integer;
    function DefinirDiagnosticoPrenhez(CodEvento: Integer;
      CodAnimais: String; CodFazendaManejo: Integer;
      CodAnimaisManejo, IndVacasPrenhas: String): Integer;
    function DefinirExameAndrologico(CodEvento: Integer;
      CodAnimais: String; CodFazendaManejo: Integer;
      CodAnimaisManejo, IndTourosAptos: String): Integer;
    function GerarRelatorioGenealogia(CodAnimais: String;
      CodFazendaManejo: Integer; CodAnimaisManejo: String): String;
    function GerarRelatorioAscendentes(CodAnimais: String;
      CodFazendaManejo: Integer; CodAnimaisManejo: String): String;
    function GerarRelAscendentesPesquisados: String;
    function DefinirAvaliacao(CodEvento, CodAnimal, CodFazendaManejo: Integer;
      CodAnimalManejo: String; CodCaracteristicaAvaliacao: Integer;
      QtdAvalicao: Double): Integer;
    function RemoverAvaliacao(CodEvento, CodAnimal,
      CodFazendaManejo: Integer; const CodAnimalManejo: WideString): Integer;
    function InserirNascidoParto(CodAnimalMae, CodAnimalPai,
      CodReprodutorMultiplo, CodFazendaManejo: Integer;
      CodAnimalManejoCria, IndSexo: String; CodPelagem: Integer;
      DtaNascimento: TDateTime;CodSituacaoSisBov:String;CodEspecie,
      CodAptidao, CodRaca, CodRegimeAlimentar, CodCategoriaAnimal,
      CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
      CodFazendaCorrente:Integer;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
      numCNPJCPFTecnico: String): Integer;

    function PesquisarAvaliacao(CodEvento: Integer): Integer;
    function BuscarCaracteristicaAvaliacao(ECodAnimalManejo: String; ESglCaracteristicaAvaliacao: String): Double;
    function BuscarPosicaoAnimalAvaliacaoCaracteristica(ENumTela: Integer): Integer;

    function PesquisarPossivelPai(CodEstacaoMonta, CodAnimalFemea,
      CodFazendaManejoFemea: Integer; CodAnimalManejoFemea: String;
      DtaEventoParto: TDateTime): Integer;
    function MarcarExportados(CodFazendaManejo: Integer;
      CodInicialAnimalManejo, CodFinalAnimalManejo,
      CodAnimais: String): Integer;
    function DesmarcarExportados(CodFazendaManejo: Integer;
      CodInicialAnimalManejo, CodFinalAnimalManejo,
      CodAnimais: String; CodProcessamento : Integer): Integer;
    function EfetivarCadastroAnimaisPesquisados: Integer;
    function CancelarEfetivacaoAnimaisPesquisados: Integer;
    function MarcarAnimaisComoExportadosPesquisados: Integer;
    function DesmCancAnimaisComoExportadosPesquisados(CodProcessamento: Integer): Integer;
    function GerarRelatorioAutenticacao(SglProdutor, NomPessoaProdutor,
      CodOrigens, IndSexo: String; CodAptidao, CodPaisSisBov, CodEstadoSisBov,
      CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer; CodRacas,
      CodCategorias: String; DtaInicioNascimento, DtaFimNascimento: TDateTime;
      CodRegimeAlimentar, CodTipoLugar: Integer; DtaInicioAutenticacao,
      DtaFimAutenticacao, DtaInicioAutenticacaoPrevista,
      DtaFimAutenticacaoPrevista: TDateTime; IndCertificadoEmitido: String;
      Tipo, QtdQuebraRelatorio: Integer): String;
    function AlterarTecnico(CodTecnico: Integer; const CodAnimais: String): Integer;
    function AlterarTecnicoAnimaisPesquisados(CodTecnico: Integer): Integer;
    function ObtemPelagemPadrao: Integer;
    function ObtemLocalPrincipal(CodPessoaProdutor,
      CodFazenda: Integer): Integer;

    function GerarRelatorioConsolidacaoCodigosSISBOV(ECodProdutor,
                                                     ENumCNPJCPFProdutor,
                                                     ENomProdutor,
                                                     ENumImovelReceitaFederal: String;
                                                     ECodExportacao: Integer;
                                                     ENomPropriedadeRural,
                                                     ENomMunicipioPropriedade: String;
                                                     ECodEstadoPropriedade: Integer;
                                                     EDtaInicioIdentificacaoAnimal,
                                                     EDtaFimIdentificacaoAnimal: TDateTime;
                                                     ENomPessoaTecnico: String;
                                                     ENumCNPJCPFTecnico: String;
                                                     ECodTipoRelatorio: Integer;
                                                     ECodTarefa: Integer): String;

    /////////////////////////////
    // Métodos da carga inicial
    function InserirAnimalCargaInicial(CodArquivoSISBOV: Integer; Especie,
      NrSISBOV, DtaIdentificacao, TipoIdentificacaoDupla, CodigoRaca,
      DtaNascimento, Sexo, Aptidao, NirfIncraNascimento,
      CodigoLocalizacaoNascimento, NrAssociacaoRGD, NrCertificadora,
      DtaInclusaoSistema: String; var CodPessoaProdutor, CodFazenda,
      CodAptidao: Integer): Integer;
    function ValidaAtributosCargaInicial(CodAnimalManejo: String;
      CodFazendaManejo, CodIdentificador1, CodIdentificador2, CodIdentificador3,
      CodIdentificador4, CodLocal, CodAptidao, CodRaca,
      CodFazendaResponsavel: Integer; DataNascimento: TDateTime;
      IndSexo: String): Integer;
      function AtualizarDataAbate(PCodPessoaProdutor,PCodFazenda:integer):integer;

    /////////////////////////////

    // Inventario
    function InventariarAnimaisPesquisados(CodPessoaProdutor,
      CodPropriedadeRural: Integer): Integer;
    function ExcluirInventarioAnimaisPesquisados(CodPessoaProdutor,
      CodPropriedadeRural: Integer): Integer;

    //druzo 28-07-2009
    function  solicitarAlteracaoPosse(CodPropriedadeRural: integer; CodProdutorOrigem,CodProdutorDestino: integer; CodMotivoSolicitacao: integer;
                                      const justificativa: WideString;const numeracaoEnvio: WideString): integer;
    //druzo 07-08-2009
    function  ConsultarAnimaisAbatidos(CodFrigorifico:integer; const data: WideString): integer;



    property IntAnimal : TIntAnimal read FIntAnimal write FIntAnimal;
    property IntAnimalResumido : TIntAnimalResumido read FIntAnimalResumido write FIntAnimalResumido;
    property IntFiliacao : TIntFiliacao read FIntFiliacao write FIntFiliacao;
    property IntRegistro : TIntRegistro read FIntRegistro write FIntRegistro;
  end;

implementation

uses uIntEventos,UINTLOTES, SqlExpr, uIntOrdensServico, Math, uIntFazendas,
     uIntPropriedadesRurais, Classes, StrUtils, uIntLote;

{ TIntAnimais }

constructor TIntAnimais.Create;
begin
  inherited;
  FQueryAux := THerdomQuery.Create(nil);
  FQueryAux1 := THerdomQuery.Create(nil);
  FQueryAux2 := THerdomQuery.Create(nil);
  FIntAnimal := TIntAnimal.Create;
  FIntAnimalResumido := TIntAnimalResumido.Create;
  FIntRegistro := TIntRegistro.Create;
  FIntFiliacao := TIntFiliacao.Create;
  FCodigosSisbov := TIntCodigosSisbov.Create;
  FCodAptidaoMae := 0;
  ZerarValoresUltimaPesquisa;
  FIndLogMensagem := False;
end;

destructor TIntAnimais.Destroy;
begin
  FIntAnimal.Free;
  FIntAnimalResumido.Free;
  FIntRegistro.Free;
  FIntFiliacao.Free;
  FQueryAux.Free;
  FQueryAux1.Free;
  FQueryAux2.Free;
  FCodigosSisbov.Free;
  inherited;
end;

function TIntAnimais.ProximoCodAnimal: Integer;
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado('ProximoCodAnimal');
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try

    // Obtem sequencia de CodAnimal
    BeginTran('OBTER_PROXIMO_CODIGO_ANIMAL');
    try
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_sequencia_codigo ' +
                '   set cod_animal = cod_animal + 1');
{$ENDIF}
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_animal from tab_sequencia_codigo');
{$ENDIF}
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(206, Self.ClassName, 'ProximoCodAnimal', []);
        Result := -206;
        Rollback;
        Exit;
      end;

      Result := Q.FieldByName('cod_animal').AsInteger;
      Q.Close;

      // Confirma Transação
      Commit('OBTER_PROXIMO_CODIGO_ANIMAL');
    except
      on E: Exception do begin
//        Rollback('OBTER_PROXIMO_CODIGO');
        Rollback;
        Mensagens.Adicionar(207, Self.ClassName, 'ProximoCodAnimal', [E.Message]);
        Result := -207;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaFazenda(Valor: Integer; Obrigatorio: Boolean;
  NomeCampo: String): Integer;
var
  Q : THerdomQuery;
begin
  if Valor <= 0 then begin
    if Obrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, 'VerificaFazenda', [NomeCampo]);
      Result := -309;
      Exit;
    end else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_fazenda ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := Valor;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, 'VerificaFazenda', [NomeCampo]);
        Result := -497;
        Exit;
      end;
      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaFazenda', [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCodAnimalCertificadora(CodAnimal: Integer;
  CodAnimalCertificadora: String): Integer;
var
  Q : THerdomQuery;
begin
  if Trim(CodAnimalCertificadora) = '' then begin
    Mensagens.Adicionar(536, Self.ClassName, 'VerificaCodAnimalCertificadora', []);
    Result := -536;
    Exit;
  end;

  Result := VerificaNumLetraPonto(CodAnimalCertificadora, 20, 'Código do animal na certificadora');
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ');
      Q.SQL.Add(' where cod_animal_certificadora = :cod_animal_certificadora ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal != :cod_animal ');
      end;
      Q.SQL.Add('   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_animal_certificadora').AsString := CodAnimalCertificadora;

      if CodAnimal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      end;

      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(563, Self.ClassName, 'VerificaCodAnimalCertificadora', []);
        Result := -563;
        Exit;
      end;
      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaCodAnimalCertificadora', [E.Message, 'código de certificadora do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCodSituacaoSisbov(CodTipoOrigem: Integer; CodSituacaoSisbov: String): Integer;
const
  NomeMetodo: String = 'VerificaCodSituacaoSisbov';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_situacao_sisbov ');
      Q.SQL.Add(' where cod_situacao_sisbov = :cod_situacao_sisbov ');
{$ENDIF}
      Q.ParamByName('cod_situacao_sisbov').AsString := CodSituacaoSisbov;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(609, Self.ClassName, NomeMetodo, []);
        Result := -609;
        Exit;
      end;
      Q.Close;

      // Foi acrescentado nas consistencias de Nascido, Comprado, Importado e Externo,
      // o CodSituacaoSisbov <> 'I', porque animais já identificado poderão ser alterados
      // alguns campos. As consistencias desses campos são feitas na página ASP
      Case CodTipoOrigem of
        // Nascido
        1 : begin
              if (CodSituacaoSisbov <> 'P') and (CodSituacaoSisbov <> 'N')  and (CodSituacaoSisbov <> 'I') then begin
                Mensagens.Adicionar(612, Self.ClassName, NomeMetodo, []);
                Result := -612;
                Exit;
              end;
            end;
        // Comprado
        2 : begin
              if (CodSituacaoSisbov <> 'P') and (CodSituacaoSisbov <> 'N') and (CodSituacaoSisbov <> 'I') then begin
                Mensagens.Adicionar(612, Self.ClassName, NomeMetodo, []);
                Result := -612;
                Exit;
              end;
            end;
        // Importado
        3 : begin
              if (CodSituacaoSisbov <> 'N')  and (CodSituacaoSisbov <> 'I') then begin
                Mensagens.Adicionar(612, Self.ClassName, NomeMetodo, []);
                Result := -612;
                Exit;
              end;
            end;
        // Externo
        4 : begin
              if (CodSituacaoSisbov <> 'N')  and (CodSituacaoSisbov <> 'I') then begin
                Mensagens.Adicionar(612, Self.ClassName, NomeMetodo, []);
                Result := -612;
                Exit;
              end;
            end;
        // Não especificado
        5 : begin
              if (CodSituacaoSisbov <> 'P') and (CodSituacaoSisbov <> 'N') and (CodSituacaoSisbov <> 'I') then begin
                Mensagens.Adicionar(612, Self.ClassName, NomeMetodo, []);
                Result := -612;
                Exit;
              end;
            end;
        // Carga Inicial
        6 : begin
              if (CodSituacaoSisbov <> 'P') and (CodSituacaoSisbov <> 'N') and (CodSituacaoSisbov <> 'I') then begin
                Mensagens.Adicionar(612, Self.ClassName, NomeMetodo, []);
                Result := -612;
                Exit;
              end;
            end;
      else
        Mensagens.Adicionar(613, Self.ClassName, NomeMetodo, []);
        Result := -613;
        Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'situação sisbov']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCodAnimalManejo(
  CodAnimalManejo: String): Integer;
begin
  if Trim(CodAnimalManejo) = '' then begin
    Mensagens.Adicionar(536, Self.ClassName, 'VerificaCodAnimalManejo', []);
    Result := -536;
    Exit;
  end;
  Result := VerificaNumLetra(CodAnimalManejo, Conexao.QtdCaracteresManejoProdutor, 'Código de manejo do animal');
end;

function TIntAnimais.VerificaFazendaCorrente(DadosAnimal: TDadosAnimal;DadosEvento:TDadosEvento):integer;
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      if DadosAnimal.CodFazendaCorrente > 0 then
      begin
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select 1 from tab_animal ');
        Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        //druzo 11-09-2009
        //antes
        //Q.SQL.Add('   and cod_fazenda_corrente = :cod_fazenda_corrente ');
        //depois
        Q.SQL.Add('   and (cod_fazenda_corrente = :cod_fazenda_corrente ');
        //adicionado essa linha
        Q.SQL.Add('   or cod_fazenda_corrente = :cod_fazenda_corrente) ');
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        Q.SQL.Add('   and dta_fim_validade is null ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_fazenda_corrente').AsInteger := DadosEvento.CodFazenda;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;
        if Q.IsEmpty then
        begin
          Result := -100; //falha animal deve estar na fazenda especificada no evento
          Exit;
        end;
      end;

{      else
      begin
        Q.SQL.Clear;
        {$IFDEF MSSQL}
{        Q.SQL.Add('select 1 from tab_animal ');
        Q.SQL.Add(' where cod_pessoa_corrente = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_tipo_lugar in (2,3) ');
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        Q.SQL.Add('   and dta_fim_validade is null ');
        {$ENDIF}
{        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;
        if Q.IsEmpty then
        begin
          Result := -200; //falha animal não pode estar em fazenda
          Exit;
        end;
      end; } // Daniel 14/10/2005 - O produtor A pode aplicar a venda em um animal que esteja em prop terceiro!
      Result := 0; // sucesso
    except
      on E:Exception do
      begin
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaAnimalFazendaCorrente', [E.Message, 'animal está na fazenda']);
        Result := -496;
        Rollback;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


function TIntAnimais.VerificaCodAnimalFazendaManejo(Animal: Integer; AnimalManejo: String;
  FazendaManejo: Integer): Integer;
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      { Comentado por Edivaldo Portela em 3/12/2008 3:55pm
        Solicitado por Jocele da Certificadora GR com a autorização e conhecimento do Helvécio
        Este procedimento visa permitir a inclusão de manejos repetidos
        sendo esses códigos tratados posteriormente na aplicação de eventos
      Q.SQL.Clear;
$IFDEF MSSQL
      Q.SQL.Add('select 1 from tab_animal ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
      Q.SQL.Add('   and cod_animal_manejo = :cod_animal_manejo ');
      if Animal > 0 then begin
        Q.SQL.Add('   and cod_animal != :cod_animal ');
      end;
      Q.SQL.Add('   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ');
      Q.SQL.Add('   and dta_fim_validade is null ');
$ENDIF
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if FazendaManejo > 0 then begin
        Q.ParamByName('cod_fazenda_manejo').AsInteger := FazendaManejo;
      end else begin
        Q.ParamByName('cod_fazenda_manejo').DataType := ftInteger;
        Q.ParamByName('cod_fazenda_manejo').Clear;
      end;
      if Animal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := Animal;
      end;
      Q.ParamByName('cod_animal_manejo').AsString := AnimalManejo;
      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(539, Self.ClassName, 'FazendaOk', []);
        Result := -539;
        Exit;
      end;
      Q.Close;
      }
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaAnimalFazendaManejo', [E.Message, 'duplicidade de Fazenda / Animal manejo']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov,
  CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov: Integer;
  TipoOperacao: String; CodTipoOrigem: Integer; CodSituacaoSisbov: String;
  QtdAnimais: Integer): Integer;
var
  Q : THerdomQuery;
  SisbovInformado : Boolean;
  CodEstado : Integer;
  CodSISBOVAnimalExistente, 
  StrCodSISBOVInicio,
  StrCodSISBOVFim: String;
begin
  Result := 0;
  FUsarSisbov := False;

  SisbovInformado := False;
  // Se um foi passado, todos devem ser passados (R01)
  if TipoOperacao <> 'M' then begin
    if (CodPaisSisbov > 0) or (CodEstadoSisbov > 0) or
      (CodAnimalSisbov > 0) or (NumDVSisbov > 0) then begin
      if (CodPaisSisbov <= 0) or (CodEstadoSisbov <= 0) or
         (CodAnimalSisbov <= 0) or (NumDVSisbov < 0) then begin
        Mensagens.Adicionar(569, Self.ClassName, 'VerificaCodigoSisbov', []);
        Result := -569;
        Exit;
      end;
      SisbovInformado := True;
    end;
  end else begin
    if (CodPaisSisbov > 0) or (CodEstadoSisbov > 0) or
       (CodAnimalSisbov > 0) then begin
      if (CodPaisSisbov <= 0) or (CodEstadoSisbov <= 0) or
         (CodAnimalSisbov <= 0) then begin
        Mensagens.Adicionar(750, Self.ClassName, 'VerificaCodigoSisbov', []);
        Result := -750;
        Exit;
      end;
      SisbovInformado := True;
    end;
  end;

  // Verifica se sisbov pode ou não ser informado
  Case CodTipoOrigem of
    // Nascimento
    1, 5, 6: begin
          if CodSituacaoSisbov = 'N' then begin
            if SisbovInformado then begin
              Mensagens.Adicionar(614, Self.ClassName, 'VerificaCodigoSisbov', []);
              Result := -614;
              Exit;
            end;
          end;
        end;
    // Compra
    2 : begin
          if CodSituacaoSisbov = 'N' then begin
            if SisbovInformado then begin
              Mensagens.Adicionar(614, Self.ClassName, 'VerificaCodigoSisbov', []);
              Result := -614;
              Exit;
            end;
          end;
          if CodSituacaoSisbov = 'I' then begin
            if not SisbovInformado then begin
              Mensagens.Adicionar(615, Self.ClassName, 'VerificaCodigoSisbov', []);
              Result := -615;
              Exit;
            end;
          end;
        end;
    // Importação
    3 : begin
          if CodSituacaoSisbov = 'N' then begin
            if SisbovInformado then begin
              Mensagens.Adicionar(614, Self.ClassName, 'VerificaCodigoSisbov', []);
              Result := -614;
              Exit;
            end;
          end;
        end;
    // Externo
    4 : begin
          //  Sisbov para animal externo é opcional
        end;
  end;

  // Se não foi informado, não é necessário fazer mais nenhuma consistência
  if not SisbovInformado then Exit;

  CodSISBOVAnimalExistente := PadL(IntToStr(CodPaisSisbov), '0', 3) + ' ' +
                              PadL(IntToStr(CodEstadoSisbov), '0', 2) + ' ' +
                              SE(CodMicroRegiaoSisbov > -1, PadL(IntToStr(CodMicroRegiaoSisbov), '0', 2), '') +  ' ' +
                              PadL(IntToStr(CodAnimalSisbov), '0', 9) + ' ' +
                              PadL(IntToStr(NumDVSisbov), '0', 1);

  // Todas as consistências abaixo só serão feitas se o sisbov foi informado
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Verifica o país informado
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_pais ');
      Q.SQL.Add(' where cod_pais_sisbov = :cod_pais_sisbov ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(584, Self.ClassName, 'VerificaCodigoSisbov', []);
        Result := -584;
        Exit;
      end;
      Q.Close;

      // Verifica o estado informado
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_estado from tab_estado ');
      Q.SQL.Add(' where cod_estado_sisbov = :cod_estado_sisbov ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(585, Self.ClassName, 'VerificaCodigoSisbov', []);
        Result := -585;
        Exit;
      end;
      CodEstado := Q.FieldByName('cod_estado').AsInteger;
      Q.Close;

      // Verifica a micro região informada
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_micro_regiao ' +
                ' where cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
                '   and cod_estado = :cod_estado ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      Q.ParamByName('cod_estado').AsInteger := CodEstado;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(586, Self.ClassName, 'VerificaCodigoSisbov', []);
        Result := -586;
        Exit;
      end;
      Q.Close;

      if TipoOperacao <> 'M' then begin
        // Verifica dígito verificador do código sisbov (R03)
        if NumDVSisbov <> BuscarDVSisBov(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodAnimalSisbov) then begin
          Mensagens.Adicionar(583, Self.ClassName+'-'+inttostr(NumDVSisbov)+'-'+inttostr(BuscarDVSisBov(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodAnimalSisbov)) ,'VerificaCodigoSisbov', []);
          Result := -583;
          Exit;
        end;
      end;

      // Verifica duplicidade de códigos sisbov (R02)
      Q.SQL.Clear;
      if TipoOperacao <> 'M' then begin
  {$IFDEF MSSQL}
        if CodTipoOrigem <> 4 then
        begin
          // Verifica entre os animais ativos da certificadora
          Q.SQL.Add('select cod_categoria_animal from tab_animal ' +
                    ' where cod_pais_sisbov = :cod_pais_sisbov ' +
                    '   and cod_estado_sisbov =  :cod_estado_sisbov ' +
                    '   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ' +
                    '   and cod_animal_sisbov =  :cod_animal_sisbov ' +
                    '   and num_dv_sisbov =  :num_dv_sisbov ');
          if CodAnimal > 0 then begin
            Q.SQL.Add('   and cod_animal != :cod_animal ');
          end;
          Q.SQL.Add('   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where cod_categoria_animal <> 12 and ind_animal_ativo = ''N'') ' +
                    '   and dta_fim_validade is null ' +
                    'union');
        end;
        // Verifica entre os animais Externos do produtor
        Q.SQL.Add('select cod_categoria_animal from tab_animal ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_pais_sisbov = :cod_pais_sisbov ' +
                  '   and cod_estado_sisbov =  :cod_estado_sisbov ' +
                  '   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ' +
                  '   and cod_animal_sisbov =  :cod_animal_sisbov ' +
                  '   and num_dv_sisbov =  :num_dv_sisbov ');
        if CodAnimal > 0 then begin
          Q.SQL.Add('   and cod_animal != :cod_animal ');
        end;
        Q.SQL.Add('   and cod_tipo_origem = 4 ' +
                  '   and dta_fim_validade is null ');
  {$ENDIF}
      end else begin
  {$IFDEF MSSQL}
        if CodTipoOrigem <> 4 then
        begin
          // Verifica entre os animais ativos da certificadora
          Q.SQL.Add('select cod_categoria_animal from tab_animal ' +
                    ' where cod_pais_sisbov = :cod_pais_sisbov ' +
                    '   and cod_estado_sisbov =  :cod_estado_sisbov ' +
                    '   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ' +
                    '   and cod_animal_sisbov between :cod_inicial_animal_sisbov and :cod_final_animal_sisbov ' +
                    '   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where cod_categoria_animal <> 12 and ind_animal_ativo = ''N'') ' +
                    '   and cod_pessoa_produtor <> :cod_pessoa_produtor ' +
                    '   and dta_fim_validade is null ' +
                    'union');
        end;
        // Verifica entre os animais Externos do produtor
        Q.SQL.Add('select cod_categoria_animal from tab_animal ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_pais_sisbov = :cod_pais_sisbov ' +
                  '   and cod_estado_sisbov =  :cod_estado_sisbov ' +
                  '   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ' +
                  '   and cod_animal_sisbov between :cod_inicial_animal_sisbov and :cod_final_animal_sisbov ' +
                  '   and cod_tipo_origem = 4 ' +
                  '   and dta_fim_validade is null ');
  {$ENDIF}
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      if TipoOperacao <> 'M' then begin
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;
        if CodAnimal > 0 then begin
          Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        end;
      end else begin
        Q.ParamByName('cod_inicial_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('cod_final_animal_sisbov').AsInteger := CodAnimalSisbov + QtdAnimais - 1;
      end;

      Q.Open;
      
      if not Q.IsEmpty then begin
        if (TipoOperacao <> 'M') and (Q.FieldByName('cod_categoria_animal').AsInteger <> 12) then begin
          Mensagens.Adicionar(571, Self.ClassName, 'VerificaCodigoSisbov', [CodSISBOVAnimalExistente]);
          Result := -571;
        end
        else if (Q.FieldByName('cod_categoria_animal').AsInteger <> 12) then
        begin
          StrCodSISBOVInicio := PadR(IntToStr(CodPaisSisbov), '0', 3) +
            PadR(IntToStr(CodEstadoSisbov), '0', 2);
          if CodMicroRegiaoSisbov > -1 then
          begin
            StrCodSISBOVInicio := StrCodSISBOVInicio +
              PadR(IntToStr(CodMicroRegiaoSisbov), '0', 2);
          end;
          StrCodSISBOVFim := StrCodSISBOVInicio;

          StrCodSISBOVInicio := StrCodSISBOVInicio +
            PadR(IntToStr(CodAnimalSisbov), '0', 9);
          StrCodSISBOVFim := StrCodSISBOVFim +
            PadR(IntToStr(CodAnimalSisbov + QtdAnimais - 1), '0', 9);

          Mensagens.Adicionar(751, Self.ClassName, 'VerificaCodigoSisbov',
            [StrCodSISBOVFim, StrCodSISBOVInicio]);
          Result := -751;
        end;
        Exit;
      end;

      // Verifica se o animal a ser inserido tem ocorrência em um evento de
      // Venda a Frigorífico. Caso tenha aborta a operação.
      if TipoOperacao <> 'M' then
      begin
        Q.SQL.Clear;
        Q.SQL.Add(' select 1 ');
        Q.SQL.Add('   from tab_animal ta ');
        Q.SQL.Add('      , tab_animal_evento tae ');
        Q.SQL.Add('      , tab_evento te ');
        Q.SQL.Add('  where ta.dta_fim_validade is null ');
        Q.SQL.Add('    and ta.cod_animal              = tae.cod_animal ');
        Q.SQL.Add('    and ta.cod_pessoa_produtor     = tae.cod_pessoa_produtor ');
        Q.SQL.Add('    and tae.cod_evento             = te.cod_evento ');
        Q.SQL.Add('    and tae.cod_pessoa_produtor    = te.cod_pessoa_produtor ');
        Q.SQL.Add('    and te.cod_tipo_evento         = 10 ');
        Q.SQL.Add('    and ta.cod_pais_sisbov         = :cod_pais_sisbov ');
        Q.SQL.Add('    and ta.cod_estado_sisbov       = :cod_estado_sisbov ');
        Q.SQL.Add('    and ta.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
        Q.SQL.Add('    and ta.cod_animal_sisbov       = :cod_animal_sisbov ');
        Q.SQL.Add('    and num_dv_sisbov              = :num_dv_sisbov ');
        Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;
        Q.Open;

        if not Q.IsEmpty then
        begin
          Mensagens.Adicionar(2239, Self.ClassName, 'VerificaCodigoSisbov', [CodSISBOVAnimalExistente]);
          Result := -2239;
          Exit;
        end;
      end;

      // Para inserção múltipla, consistências abaixo não são necessárias
      if TipoOperacao = 'M' then begin
        if CodSituacaoSisbov = 'P' then begin
          FUsarSisbov := True;
        end;
        Exit;
      end;


      // Se Situação = Pendente, verifica se código sisbov ainda não foi utilizado na
      // tab_codigo_sisbov (R16)
      if CodSituacaoSisbov = 'P' then begin
        Q.SQL.Clear;
//        {$IFDEF MSSQL}
        Q.SQL.Add('select dta_utilizacao_codigo, dta_fim_validade from tab_codigo_sisbov ');
        Q.SQL.Add(' where cod_pais_sisbov = :cod_pais_sisbov ');
        Q.SQL.Add('   and cod_estado_sisbov =  :cod_estado_sisbov ');
        Q.SQL.Add('   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ');
        Q.SQL.Add('   and cod_animal_sisbov =  :cod_animal_sisbov ');
        Q.SQL.Add('   and num_dv_sisbov =  :num_dv_sisbov ');
//        {$ENDIF}
        Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;

        Q.Open;
        // Código não encontrado na tab_codigo_sisbov
        if Q.IsEmpty then begin
          Mensagens.Adicionar(579, Self.ClassName, 'VerificaCodigoSisbov', []);
          Result := -579;
          Exit;
        end;

        // Código CANCELADO na tab_codigo_sisbov
        if not Q.FieldByName('dta_fim_validade').IsNull then begin
            Mensagens.Adicionar(2411, Self.ClassName, 'VerificaCodigoSisbov', [CodSISBOVAnimalExistente]);
            Result := -2411;
            Exit;
        end;

        // Código já utilizado na tab_codigo_sisbov
        if not Q.FieldByName('dta_utilizacao_codigo').IsNull then begin
            Mensagens.Adicionar(580, Self.ClassName, 'VerificaCodigoSisbov', [CodSISBOVAnimalExistente]);
            Result := -580;
            Exit;
        end;

        // Indica que código sisbov será marcado como utilizado (R39) na tab_codigo_sisbov
        FUsarSisbov := True;
        Q.Close;
      end;

      // Se Situação = Identificado, verifica se existe o animal VENDIDO (categoria 12)
      // com o mesmo código sisbov informado (R16)
      if  (CodTipoOrigem = 2)
      and (CodSituacaoSisbov = 'I')
      and (TipoOperacao <> 'M') then begin
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select 1 from tab_animal ');
        Q.SQL.Add(' where cod_pais_sisbov = :cod_pais_sisbov ');
        Q.SQL.Add('   and cod_estado_sisbov =  :cod_estado_sisbov ');
        Q.SQL.Add('   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ');
        Q.SQL.Add('   and cod_animal_sisbov =  :cod_animal_sisbov ');
        Q.SQL.Add('   and num_dv_sisbov =  :num_dv_sisbov ');
        Q.SQL.Add('   and cod_categoria_animal =  12 ');
  {$ENDIF}
        Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;

        Q.Open;
        // Código não encontrado na tab_codigo_sisbov
        if Q.IsEmpty then begin
          Mensagens.Adicionar(616, Self.ClassName, 'VerificaCodigoSisbov', []);
          Result := -616;
          Exit;
        end;

        Q.Close;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaCodigoSisbov', [E.Message, 'código sisbov do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaDtaIdentificacaoSisbov(DtaNascimentoAnimal,
  DtaIdentificacaoSisbov: TDateTime; CodSituacaoSisbov: String): Integer;
var
  Q : THerdomQuery;
  DtaSistema : TDateTime;
begin
   Result := 0;
  // Verifica se pode ser informada  (R44)
// Foi acrescentado a consistência do código situação sisbov <> 'I'
// porque alguns campos poderão ser alterados
  if (CodSituacaoSisbov <> 'P') and (CodSituacaoSisbov <> 'I') then begin
    if DtaIdentificacaoSisbov > 0 then begin
      Mensagens.Adicionar(618, Self.ClassName, 'VerificaDtaIdentificacaoSisbov', []);
      Result := -618;
      Exit;
    end;
  end;

  // Verifica se é válida (R42)
  if (DtaIdentificacaoSisbov > 0) AND (DtaNascimentoAnimal > 0) then begin
    if DtaIdentificacaoSisbov < DtaNascimentoAnimal then begin
      Mensagens.Adicionar(619, Self.ClassName, 'VerificaDtaIdentificacaoSisbov', []);
      Result := -619;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Obtem data do sistema
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select getdate() as dta_sistema ');
{$ENDIF}

      Q.Open;
      DtaSistema := Trunc(Q.FieldByName('dta_sistema').AsDateTime);
      Q.Close;

      if DtaIdentificacaoSisbov > DtaSistema then begin
        Mensagens.Adicionar(2013, Self.ClassName, 'VerificaDtaIdentificacaoSisbov', []);
        Result := -2013;
        Exit;
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaDtaIdentificacaoSisbov', [E.Message, 'data de identificação do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;

end;

function TIntAnimais.VerificaLocalIdentificacao(
  var NumImovelIdentificacao: String; var CodLocalizacaoSISBOV: Integer;
  CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
  CodSituacaoSisbov: String): Integer;
const
  NomeMetodo: String = 'VerificaLocalIdentificacao';
begin
  Result := 0;
  // Verifica se poderiam ser informados (R44)
  // Foi acrescentado a consistência do código situação sisbov <> 'I'
  // porque alguns campos poderão ser alterados
  if (CodSituacaoSisbov <> 'P') and (CodSituacaoSisbov <> 'I') then
  begin
    if (NumImovelIdentificacao <> '') or (CodPropriedadeIdentificacao > 0) or
       (CodFazendaIdentificacao > 0) then
    begin
      Mensagens.Adicionar(621, Self.ClassName, NomeMetodo, []);
      Result := -621;
      Exit;
    end;
  end;

  // Verifica se somente um foi informado (R13)
  if NumImovelIdentificacao <> '' then
  begin
    if (CodPropriedadeIdentificacao > 0) or (CodFazendaIdentificacao > 0) then
    begin
      Mensagens.Adicionar(620, Self.ClassName, NomeMetodo, []);
      Result := -620;
      Exit;
    end;
  end;
  if CodPropriedadeIdentificacao > 0 then
  begin
    if (NumImovelIdentificacao <> '') or (CodFazendaIdentificacao > 0) then
    begin
      Mensagens.Adicionar(620, Self.ClassName, NomeMetodo, []);
      Result := -620;
      Exit;
    end;
  end;
  if CodFazendaIdentificacao > 0 then
  begin
    if (NumImovelIdentificacao <> '') or (CodPropriedadeIdentificacao > 0) then
    begin
      Mensagens.Adicionar(620, Self.ClassName, NomeMetodo, []);
      Result := -620;
      Exit;
    end;
  end;

  // O código de localização não pode ser informado sem o NIRF/INCRA
  if (CodLocalizacaoSISBOV > 0) and (NumImovelIdentificacao = '') then
  begin
    Mensagens.Adicionar(2100, Self.ClassName, NomeMetodo, []);
    Result := -2100;
    Exit;
  end;

  // Se NumImovelIdentificacao foi informado, verifica se o mesmo é válido (R26)
  { Inicio Alteração - Fábio - 14/07/2004 }
  { Alteração da função que valida o Nirf/Incra e a mensagem de erro }
  if not ValidaNirfIncra(NumImovelIdentificacao, False) then
  begin
    Mensagens.Adicionar(494, Self.ClassName, NomeMetodo, [NumImovelIdentificacao]);
    Result := -494;
    Exit;
  end;
  { Fim Alteração - Fábio - 14/07/2004 }

  // Verifica fazenda de identificação (R23)
  if CodFazendaIdentificacao > 0 then
  begin
    Result := VerificaFazenda(CodFazendaIdentificacao, False, 'Fazenda de identificação do animal');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica propriedade de identificação
  if CodPropriedadeIdentificacao > 0 then
  begin
    Result := VerificaPropriedadeRural(CodPropriedadeIdentificacao, False, 'Propriedade de identificação do animal',
      NumImovelIdentificacao);
    if Result < 0 then
    begin
      Exit;
    end;
  end;
end;

(*
function TIntAnimais.VerificaNum(Valor: String; Tamanho: Integer;
  NomParametro: String; ValidaTamanho: Boolean): Integer;
var
  X : Integer;
begin
  Result := 0;
  if Length(Valor) > Tamanho then begin
    Mensagens.Adicionar(537, Self.ClassName, 'VerificaNum', [NomParametro, IntToStr(Tamanho)]);
    Result := -537;
    Exit;
  end;

  For X := 1 to Length(Valor) do begin
    if Pos(Copy(Valor, X, 1), '0123456789') = 0 then begin
      Mensagens.Adicionar(1281, Self.ClassName, 'VerificaNum', [NomParametro]);
      Result := -1281;
      Exit;
    end;
  end;

  if ValidaTamanho then begin
    if Length(Valor) <> Tamanho then begin
      Mensagens.Adicionar(1280, Self.ClassName, 'VerificaNum', [NomParametro, IntToStr(Tamanho)]);
      Result := -1280;
    end;
  end;
end;
*)

function TIntAnimais.VerificaNumLetra(Valor: String;
  Tamanho: Integer; NomParametro: String): Integer;
var
  X : Integer;
begin
  Result := 0;
  if Length(Valor) > Tamanho then begin
    Mensagens.Adicionar(537, Self.ClassName, 'VerificaNumLetra', [NomParametro, IntToStr(Tamanho)]);
    Result := -537;
    Exit;
  end;

  For X := 1 to Length(Valor) do begin
    if Pos(Copy(Valor, X, 1), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ') = 0 then begin
      Mensagens.Adicionar(538, Self.ClassName, 'VerificaNumLetra', [NomParametro + '( Valor informado => ' + Valor + ' ) ']);
      Result := -538;
      Exit;
    end;
  end;
end;


function TIntAnimais.VerificaNumLetra(Valor: String; Tamanho: Integer;
  NomParametro: String; ValidaTamanho: Boolean): Integer;
begin
  Result := VerificaNumLetra(Valor, Tamanho, NomParametro);
  if Result < 0 then Exit;
  if ValidaTamanho then begin
    if Length(Valor) <> Tamanho then begin
      Mensagens.Adicionar(1280, Self.ClassName, 'VerificaNumLetra', [NomParametro, IntToStr(Tamanho)]);
      Result := -1280;
    end;
  end;
end;

function TIntAnimais.VerificaNumLetraPonto(Valor: String;
  Tamanho: Integer; NomParametro: String): Integer;
var
  X : Integer;
begin
  Result := 0;
  if Length(Valor) > Tamanho then begin
    Mensagens.Adicionar(537, Self.ClassName, 'VerificaNumLetraPonto', [NomParametro, IntToStr(Tamanho)]);
    Result := -537;
    Exit;
  end;

  For X := 1 to Length(Valor) do begin
    if Pos(Copy(Valor, X, 1), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ.') = 0 then begin
      Mensagens.Adicionar(538, Self.ClassName, 'VerificaNumLetraPonto', [NomParametro]);
      Result := -538;
      Exit;
    end;
  end;
end;

function TIntAnimais.VerificaPropriedadeRural(Valor: Integer;
  Obrigatorio: Boolean; NomeCampo: String; var NIRF: String): Integer;
const
  NomeMetodo: String = 'VerificaPropriedadeRural';
var
  QueryLocal: THerdomQuery;
begin
  if Valor <= 0 then
  begin
    if Obrigatorio then
    begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end
    else
    begin
      Result := 0;
      Exit;
    end;
  end;

  try
    QueryLocal := THerdomQuery.Create(conexao, nil);
    try
      // Obtem o NIRF da propriedade e verifica se ela é válida
      with QueryLocal do
      begin
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('SELECT num_imovel_receita_federal');
        SQL.Add('  FROM tab_propriedade_rural');
        SQL.Add(' WHERE cod_propriedade_rural = :cod_propriedade_rural');
        SQL.Add('   AND dta_fim_validade is null');
{$ENDIF}
        ParamByName('cod_propriedade_rural').AsInteger := Valor;
        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
          Result := -497;
          Exit;
        end;
        NIRF := FieldByName('num_imovel_receita_federal').AsString;
        Close;
      end;
      Result := 0;
    finally
      QueryLocal.Free;
    end;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(496, Self.ClassName, NomeMetodo,
        [E.Message, NomeCampo]);
      Result := -496;
      Exit;
    end;
  end;
end;

function TIntAnimais.VerificaDesApelido(CodAnimal: Integer; DesApelido: String): Integer;
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica duplicidade de apelidos (R06)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and des_apelido = :des_apelido ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal != :cod_animal ');
      end;
      Q.SQL.Add('   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                '   and dta_fim_validade is null ' +
                'union ' +
                ' select 1 from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and des_apelido = :des_apelido ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal != :cod_animal ');
      end;
      Q.SQL.Add('   and cod_tipo_origem = 4 ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('des_apelido').AsString := DesApelido;
      if CodAnimal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      end;

      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(623, Self.ClassName, 'VerificaDesApelido', []);
//        Result := -623;
//        Exit;
      end;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaDesApelido', [E.Message, 'apelido do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaNomAnimal(CodAnimal: Integer; NomAnimal: String): Integer;
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica duplicidade de nomes (R06)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      // Verifica entre os animais ativos da certificadora
      Q.SQL.Add('select 1 from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and nom_animal = :nom_animal ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal != :cod_animal ');
      end;
      Q.SQL.Add('   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                '   and dta_fim_validade is null ' +
                'union ' +
                'select 1 from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and nom_animal = :nom_animal ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal != :cod_animal ');
      end;
      Q.SQL.Add('   and cod_tipo_origem = 4 ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('nom_animal').AsString := NomAnimal;
      if CodAnimal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      end;

      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(622, Self.ClassName, 'VerificaNomAnimal', []);
//        Result := -622;
//        Exit;
      end;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaNomAnimal', [E.Message, 'nome do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaAssociacaoGrauSangue(CodAssociacaoRaca,
  CodGrauSangue: Integer; NumRGD: String): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  // Verifica se GrauSangue e RGD podem ser informados (R24)
  if CodAssociacaoRaca < 0 then begin
    if (CodGrauSangue > 0) or (NumRGD <> '') then begin
      Mensagens.Adicionar(625, Self.ClassName, 'VerificaAssociacaoGrauSangue', []);
      Result := -625;
      Exit;
    end;
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Verifica se Associação é válida (R29)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_associacao_raca ');
      Q.SQL.Add(' where cod_associacao_raca = :cod_associacao_raca ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_associacao_raca').AsInteger := CodAssociacaoRaca;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(471, Self.ClassName, 'VerificaAssociacaoGrauSangue', []);
        Result := -471;
        Exit;
      end;
      Q.Close;

      // Verifica se Grau de sangue é válido (R29, R31)
      if CodGrauSangue > 0 then begin
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ');
        Q.SQL.Add('  from tab_grau_sangue tgs, ');
        Q.SQL.Add('       tab_assoc_raca_grau_sangue targs ');
        Q.SQL.Add(' where tgs.cod_grau_sangue = :cod_grau_sangue ');
        Q.SQL.Add('   and targs.cod_grau_sangue = tgs.cod_grau_sangue ');
        Q.SQL.Add('   and targs.cod_associacao_raca = :cod_associacao_raca ');
        Q.SQL.Add('   and tgs.dta_fim_validade is null ');
  {$ENDIF}
        Q.ParamByName('cod_grau_sangue').AsInteger := CodGrauSangue;
        Q.ParamByName('cod_associacao_raca').AsInteger := CodAssociacaoRaca;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(626, Self.ClassName, 'VerificaAssociacaoGrauSangue', []);
          Result := -626;
          Exit;
        end;
        Q.Close;
      end;

      // Verifica o RGD do animal (R25)
      if (LowerCase(Trim(NumRGD)) = 'null') then
        NumRGD := '';

      if Trim(NumRGD) <> '' then begin
        Result := VerificaNumLetra(NumRGD, 20, 'RGD do animal');
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaAssociacaoGrauSangue', [E.Message, 'associação de raça, grau de sangue e RGD do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaIdentificadores(NumTransponder: String;
  CodTipoIdentificador1, CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4: Integer): Integer;
var
  QtdTransponder, QtdBrinco : Integer;
  Q : THerdomQuery;
begin
  Result := 0;

  QtdTransponder := 0;
  QtdBrinco := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste dados do Identificador1
      if CodTipoIdentificador1 > 0 then begin
        // Verifica se identificador é válido (R29)
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select ind_transponder, ind_brinco from tab_tipo_identificador ');
        Q.SQL.Add(' where cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and dta_fim_validade is null ');
  {$ENDIF}
        Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador1;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(628, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -628;
          Exit;
        end;
        if Q.FieldByName('ind_transponder').AsString = 'S' then begin
          Inc(QtdTransponder);
        end;
        if Q.FieldByName('ind_brinco').AsString = 'S' then begin
          Inc(QtdBrinco);
        end;
        Q.Close;

        // Verifica se a posição informada é válida (R46, R47)
        if CodPosicaoIdentificador1 > 0 then begin
          Q.SQL.Clear;
    {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ');
        Q.SQL.Add('  from tab_posicao_identificador tpi, ');
        Q.SQL.Add('       tab_grupo_posicao_ident tgpi, ');
        Q.SQL.Add('       tab_tipo_identificador tti ');
        Q.SQL.Add(' where tpi.cod_posicao_identificador = :cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_posicao_identificador = tpi.cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_grupo_identificador = tti.cod_grupo_identificador ');
        Q.SQL.Add('   and tti.cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and tpi.dta_fim_validade is null ');
    {$ENDIF}
          Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador1;
          Q.ParamByName('cod_posicao_identificador').AsInteger := CodPosicaoIdentificador1;

          Q.Open;
          if Q.IsEmpty then begin
            Mensagens.Adicionar(630, Self.ClassName, 'VerificaIdentificadores', []);
            Result := -630;
            Exit;
          end;
          Q.Close;
        end else begin
//          Mensagens.Adicionar(629, Self.ClassName, 'VerificaIdentificadores', []);
//          Result := -629;
//          Exit;
        end;
      end else begin
        if CodPosicaoIdentificador1 > 0 then begin
          Mensagens.Adicionar(627, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -627;
          Exit;
        end;
      end;

      // Consiste dados do Identificador2
      if CodTipoIdentificador2 > 0 then begin
        // Verifica se identificador é válido (R29)
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select ind_transponder, ind_brinco from tab_tipo_identificador ');
        Q.SQL.Add(' where cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and dta_fim_validade is null ');
  {$ENDIF}
        Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador2;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(628, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -628;
          Exit;
        end;
        if Q.FieldByName('ind_transponder').AsString = 'S' then begin
          Inc(QtdTransponder);
        end;
        if Q.FieldByName('ind_brinco').AsString = 'S' then begin
          Inc(QtdBrinco);
        end;
        Q.Close;

        // Verifica se a posição informada é válida (R46, R47)
        if CodPosicaoIdentificador2 > 0 then begin
          Q.SQL.Clear;
    {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ');
        Q.SQL.Add('  from tab_posicao_identificador tpi, ');
        Q.SQL.Add('       tab_grupo_posicao_ident tgpi, ');
        Q.SQL.Add('       tab_tipo_identificador tti ');
        Q.SQL.Add(' where tpi.cod_posicao_identificador = :cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_posicao_identificador = tpi.cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_grupo_identificador = tti.cod_grupo_identificador ');
        Q.SQL.Add('   and tti.cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and tpi.dta_fim_validade is null ');
    {$ENDIF}
          Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador2;
          Q.ParamByName('cod_posicao_identificador').AsInteger := CodPosicaoIdentificador2;

          Q.Open;
          if Q.IsEmpty then begin
            Mensagens.Adicionar(630, Self.ClassName, 'VerificaIdentificadores', []);
            Result := -630;
            Exit;
          end;
          Q.Close;
        end else begin
//          Mensagens.Adicionar(629, Self.ClassName, 'VerificaIdentificadores', []);
//          Result := -629;
//          Exit;
        end;
      end else begin
        if CodPosicaoIdentificador2 > 0 then begin
          Mensagens.Adicionar(627, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -627;
          Exit;
        end;
      end;

      // Consiste dados do Identificador3
      if CodTipoIdentificador3 > 0 then begin
        // Verifica se identificador é válido (R29)
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select ind_transponder, ind_brinco from tab_tipo_identificador ');
        Q.SQL.Add(' where cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and dta_fim_validade is null ');
  {$ENDIF}
        Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador3;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(628, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -628;
          Exit;
        end;
        if Q.FieldByName('ind_transponder').AsString = 'S' then begin
          Inc(QtdTransponder);
        end;
        if Q.FieldByName('ind_brinco').AsString = 'S' then begin
          Inc(QtdBrinco);
        end;
        Q.Close;

        // Verifica se a posição informada é válida (R46, R47)
        if CodPosicaoIdentificador3 > 0 then begin
          Q.SQL.Clear;
    {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ');
        Q.SQL.Add('  from tab_posicao_identificador tpi, ');
        Q.SQL.Add('       tab_grupo_posicao_ident tgpi, ');
        Q.SQL.Add('       tab_tipo_identificador tti ');
        Q.SQL.Add(' where tpi.cod_posicao_identificador = :cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_posicao_identificador = tpi.cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_grupo_identificador = tti.cod_grupo_identificador ');
        Q.SQL.Add('   and tti.cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and tpi.dta_fim_validade is null ');
    {$ENDIF}
          Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador3;
          Q.ParamByName('cod_posicao_identificador').AsInteger := CodPosicaoIdentificador3;

          Q.Open;
          if Q.IsEmpty then begin
            Mensagens.Adicionar(630, Self.ClassName, 'VerificaIdentificadores', []);
            Result := -630;
            Exit;
          end;
          Q.Close;
        end else begin
//          Mensagens.Adicionar(629, Self.ClassName, 'VerificaIdentificadores', []);
//          Result := -629;
//          Exit;
        end;
      end else begin
        if CodPosicaoIdentificador3 > 0 then begin
          Mensagens.Adicionar(627, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -627;
          Exit;
        end;
      end;

      // Consiste dados do Identificador4
      if CodTipoIdentificador4 > 0 then begin
        // Verifica se identificador é válido (R29)
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select ind_transponder, ind_brinco from tab_tipo_identificador ');
        Q.SQL.Add(' where cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and dta_fim_validade is null ');
  {$ENDIF}
        Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador4;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(628, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -628;
          Exit;
        end;
        if Q.FieldByName('ind_transponder').AsString = 'S' then begin
          Inc(QtdTransponder);
        end;
        if Q.FieldByName('ind_brinco').AsString = 'S' then begin
          Inc(QtdBrinco);
        end;
        Q.Close;

        // Verifica se a posição informada é válida (R46, R47)
        if CodPosicaoIdentificador4 > 0 then begin
          Q.SQL.Clear;
    {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ');
        Q.SQL.Add('  from tab_posicao_identificador tpi, ');
        Q.SQL.Add('       tab_grupo_posicao_ident tgpi, ');
        Q.SQL.Add('       tab_tipo_identificador tti ');
        Q.SQL.Add(' where tpi.cod_posicao_identificador = :cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_posicao_identificador = tpi.cod_posicao_identificador ');
        Q.SQL.Add('   and tgpi.cod_grupo_identificador = tti.cod_grupo_identificador ');
        Q.SQL.Add('   and tti.cod_tipo_identificador = :cod_tipo_identificador ');
        Q.SQL.Add('   and tpi.dta_fim_validade is null ');
    {$ENDIF}
          Q.ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador4;
          Q.ParamByName('cod_posicao_identificador').AsInteger := CodPosicaoIdentificador4;

          Q.Open;
          if Q.IsEmpty then begin
            Mensagens.Adicionar(630, Self.ClassName, 'VerificaIdentificadores', []);
            Result := -630;
            Exit;
          end;
          Q.Close;
        end else begin
//          Mensagens.Adicionar(629, Self.ClassName, 'VerificaIdentificadores', []);
//          Result := -629;
//          Exit;
        end;
      end else begin
        if CodPosicaoIdentificador4 > 0 then begin
          Mensagens.Adicionar(627, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -627;
          Exit;
        end;
      end;

      // Verifica transponder (R48, R49)
      if QtdTransponder = 0 then begin
        if NumTransponder <> '' then begin
          Mensagens.Adicionar(631, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -631;
          Exit;
        end;
      end else begin
        if QtdTransponder = 1 then begin
          Result := TrataString(NumTransponder, 20, 'Número Transponder');
          if Result < 0 then begin
            Exit;
          end;
//          if NumTransponder = '' then begin
//            Mensagens.Adicionar(632, Self.ClassName, 'VerificaIdentificadores', []);
//            Result := -632;
//            Exit;
//          end;
        end else begin
          Mensagens.Adicionar(633, Self.ClassName, 'VerificaIdentificadores', []);
          Result := -633;
          Exit;
        end;
      end;

      // Verifica brincos (R48)
      if QtdBrinco > 2 then begin
        Mensagens.Adicionar(634, Self.ClassName, 'VerificaIdentificadores', []);
        Result := -634;
        Exit;
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaIdentificadores', [E.Message, 'identificadores e transponder']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaEspecieRacaAptidao(CodEspecie, CodRaca,
  CodAptidao: Integer): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  if CodEspecie <= 0 then begin
    Mensagens.Adicionar(635, Self.ClassName, 'VerificaEspecieRacaAptidao', []);
    Result := -635;
    Exit;
  end;
  if CodRaca <= 0 then begin
    Mensagens.Adicionar(636, Self.ClassName, 'VerificaEspecieRacaAptidao', []);
    Result := -636;
    Exit;
  end;
  if CodAptidao <= 0 then begin
    Mensagens.Adicionar(636, Self.ClassName, 'VerificaEspecieRacaAptidao', []);
    Result := -636;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Consiste espécie (R29)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_especie ');
      Q.SQL.Add(' where cod_especie = :cod_especie ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_especie').AsInteger := CodEspecie;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(542, Self.ClassName, 'VerificaEspecieRacaAptidao', []);
        Result := -542;
        Exit;
      end;
      Q.Close;

      // Consiste raça (R29, R22)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_raca ');
      Q.SQL.Add(' where cod_raca = :cod_raca ');
      Q.SQL.Add('   and cod_especie = :cod_especie ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_raca').AsInteger := CodRaca;
      Q.ParamByName('cod_especie').AsInteger := CodEspecie;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(638, Self.ClassName, 'VerificaEspecieRacaAptidao', []);
        Result := -638;
        Exit;
      end;
      Q.Close;

      // Consiste aptidão (R29, R50)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ');
      Q.SQL.Add('  from tab_aptidao ta, ');
      Q.SQL.Add('       tab_raca_aptidao tra ');
      Q.SQL.Add(' where tra.cod_aptidao = ta.cod_aptidao ');
      Q.SQL.Add('   and ta.cod_aptidao = :cod_aptidao ');
      Q.SQL.Add('   and ta.dta_fim_validade is null ');
      Q.SQL.Add('   and tra.cod_raca = :cod_raca ');
{$ENDIF}
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_raca').AsInteger := CodRaca;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(639, Self.ClassName, 'VerificaEspecieRacaAptidao', []);
        Result := -639;
        Exit;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaEspecieRacaAptidao', [E.Message, 'espécie, raça e aptidão do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaPelagem(CodPelagem: Integer): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Consiste pelagem (R29)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_pelagem ');
      Q.SQL.Add(' where cod_pelagem = :cod_pelagem ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pelagem').AsInteger := CodPelagem;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(392, Self.ClassName, 'VerificaPelagem', []);
        Result := -392;
        Exit;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaPelagem', [E.Message, 'pelagem do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaAnimalMae(CodEspecie, CodAptidao,
  CodFazendaManejoMae: Integer; CodAnimalMae: String): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste animal mãe (R18, R20)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_animal, ind_sexo, cod_especie, cod_aptidao from tab_animal ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      if CodFazendaManejoMae > 0 then begin
        Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
      end;
      Q.SQL.Add('   and cod_animal_manejo = :cod_animal_manejo ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodFazendaManejoMae > 0 then begin
        Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejoMae;
      end;
      Q.ParamByName('cod_animal_manejo').AsString := CodAnimalMae;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(640, Self.ClassName, 'VerificaAnimalMae', []);
        Result := -640;
        Exit;
      end;
      if Q.FieldByName('ind_sexo').AsString <> 'F' then begin
        Mensagens.Adicionar(641, Self.ClassName, 'VerificaAnimalMae', []);
        Result := -641;
        Exit;
      end;
      if Q.FieldByName('cod_especie').AsInteger <> CodEspecie then begin
        Mensagens.Adicionar(642, Self.ClassName, 'VerificaAnimalMae', []);
        Result := -642;
        Exit;
      end;
      FCodAptidaoMae := Q.FieldByName('cod_aptidao').AsInteger;
      if FCodAptidaoMae <> CodAptidao then begin
        if (Q.FieldByName('cod_aptidao').AsInteger <> 3) and (CodAptidao <> 3) then begin
          Mensagens.Adicionar(646, Self.ClassName, 'VerificaAnimalMae', []);
          Result := 646;
        end;
      end;
      FCodAnimalMae := Q.FieldByName('cod_animal').AsInteger;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaAnimalMae', [E.Message, 'mãe do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaAnimalPai(CodEspecie, CodAptidao, CodRaca,
  CodFazendaManejoPai: Integer; CodAnimalPai: String): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;

  Q := THerdomQuery.Create(conexao,nil);
  try
    try

      // Consiste animal pai (R18, R19)
      Q.Close;
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_animal, ind_sexo, cod_especie, cod_raca, cod_aptidao from tab_animal ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      if CodFazendaManejoPai > 0 then begin
        Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
      end;
      Q.SQL.Add('   and cod_animal_manejo = :cod_animal_manejo ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodFazendaManejoPai > 0 then begin
        Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejoPai;
      end;
      Q.ParamByName('cod_animal_manejo').AsString := CodAnimalPai;

      Q.Open;
      // Se não encontrou o PAI, verifica se é um RM
      if Q.IsEmpty then begin
        Q.Close;
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select cod_reprodutor_multiplo, cod_especie from tab_reprodutor_multiplo ');
        Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        if CodFazendaManejoPai > 0 then begin
          Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
        end;
        Q.SQL.Add('   and cod_reprodutor_multiplo_manejo = :cod_reprodutor_multiplo_manejo ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        if CodFazendaManejoPai > 0 then begin
          Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejoPai;
        end;
        Q.ParamByName('cod_reprodutor_multiplo_manejo').AsString := CodAnimalPai;

        Q.Open;

        if Q.IsEmpty then begin
          Mensagens.Adicionar(643, Self.ClassName, 'VerificaAnimalPai', []);
          Result := -643;
          Exit;
        end;

        if Q.FieldByName('cod_especie').AsInteger <> CodEspecie then begin
          Mensagens.Adicionar(645, Self.ClassName, 'VerificaAnimalPai', []);
          Result := -645;
          Exit;
        end;

        FCodReprodutorMultiplo := Q.FieldByName('cod_reprodutor_multiplo').AsInteger;

        Q.Close;
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select count(*) as qtd_touros from tab_animal_reprodutor_multiplo  ');
        Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_reprodutor_multiplo = :cod_reprodutor_multiplo ');
        {$ENDIF}

        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_reprodutor_multiplo').AsInteger := FCodReprodutorMultiplo;
        Q.Open;

        if Q.IsEmpty then begin
          FCodReprodutorMultiplo := -1;
          Mensagens.Adicionar(1161, Self.ClassName, 'VerificaAnimalPai', [CodAnimalPai]);
          Result := -1161;
          Exit;
        end;

        if Q.FieldByName('qtd_touros').AsInteger < 1 then begin
          FCodReprodutorMultiplo := -1;
          Mensagens.Adicionar(1161, Self.ClassName, 'VerificaAnimalPai', [CodAnimalPai]);
          Result := -1161;
          Exit;
        end;
      end else begin
        if Q.FieldByName('ind_sexo').AsString <> 'M' then begin
          Mensagens.Adicionar(644, Self.ClassName, 'VerificaAnimalPai', []);
          Result := -644;
          Exit;
        end;
        if Q.FieldByName('cod_especie').AsInteger <> CodEspecie then begin
          Mensagens.Adicionar(645, Self.ClassName, 'VerificaAnimalPai', []);
          Result := -645;
          Exit;
        end;
        if Q.FieldByName('cod_aptidao').AsInteger <> CodAptidao then begin
          if (Q.FieldByName('cod_aptidao').AsInteger <> 3) and (CodAptidao <> 3) then begin
            Mensagens.Adicionar(647, Self.ClassName, 'VerificaAnimalPai', []);
            Result := 647;
          end;
        end;
        if Q.FieldByName('cod_raca').AsInteger <> CodRaca then begin
          Mensagens.Adicionar(648, Self.ClassName, 'VerificaAnimalPai', []);
          Result := 648;
        end;

        FCodAnimalPai := Q.FieldByName('cod_animal').AsInteger;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaAnimalPai', [E.Message, 'pai do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaAnimalReceptor(CodEspecie, CodFazendaManejoReceptor: Integer;
  CodAnimalReceptor: String): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste animal mãe (R18, R21)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_animal, ind_sexo, cod_especie, cod_aptidao from tab_animal ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      if CodFazendaManejoReceptor > 0 then begin
        Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
      end;
      Q.SQL.Add('   and cod_animal_manejo = :cod_animal_manejo ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodFazendaManejoReceptor > 0 then begin
        Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejoReceptor;
      end;
      Q.ParamByName('cod_animal_manejo').AsString := CodAnimalReceptor;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(649, Self.ClassName, 'VerificaAnimalReceptor', []);
        Result := -649;
        Exit;
      end;
      if Q.FieldByName('ind_sexo').AsString <> 'F' then begin
        Mensagens.Adicionar(650, Self.ClassName, 'VerificaAnimalReceptor', []);
        Result := -650;
        Exit;
      end;
      if Q.FieldByName('cod_especie').AsInteger <> CodEspecie then begin
        Mensagens.Adicionar(651, Self.ClassName, 'VerificaAnimalReceptor', []);
        Result := -651;
        Exit;
      end;

      FCodAptidaoMae := Q.FieldByName('cod_aptidao').AsInteger;
      FCodAnimalReceptor := Q.FieldByName('cod_animal').AsInteger;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaAnimalReceptor', [E.Message, 'animal receptor']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCategoria(CodCategoria: Integer; IndSexo,
  IndAnimalCastrado: String; CodAptidao: Integer;
  DtaNascimento: TDateTime): Integer;
var
  Dias : Integer;
  Q : THerdomQuery;
begin
  Result := 0;

  // Verifica Sexo
  if (UpperCase(IndSexo) <> 'M') and (UpperCase(IndSexo) <> 'F') then begin
    Mensagens.Adicionar(690, Self.ClassName, 'VerificaCategoria', []);
    Result := -690;
    Exit;
  end;

  // Verifica Status Castrado
  if (UpperCase(IndAnimalCastrado) <> 'S') and (UpperCase(IndAnimalCastrado) <> 'N') then begin
    Mensagens.Adicionar(716, Self.ClassName, 'VerificaCategoria', []);
    Result := -716;
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste categoria (R18, R21)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tca.ind_sexo, ' +
                '       tca.ind_animal_ativo, ' +
                '       tca.num_idade_minima, ' +
                '       tca.num_idade_maxima, ' +
                '       tca.ind_restrito_sistema ' +
                '  from tab_categoria_animal tca, ' +
                '       tab_categoria_animal_aptidao tcaa ' +
                ' where tcaa.cod_categoria_animal = tca.cod_categoria_animal ' +
                '   and tca.cod_categoria_animal  = :cod_categoria_animal ' +
                '   and tcaa.cod_aptidao = :cod_aptidao ' +
                '   and tca.dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_categoria_animal').AsInteger := CodCategoria;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(652, Self.ClassName, 'VerificaCategoria', []);
        Result := -652;
        Exit;
      end;

      if Q.FieldByName('ind_animal_ativo').AsString <> 'S' then begin
        Mensagens.Adicionar(656, Self.ClassName, 'VerificaCategoria', []);
        Result := -656;
        Exit;
      end;

      if Q.FieldByName('ind_sexo').AsString <> 'A' then begin
        if Q.FieldByName('ind_sexo').AsString <> IndSexo then begin
          Mensagens.Adicionar(653, Self.ClassName, 'VerificaCategoria', []);
          Result := -653;
          Exit;
        end;
      end;

      if IndAnimalCastrado = 'S' then
      begin
        if (CodCategoria = 4) or (CodCategoria = 5) or (CodCategoria = 6) or
           (CodCategoria = 7) or (CodCategoria = 8) or (CodCategoria = 9) then
        begin
          Mensagens.Adicionar(654, Self.ClassName, 'VerificaCategoria', []);
          Result := -654;
          Exit;
        end;
      end;

      Dias := Trunc(Now - DtaNascimento);
      if (Dias < Q.FieldByName('num_idade_minima').AsInteger) or
         (Dias > Q.FieldByName('num_idade_maxima').AsInteger) then begin
        Mensagens.Adicionar(655, Self.ClassName, 'VerificaCategoria', []);
        Result := -655;
        Exit;
      end;

      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaCategoria', [E.Message, 'categoria, sexo e status de castrado do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaLugar(CodTipoLugar, CodLoteCorrente,
  CodLocalCorrente, CodFazendaCorrente: Integer; var NumImovelCorrente: String;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente: Integer): Integer;
const
  NomeMetodo: String = 'VerificaLugar';
var
  Q : THerdomQuery;
begin
  Result := 0;

  try
    Q := THerdomQuery.Create(conexao, nil);
    try
      // Verifica CodTipoLugar (R29, R58)
      if CodTipoLugar = 4 then
      begin
        Mensagens.Adicionar(658, Self.ClassName, NomeMetodo, []);
        Result := -658;
        Exit;
      end;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1  ');
      Q.SQL.Add('  from tab_tipo_lugar ');
      Q.SQL.Add(' where cod_tipo_lugar = :cod_tipo_lugar ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_tipo_lugar').AsInteger := CodTipoLugar;

      Q.Open;
      if Q.IsEmpty then
      begin
        Mensagens.Adicionar(657, Self.ClassName, NomeMetodo, []);
        Result := -657;
        Exit;
      end;

      // Verifica se parâmetros estão coerentes (R23, R30, R51, R52, R53, R54, R55, R56, R57)
      case CodTipoLugar of
        1: begin  // Fazenda
          if (NumImovelCorrente <> '') or (CodPropriedadeCorrente > 0) or
             (NumCNPJCPFCorrente <> '') or (CodPessoaCorrente > 0) then
          begin
            Mensagens.Adicionar(659, Self.ClassName, NomeMetodo, []);
            Result := -659;
            Exit;
          end;

          Result := VerificaFazenda(CodFazendaCorrente, True, 'Fazenda atual do animal');
          if Result < 0 then
          begin
            Exit;
          end;

          Result := VerificaLocal(CodFazendaCorrente, CodLocalCorrente);
          if Result < 0 then
          begin
            Exit;
          end;

          if CodLoteCorrente > 0 then
          begin
            Result := VerificaLote(CodFazendaCorrente, CodLoteCorrente);
            if Result < 0 then
            begin
              Exit;
            end;
          end;
        end;
        2: begin  // Propriedade Rural
          if (CodFazendaCorrente > 0) or (CodLocalCorrente > 0)
             or (CodLoteCorrente > 0) or (NumCNPJCPFCorrente <> '')
             or (CodPessoaCorrente > 0) then
          begin
            Mensagens.Adicionar(662, Self.ClassName, NomeMetodo, []);
            Result := -662;
            Exit;
          end;

          if (NumImovelCorrente = '') and (CodPropriedadeCorrente <= 0) then
          begin
            Mensagens.Adicionar(664, Self.ClassName, NomeMetodo, []);
            Result := -664;
            Exit;
          end;

          if NumImovelCorrente <> '' then
          begin
            if CodPropriedadeCorrente > 0 then
            begin
              Mensagens.Adicionar(663, Self.ClassName, NomeMetodo, []);
              Result := -663;
              Exit;
            end
            else
            if not ValidaNirfIncra(NumImovelCorrente, True) then
            begin
              Mensagens.Adicionar(494, Self.ClassName, NomeMetodo, [NumImovelCorrente]);
              Result := -494;
              Exit;
            end;
          end;

          if CodPropriedadeCorrente > 0 then
          begin
            if NumImovelCorrente <> '' then
            begin
              Mensagens.Adicionar(663, Self.ClassName, NomeMetodo, []);
              Result := -663;
              Exit;
            end
            else
            begin
              Result := VerificaPropriedadeRural(CodPropriedadeCorrente, True, 'Propriedade rural onde está o animal', NumImovelCorrente);
              if Result < 0 then
              begin
                Exit;
              end;
            end;
          end;
        end;
        3: begin  // Aglomeração
          if (CodFazendaCorrente > 0) or (CodLocalCorrente > 0)
             or (CodLoteCorrente > 0) or (NumImovelCorrente <> '')
             or (CodPropriedadeCorrente > 0) then
          begin
            Mensagens.Adicionar(665, Self.ClassName, NomeMetodo, []);
            Result := -665;
            Exit;
          end;

          if (NumCNPJCPFCorrente = '') and (CodPessoaCorrente <= 0) then
          begin
            Mensagens.Adicionar(666, Self.ClassName, NomeMetodo, []);
            Result := -666;
            Exit;
          end;

          if NumCNPJCPFCorrente <> '' then
          begin
            if CodPessoaCorrente > 0 then
            begin
              Mensagens.Adicionar(667, Self.ClassName, NomeMetodo, []);
              Result := -667;
              Exit;
            end
            else
            begin
              Result := VerificaCNPJCPF(NumCNPJCPFCorrente);
              if Result < 0 then
              begin
                Exit;
              end;
            end;
          end;

          if CodPessoaCorrente > 0 then
          begin
            if NumCNPJCPFCorrente <> '' then
            begin
              Mensagens.Adicionar(667, Self.ClassName, NomeMetodo, []);
              Result := -667;
              Exit;
            end
            else
            begin
              Result := VerificaPessoa(CodPessoaCorrente, 3, True, 'Aglomeração do animal');
              if Result < 0 then
              begin
                Exit;
              end;
            end;
          end;
        end;
      else
        Mensagens.Adicionar(657, Self.ClassName, NomeMetodo, []);
        Result := -657;
        Exit;
      end;

      Q.Close;
    finally
      Q.Free;
    end;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(496, Self.ClassName, NomeMetodo,
        [E.Message, 'localização atual do animal']);
      Result := -496;
      Exit;
    end;
  end;
end;

function TIntAnimais.VerificaLocal(CodFazenda, CodLocal: Integer): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste local
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ');
      Q.SQL.Add('  from tab_local ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
      Q.SQL.Add('   and cod_local = :cod_local ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local').AsInteger := CodLocal;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(660, Self.ClassName, 'VerificaLocal', []);
        Result := -660;
        Exit;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaLocal', [E.Message, 'local do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaLote(CodFazenda, CodLote: Integer): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste local
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ');
      Q.SQL.Add('  from tab_lote ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
      Q.SQL.Add('   and cod_lote = :cod_lote ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_lote').AsInteger := CodLote;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(661, Self.ClassName, 'VerificaLote', []);
        Result := -661;
        Exit;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaLote', [E.Message, 'lote do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCNPJCPF(NumCNPJCPF: String): Integer;
begin
  Result := 0;
  if (Length(NumCNPJCPF) <> 14) and (Length(NumCNPJCPF) <> 11) then begin
    Mensagens.Adicionar(668, Self.ClassName, 'VerificaCNPJCPF', [NumCNPJCPF]);
    Result := -668;
    Exit;
  end;
  if Length(NumCNPJCPF) = 14 then begin
    if not VerificarCnpjCpf(Copy(NumCNPJCPF, 1, 12), NumCNPJCPF, ValorParametro(128)) then begin
      Mensagens.Adicionar(424, Self.ClassName, 'VerificaCNPJCPF', []);
      Result := -424;
      Exit;
    end;
  end else begin
    if not VerificarCnpjCpf(Copy(NumCNPJCPF, 1, 9), Copy(NumCNPJCPF, 10, 2), ValorParametro(128)) then begin
      Mensagens.Adicionar(424, Self.ClassName, 'VerificaCNPJCPF', []);
      Result := -424;
      Exit;
    end;
  end;
end;

function TIntAnimais.VerificaPessoa(CodPessoa, CodPapel: Integer;
  IndObrigatorio: Boolean; NomeCampo: String): Integer;
var
  Q : THerdomQuery;
begin
  if CodPessoa <= 0 then begin
    if IndObrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, 'VerificaPessoa', [NomeCampo]);
      Result := -309;
      Exit;
    end else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      if CodPapel <= 0 then begin
        Q.SQL.Add('select 1 from tab_pessoa ');
        Q.SQL.Add(' where cod_pessoa = :cod_pessoa ');
        Q.SQL.Add('   and dta_fim_validade is null ');
      end else begin
        Q.SQL.Add('select 1 from tab_pessoa tp, tab_pessoa_papel tpp');
        Q.SQL.Add(' where tpp.cod_pessoa = tp.cod_pessoa ');
        Q.SQL.Add('   and tp.cod_pessoa = :cod_pessoa ');
        Q.SQL.Add('   and tpp.cod_papel = :cod_papel ');
        Q.SQL.Add('   and tp.dta_fim_validade is null ');
        Q.SQL.Add('   and tpp.dta_fim_validade is null ');
        Q.ParamByName('cod_papel').AsInteger := CodPapel;
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa').AsInteger := CodPessoa;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, 'VerificaPessoa', [NomeCampo]);
        Result := -497;
        Exit;
      end;
      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaPessoa', [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaRegimeAlimentar(CodRegimeAlimentar,
  CodTipoLugar, CodFazenda, CodLocal, CodCategoriaAnimal,
  CodAptidao: Integer): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Consiste regime alimentar (R29, R33)
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tra.ind_animal_mamando ');
      Q.SQL.Add('  from tab_regime_alimentar tra, ');
      Q.SQL.Add('       tab_regime_alimentar_aptidao traa ');
      Q.SQL.Add(' where traa.cod_regime_alimentar = tra.cod_regime_alimentar ');
      Q.SQL.Add('   and tra.cod_regime_alimentar = :cod_regime_alimentar ');
      Q.SQL.Add('   and traa.cod_aptidao = :cod_aptidao ');
      Q.SQL.Add('   and tra.dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegimeAlimentar;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(669, Self.ClassName, 'VerificaRegimeAlimentar', []);
        Result := -669;
        Exit;
      end;

      // Consiste compatibilidade com a categoria (R11)
      if (CodCategoriaAnimal = 1) and (Q.FieldByName('ind_animal_mamando').AsString = 'N') then begin
        Mensagens.Adicionar(670, Self.ClassName, 'VerificaRegimeAlimentar', []);
        Result := -670;
        Exit;
      end;

      // Consiste compatibilidade com a categoria (R11)
      if (CodCategoriaAnimal <> 1) and (Q.FieldByName('ind_animal_mamando').AsString = 'S') then begin
        Mensagens.Adicionar(670, Self.ClassName, 'VerificaRegimeAlimentar', []);
        Result := -670;
        Exit;
      end;

      // Consiste compatibilidade com o local (R10) (somente para tipo lugar fazenda)
      if CodTipoLugar = 1 then begin
        Q.Close;
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ');
        Q.SQL.Add('  from tab_local_regime_alimentar ');
        Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
        Q.SQL.Add('   and cod_local = :cod_local ');
        Q.SQL.Add('   and cod_regime_alimentar = :cod_regime_alimentar ');
  {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
        Q.ParamByName('cod_local').AsInteger := CodLocal;
        Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegimeAlimentar;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(671, Self.ClassName, 'VerificaRegimeAlimentar', []);
          Result := -671;
          Exit;
        end;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaRegimeAlimentar', [E.Message, 'regime alimentar do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.InserirAnimal(ECodFazendaManejo: Integer;
                                   ECodAnimalManejo,
                                   ECodAnimalCertificadora: String;
                                   ECodPaisSisBov,
                                   ECodEstadoSisBov,
                                   ECodMicroRegiaoSisBov,
                                   ECodAnimalSisbov,
                                   ENumDVSisbov: Integer;
                                   ECodSituacaoSisbov: String;
                                   EDtaIdentificacaoSisbov: TDateTime;
                                   ENumImovelIdentificacao: String;
                                   ECodLocalizacaoIdentificacao,
                                   ECodPropriedadeIdentificacao,
                                   ECodFazendaIdentificacao: Integer;
                                   EDtaNascimento: TDateTime;
                                   ENumImovelNascimento: String;
                                   ECodLocalizacaoNascimento,
                                   ECodPropriedadeNascimento,
                                   ECodFazendaNascimento: Integer;
                                   EDtaCompra: TDatetime;
                                   ECodPessoaSecundariaCriador: Integer;
                                   ENomAnimal,
                                   EDesApelido: String;
                                   ECodAssociacaoRaca,
                                   ECodGrauSangue: Integer;
                                   ENumRGD,
                                   ENumTransponder: String;
                                   ECodTipoIdentificador1,
                                   ECodPosicaoIdentificador1,
                                   ECodTipoIdentificador2,
                                   ECodPosicaoIdentificador2,
                                   ECodTipoIdentificador3,
                                   ECodPosicaoIdentificador3,
                                   ECodTipoIdentificador4,
                                   ECodPosicaoIdentificador4,
                                   ECodEspecie,
                                   ECodAptidao,
                                   ECodRaca,
                                   ECodPelagem: Integer;
                                   EIndSexo: String;
                                   ECodTipoOrigem,
                                   ECodReprodutorMultiplo,
                                   ECodAnimalPai,
                                   ECodAnimalMae,
                                   ECodAnimalReceptor: Integer;
                                   EIndAnimalCastrado: String;
                                   ECodRegimeAlimentar,
                                   ECodCategoriaAnimal,
                                   ECodTipoLugar,
                                   ECodLoteCorrente,
                                   ECodLocalCorrente,
                                   ECodFazendaCorrente: Integer;
                                   ENumImovelCorrente: String;
                                   ECodPropriedadeCorrente: Integer;
                                   ENumCNPJCPFCorrente: String;
                                   ECodPessoaCorrente,
                                   ECodPessoaSecundariaCorrente,
                                   ECodPaisOrigem: Integer;
                                   EDesPropriedadeOrigem: String;
                                   EDtaAutorizacaoImportacao,
                                   EDtaEntradaPais: TDatetime;
                                   ENumGuiaImportacao,
                                   ENumLicencaImportacao,
                                   ETxtObservacao,
                                   EOrigem,
                                   ENumGta: String;
                                   EDtaEmissaoGta: TDateTime;
                                   ENumNotaFiscal: Integer;
                                   EUsarSisbov: Boolean;
                                   ECodMetodo: Integer;
                                   EInsercaoMultipla: Boolean;
                                   ECodAni,
                                   ECodLog,
                                   ECodReg: Integer;
                                   EIndCodSisBovReservado,
                                   ECodAutenticacaoSisbov: String;
                                   ECodArquivoSisbov,
                                   ECodArquivoImportacao,
                                   ECodPessoaTecnico: Integer;
                                   EnumCNPJCPFTecnico: String;
                                   var EMsgTecnicoOS,
                                   EMsgIdentificadorOS: Boolean): Integer;
Const
   NomMetodo: String = 'InserirAnimal';
var
  Q : THerdomQuery;
  X, CodAnimal, CodRegistroLog, CodLogOperacao: Integer;
  SLog, S : String;
  CodTecnico, CodOrdemServico: Integer;
  IndAssociacaoTecnicoAnimal: String;
  DataNoventena: TDateTime;
begin
  DataNoventena := Date + 90;
  // Insere animal
  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      FQueryAux.SQLConnection := Conexao.SQLConnection;

      // Se ambas as informações forem informadas informar erro!
      if (ECodPessoaTecnico > 0) and (Length(Trim(EnumCNPJCPFTecnico)) > 0) then begin
         Mensagens.Adicionar(1704, Self.ClassName, NomMetodo, []);
         Result := -1704;
         Exit;
      end;

      //Busca o Código do técnico do produtor a partir do CNPJCPF informado
      if (Length(Trim(EnumCNPJCPFTecnico)) > 0) then
      begin
        Q.SQL.Clear;
        Q.SQL.Add(' select tp.cod_pessoa ' +
                  ' from ' +
                  '     tab_pessoa tp ' +
                  '   , tab_tecnico_produtor ttp' +
                  ' where ' +
                  '      tp.cod_pessoa = ttp.cod_pessoa_tecnico ' +
                  '  and tp.num_cnpj_cpf = :num_cnpj_cpf ' +
                  '  and ttp.dta_fim_validade is null ' +
                  '  and tp.dta_fim_validade is null ');
        Q.SQL.Add('and ttp.cod_pessoa_produtor = :cod_pessoa_produtor_corrente ');
        Q.ParamByName('num_cnpj_cpf').AsString := EnumCNPJCPFTecnico;
        Q.ParamByName('cod_pessoa_produtor_corrente').AsInteger := Conexao.CodProdutorTrabalho;
        Q.Open;
        //Verifica se o CNPJCPF informado é uma pessoa cadastrada no sistema, se não estiver lança mensagem informativa e aborta op.
        if Q.IsEmpty then
        begin
          Mensagens.Adicionar(1705, Self.ClassName, NomMetodo, []);
          Result := -1705;
          Exit;
        end;
      end;

      // Se o usuário logado for um técnico
      if (Conexao.CodPapelUsuario = 3) then
      begin
         CodTecnico := Conexao.CodPessoa;
      end
      else
      begin
         if ECodPessoaTecnico > 0 then
         begin
           CodTecnico := ECodPessoaTecnico;
         end
         else if Length(Trim(EnumCNPJCPFTecnico)) > 0 then
         begin
           CodTecnico := Q.FieldByName('cod_pessoa').AsInteger;
         end
         else
         begin
           CodTecnico := -1;
         end;
      end;
      
      IndAssociacaoTecnicoAnimal := ValorParametro(107);
      if (UpperCase(IndAssociacaoTecnicoAnimal) = 'S') and
         ((ECodPessoaTecnico <= 0) and (Length(Trim(EnumCNPJCPFTecnico)) = 0)) then
      begin
         Mensagens.Adicionar(2192, Self.ClassName, NomMetodo, []);
         Result := -2192;
         Exit;
      end;

      if (Conexao.CodPapelUsuario = 9) and
         (CodTecnico > 0) then
      begin
        Q.SQL.Clear;
        Q.SQL.Add(' select 1 ');
        Q.SQL.Add('   from tab_tecnico tt ');
        Q.SQL.Add('      , tab_tecnico_produtor ttp ');
        Q.SQL.Add('  where tt.cod_pessoa_tecnico = ttp.cod_pessoa_tecnico ');
        Q.SQL.Add('    and tt.cod_pessoa_tecnico = :cod_pessoa_tecnico ');
        Q.SQL.Add('    and tt.cod_pessoa_gestor  = :cod_pessoa_gestor ');
        Q.SQL.Add('    and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('    and tt.dta_fim_validade is null ');
        Q.SQL.Add('    and ttp.dta_fim_validade is null ');
        Q.ParamByName('cod_pessoa_tecnico').AsInteger := CodTecnico;
        Q.ParamByName('cod_pessoa_gestor').AsInteger  := Conexao.CodPessoa;
        Q.ParamByName('cod_pessoa_produtor').AsInteger  := Conexao.CodProdutorTrabalho;
        Q.Open;

        if Q.IsEmpty then
        begin
          Mensagens.Adicionar(2191, Self.ClassName, NomMetodo, []);
          Result := -2191;
          Exit
        end;
      end;

      //Verifica se o Técnico atende o produtor corrente, caso contrário lança mensagem informando e aborta op.
      if CodTecnico > 0 then
      begin
        Q.SQL.Clear;
        Q.SQL.Add(' select 1 from tab_tecnico_produtor ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_pessoa_tecnico  = :cod_pessoa_tecnico ' +
                  '   and dta_fim_validade    is null ');
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_pessoa_tecnico').AsInteger  := CodTecnico;
        Q.Open;
        if (Q.IsEmpty) or
           ((Conexao.CodPapelUsuario = 3) and (CodTecnico <> Conexao.CodPessoa)) then
        begin
          Mensagens.Adicionar(1705, Self.ClassName, NomMetodo, []);
          Result := -1705;
          Exit;
        end;
      end;

      if not EInsercaoMultipla then
      begin
        // Abre transação
        BeginTran;

        // Pega próximo código de animal
        CodAnimal := ProximoCodAnimal;
        if CodAnimal < 0 then
        begin
          Rollback;
          Result := CodAnimal;
          Exit;
        end;

        // Pega próximo CodRegistroLog
        CodRegistroLog := ProximoCodRegistroLog;
        if CodRegistroLog < 0 then begin
          Rollback;
          Result := CodRegistroLog;
          Exit;
        end;
        // Abre transação para buscar sequencial
        BeginTran;
        // Pega próximo CodLogOperacao
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_sequencia_codigo');
        Q.SQL.Add('   set cod_log_operacao = cod_log_operacao + 1');
        {$ENDIF}
        Q.ExecSQL;
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select cod_log_operacao from tab_sequencia_codigo');
        {$ENDIF}
        Q.Open;
        if Q.IsEmpty then
        begin
          Mensagens.Adicionar(206, Self.ClassName, 'GravaLogOperacao', []);
          Result := -206;
          Rollback;
          Exit;
        end;
        CodLogOperacao := Q.FieldByName('cod_log_operacao').AsInteger;
        Q.Close;

        // Fecha transação da busca do sequencial
        Commit;
      end
      else
      begin
        CodAnimal := ECodAni;
        CodRegistroLog := ECodReg;
        CodLogOperacao := ECodLog;
      end;

      SLog := '';

      // Passa parâmetros para a Query de Insert
      FQueryAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      SLog := SLog + IntToStr(Conexao.CodProdutorTrabalho) + ',';

      FQueryAux.ParamByName('cod_animal').AsInteger := CodAnimal;
      SLog := SLog + IntToStr(CodAnimal) + ',';

      if ECodFazendaManejo > 0 then
      begin
        FQueryAux.ParamByName('cod_fazenda_manejo').AsInteger := ECodFazendaManejo;
        SLog := SLog + IntToStr(ECodFazendaManejo) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_fazenda_manejo').DataType := ftInteger;
        FQueryAux.ParamByName('cod_fazenda_manejo').Clear;
        SLog := SLog + '<NULL>,';
      end;

      FQueryAux.ParamByName('cod_animal_manejo').AsString := ECodAnimalManejo;
      SLog := SLog + '"' + ECodAnimalManejo + '",';

      if ECodAnimalCertificadora <> '' then
      begin
        FQueryAux.ParamByName('cod_animal_certificadora').AsString := ECodAnimalCertificadora;
        SLog := SLog + '"' + ECodAnimalCertificadora + '",';
      end
      else
      begin
        FQueryAux.ParamByName('cod_animal_certificadora').DataType := ftString;
        FQueryAux.ParamByName('cod_animal_certificadora').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPaisSisbov > 0 then
      begin
        FQueryAux.ParamByName('cod_pais_sisbov').AsInteger := ECodPaisSisbov;
        SLog := SLog + IntToStr(ECodPaisSisbov) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_pais_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('cod_pais_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodEstadoSisbov > 0 then
      begin
        FQueryAux.ParamByName('cod_estado_sisbov').AsInteger := ECodEstadoSisbov;
        SLog := SLog + IntToStr(ECodEstadoSisbov) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_estado_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('cod_estado_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodMicroRegiaoSisbov >= -1 then
      begin
        FQueryAux.ParamByName('cod_micro_regiao_sisbov').AsInteger := ECodMicroRegiaoSisbov;
        SLog := SLog + IntToStr(ECodMicroRegiaoSisbov) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_micro_regiao_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('cod_micro_regiao_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if (ECodAnimalSisBov > 0) and (ECodTipoOrigem <> 4) then
      begin
        // verifica se o código sisbov está reservado para este produtor
        Q.Close;
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add(' select cod_ordem_servico from tab_codigo_sisbov ');
        Q.SQL.Add(' where cod_animal_sisbov = :cod_animal_sisbov ');
        Q.SQL.Add(' and   cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
        Q.SQL.Add(' and   cod_estado_sisbov = :cod_estado_sisbov ');
        Q.SQL.Add(' and   cod_pais_sisbov = :cod_pais_sisbov ');
        Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
        {$ENDIF}
        Q.Parambyname('cod_animal_sisbov').AsInteger       := ECodAnimalSisBov;
        Q.Parambyname('cod_pais_sisbov').AsInteger         := ECodPaisSisBov;
        Q.Parambyname('cod_estado_sisbov').AsInteger       := ECodEstadoSisBov;
        Q.Parambyname('cod_micro_regiao_sisbov').AsInteger := ECodMicroRegiaoSisBov;
        Q.Parambyname('cod_pessoa_produtor').AsInteger     := Conexao.CodProdutorTrabalho;
        Q.Open;
        if Q.IsEmpty then
        begin
          if not ((ECodTipoOrigem = 2) and (ECodSituacaoSisbov = 'I')) then
          begin
            Mensagens.Adicionar(1589, Self.ClassName, 'InserirAnimal (' + EOrigem + ')', []);
            Result := -1589;
            Rollback;
            Exit;
          end;
          CodOrdemServico := -1;
        end
        else
        begin
          CodOrdemServico := Q.FieldByName('cod_ordem_servico').AsInteger;
        end;

        // Verifica se o código SISBOV está associado a uma OS
        if CodOrdemServico > 0 then
        begin
          Q.Close;
          Q.SQL.Text :=
          {$IFDEF MSSQL}
            'select ' +
            '  top 1 ' +
            '  tos.cod_pessoa_tecnico ' +
            '  , tos.cod_identificacao_dupla ' +
            '  , tidti.cod_tipo_identificador_1 ' +
            '  , tti1.cod_grupo_identificador as cod_grupo_identificador_1 ' +
            '  , tidti.cod_tipo_identificador_2 ' +
            '  , tti2.cod_grupo_identificador as cod_grupo_identificador_2 ' +
            'from ' +
            '  tab_ordem_servico tos ' +
            '  left outer join tab_ident_dupla_tipo_ident tidti on ' +
            '    tos.cod_identificacao_dupla = tidti.cod_identificacao_dupla ' +
            '    and tidti.cod_tipo_identificador_1 is not null ' +
            '  left outer join tab_tipo_identificador tti1 on ' +
            '    tidti.cod_tipo_identificador_1 = tti1.cod_tipo_identificador ' +
            '  left outer join tab_tipo_identificador tti2 on ' +
            '    tidti.cod_tipo_identificador_2 = tti2.cod_tipo_identificador ' +
            'where ' +
            '  tos.cod_ordem_servico = :cod_ordem_servico ';
{$ENDIF}
          Q.ParamByName('cod_ordem_servico').AsInteger := CodOrdemServico;
          Q.Open;
          if not Q.IsEmpty then
          begin
            // Verifica se foi informado um técnico para o animal
            if CodTecnico > 0 then
            begin
              // Verifica se o técnico do animal é o técnico da OS
              if CodTecnico <> Q.FieldByName('cod_pessoa_tecnico').AsInteger then
              begin
                // Gera mensagem notificando o usuário da situação de #
                if EMsgTecnicoOS then
                begin
                  Mensagens.Adicionar(1947, Self.ClassName, 'InserirAnimal (' + EOrigem + ')', []);
                  EMsgTecnicoOS := False;
                end;
              end;
            end
            else
            begin
              // Não sendo informado um técnico para o animal, assume para este o técnico da OS
              CodTecnico := Q.FieldByName('cod_pessoa_tecnico').AsInteger;
            end;
            // Verifica se foi informado algum identificador para o animal
            if (ECodTipoIdentificador1 > 0) or
               (ECodTipoIdentificador2 > 0) or
               (ECodTipoIdentificador3 > 0) or
               (ECodTipoIdentificador4 > 0) then
            begin
              // Verifica se os identificadores do animal são os identificadores da OS
              if not ((ECodTipoIdentificador1 = Q.FieldByName('cod_tipo_identificador_1').AsInteger) or
                      (ECodTipoIdentificador2 = Q.FieldByName('cod_tipo_identificador_1').AsInteger) or
                      (ECodTipoIdentificador3 = Q.FieldByName('cod_tipo_identificador_1').AsInteger) or
                      (ECodTipoIdentificador4 = Q.FieldByName('cod_tipo_identificador_1').AsInteger)) or
                     ((Q.FieldByName('cod_tipo_identificador_2').AsInteger > 0) and
                 not ((ECodTipoIdentificador1 = Q.FieldByName('cod_tipo_identificador_2').AsInteger) or
                      (ECodTipoIdentificador2 = Q.FieldByName('cod_tipo_identificador_2').AsInteger) or
                      (ECodTipoIdentificador3 = Q.FieldByName('cod_tipo_identificador_2').AsInteger) or
                      (ECodTipoIdentificador4 = Q.FieldByName('cod_tipo_identificador_2').AsInteger))) then
              begin
                // Gera mensagem notificando o usuário da situação de #
                if EMsgIdentificadorOS then
                begin
                  Mensagens.Adicionar(1948, Self.ClassName, 'InserirAnimal (' + EOrigem + ')', []);
                  EMsgIdentificadorOS := False;
                end;
              end;
            end
            else
            begin
              // Não sendo informado nenhum identificador para o animal, assume os identificadores da OS
              if Q.FieldByName('cod_grupo_identificador_1').AsString = 'C' then
              begin
                ECodTipoIdentificador3 := Q.FieldByName('cod_tipo_identificador_1').AsInteger;
              end
              else if Q.FieldByName('cod_grupo_identificador_1').AsString = 'I' then
              begin
                ECodTipoIdentificador4 := Q.FieldByName('cod_tipo_identificador_1').AsInteger;
              end
              else
              begin
                ECodTipoIdentificador1 := Q.FieldByName('cod_tipo_identificador_1').AsInteger;
              end;

              if Q.FieldByName('cod_tipo_identificador_2').AsInteger > 0 then
              begin
                if Q.FieldByName('cod_grupo_identificador_2').AsString = 'C' then
                begin
                  ECodTipoIdentificador3 := Q.FieldByName('cod_tipo_identificador_2').AsInteger;
                end
                else if Q.FieldByName('cod_grupo_identificador_2').AsString = 'I' then
                begin
                  ECodTipoIdentificador4 := Q.FieldByName('cod_tipo_identificador_2').AsInteger;
                end
                else
                begin
                  ECodTipoIdentificador2 := Q.FieldByName('cod_tipo_identificador_2').AsInteger;
                end;
              end;
            end;
          end;
        end;
      end;

      if ECodAnimalSisbov > 0 then
      begin
        FQueryAux.ParamByName('cod_animal_sisbov').AsInteger := ECodAnimalSisbov;
        SLog := SLog + IntToStr(ECodAnimalSisbov) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_animal_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('cod_animal_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumDVSisbov >= 0 then
      begin
        FQueryAux.ParamByName('num_dv_sisbov').AsInteger := ENumDVSisbov;
        SLog := SLog + IntToStr(ENumDVSisbov) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('num_dv_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('num_dv_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end;

      FQueryAux.ParamByName('cod_situacao_sisbov').AsString := ECodSituacaoSisbov;
      SLog := SLog + '"' + ECodSituacaoSisbov + '",';

      if ECodSituacaoSisbov = 'I' then
      begin
        FQueryAux.ParamByName('dta_efetivacao_cadastro').AsDateTime := DtaSistema;
      end
      else
      begin
        FQueryAux.ParamByName('dta_efetivacao_cadastro').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_efetivacao_cadastro').Clear;
      end;

      if EDtaIdentificacaoSisbov > 0 then
      begin
        FQueryAux.ParamByName('dta_identificacao_sisbov').AsDateTime := Trunc(EDtaIdentificacaoSisbov);
        SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', EDtaIdentificacaoSisbov) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('dta_identificacao_sisbov').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_identificacao_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumImovelIdentificacao <> '' then
      begin
        FQueryAux.ParamByName('num_imovel_identificacao').AsString := ENumImovelIdentificacao;
        SLog := SLog + '"' + ENumImovelIdentificacao + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_imovel_identificacao').DataType := ftString;
        FQueryAux.ParamByName('num_imovel_identificacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodLocalizacaoIdentificacao > 0 then
      begin
        FQueryAux.ParamByName('cod_localizacao_identificacao').AsInteger := ECodLocalizacaoIdentificacao;
        SLog := SLog + IntToStr(ECodLocalizacaoIdentificacao) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_localizacao_identificacao').DataType := ftInteger;
        FQueryAux.ParamByName('cod_localizacao_identificacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPropriedadeIdentificacao > 0 then
      begin
        FQueryAux.ParamByName('cod_propriedade_identificacao').AsInteger := ECodPropriedadeIdentificacao;
        SLog := SLog + IntToStr(ECodPropriedadeIdentificacao) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_propriedade_identificacao').DataType := ftInteger;
        FQueryAux.ParamByName('cod_propriedade_identificacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodFazendaIdentificacao > 0 then
      begin
        FQueryAux.ParamByName('cod_fazenda_identificacao').AsInteger := ECodFazendaIdentificacao;
        SLog := SLog + IntToStr(ECodFazendaIdentificacao) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_fazenda_identificacao').DataType := ftInteger;
        FQueryAux.ParamByName('cod_fazenda_identificacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDtaNascimento > 0 then
      begin
        FQueryAux.ParamByName('dta_nascimento').AsDateTime := Trunc(EDtaNascimento);
        SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', EDtaNascimento) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('dta_nascimento').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_nascimento').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumImovelNascimento <> '' then
      begin
        FQueryAux.ParamByName('num_imovel_nascimento').AsString := ENumImovelNascimento;
        SLog := SLog + '"' + ENumImovelNascimento + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_imovel_nascimento').DataType := ftString;
        FQueryAux.ParamByName('num_imovel_nascimento').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodLocalizacaoNascimento > 0 then
      begin
        FQueryAux.ParamByName('cod_localizacao_nascimento').AsInteger := ECodLocalizacaoNascimento;
        SLog := SLog + IntToStr(ECodLocalizacaoNascimento) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_localizacao_nascimento').DataType := ftInteger;
        FQueryAux.ParamByName('cod_localizacao_nascimento').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPropriedadeNascimento > 0 then
      begin
        FQueryAux.ParamByName('cod_propriedade_nascimento').AsInteger := ECodPropriedadeNascimento;
        SLog := SLog + IntToStr(ECodPropriedadeNascimento) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_propriedade_nascimento').DataType := ftInteger;
        FQueryAux.ParamByName('cod_propriedade_nascimento').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodFazendaNascimento > 0 then
      begin
        FQueryAux.ParamByName('cod_fazenda_nascimento').AsInteger := ECodFazendaNascimento;
        SLog := SLog + IntToStr(ECodFazendaNascimento) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_fazenda_nascimento').DataType := ftInteger;
        FQueryAux.ParamByName('cod_fazenda_nascimento').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDtaCompra > 0 then
      begin
        FQueryAux.ParamByName('dta_compra').AsDateTime := Trunc(EDtaCompra);
        SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', EDtaCompra) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('dta_compra').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_compra').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPessoaSecundariaCriador > 0 then
      begin
        FQueryAux.ParamByName('cod_pessoa_secundaria_criador').AsInteger := ECodPessoaSecundariaCriador;
        SLog := SLog + IntToStr(ECodPessoaSecundariaCriador) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_pessoa_secundaria_criador').DataType := ftInteger;
        FQueryAux.ParamByName('cod_pessoa_secundaria_criador').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENomAnimal <> '' then
      begin
        FQueryAux.ParamByName('nom_animal').AsString := ENomAnimal;
        S := ENomAnimal;
        while Pos('"', S) > 0 do
        begin
          S[Pos('"', S)] := '´';
        end;
        SLog := SLog + '"' + S + '",';
      end
      else
      begin
        FQueryAux.ParamByName('nom_animal').DataType := ftString;
        FQueryAux.ParamByName('nom_animal').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDesApelido <> '' then
      begin
        FQueryAux.ParamByName('des_apelido').AsString := EDesApelido;
        S := EDesApelido;
        while Pos('"', S) > 0 do
        begin
          S[Pos('"', S)] := '´';
        end;
        SLog := SLog + '"' + S + '",';
      end
      else
      begin
        FQueryAux.ParamByName('des_apelido').DataType := ftString;
        FQueryAux.ParamByName('des_apelido').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodAssociacaoRaca > 0 then
      begin
        FQueryAux.ParamByName('cod_associacao_raca').AsInteger := ECodAssociacaoRaca;
        SLog := SLog + IntToStr(ECodAssociacaoRaca) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_associacao_raca').DataType := ftInteger;
        FQueryAux.ParamByName('cod_associacao_raca').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodGrauSangue > 0 then
      begin
        FQueryAux.ParamByName('cod_grau_sangue').AsInteger := ECodGrauSangue;
        SLog := SLog + IntToStr(ECodGrauSangue) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_grau_sangue').DataType := ftInteger;
        FQueryAux.ParamByName('cod_grau_sangue').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumRGD <> '' then
      begin
        FQueryAux.ParamByName('num_rgd').AsString := ENumRGD;
        SLog := SLog + '"' + ENumRGD + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_rgd').DataType := ftString;
        FQueryAux.ParamByName('num_rgd').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumTransponder <> '' then
      begin
        FQueryAux.ParamByName('num_transponder').AsString := ENumTransponder;
        SLog := SLog + '"' + ENumTransponder + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_transponder').DataType := ftString;
        FQueryAux.ParamByName('num_transponder').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodTipoIdentificador1 > 0 then
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_1').AsInteger := ECodTipoIdentificador1;
        SLog := SLog + IntToStr(ECodTipoIdentificador1) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_1').DataType := ftInteger;
        FQueryAux.ParamByName('cod_tipo_identificador_1').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPosicaoIdentificador1 > 0 then
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_1').AsInteger := ECodPosicaoIdentificador1;
        SLog := SLog + IntToStr(ECodPosicaoIdentificador1) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_1').DataType := ftInteger;
        FQueryAux.ParamByName('cod_posicao_identificador_1').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodTipoIdentificador2 > 0 then
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_2').AsInteger := ECodTipoIdentificador2;
        SLog := SLog + IntToStr(ECodTipoIdentificador2) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_2').DataType := ftInteger;
        FQueryAux.ParamByName('cod_tipo_identificador_2').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPosicaoIdentificador2 > 0 then
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_2').AsInteger := ECodPosicaoIdentificador2;
        SLog := SLog + IntToStr(ECodPosicaoIdentificador2) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_2').DataType := ftInteger;
        FQueryAux.ParamByName('cod_posicao_identificador_2').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodTipoIdentificador3 > 0 then
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_3').AsInteger :=
        ECodTipoIdentificador3;
        SLog := SLog + IntToStr(ECodTipoIdentificador3) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_3').DataType := ftInteger;
        FQueryAux.ParamByName('cod_tipo_identificador_3').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPosicaoIdentificador3 > 0 then
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_3').AsInteger := ECodPosicaoIdentificador3;
        SLog := SLog + IntToStr(ECodPosicaoIdentificador3) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_3').DataType := ftInteger;
        FQueryAux.ParamByName('cod_posicao_identificador_3').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodTipoIdentificador4 > 0 then
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_4').AsInteger := ECodTipoIdentificador4;
        SLog := SLog + IntToStr(ECodTipoIdentificador4) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_tipo_identificador_4').DataType := ftInteger;
        FQueryAux.ParamByName('cod_tipo_identificador_4').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPosicaoIdentificador4 > 0 then
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_4').AsInteger := ECodPosicaoIdentificador4;
        SLog := SLog + IntToStr(ECodPosicaoIdentificador4) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_posicao_identificador_4').DataType := ftInteger;
        FQueryAux.ParamByName('cod_posicao_identificador_4').Clear;
        SLog := SLog + '<NULL>,';
      end;

      FQueryAux.ParamByName('cod_especie').AsInteger := ECodEspecie;
      SLog := SLog + IntToStr(ECodEspecie) + ',';

      FQueryAux.ParamByName('cod_aptidao').AsInteger := ECodAptidao;
      SLog := SLog + IntToStr(ECodAptidao) + ',';

      FQueryAux.ParamByName('cod_raca').AsInteger := ECodRaca;
      SLog := SLog + IntToStr(ECodRaca) + ',';

      FQueryAux.ParamByName('cod_pelagem').AsInteger := ECodPelagem;
      SLog := SLog + IntToStr(ECodPelagem) + ',';

      FQueryAux.ParamByName('ind_sexo').AsString := EIndSexo;
      SLog := SLog + '"' + EIndSexo + '",';

      FQueryAux.ParamByName('cod_tipo_origem').AsInteger := ECodTipoOrigem;
      SLog := SLog + IntToStr(ECodTipoOrigem) + ',';

      if ECodReprodutorMultiplo > 0 then
      begin
        FQueryAux.ParamByName('cod_reprodutor_multiplo').AsInteger := ECodReprodutorMultiplo;
        SLog := SLog + IntToStr(ECodReprodutorMultiplo) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_reprodutor_multiplo').DataType := ftInteger;
        FQueryAux.ParamByName('cod_reprodutor_multiplo').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodAnimalPai > 0 then
      begin
        FQueryAux.ParamByName('cod_animal_pai').AsInteger := ECodAnimalPai;
        SLog := SLog + IntToStr(ECodAnimalPai) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_animal_pai').DataType := ftInteger;
        FQueryAux.ParamByName('cod_animal_pai').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodAnimalMae > 0 then
      begin
        FQueryAux.ParamByName('cod_animal_mae').AsInteger := ECodAnimalMae;
        SLog := SLog + IntToStr(ECodAnimalMae) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_animal_mae').DataType := ftInteger;
        FQueryAux.ParamByName('cod_animal_mae').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodAnimalReceptor > 0 then
      begin
        FQueryAux.ParamByName('cod_animal_receptor').AsInteger := ECodAnimalReceptor;
        SLog := SLog + IntToStr(ECodAnimalReceptor) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_animal_receptor').DataType := ftInteger;
        FQueryAux.ParamByName('cod_animal_receptor').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EIndAnimalCastrado <> '' then
      begin
        FQueryAux.ParamByName('ind_animal_castrado').AsString := EIndAnimalCastrado;
        SLog := SLog + '"' + EIndAnimalCastrado + '",';
      end
      else
      begin
        FQueryAux.ParamByName('ind_animal_castrado').DataType := ftString;
        FQueryAux.ParamByName('ind_animal_castrado').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodRegimeAlimentar > 0 then
      begin
        FQueryAux.ParamByName('cod_regime_alimentar').AsInteger := ECodRegimeAlimentar;
        SLog := SLog + IntToStr(ECodRegimeAlimentar) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_regime_alimentar').DataType := ftInteger;
        FQueryAux.ParamByName('cod_regime_alimentar').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodCategoriaAnimal > 0 then
      begin
        FQueryAux.ParamByName('cod_categoria_animal').AsInteger := ECodCategoriaAnimal;
        SLog := SLog + IntToStr(ECodCategoriaAnimal) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_categoria_animal').DataType := ftInteger;
        FQueryAux.ParamByName('cod_categoria_animal').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodTipoLugar > 0 then
      begin
        FQueryAux.ParamByName('cod_tipo_lugar').AsInteger := ECodTipoLugar;
        SLog := SLog + IntToStr(ECodTipoLugar) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_tipo_lugar').DataType := ftInteger;
        FQueryAux.ParamByName('cod_tipo_lugar').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodLoteCorrente > 0 then
      begin
        FQueryAux.ParamByName('cod_lote_corrente').AsInteger := ECodLoteCorrente;
        SLog := SLog + IntToStr(ECodLoteCorrente) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_lote_corrente').DataType := ftInteger;
        FQueryAux.ParamByName('cod_lote_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodLocalCorrente > 0 then
      begin
        FQueryAux.ParamByName('cod_local_corrente').AsInteger := ECodLocalCorrente;
        SLog := SLog + IntToStr(ECodLocalCorrente) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_local_corrente').DataType := ftInteger;
        FQueryAux.ParamByName('cod_local_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodFazendaCorrente > 0 then
      begin
        FQueryAux.ParamByName('cod_fazenda_corrente').AsInteger := ECodFazendaCorrente;
        SLog := SLog + IntToStr(ECodFazendaCorrente) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
        FQueryAux.ParamByName('cod_fazenda_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumImovelCorrente <> '' then
      begin
        FQueryAux.ParamByName('num_imovel_corrente').AsString := ENumImovelCorrente;
        SLog := SLog + '"' + ENumImovelCorrente + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_imovel_corrente').DataType := ftString;
        FQueryAux.ParamByName('num_imovel_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPropriedadeCorrente > 0 then
      begin
        FQueryAux.ParamByName('cod_propriedade_corrente').AsInteger := ECodPropriedadeCorrente;
        SLog := SLog + IntToStr(ECodPropriedadeCorrente) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
        FQueryAux.ParamByName('cod_propriedade_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumCNPJCPFCorrente <> '' then
      begin
        FQueryAux.ParamByName('num_cnpj_cpf_corrente').AsString := ENumCNPJCPFCorrente;
        SLog := SLog + '"' + ENumCNPJCPFCorrente + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
        FQueryAux.ParamByName('num_cnpj_cpf_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPessoaCorrente > 0 then
      begin
        FQueryAux.ParamByName('cod_pessoa_corrente').AsInteger := ECodPessoaCorrente;
        SLog := SLog + IntToStr(ECodPessoaCorrente) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
        FQueryAux.ParamByName('cod_pessoa_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPessoaSecundariaCorrente > 0 then
      begin
        FQueryAux.ParamByName('cod_pessoa_secundaria_corrente').AsInteger := ECodPessoaSecundariaCorrente;
        SLog := SLog + IntToStr(ECodPessoaSecundariaCorrente) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_pessoa_secundaria_corrente').DataType := ftInteger;
        FQueryAux.ParamByName('cod_pessoa_secundaria_corrente').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ECodPaisOrigem > 0 then
      begin
        FQueryAux.ParamByName('cod_pais_origem').AsInteger := ECodPaisOrigem;
        SLog := SLog + IntToStr(ECodPaisOrigem) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('cod_pais_origem').DataType := ftInteger;
        FQueryAux.ParamByName('cod_pais_origem').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDesPropriedadeOrigem <> '' then
      begin
        FQueryAux.ParamByName('des_propriedade_origem').AsString := EDesPropriedadeOrigem;
        S := EDesPropriedadeOrigem;
        while Pos('"', S) > 0 do
        begin
          S[Pos('"', S)] := '´';
        end;
        SLog := SLog + '"' + S + '",';
      end
      else
      begin
        FQueryAux.ParamByName('des_propriedade_origem').DataType := ftString;
        FQueryAux.ParamByName('des_propriedade_origem').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDtaAutorizacaoImportacao > 0 then
      begin
        FQueryAux.ParamByName('dta_autorizacao_importacao').AsDateTime := Trunc(EDtaAutorizacaoImportacao);
        SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', EDtaAutorizacaoImportacao) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('dta_autorizacao_importacao').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_autorizacao_importacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDtaEntradaPais > 0 then
      begin
        FQueryAux.ParamByName('dta_entrada_pais').AsDateTime := Trunc(EDtaEntradaPais);
        SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', EDtaEntradaPais) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('dta_entrada_pais').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_entrada_pais').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumGuiaImportacao <> '' then
      begin
        FQueryAux.ParamByName('num_guia_importacao').AsString := ENumGuiaImportacao;
        SLog := SLog + '"' + ENumGuiaImportacao + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_guia_importacao').DataType := ftString;
        FQueryAux.ParamByName('num_guia_importacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumLicencaImportacao <> '' then
      begin
        FQueryAux.ParamByName('num_licenca_importacao').AsString := ENumLicencaImportacao;
        SLog := SLog + '"' + ENumLicencaImportacao + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_licenca_importacao').DataType := ftString;
        FQueryAux.ParamByName('num_licenca_importacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ETxtObservacao <> '' then
      begin
        FQueryAux.ParamByName('txt_observacao').AsString := ETxtObservacao;
        S := ETxtObservacao;
        while Pos('"', S) > 0 do
        begin
          S[Pos('"', S)] := '´';
        end;
        SLog := SLog + '"' + S + '",';
      end
      else
      begin
        FQueryAux.ParamByName('txt_observacao').DataType := ftString;
        FQueryAux.ParamByName('txt_observacao').Clear;
        SLog := SLog + '<NULL>,';
      end;

      SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', Now) + ',';

      SLog := SLog + '<NULL>,';   // dta_efetivacao

      FQueryAux.ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
      SLog := SLog + IntToStr(CodRegistroLog) + ',';

      SLog := SLog + '<NULL>,';   // dta_aplicacao_ultimo_evento

      if ENumGta <> '' then
      begin
        FQueryAux.ParamByName('num_gta').AsString := ENumGta;
        SLog := SLog + '"' + ENumGta + '",';
      end
      else
      begin
        FQueryAux.ParamByName('num_gta').DataType := ftString;
        FQueryAux.ParamByName('num_gta').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if EDtaEmissaoGta > 0 then
      begin
        FQueryAux.ParamByName('dta_emissao_gta').AsDateTime := Trunc(EDtaEmissaoGta);
        SLog := SLog + FormatDateTime('yyyy-mm-dd hh:nn:ss.zzzz', EDtaEmissaoGta) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('dta_emissao_gta').DataType := ftDateTime;
        FQueryAux.ParamByName('dta_emissao_gta').Clear;
        SLog := SLog + '<NULL>,';
      end;

      if ENumNotaFiscal > 0 then
      begin
        FQueryAux.ParamByName('num_nota_fiscal').AsInteger := ENumNotaFiscal;
        SLog := SLog + IntToStr(ENumNotaFiscal) + ',';
      end
      else
      begin
        FQueryAux.ParamByName('num_nota_fiscal').DataType := ftInteger;
        FQueryAux.ParamByName('num_nota_fiscal').Clear;
        SLog := SLog + '<NULL>,';
      end;

      FQueryAux.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaIns(ECodCategoriaAnimal);
      SLog := SLog + '"' + CalculaAptoCoberturaIns(ECodCategoriaAnimal) + '",';

      if CodTecnico <= 0 then
      begin
        FQueryAux.ParamByName('cod_pessoa_tecnico_produtor').DataType := ftInteger;
        FQueryAux.ParamByName('cod_pessoa_tecnico_produtor').Clear;
        SLog := SLog + '<NULL>,';
      end
      else
      begin
        FQueryAux.ParamByName('cod_pessoa_tecnico_produtor').AsInteger := CodTecnico;
        SLog := SLog + '"' + IntToStr(CodTecnico) + '",';
      end;

      SLog := SLog + '<NULL>,<NULL>'; // dta_desativacao, dta_fim_validade

      if EIndCodSisBovReservado = 'S' then
      begin
        FQueryAux.ParamByName('ind_cod_sisbov_reservado').AsString := EIndCodSisBovReservado;
        SLog := SLog + '"' + EIndCodSisBovReservado + '",';
      end
      else
      begin
        FQueryAux.ParamByName('ind_cod_sisbov_reservado').AsString := 'N';
        SLog := SLog + '"' + 'N' + '",';
      end;

      // Para inserção de animais comprados já identificados, será inserido
      // o conteúdo do campo abaixo para o novo animal a ser inserido na base
      if ECodArquivoSisbov <= 0 then
      begin
        FQueryAux.ParamByName('cod_arquivo_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('cod_arquivo_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end
      else
      begin
        FQueryAux.ParamByName('cod_arquivo_sisbov').AsInteger := ECodArquivoSisbov;
        SLog := SLog + '"' + InttoStr(ECodArquivoSisbov) + '",';
      end;

      // Para inserção de animais comprados já identificados, será inserido
      // o conteúdo do campo abaixo para o novo animal a ser inserido na base
      if ECodArquivoImportacao <= 0 then
      begin
        FQueryAux.ParamByName('cod_arq_import_sisbov').DataType := ftInteger;
        FQueryAux.ParamByName('cod_arq_import_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end
      else
      begin
        FQueryAux.ParamByName('cod_arq_import_sisbov').AsInteger := ECodArquivoImportacao;
        SLog := SLog + '"' + InttoStr(ECodArquivoImportacao) + '",';
      end;

      // Para inserção de animais comprados já identificados, será inserido
      // o conteúdo do campo abaixo para o novo animal a ser inserido na base
      if ECodAutenticacaoSisbov = '' then
      begin
        FQueryAux.ParamByName('cod_autenticacao_sisbov').DataType := ftString;
        FQueryAux.ParamByName('cod_autenticacao_sisbov').Clear;
        SLog := SLog + '<NULL>,';
      end
      else
      begin
        FQueryAux.ParamByName('cod_autenticacao_sisbov').AsString := ECodAutenticacaoSisbov;
        SLog := SLog + '"' + ECodAutenticacaoSisbov + '",';
      end;

      FQueryAux.ParamByName('dta_noventena').AsDateTime := DataNoventena;

      FQueryAux.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacaoAnimal('tab_animal', SLog, CodLogOperacao, CodRegistroLog, 1, ECodMetodo);
      if Result < 0 then
      begin
        Rollback;
        Exit;
      end;

      // Se animal inserido estiver mamando, muda categoria da mãe
      if ECodCategoriaAnimal = 1 then
      begin
        if (ECodAnimalMae > 0) or (ECodAnimalReceptor > 0) then
        begin
          Q.SQL.Clear;
          {$IFDEF MSSQL}
          Q.SQL.Add('update tab_animal ' +
                    '   set cod_categoria_animal = :cod_categoria_animal, ' +
                    '       ind_apto_cobertura = ''N'' ' +
                    ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                    '   and cod_animal = :cod_animal ');
          {$ENDIF}
          // Se aptidão da mãe for "Leite", passa categoria para "Vaca em Lactação"
          // senão passa categoria para "Vaca Parida"
          if FCodAptidaoMae = 2 then
          begin
            Q.ParamByName('cod_categoria_animal').AsInteger := 8;
          end
          else
          begin
            Q.ParamByName('cod_categoria_animal').AsInteger := 6;
          end;
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          if ECodAnimalReceptor > 0 then
          begin
            Q.ParamByName('cod_animal').AsInteger := ECodAnimalReceptor;
          end
          else
          begin
            Q.ParamByName('cod_animal').AsInteger := ECodAnimalMae
          end;
          Q.ExecSQL;
        end;
      end;
      FCodAptidaoMae := 0;

      // Atualiza a situação do código sisbov para "CAD" (2)
      // exceto para os animais externos e importados
      if ECodTipoOrigem in [1, 2, 5, 6] then
      begin
        if (ECodPaisSisbov > -1) and
           (ECodEstadoSisbov > -1) and
           (ECodMicroRegiaoSisbov >= -1) and
           (ECodAnimalSisbov > -1) and
           (ECodSituacaoSisbov = 'P') then
        begin
          Result := FCodigosSisbov.AlterarSituacaoSisbov(ECodPaisSisbov,
                                                         ECodEstadoSisbov,
                                                         ECodMicroRegiaoSisbov,
                                                         ECodAnimalSisbov,
                                                         2);
          if Result < 0 then
          begin
            Exit;
          end;
        end;
      end;

      //grava na composição racial 100% da raca do animal
      // Verifica se a raça é pura
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_raca ');
      Q.SQL.Add(' where cod_raca = :cod_raca ');
      Q.SQL.Add(' and   ind_raca_pura = ''S'' ');
      {$ENDIF}
      Q.ParamByName('cod_raca').AsInteger := ECodRaca;
      Q.Open;
      if not Q.IsEmpty then
      begin
        Q.SQL.Clear;
        CodRegistroLog := ProximoCodRegistroLog;
        if CodRegistroLog < 0 then
        begin
           Rollback;
           Result := CodRegistroLog;
           Exit;
        end;
        {$IFDEF MSSQL}
        Q.SQL.Add('insert into tab_composicao_racial ');
        Q.SQL.Add(' (cod_pessoa_produtor, ');
        Q.SQL.Add('  cod_animal, ');
        Q.SQL.Add('  cod_raca, ');
        Q.SQL.Add('  qtd_composicao_racial, ');
        Q.SQL.Add('  cod_registro_log) ');
        Q.SQL.Add('values ');
        Q.SQL.Add(' (:cod_pessoa_produtor, ');
        Q.SQL.Add('  :cod_animal, ');
        Q.SQL.Add('  :cod_raca, ');
        Q.SQL.Add('  1, ');
        Q.SQL.Add('  :cod_registro_log) ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        Q.ParamByName('cod_raca').AsInteger := ECodRaca;
        Q.ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
        Q.ExecSQL;
        // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
        // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
        Result := GravarLogOperacao('tab_composicao_racial', CodRegistroLog, 1, 404);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;
      end;

      if not EInsercaoMultipla then
      begin
        // Cofirma transação
        Commit;
      end;

      Result := CodAnimal; // Animal inserido com sucesso
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(541, Self.ClassName, 'InserirAnimal (' + EOrigem + ')', [E.Message]);
        Result := -541;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.GravarLogOperacaoAnimal(NomeTabela, TxtDados: String; CodLogOperacao, CodRegistroLog,
  CodOperacao, CodMetodo: Integer): Integer;
const
  NomeMetodo: String = 'GravarLogOperacaoAnimal';
var
  Q : THerdomQuery;
  CodTabela: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Obtem Código da Tabela
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_tabela ' +
                '  from tab_tabela_log ' +
                ' where nom_tabela = :nom_tabela ');
{$ENDIF}
      Q.ParamByName('nom_tabela').AsString := NomeTabela;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(184, Self.ClassName, NomeMetodo, [NomeTabela]);
        Result := -184;
        Exit;
      end;
      CodTabela := Q.FieldByName('cod_tabela').AsInteger;
      Q.Close;

      // Insere registro na tabela tab_log_operacao
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_log_operacao ' +
                ' (cod_log_operacao, ' +
                '  dta_operacao, ' +
                '  cod_operacao, ' +
                '  cod_tabela, ' +
                '  cod_registro_log, ' +
                '  cod_usuario, ' +
                '  txt_dados, ' +
                '  cod_metodo, ' +
                '  cod_produtor) ' +
                'values ' +
                ' (:cod_log_operacao, ' +
                '  getdate(), ' +
                '  :cod_operacao, ' +
                '  :cod_tabela, ' +
                '  :cod_registro_log, ' +
                '  :cod_usuario, ' +
                '  :txt_dados, ' +
                '  :cod_metodo, ' +
                '  :cod_produtor) ');
{$ENDIF}
      Q.ParamByName('cod_log_operacao').AsInteger := CodLogOperacao;
      Q.ParamByName('cod_operacao').AsInteger := CodOperacao;
      Q.ParamByName('cod_tabela').AsInteger := CodTabela;
      Q.ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
      Q.ParamByName('cod_usuario').AsInteger := Conexao.CodUsuario;
      Q.ParamByName('txt_dados').AsMemo := TxtDados;
      Q.ParamByName('cod_metodo').AsInteger := CodMetodo;

      if Conexao.CodProdutor > 0 then begin
        Q.ParamByName('cod_produtor').AsInteger := Conexao.CodProdutor;
      end else begin
        Q.ParamByName('cod_produtor').Datatype := ftInteger;
        Q.ParamByName('cod_produtor').Clear;
      end;
      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;  // desfaz transação se houver uma ativa
//        Rollback('GRAVAR_LOG_OPERACAO');
        Mensagens.Adicionar(185, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -185;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaLocalNascimento(var NumImovelNascimento: String;
  CodPropriedadeNascimento: Integer): Integer;
begin
  Result := 0;

  // Verifica se somente um foi informado (R13)
  if (NumImovelNascimento <> '') and (CodPropriedadeNascimento > 0) then begin
    Mensagens.Adicionar(674, Self.ClassName, 'VerificaLocalIdentificacao', []);
    Result := -674;
    Exit;
  end;

  // Se NumImovelNascimento foi informado, verifica se o mesmo é válido (R26)
  if not ValidaNirfIncra(NumImovelNascimento, False) then begin
    Mensagens.Adicionar(494, Self.ClassName, 'VerificaLocalNascimento', [NumImovelNascimento]);
    Result := -494;
    Exit;
  end;

  // Verifica propriedade de nascimento
  if CodPropriedadeNascimento > 0 then begin
    Result := VerificaPropriedadeRural(CodPropriedadeNascimento, False, 'Propriedade de nascimento do animal', NumImovelNascimento);
    if Result < 0 then begin
      Exit;
    end;
  end;
end;

function TIntAnimais.VerificaPessoaSecundaria(CodPessoa, CodPapel: Integer;
  IndObrigatorio: Boolean; NomeCampo: String): Integer;
var
  Q : THerdomQuery;
begin
  if CodPessoa <= 0 then begin
    if IndObrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, 'VerificaPessoaSecundaria', [NomeCampo]);
      Result := -309;
      Exit;
    end else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      if CodPapel <= 0 then begin
        Q.SQL.Add('select 1 from tab_pessoa_secundaria ');
        Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_pessoa_secundaria = :cod_pessoa_secundaria ');
        Q.SQL.Add('   and dta_fim_validade is null ');
      end else begin
        Q.SQL.Add('select 1 from tab_pessoa_secundaria tp, tab_pessoa_papel_secundario tpp');
        Q.SQL.Add(' where tpp.cod_pessoa_produtor = tp.cod_pessoa_produtor ');
        Q.SQL.Add('   and tpp.cod_pessoa_secundaria = tp.cod_pessoa_secundaria ');
        Q.SQL.Add('   and tp.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and tp.cod_pessoa_secundaria = :cod_pessoa_secundaria ');
        Q.SQL.Add('   and tpp.cod_papel_secundario = :cod_papel_secundario ');
        Q.SQL.Add('   and tp.dta_fim_validade is null ');
        Q.ParamByName('cod_papel_secundario').AsInteger := CodPapel;
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_pessoa_secundaria').AsInteger := CodPessoa;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, 'VerificaPessoaSecundaria', [NomeCampo]);
        Result := -497;
        Exit;
      end;
      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaPessoa', [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

procedure TIntAnimais.MontaQueryInsert;
begin
  FQueryAux.SQL.Clear;
{$IFDEF MSSQL}
  FQueryAux.SQL.Add('insert into tab_animal ' +
                    ' (cod_pessoa_produtor, ' +
                    '  cod_animal, ' +
                    '  cod_fazenda_manejo, ' +
                    '  cod_animal_manejo, ' +
                    '  cod_animal_certificadora, ' +
                    '  cod_pais_sisbov, ' +
                    '  cod_estado_sisbov, ' +
                    '  cod_micro_regiao_sisbov, ' +
                    '  cod_animal_sisbov, ' +
                    '  num_dv_sisbov, ' +
                    '  cod_situacao_sisbov, ' +
                    '  dta_identificacao_sisbov, ' +
                    '  num_imovel_identificacao, ' +
                    '  cod_localizacao_identificacao, ' +
                    '  cod_propriedade_identificacao, ' +
                    '  cod_fazenda_identificacao, ' +
                    '  dta_nascimento, ' +
                    '  num_imovel_nascimento, ' +
                    '  cod_localizacao_nascimento, ' +
                    '  cod_propriedade_nascimento, ' +
                    '  cod_fazenda_nascimento, ' +
                    '  dta_compra, ' +
                    '  cod_pessoa_secundaria_criador, ' +
                    '  nom_animal, ' +
                    '  des_apelido, ' +
                    '  cod_associacao_raca, ' +
                    '  cod_grau_sangue, ' +
                    '  num_rgd, ' +
                    '  num_transponder, ' +
                    '  cod_tipo_identificador_1, ' +
                    '  cod_posicao_identificador_1, ' +
                    '  cod_tipo_identificador_2, ' +
                    '  cod_posicao_identificador_2, ' +
                    '  cod_tipo_identificador_3, ' +
                    '  cod_posicao_identificador_3, ' +
                    '  cod_tipo_identificador_4, ' +
                    '  cod_posicao_identificador_4, ' +
                    '  cod_especie, ' +
                    '  cod_aptidao, ' +
                    '  cod_raca, ' +
                    '  cod_pelagem, ' +
                    '  ind_sexo, ' +
                    '  cod_tipo_origem, ' +
                    '  cod_reprodutor_multiplo, ' +
                    '  cod_animal_pai, ' +
                    '  cod_animal_mae, ' +
                    '  cod_animal_receptor, ' +
                    '  ind_animal_castrado, ' +
                    '  cod_regime_alimentar, ' +
                    '  cod_categoria_animal, ' +
                    '  cod_tipo_lugar, ' +
                    '  cod_lote_corrente, ' +
                    '  cod_local_corrente, ' +
                    '  cod_fazenda_corrente, ' +
                    '  num_imovel_corrente, ' +
                    '  cod_propriedade_corrente, ' +
                    '  num_cnpj_cpf_corrente, ' +
                    '  cod_pessoa_corrente, ' +
                    '  cod_pessoa_secundaria_corrente, ' +
                    '  cod_pais_origem, ' +
                    '  des_propriedade_origem, ' +
                    '  dta_autorizacao_importacao, ' +
                    '  dta_entrada_pais, ' +
                    '  num_guia_importacao, ' +
                    '  num_licenca_importacao, ' +
                    '  txt_observacao, ' +
                    '  dta_cadastramento, ' +
                    '  dta_efetivacao_cadastro, ' +
                    '  cod_arquivo_sisbov, ' +
                    '  num_gta, ' +
                    '  dta_emissao_gta, ' +
                    '  num_nota_fiscal, ' +
                    '  cod_registro_log, ' +
                    '  dta_ultimo_evento, ' +
                    '  ind_apto_cobertura, ' +
                    '  ind_cod_sisbov_reservado, ' +
                    '  cod_autenticacao_sisbov, ' +
                    '  cod_arq_import_sisbov, ' +
                    '  dta_fim_validade, ' +
                    '  cod_pessoa_tecnico, ' +
                    '  dta_noventena) ' +
                    'values ' +
                    ' (:cod_pessoa_produtor, ' +
                    '  :cod_animal, ' +
                    '  :cod_fazenda_manejo, ' +
                    '  :cod_animal_manejo, ' +
                    '  :cod_animal_certificadora, ' +
                    '  :cod_pais_sisbov, ' +
                    '  :cod_estado_sisbov, ' +
                    '  :cod_micro_regiao_sisbov, ' +
                    '  :cod_animal_sisbov, ' +
                    '  :num_dv_sisbov, ' +
                    '  :cod_situacao_sisbov, ' +
                    '  :dta_identificacao_sisbov, ' +
                    '  :num_imovel_identificacao, ' +
                    '  :cod_localizacao_identificacao, ' +
                    '  :cod_propriedade_identificacao, ' +
                    '  :cod_fazenda_identificacao, ' +
                    '  :dta_nascimento, ' +
                    '  :num_imovel_nascimento, ' +
                    '  :cod_localizacao_nascimento, ' +
                    '  :cod_propriedade_nascimento, ' +
                    '  :cod_fazenda_nascimento, ' +
                    '  :dta_compra, ' +
                    '  :cod_pessoa_secundaria_criador, ' +
                    '  :nom_animal, ' +
                    '  :des_apelido, ' +
                    '  :cod_associacao_raca, ' +
                    '  :cod_grau_sangue, ' +
                    '  :num_rgd, ' +
                    '  :num_transponder, ' +
                    '  :cod_tipo_identificador_1, ' +
                    '  :cod_posicao_identificador_1, ' +
                    '  :cod_tipo_identificador_2, ' +
                    '  :cod_posicao_identificador_2, ' +
                    '  :cod_tipo_identificador_3, ' +
                    '  :cod_posicao_identificador_3, ' +
                    '  :cod_tipo_identificador_4, ' +
                    '  :cod_posicao_identificador_4, ' +
                    '  :cod_especie, ' +
                    '  :cod_aptidao, ' +
                    '  :cod_raca, ' +
                    '  :cod_pelagem, ' +
                    '  :ind_sexo, ' +
                    '  :cod_tipo_origem, ' +
                    '  :cod_reprodutor_multiplo, ' +
                    '  :cod_animal_pai, ' +
                    '  :cod_animal_mae, ' +
                    '  :cod_animal_receptor, ' +
                    '  :ind_animal_castrado, ' +
                    '  :cod_regime_alimentar, ' +
                    '  :cod_categoria_animal, ' +
                    '  :cod_tipo_lugar, ' +
                    '  :cod_lote_corrente, ' +
                    '  :cod_local_corrente, ' +
                    '  :cod_fazenda_corrente, ' +
                    '  :num_imovel_corrente, ' +
                    '  :cod_propriedade_corrente, ' +
                    '  :num_cnpj_cpf_corrente, ' +
                    '  :cod_pessoa_corrente, ' +
                    '  :cod_pessoa_secundaria_corrente, ' +
                    '  :cod_pais_origem, ' +
                    '  :des_propriedade_origem, ' +
                    '  :dta_autorizacao_importacao, ' +
                    '  :dta_entrada_pais, ' +
                    '  :num_guia_importacao, ' +
                    '  :num_licenca_importacao, ' +
                    '  :txt_observacao, ' +
                    '  getdate(), ' +
                    '  :dta_efetivacao_cadastro, ' +
                    '  :cod_arquivo_sisbov, ' +
                    '  :num_gta, ' +
                    '  :dta_emissao_gta, ' +
                    '  :num_nota_fiscal, ' +
                    '  :cod_registro_log, ' +
                    '  null, ' +
                    '  :ind_apto_cobertura, ' +
                    '  :ind_cod_sisbov_reservado, ' +
                    '  :cod_autenticacao_sisbov, ' +
                    '  :cod_arq_import_sisbov, '+
                    '  null, ' +
                    '  :cod_pessoa_tecnico_produtor, ' +
                    '  :dta_noventena) ');
{$ENDIF}
end;

function TIntAnimais.VerificaDadosImportacao(CodPaisOrigem: Integer;
  DesPropriedadeOrigem: String; DtaNascimento, DtaAutorizacaoImportacao,
  DtaEntradaPais: TDateTime; NumGuiaImportacao,
  NumLicencaImportacao: String): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  // Todas as consistências abaixo só serão feitas se o sisbov foi informado
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Verifica o país informado
      if CodPaisOrigem > 0 then begin
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select 1 from tab_pais ');
        Q.SQL.Add(' where cod_pais = :cod_pais ');
        Q.SQL.Add('   and dta_fim_validade is null ');
  {$ENDIF}
        Q.ParamByName('cod_pais').AsInteger := CodPaisOrigem;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(687, Self.ClassName, 'VerificaDadosImportacao', []);
          Result := -687;
          Exit;
        end;
        Q.Close;
      end;

      // Trata Descrição da propriedade de origem
      if DesPropriedadeOrigem <> '' then begin
        Result := TrataString(DesPropriedadeOrigem, 100, 'Propriedade de Origem');
        if Result < 0 then begin
          Exit;
        end;
      end;

      // Trata Data de autorização
      if DtaAutorizacaoImportacao > 0 then begin
        if DtaAutorizacaoImportacao < DtaNascimento then begin
          Mensagens.Adicionar(688, Self.ClassName, 'VerificaDadosImportacao', []);
          Result := -688;
          Exit;
        end;
      end;

      // Trata Data de entrada no país
      if DtaEntradaPais > 0 then begin
        if DtaEntradaPais < DtaNascimento then begin
          Mensagens.Adicionar(689, Self.ClassName, 'VerificaDadosImportacao', []);
          Result := -689;
          Exit;
        end;
      end;

      // Trata Guia de importação
      if NumGuiaImportacao <> '' then begin
        Result := TrataString(NumGuiaImportacao, 25, 'Guia de importação');
        if Result < 0 then begin
          Exit;
        end;
      end;

      // Trata Licença de importação
      if NumLicencaImportacao <> '' then begin
        Result := TrataString(NumLicencaImportacao, 25, 'Licença de importação');
        if Result < 0 then begin
          Exit;
        end;
      end;

    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaDadosImportacao', [E.Message, 'código sisbov do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ObtemDadosAnimal(CodAnimal: Integer;
  var DadosAnimal: TDadosAnimal): Integer;
begin
  Result := BuscaDadosAnimal(CodAnimal, -1, -1, -1, -1, -1, -1, '', '', DadosAnimal);
end;

//function TIntAnimais.ObtemDadosAnimalSisbov(CodPaisSisbov, CodEstadoSisbov,
//  CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov: Integer;
//  var DadosAnimal: TDadosAnimal): Integer;
//begin
//  Result := BuscaDadosAnimal(-1, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
//    CodAnimalSisbov, NumDVSisbov, -1, '', '', DadosAnimal);
//end;

//function TIntAnimais.ObtemDadosAnimalCertificadora(
//  CodAnimalCertificadora: String; var DadosAnimal: TDadosAnimal): Integer;
//begin
//  Result := BuscaDadosAnimal(-1, -1, -1, -1, -1, -1, -1, '', CodAnimalCertificadora,
//    DadosAnimal);
//end;

function TIntAnimais.ObtemDadosAnimalManejo(CodFazendaManejo: Integer;
  CodAnimalManejo: String; var DadosAnimal: TDadosAnimal): Integer;
begin
  Result := BuscaDadosAnimal(-1, -1, -1, -1, -1, -1, CodFazendaManejo, CodAnimalManejo,
    '', DadosAnimal);
end;

procedure TIntAnimais.LimpaDadosAnimal(var DadosAnimal: TDadosAnimal);
begin
  DadosAnimal.CodAnimal            := -1;
  DadosAnimal.CodFazendaManejo     := -1;
  DadosAnimal.SglFazendaManejo     := '';
  DadosAnimal.CodAnimalManejo      := '';
  DadosAnimal.CodAnimalCertificadora := '';
  DadosAnimal.CodPaisSisbov        := -1;
  DadosAnimal.CodEstadoSisbov      := -1;
  DadosAnimal.CodMicroRegiaoSisbov := -1;
  DadosAnimal.CodAnimalSisbov      := -1;
  DadosAnimal.NumDVSisbov          := -1;
  DadosAnimal.CodSituacaoSisbov    := '';
  DadosAnimal.DtaIdentificacaoSisbov := 0;
  DadosAnimal.NumImovelIdentificacao := '';
  DadosAnimal.CodPropriedadeIdentificacao := -1;
  DadosAnimal.CodFazendaIdentificacao := -1;
  DadosAnimal.DtaNascimento                    := 0;
  DadosAnimal.NumImovelNascimento := '';
  DadosAnimal.CodPropriedadeNascimento := -1;
  DadosAnimal.CodFazendaNascimento := -1;
  DadosAnimal.DtaCompra := 0;
  DadosAnimal.CodPessoaSecundariaCriador := -1;
  DadosAnimal.NomAnimal := '';
  DadosAnimal.DesApelido := '';
  DadosAnimal.CodAssociacaoRaca := -1;
  DadosAnimal.CodGrauSangue := -1;
  DadosAnimal.CodEspecie           := -1;
  DadosAnimal.CodAptidao           := -1;
  DadosAnimal.CodRaca              := -1;
  DadosAnimal.CodPelagem           := -1;
  DadosAnimal.IndSexo              := '';
  DadosAnimal.CodTipoOrigem        := -1;
  DadosAnimal.CodAnimalPai         := -1;
  DadosAnimal.CodAnimalMae         := -1;
  DadosAnimal.CodAnimalReceptor    := -1;
  DadosAnimal.IndAnimalCastrado                := '';
  DadosAnimal.CodRegimeAlimentar               := -1;
  DadosAnimal.CodCategoriaAnimal               := -1;
  DadosAnimal.CodTipoLugar                     := -1;
  DadosAnimal.CodLoteCorrente                  := -1;
  DadosAnimal.CodLocalCorrente                 := -1;
  DadosAnimal.CodFazendaCorrente               := -1;
  DadosAnimal.NumImovelCorrente                := '';
  DadosAnimal.CodLocalizacaoCorrente           := -1;
  DadosAnimal.CodPropriedadeCorrente           := -1;
  DadosAnimal.NumCNPJCPFCorrente               := '';
  DadosAnimal.CodPessoaCorrente                := -1;
  DadosAnimal.CodPessoaSecundariaCorrente      := -1;
  DadosAnimal.DtaUltimoEvento                  := 0;
  DadosAnimal.DtaUltimoEventoAnterior          := 0;
  DadosAnimal.DtaAplicacaoUltimoEvento         := 0;
  DadosAnimal.DtaAplicacaoUltimoEventoAnterior := 0;
  DadosAnimal.CodRegistroLog                   := -1;
  DadosAnimal.DtaEfetivacaoCadastro            := 0;
  DadosAnimal.CodArquivoSisbov                 := -1;
  DadosAnimal.CodAnimalAssociado               := -1;
  DadosAnimal.QtdPesoAnimal                    := 0;
  DadosAnimal.IndAptoCobertura                 := '';
  DadosAnimal.DtaDesativacao                   := 0;
  DadosAnimal.CodAutenticacaoSisbov            := '';
  DadosAnimal.DtaLiberacaoAbate                := 0;
  DadosAnimal.DtaInsercaoSisbov                := 0;

end;

function TIntAnimais.BuscaDadosAnimal(CodAnimal, CodPaisSisbov, CodEstadoSisbov,
  CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, CodFazendaManejo: Integer;
  CodAnimalManejo, CodAnimalCertificadora: String;
  var DadosAnimal: TDadosAnimal): Integer;
const
  NomeMetodo : String = 'BuscaDadosAnimal';
var
  Q : THerdomQuery;
begin
  Result := 0;
  DadosAnimal.CodAnimal            := -1;
  DadosAnimal.CodFazendaManejo     := -1;
  DadosAnimal.SglFazendaManejo     := '';
  DadosAnimal.CodAnimalManejo      := '';
  DadosAnimal.CodAnimalCertificadora := '';
  DadosAnimal.CodPaisSisbov        := -1;
  DadosAnimal.CodEstadoSisbov      := -1;
  DadosAnimal.CodMicroRegiaoSisbov := -1;
  DadosAnimal.CodAnimalSisbov      := -1;
  DadosAnimal.NumDVSisbov          := -1;
  DadosAnimal.CodSituacaoSisbov    := '';
  DadosAnimal.DtaIdentificacaoSisbov := 0;
  DadosAnimal.NumImovelIdentificacao := '';
  DadosAnimal.CodPropriedadeIdentificacao := -1;
  DadosAnimal.CodFazendaIdentificacao := -1;
  DadosAnimal.DtaNascimento                    := 0;
  DadosAnimal.NumImovelNascimento := '';
  DadosAnimal.CodLocalizacaoNascimento := -1;
  DadosAnimal.CodPropriedadeNascimento := -1;
  DadosAnimal.CodFazendaNascimento := -1;
  DadosAnimal.DtaCompra := 0;
  DadosAnimal.CodPessoaSecundariaCriador := -1;
  DadosAnimal.NomAnimal := '';
  DadosAnimal.DesApelido := '';
  DadosAnimal.CodAssociacaoRaca := -1;
  DadosAnimal.CodGrauSangue := -1;
  DadosAnimal.CodEspecie           := -1;
  DadosAnimal.CodAptidao           := -1;
  DadosAnimal.CodRaca              := -1;
  DadosAnimal.CodPelagem           := -1;
  DadosAnimal.IndSexo              := '';
  DadosAnimal.CodTipoOrigem        := -1;
  DadosAnimal.CodAnimalPai         := -1;
  DadosAnimal.CodAnimalMae         := -1;
  DadosAnimal.CodAnimalReceptor    := -1;
  DadosAnimal.IndAnimalCastrado                := '';
  DadosAnimal.CodRegimeAlimentar               := -1;
  DadosAnimal.CodCategoriaAnimal               := -1;
  DadosAnimal.CodTipoLugar                     := -1;
  DadosAnimal.CodLoteCorrente                  := -1;
  DadosAnimal.CodLocalCorrente                 := -1;
  DadosAnimal.CodFazendaCorrente               := -1;
  DadosAnimal.NumImovelCorrente                := '';
  DadosAnimal.CodLocalizacaoCorrente           := -1;
  DadosAnimal.CodPropriedadeCorrente           := -1;
  DadosAnimal.NumCNPJCPFCorrente               := '';
  DadosAnimal.CodPessoaCorrente                := -1;
  DadosAnimal.CodPessoaSecundariaCorrente      := -1;
  DadosAnimal.DtaUltimoEvento                  := 0;
  DadosAnimal.DtaUltimoEventoAnterior          := 0;
  DadosAnimal.DtaAplicacaoUltimoEvento         := 0;
  DadosAnimal.DtaAplicacaoUltimoEventoAnterior := 0;
  DadosAnimal.CodRegistroLog                   := -1;
  DadosAnimal.DtaEfetivacaoCadastro            := 0;
  DadosAnimal.CodArquivoSisbov                 := -1;
  DadosAnimal.CodAnimalAssociado               := -1;
  DadosAnimal.QtdPesoAnimal                    := 0;
  DadosAnimal.NumTransponder                   := '';
  DadosAnimal.CodTipoIdentificador1            := -1;
  DadosAnimal.CodPosicaoIdentificador1         := -1;
  DadosAnimal.CodTipoIdentificador2            := -1;
  DadosAnimal.CodPosicaoIdentificador2         := -1;
  DadosAnimal.CodTipoIdentificador3            := -1;
  DadosAnimal.CodPosicaoIdentificador3         := -1;
  DadosAnimal.CodTipoIdentificador4            := -1;
  DadosAnimal.CodPosicaoIdentificador4         := -1;
  DadosAnimal.NumGta                           := '';
  DadosAnimal.DtaEmissaoGta                    := 0;
  DadosAnimal.NumNotaFiscal                    := -1;
  DadosAnimal.IndAptoCobertura                 := '';
  DadosAnimal.IndTouroApto                     := '';
  DadosAnimal.IndVacaPrenha                    := '';
  DadosAnimal.DtaDesativacao                   := 0;
  DadosAnimal.CodAutenticacaoSisbov            := '';
  DadosAnimal.CodPessoaTecnico                 := -1;
  DadosAnimal.DtaInsercaoRegistro              := 0;
  DadosAnimal.IndTransmissaoSISBOV             := '';

  // Obtem dados do animal
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Verifica o país informado
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select ta.cod_animal, ' +
                '       ta.cod_fazenda_manejo, ' +
                '       tf.sgl_fazenda as sgl_fazenda_manejo, ' +
                '       ta.cod_animal_manejo, ' +
                '       ta.cod_animal_certificadora, ' +
                '       ta.cod_pais_sisbov, ' +
                '       ta.cod_estado_sisbov, ' +
                '       ta.cod_micro_regiao_sisbov, '+
                '       ta.cod_animal_sisbov, ' +
                '       ta.num_dv_sisbov, ' +
                '       ta.cod_situacao_sisbov, ' +
                '       ta.dta_identificacao_sisbov, ' +
                '       ta.num_imovel_identificacao, ' +
                '       ta.cod_localizacao_identificacao, ' +
                '       ta.cod_propriedade_identificacao, ' +
                '       ta.cod_fazenda_identificacao, ' +
                '       ta.dta_nascimento, ' +
                '       ta.num_imovel_nascimento, ' +
                '       ta.cod_localizacao_nascimento, ' +
                '       ta.cod_propriedade_nascimento, ' +
                '       ta.cod_fazenda_nascimento, ' +
                '       ta.dta_compra, ' +
                '       ta.cod_pessoa_secundaria_criador, ' +
                '       ta.nom_animal, ' +
                '       ta.des_apelido, ' +
                '       ta.cod_associacao_raca, ' +
                '       ta.cod_grau_sangue, ' +
                '       ta.cod_especie, ' +
                '       ta.cod_aptidao, ' +
                '       ta.cod_raca, ' +
                '       ta.cod_pelagem, ' +
                '       ta.ind_sexo, ' +
                '       ta.cod_tipo_origem, ' +
                '       ta.cod_animal_pai, ' +
                '       ta.cod_animal_mae, ' +
                '       ta.cod_animal_receptor, ' +
                '       ta.ind_animal_castrado, ' +
                '       ta.cod_regime_alimentar, ' +
                '       ta.cod_categoria_animal, ' +
                '       ta.cod_tipo_lugar, ' +
                '       ta.cod_lote_corrente, ' +
                '       ta.cod_local_corrente, ' +
                '       ta.cod_fazenda_corrente, ' +
                '       ta.num_imovel_corrente, ' +
                '       ta.cod_localizacao_corrente, ' +
                '       ta.cod_propriedade_corrente, ' +
                '       ta.num_cnpj_cpf_corrente, ' +
                '       ta.cod_pessoa_corrente, ' +
                '       ta.cod_pessoa_secundaria_corrente, ' +
                '       ta.dta_ultimo_evento, ' +
                '       ta.dta_aplicacao_ultimo_evento, ' +
                '       ta.num_transponder, ' +
                '       ta.cod_tipo_identificador_1, ' +
                '       ta.cod_posicao_identificador_1, ' +
                '       ta.cod_tipo_identificador_2, ' +
                '       ta.cod_posicao_identificador_2, ' +
                '       ta.cod_tipo_identificador_3, ' +
                '       ta.cod_posicao_identificador_3, ' +
                '       ta.cod_tipo_identificador_4, ' +
                '       ta.cod_posicao_identificador_4, ' +
                '       ta.num_gta, ' +
                '       ta.dta_emissao_gta, ' +
                '       ta.num_nota_fiscal, ' +
                '       ta.cod_registro_log, ' +
                '       ta.dta_efetivacao_cadastro, ' +
                '       ta.cod_arquivo_sisbov, ' +
                '       -1 as cod_animal_associado, ' +
                '       ta.ind_apto_cobertura, ' +
                '       ta.dta_desativacao, ' +
                '       ta.cod_autenticacao_sisbov, '+
                '       ta.cod_pessoa_tecnico, ' +
                '       ta.dta_cadastramento, ' +
                '       ta.num_rgd, ' +
                '       ta.ind_transmissao_sisbov ' +
                '  from tab_animal ta ' +
                '     , tab_fazenda tf ' +
                ' where ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor ' +
                '   and ta.cod_fazenda_manejo *= tf.cod_fazenda ' +
                '   and tf.dta_fim_validade is null ' +
                '   and ta.dta_fim_validade is null ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal = :cod_animal ');
      end;
      if (CodPaisSisbov >= 0) or (CodEstadoSisbov >= 0) or
         (CodAnimalSisbov >= 0) or (NumDvSisbov >= 0) then begin
        Q.SQL.Add('   and cod_pais_sisbov = :cod_pais_sisbov ' +
                  '   and cod_estado_sisbov = :cod_estado_sisbov ' +
                  '   and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
                  '   and cod_animal_sisbov = :cod_animal_sisbov ' +
                  '   and num_dv_sisbov = :num_dv_sisbov ');
      end;
      if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then begin
        Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ' +
                  '   and cod_animal_manejo = :cod_animal_manejo ');
      end;
      if CodAnimalCertificadora <> '' then begin
        Q.SQL.Add('   and cod_animal_certificadora = :cod_animal_certificadora ');
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodAnimal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      end;

      if (CodPaisSisbov >= 0) or (CodEstadoSisbov >= 0) or (CodMicroRegiaoSisbov >= 0) or
         (CodAnimalSisbov >= 0) or (NumDvSisbov >= 0) then begin
        Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDvSisbov;
        if CodMicroRegiaoSisbov <> -1 then begin
           if CodMicroRegiaoSisbov = 88 then
              Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := -1
           else
              Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        end;
      end;
      if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then begin
        if CodFazendaManejo > 0 then begin
          Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
        end else begin
          Q.ParamByName('cod_fazenda_manejo').DataType := ftInteger;
          Q.ParamByName('cod_fazenda_manejo').Clear;
        end;
        Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
      end;
      if CodAnimalCertificadora <> '' then begin
        Q.ParamByName('cod_animal_certificadora').AsString := CodAnimalCertificadora;
      end;

      Q.Open;
      if Q.IsEmpty then begin
         if CodAnimal > 0 then begin
            Mensagens.Adicionar(692, Self.ClassName, NomeMetodo, []);
            Result := -692;
            Exit;
         end else begin
            DadosAnimal.CodAnimalManejo := CodAnimalManejo;
            DadosAnimal.CodFazendaManejo := CodFazendaManejo;
            Result := -100;
            Exit;
         end;
      end;

      if Conexao.CodPapelUsuario = 3 then begin
         if (not Q.FieldByName('cod_pessoa_tecnico').IsNull) and (Q.FieldByName('cod_pessoa_tecnico').AsInteger <> Conexao.CodPessoa) then begin
            Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [Q.FieldByName('cod_animal_manejo').AsString]);
            Result := -1698;
            Exit;
         end;
      end;

      DadosAnimal.CodAnimal                   := Q.FieldByName('cod_animal').AsInteger;
      DadosAnimal.CodFazendaManejo            := Q.FieldByName('cod_fazenda_manejo').AsInteger;
      DadosAnimal.SglFazendaManejo            := Q.FieldByName('sgl_fazenda_manejo').AsString;
      DadosAnimal.CodAnimalManejo             := Q.FieldByName('cod_animal_manejo').AsString;
      DadosAnimal.CodAnimalCertificadora      := Q.FieldByName('cod_animal_certificadora').AsString;
      DadosAnimal.CodPaisSisbov               := Q.FieldByName('cod_pais_sisbov').AsInteger;
      DadosAnimal.CodEstadoSisbov             := Q.FieldByName('cod_estado_sisbov').AsInteger;
      DadosAnimal.CodMicroRegiaoSisbov        := Q.FieldByName('cod_micro_regiao_sisbov').AsInteger;
      DadosAnimal.CodAnimalSisbov             := Q.FieldByName('cod_animal_sisbov').AsInteger;
      DadosAnimal.NumDVSisbov                 := Q.FieldByName('num_dv_sisbov').AsInteger;
      DadosAnimal.CodSituacaoSisbov           := Q.FieldByName('cod_situacao_sisbov').AsString;
      DadosAnimal.DtaIdentificacaoSisbov      := Trunc(Q.FieldByName('dta_identificacao_sisbov').AsDateTime);
      DadosAnimal.NumImovelIdentificacao      := Q.FieldByName('num_imovel_identificacao').AsString;
      DadosAnimal.CodLocalizacaoIdentificacao := Q.FieldByName('cod_localizacao_identificacao').AsInteger;
      DadosAnimal.CodPropriedadeIdentificacao := Q.FieldByName('cod_propriedade_identificacao').AsInteger;
      DadosAnimal.CodFazendaIdentificacao     := Q.FieldByName('cod_fazenda_identificacao').AsInteger;
      DadosAnimal.DtaNascimento               := Q.FieldByName('dta_nascimento').AsDateTime;
      DadosAnimal.NumImovelNascimento         := Q.FieldByName('num_imovel_nascimento').AsString;
      DadosAnimal.CodLocalizacaoNascimento    := Q.FieldByName('cod_localizacao_nascimento').AsInteger;
      DadosAnimal.CodPropriedadeNascimento    := Q.FieldByName('cod_propriedade_nascimento').AsInteger;
      DadosAnimal.CodFazendaNascimento        := Q.FieldByName('cod_fazenda_nascimento').AsInteger;
      DadosAnimal.DtaCompra                   := Q.FieldByName('dta_compra').AsDatetime;
      DadosAnimal.CodPessoaSecundariaCriador  := Q.FieldByName('cod_pessoa_secundaria_criador').AsInteger;
      DadosAnimal.NomAnimal                   := Q.FieldByName('nom_animal').AsString;
      DadosAnimal.DesApelido                  := Q.FieldByName('des_apelido').AsString;
      DadosAnimal.CodAssociacaoRaca           := Q.FieldByName('cod_associacao_raca').AsInteger;
      DadosAnimal.CodGrauSangue               := Q.FieldByName('cod_grau_sangue').AsInteger;
      DadosAnimal.CodEspecie                  := Q.FieldByName('cod_especie').AsInteger;
      DadosAnimal.CodAptidao                  := Q.FieldByName('cod_aptidao').AsInteger;
      DadosAnimal.CodRaca                     := Q.FieldByName('cod_raca').AsInteger;
      DadosAnimal.CodPelagem                  := Q.FieldByName('cod_pelagem').AsInteger;
      DadosAnimal.IndSexo                     := Q.FieldByName('ind_sexo').AsString;
      DadosAnimal.CodTipoOrigem               := Q.FieldByName('cod_tipo_origem').AsInteger;
      DadosAnimal.CodAnimalPai                := Q.FieldByName('cod_animal_pai').AsInteger;
      DadosAnimal.CodAnimalMae                := Q.FieldByName('cod_animal_mae').AsInteger;
      DadosAnimal.CodAnimalReceptor           := Q.FieldByName('cod_animal_receptor').AsInteger;
      DadosAnimal.IndAnimalCastrado           := Q.FieldByName('ind_animal_castrado').AsString;
      DadosAnimal.CodRegimeAlimentar          := Q.FieldByName('cod_regime_alimentar').AsInteger;
      DadosAnimal.CodCategoriaAnimal          := Q.FieldByName('cod_categoria_animal').AsInteger;
      DadosAnimal.CodTipoLugar                := Q.FieldByName('cod_tipo_lugar').AsInteger;
      DadosAnimal.CodLoteCorrente             := Q.FieldByName('cod_lote_corrente').AsInteger;
      DadosAnimal.CodLocalCorrente            := Q.FieldByName('cod_local_corrente').AsInteger;
      DadosAnimal.CodFazendaCorrente          := Q.FieldByName('cod_fazenda_corrente').AsInteger;
      DadosAnimal.NumImovelCorrente           := Q.FieldByName('num_imovel_corrente').AsString;
      DadosAnimal.CodLocalizacaoCorrente      := Q.FieldByName('cod_localizacao_corrente').AsInteger;
      DadosAnimal.CodPropriedadeCorrente      := Q.FieldByName('cod_propriedade_corrente').AsInteger;
      DadosAnimal.NumCNPJCPFCorrente          := Q.FieldByName('num_cnpj_cpf_corrente').AsString;
      DadosAnimal.CodPessoaCorrente           := Q.FieldByName('cod_pessoa_corrente').AsInteger;
      DadosAnimal.CodPessoaSecundariaCorrente := Q.FieldByName('cod_pessoa_secundaria_corrente').AsInteger;
      DadosAnimal.DtaUltimoEvento             := Q.FieldByName('dta_ultimo_evento').AsDatetime;
      DadosAnimal.DtaAplicacaoUltimoEvento    := Q.FieldByName('dta_aplicacao_ultimo_evento').AsDatetime;
      DadosAnimal.NumTransponder              := Q.FieldByName('num_transponder').AsString;
      DadosAnimal.CodTipoIdentificador1       := Q.FieldByName('cod_tipo_identificador_1').AsInteger;
      DadosAnimal.CodPosicaoIdentificador1    := Q.FieldByName('cod_posicao_identificador_1').AsInteger;
      DadosAnimal.CodTipoIdentificador2       := Q.FieldByName('cod_tipo_identificador_2').AsInteger;
      DadosAnimal.CodPosicaoIdentificador2    := Q.FieldByName('cod_posicao_identificador_2').AsInteger;
      DadosAnimal.CodTipoIdentificador3       := Q.FieldByName('cod_tipo_identificador_3').AsInteger;
      DadosAnimal.CodPosicaoIdentificador3    := Q.FieldByName('cod_posicao_identificador_3').AsInteger;
      DadosAnimal.CodTipoIdentificador4       := Q.FieldByName('cod_tipo_identificador_4').AsInteger;
      DadosAnimal.CodPosicaoIdentificador4    := Q.FieldByName('cod_posicao_identificador_4').AsInteger;
      DadosAnimal.NumGta                      := Q.FieldByName('num_gta').AsString;
      DadosAnimal.DtaEmissaoGta               := Q.FieldByName('dta_emissao_gta').AsDateTime;
      DadosAnimal.NumNotaFiscal               := Q.FieldByName('num_nota_fiscal').AsInteger;
      DadosAnimal.CodRegistroLog              := Q.FieldByName('cod_registro_log').AsInteger;
      DadosAnimal.DtaEfetivacaoCadastro       := Q.FieldByName('dta_efetivacao_cadastro').AsDateTime;
      DadosAnimal.CodArquivoSisbov            := Q.FieldByName('cod_arquivo_sisbov').AsInteger;
      DadosAnimal.CodAnimalAssociado          := Q.FieldByName('cod_animal_associado').AsInteger;
      DadosAnimal.IndAptoCobertura            := Q.FieldByName('ind_apto_cobertura').AsString;
      DadosAnimal.DtaDesativacao              := Q.FieldByName('dta_desativacao').AsDateTime;
      DadosAnimal.CodAutenticacaoSisbov       := Q.FieldByName('cod_autenticacao_sisbov').AsString;
      DadosAnimal.CodPessoaTecnico            := Q.FieldByName('cod_pessoa_tecnico').AsInteger;
      DadosAnimal.DtaInsercaoRegistro         := Q.FieldByName('dta_cadastramento').AsDateTime;
      DadosAnimal.IndTransmissaoSISBOV        := Q.FieldByName('ind_transmissao_sisbov').AsString;
      DadosAnimal.NumRgd                      := Q.FieldByName('num_rgd').AsString;

      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(693, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -693;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.SelecionaAnimaisMultiplos(CodFazendaManejo: Integer;
  CodInicialAnimalManejo, CodFinalAnimalManejo,
  CodAnimais: String): Integer;
const
  NomeMetodo : String = 'SelecionaAnimaisMultiplos';
var
  Param : TValoresParametro;
begin
  Result := 0;

  if (CodFazendaManejo <= 0) and (CodInicialAnimalManejo = '') and
     (CodFinalAnimalManejo = '') and (CodAnimais = '') then begin
    Mensagens.Adicionar(781, Self.ClassName, NomeMetodo, []);
    Result := -781;
    Exit;
  end;

  if (CodFazendaManejo > 0) or (CodInicialAnimalManejo <> '') or
     (CodFinalAnimalManejo <> '') then begin
    if CodAnimais <> '' then begin
      Mensagens.Adicionar(780, Self.ClassName, NomeMetodo, []);
      Result := -780;
      Exit;
    end;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    if CodAnimais <> '' then begin
      if CodAnimais <> '#PESQUISADOS' then begin
        Result := VerificaParametroMultiValor(CodAnimais, Param);
        if Result < 0 then begin
          Exit;
        end;
      end;
    end else begin
      if (CodInicialAnimalManejo = '') and (CodFinalAnimalManejo = '') then begin
        Mensagens.Adicionar(782, Self.ClassName, NomeMetodo, []);
        Result := -782;
        Exit;
      end;
      if CodFinalAnimalManejo < CodInicialAnimalManejo then begin
        Mensagens.Adicionar(782, Self.ClassName, NomeMetodo, []);
        Result := -782;
        Exit;
      end;
    end;
  finally
    Param.Free;
  end;

  // Obtem dados do animal
  try
    FQUeryAux.Close;
    FQueryAux.SQLConnection := Conexao.SQLConnection;

    // monta query para selecionar dados do animal
    FQueryAux.SQL.Clear;
{$IFDEF MSSQL}
    FQueryAux.SQL.Add('select ta.cod_pessoa_produtor, ' +
                '       ta.cod_animal, ' +
                '       ta.cod_fazenda_manejo, ' +
                '       tf.sgl_fazenda as sgl_fazenda_manejo, ' +
                '       ta.cod_animal_manejo, ' +
                '       ta.cod_animal_certificadora, ' +
                '       ta.cod_pais_sisbov, ' +
                '       ta.cod_estado_sisbov, ' +
                '       ta.cod_micro_regiao_sisbov, ' +
                '       ta.cod_animal_sisbov, ' +
                '       ta.num_dv_sisbov, ' +
                '       ta.cod_situacao_sisbov, ' +
                '       ta.dta_identificacao_sisbov, ' +
                '       ta.num_imovel_identificacao, ' +
                '       ta.cod_localizacao_identificacao, ' +
                '       ta.cod_propriedade_identificacao, ' +
                '       ta.cod_fazenda_identificacao, ' +
                '       ta.dta_nascimento, ' +
                '       ta.num_imovel_nascimento, ' +
                '       ta.cod_localizacao_nascimento, ' +
                '       ta.cod_propriedade_nascimento, ' +
                '       ta.cod_fazenda_nascimento, ' +
                '       ta.dta_compra, ' +
                '       ta.cod_pessoa_secundaria_criador, ' +
                '       ta.nom_animal, ' +
                '       ta.des_apelido, ' +
                '       ta.cod_associacao_raca, ' +
                '       ta.cod_grau_sangue, ' +
                '       ta.cod_especie, ' +
                '       ta.cod_aptidao, ' +
                '       ta.cod_raca, ' +
                '       ta.cod_pelagem, ' +
                '       ta.ind_sexo, ' +
                '       ta.cod_tipo_origem, ' +
                '       ta.cod_animal_pai, ' +
                '       ta.cod_animal_mae, ' +
                '       ta.cod_animal_receptor, ' +
                '       ta.ind_animal_castrado, ' +
                '       ta.cod_regime_alimentar, ' +
                '       ta.cod_categoria_animal, ' +
                '       ta.cod_tipo_lugar, ' +
                '       ta.cod_lote_corrente, ' +
                '       ta.cod_local_corrente, ' +
                '       ta.cod_fazenda_corrente, ' +
                '       ta.num_imovel_corrente, ' +
                '       ta.cod_localizacao_corrente, ' +
                '       ta.cod_propriedade_corrente, ' +
                '       ta.num_cnpj_cpf_corrente, ' +
                '       ta.cod_pessoa_corrente, ' +
                '       ta.cod_pessoa_secundaria_corrente, ' +
                '       ta.dta_ultimo_evento, ' +
                '       convert(datetime, null) as dta_aplicacao_ultimo_evento, ' +
                '       convert(datetime, null) as dta_ultimo_evento_anterior, ' +
                '       convert(datetime, null) as dta_aplic_ult_evento_anterior, ' +
                '       ta.cod_registro_log, ' +
                '       ta.dta_efetivacao_cadastro, ' +
                '       ta.cod_arquivo_sisbov, ' +
                '       -1 as cod_animal_associado, ' +
                '       ta.ind_apto_cobertura, ' +
                '       ta.ind_cod_sisbov_reservado, ' +
                '       ta.dta_desativacao, ' +
                '       ta.cod_autenticacao_sisbov, ' +
                '       ta.cod_tipo_identificador_1, ' +
                '       ta.cod_tipo_identificador_2, ' +
                '       ta.cod_tipo_identificador_3, ' +
                '       ta.cod_tipo_identificador_4, ' +
                '       ta.num_rgd, ' +
                '       ta.cod_pessoa_tecnico, ' +
                '       tav.cod_animal_vendido, ' + 
                '       tav.cod_situacao_animal_vendido ' +
              '  from tab_animal ta ' +
              '           left join tab_animal_vendido tav on ta.cod_animal = tav.cod_animal ' +
              '                                           and ta.cod_pessoa_produtor = tav.cod_pessoa_produtor ' + 
              '           left join tab_fazenda tf on ta.cod_fazenda_manejo = tf.cod_fazenda and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor and tf.dta_fim_validade is null' +
              ' where (ta.cod_pessoa_produtor = :cod_pessoa_produtor or cod_pessoa_corrente = :cod_pessoa_produtor) ' +
              '   and ta.dta_fim_validade is null ');
    if CodAnimais <> '' then begin
      if CodAnimais = '#PESQUISADOS' then begin
        FQueryAux.SQL.Add('   and ta.cod_animal in ( select cod_animal from #tmp_animais_pesquisados )' );
      end else begin
        FQueryAux.SQL.Add('   and ta.cod_animal in (' + CodAnimais + ')');
      end;
    end else begin
      if CodFazendaManejo > 0 then
      begin
        FQueryAux.SQL.Add('   and ta.cod_fazenda_manejo = :cod_fazenda_manejo ');
      end;
      FQueryAux.SQL.Add('   and ta.cod_animal_manejo between :cod_inicial_animal_manejo and :cod_final_animal_manejo');
    end;
{$ENDIF}
    FQueryAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    if CodAnimais = '' then begin
      if CodFazendaManejo > 0 then begin
        FQueryAux.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      FQueryAux.ParamByName('cod_inicial_animal_manejo').AsString := CodInicialAnimalManejo;
      FQueryAux.ParamByName('cod_final_animal_manejo').AsString := CodFinalAnimalManejo;
    end;
    FQueryAux.Open;
    if FQueryAux.IsEmpty then begin
      Mensagens.Adicionar(783, Self.ClassName, NomeMetodo, []);
      Result := -783;
      Exit;
    end;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(693, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -693;
      Exit;
    end;
  end;
end;

function TIntAnimais.SelecionaAnimaisEvento(DadosEvento: TDadosEvento; CodAnimais: String;
  CodFazenda: Integer; CodAnimaisManejo: String; CodLote,
  CodLocal, CodEvento: Integer; IndRemover: Boolean;
  var QAnim: THerdomQuery): Integer;
const
  NomeMetodo : String = 'SelecionaAnimaisEvento';
var
  Param : TValoresParametro;
begin
  Result := 0;

  // Verifica se pelo menos um parâmetro foi informado
  if (CodFazenda <= 0) and (CodAnimaisManejo = '') and
     (CodLote <= 0) and (CodLocal <= 0) and (CodAnimais = '') then begin
    Mensagens.Adicionar(856, Self.ClassName, NomeMetodo, []);
    Result := -856;
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    // Se códigos de animais foram informados, verifica se outras informações não foram
    if (CodAnimais <> '') and (CodAnimais <> '#PESQUISADOS') then begin
      if (CodFazenda > 0) or (CodAnimaisManejo <> '') or
         (CodLote > 0) or (CodLocal > 0) then begin
        Mensagens.Adicionar(857, Self.ClassName, NomeMetodo, []);
        Result := -857;
        Exit;
      end;
      Result := VerificaParametroMultiValor(CodAnimais, Param);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Se códigos de manejo foram informados, verifica se outras informações não foram
    // e verifica também se fazenda foi informada já que ela é necessária
    if CodAnimaisManejo <> '' then begin
      if (CodAnimais <> '') or (CodLote > 0) or (CodLocal > 0) then begin
        Mensagens.Adicionar(857, Self.ClassName, NomeMetodo, []);
        Result := -857;
        Exit;
      end;
      Result := VerificaFazenda(CodFazenda, True, 'Fazenda de manejo');
      if Result < 0 then begin
        Exit;
      end;
      Result := VerificaParametroMultiValorString(CodAnimaisManejo, Param);
      if Result < 0 then begin
        Exit;
      end;
    end;
  finally
    Param.Free;
  end;

  // Se lote foi informado, verifica se outras informações não foram,
  // verifica também se fazenda foi informada já que ela é necessária,
  // verifica validade da fazenda e do lote
  if CodLote > 0 then begin
    if (CodAnimais <> '') or (CodAnimaisManejo <> '') or (CodLocal > 0) then begin
      Mensagens.Adicionar(857, Self.ClassName, NomeMetodo, []);
      Result := -857;
      Exit;
    end;
    Result := VerificaFazenda(CodFazenda, True, 'Fazenda do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaLote(CodFazenda, CodLote);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Se local foi informado, verifica se outras informações não foram,
  // verifica também se fazenda foi informada já que ela é necessária,
  // verifica validade da fazenda e do local
  if CodLocal > 0 then begin
    if (CodAnimais <> '') or (CodAnimaisManejo <> '') or (CodLote > 0) then begin
      Mensagens.Adicionar(857, Self.ClassName, NomeMetodo, []);
      Result := -857;
      Exit;
    end;
    Result := VerificaFazenda(CodFazenda, True, 'Fazenda do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaLocal(CodFazenda, CodLocal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Obtem dados do animal
  try
    QAnim.SQL.Clear;

{$IFDEF MSSQL}
    if IndRemover then begin
      QAnim.SQL.Add('select ta.cod_pessoa_produtor, ' +
                        '       ta.cod_animal, ' +
                        '       ta.cod_pessoa_tecnico, ' +
                        '       ta.cod_fazenda_manejo, ' +
                        '       tf.sgl_fazenda as sgl_fazenda_manejo, ' +
                        '       ta.cod_animal_manejo, ' +
                        '       ta.cod_animal_certificadora, ' +
                        '       ta.cod_pais_sisbov, ' +
                        '       ta.cod_estado_sisbov, ' +
                        '       ta.cod_micro_regiao_sisbov, ' +
                        '       ta.cod_animal_sisbov, ' +
                        '       ta.num_dv_sisbov, ' +
                        '       ta.cod_situacao_sisbov, ' +
                        '       ta.dta_identificacao_sisbov, ' +
                        '       ta.num_imovel_identificacao, ' +
                        '       ta.cod_localizacao_identificacao, ' +
                        '       ta.cod_propriedade_identificacao, ' +
                        '       ta.cod_fazenda_identificacao, ' +
                        '       ta.dta_nascimento, ' +
                        '       ta.num_imovel_nascimento, ' +
                        '       ta.cod_localizacao_nascimento, ' +
                        '       ta.cod_propriedade_nascimento, ' +
                        '       ta.cod_fazenda_nascimento, ' +
                        '       ta.dta_compra, ' +
                        '       ta.cod_pessoa_secundaria_criador, ' +
                        '       ta.nom_animal, ' +
                        '       ta.des_apelido, ' +
                        '       ta.cod_associacao_raca, ' +
                        '       ta.cod_grau_sangue, ' +
                        '       ta.cod_especie, ' +
                        '       ta.cod_aptidao, ' +
                        '       ta.cod_raca, ' +
                        '       ta.cod_pelagem, ' +
                        '       ta.ind_sexo, ' +
                        '       ta.cod_tipo_origem, ' +
                        '       ta.cod_animal_pai, ' +
                        '       ta.cod_animal_mae, ' +
                        '       ta.cod_animal_receptor, ' +
                        '       tae.ind_animal_castrado, ' +
                        '       tae.cod_regime_alimentar, ' +
                        '       tae.cod_categoria_animal, ' +
                        '       tae.cod_tipo_lugar, ' +
                        '       tae.cod_lote_corrente, ' +
                        '       tae.cod_local_corrente, ' +
                        '       tae.cod_fazenda_corrente, ' +
                        '       tae.num_imovel_corrente, ' +
                        '       tae.cod_localizacao_corrente, ' +
                        '       tae.cod_propriedade_corrente, ' +
                        '       tae.num_cnpj_cpf_corrente, ' +
                        '       tae.cod_pessoa_corrente, ' +
                        '       tae.cod_pessoa_secundaria_corrente, ' +
                        '       ta.dta_ultimo_evento, ' +
                        '       ta.dta_aplicacao_ultimo_evento, ' +
                        '       tae.dta_ultimo_evento as dta_ultimo_evento_anterior, ' +
                        '       tae.dta_aplicacao_ultimo_evento as dta_aplic_ult_evento_anterior, ' +
                        '       ta.cod_registro_log, ' +
                        '       ta.dta_efetivacao_cadastro, ' +
                        '       ta.cod_arquivo_sisbov, ' +
                        '       tae.cod_animal_associado, ' +
                        '       0 as qtd_peso_animal, ' +
                        '       tae.ind_apto_cobertura, ' +
                        '       tae.dta_desativacao, ' +
                        '       ta.cod_autenticacao_sisbov, '+
                        '       tce.cod_arquivo_sisbov as ind_animal_desmarcado_exportado, ' +
                        '       null as dta_liberacao_abate, ' +
                        '       ta.dta_insercao_sisbov as dta_insercao_sisbov ' +
                        '  from tab_animal ta ' +
                        '          left join tab_codigo_exportacao tce on ta.cod_pessoa_produtor = tce.cod_pessoa_produtor and ta.cod_animal = tce.cod_animal, ' +
                        '       tab_fazenda tf, ' +
                        '       tab_animal_evento tae ' +
//                        '       tab_codigo_sisbov tcs ' +
                        ' where ( ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '    or   ta.cod_pessoa_corrente = :cod_pessoa_produtor ) ' +
                        '   and ta.cod_fazenda_manejo = tf.cod_fazenda ' +
                        '   and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                        '   and tf.dta_fim_validade is null ' +
                        '   and tae.cod_animal = ta.cod_animal ' +
//                        '   and tcs.cod_pais_sisbov = ta.cod_pais_sisbov ' +
//                        '   and tcs.cod_estado_sisbov = ta.cod_estado_sisbov ' +
//                        '   and tcs.cod_micro_regiao_sisbov = ta.cod_micro_regiao_sisbov ' +
//                        '   and tcs.cod_animal_sisbov = ta.cod_animal_sisbov ' +
//                        '   and ta.cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                        '   and ta.cod_tipo_origem <> 4 ' +
                        { TODO : Ver com helvécio a questão de animal deletado após aplicação de um evento }
                        '   and ta.dta_fim_validade is null ' +
                        '   and tae.cod_evento = :cod_evento ');
    end else begin
      QAnim.SQL.Add('select ta.cod_pessoa_produtor, ' +
                        '       ta.cod_animal, ' +
                        '       ta.cod_pessoa_tecnico, ' +
                        '       ta.cod_fazenda_manejo, ' +
                        '       tf.sgl_fazenda as sgl_fazenda_manejo, ' +
                        '       ta.cod_animal_manejo, ' +
                        '       ta.cod_animal_certificadora, ' +
                        '       ta.cod_pais_sisbov, ' +
                        '       ta.cod_estado_sisbov, ' +
                        '       ta.cod_micro_regiao_sisbov, ' +
                        '       ta.cod_animal_sisbov, ' +
                        '       ta.num_dv_sisbov, ' +
                        '       ta.cod_situacao_sisbov, ' +
                        '       ta.dta_identificacao_sisbov, ' +
                        '       ta.num_imovel_identificacao, ' +
                        '       ta.cod_localizacao_identificacao, ' +
                        '       ta.cod_propriedade_identificacao, ' +
                        '       ta.cod_fazenda_identificacao, ' +
                        '       ta.dta_nascimento, ' +
                        '       ta.num_imovel_nascimento, ' +
                        '       ta.cod_localizacao_nascimento, ' +
                        '       ta.cod_propriedade_nascimento, ' +
                        '       ta.cod_fazenda_nascimento, ' +
                        '       ta.dta_compra, ' +
                        '       ta.cod_pessoa_secundaria_criador, ' +
                        '       ta.nom_animal, ' +
                        '       ta.des_apelido, ' +
                        '       ta.cod_associacao_raca, ' +
                        '       ta.cod_grau_sangue, ' +
                        '       ta.cod_especie, ' +
                        '       ta.cod_aptidao, ' +
                        '       ta.cod_raca, ' +
                        '       ta.cod_pelagem, ' +
                        '       ta.ind_sexo, ' +
                        '       ta.cod_tipo_origem, ' +
                        '       ta.cod_animal_pai, ' +
                        '       ta.cod_animal_mae, ' +
                        '       ta.cod_animal_receptor, ' +
                        '       ta.ind_animal_castrado, ' +
                        '       ta.cod_regime_alimentar, ' +
                        '       ta.cod_categoria_animal, ' +
                        '       ta.cod_tipo_lugar, ' +
                        '       ta.cod_lote_corrente, ' +
                        '       ta.cod_local_corrente, ' +
                        '       ta.cod_fazenda_corrente, ' +
                        '       ta.num_imovel_corrente, ' +
                        '       ta.cod_localizacao_corrente, ' +
                        '       ta.cod_propriedade_corrente, ' +
                        '       ta.num_cnpj_cpf_corrente, ' +
                        '       ta.cod_pessoa_corrente, ' +
                        '       ta.cod_pessoa_secundaria_corrente, ' +
                        '       ta.dta_ultimo_evento, ' +
                        '       ta.dta_aplicacao_ultimo_evento, ' +
                        '       convert(smalldatetime, null) as dta_ultimo_evento_anterior, ' +
                        '       convert(datetime, null) as dta_aplic_ult_evento_anterior, ' +
                        '       ta.cod_registro_log, ' +
                        '       ta.dta_efetivacao_cadastro, ' +
                        '       ta.cod_arquivo_sisbov, ' +
                        '       -1 as cod_animal_associado, ' +
                        '       0 as qtd_peso_animal, ' +
                        '       ta.ind_apto_cobertura, ' +
                        '       ta.dta_desativacao, ' +
                        '       ta.cod_autenticacao_sisbov, '+
                        '       tce.cod_arquivo_sisbov as ind_animal_desmarcado_exportado, ' +
                        '       null as dta_liberacao_abate, ' +
                        '       ta.dta_insercao_sisbov as dta_insercao_sisbov ' +
                        '  from tab_animal ta ' +
                        '          left join tab_codigo_exportacao tce on ta.cod_pessoa_produtor = tce.cod_pessoa_produtor and ta.cod_animal = tce.cod_animal, ' +
                        '       tab_fazenda tf ' +
//                        '       tab_codigo_sisbov tcs ' +
                        ' where ( ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '    or   ta.cod_pessoa_corrente = :cod_pessoa_produtor ) ' +
//                        '   and tcs.cod_pais_sisbov = ta.cod_pais_sisbov ' +
//                        '   and tcs.cod_estado_sisbov = ta.cod_estado_sisbov ' +
//                        '   and tcs.cod_micro_regiao_sisbov = ta.cod_micro_regiao_sisbov ' +
//                        '   and tcs.cod_animal_sisbov = ta.cod_animal_sisbov ' +
                        '   and ta.cod_fazenda_manejo = tf.cod_fazenda ' +
                        '   and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                        '   and tf.dta_fim_validade is null ');
                        if DadosEvento.CodTipoEvento <> 36 then begin
                          QAnim.SQL.Add('   and ta.cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ');
                        end;
                        QAnim.SQL.Add('   and ta.cod_tipo_origem <> 4 ' +
                        '   and ta.dta_fim_validade is null ' +
                        '   and not exists ( select 1 ' +
                        '                      from tab_animal_evento tae ' +
                        '                     where tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '                       and tae.cod_evento = :cod_evento ' +
                        '                       and tae.cod_animal = ta.cod_animal ) ');
    end;
    if CodAnimais <> '' then begin
      if CodAnimais = '#PESQUISADOS' then begin
        QAnim.SQL.Add('   and ta.cod_animal in ( select cod_animal from #tmp_animais_evento )' );
      end else begin
        QAnim.SQL.Add('   and ta.cod_animal in (' + CodAnimais + ')' );
      end;
    end;
    if CodAnimaisManejo <> '' then begin
      QAnim.SQL.Add('   and ta.cod_fazenda_manejo = :cod_fazenda_manejo ' +
                        '   and ta.cod_animal_manejo in (' + CodAnimaisManejo + ')' );
    end;
    if CodLote > 0 then begin
      QAnim.SQL.Add('   and ta.cod_fazenda_corrente = :cod_fazenda_corrente ' +
                        '   and ta.cod_lote_corrente = :cod_lote_corrente');
    end;
    if CodLocal > 0 then begin
      QAnim.SQL.Add('   and ta.cod_fazenda_corrente = :cod_fazenda_corrente ' +
                        '   and ta.cod_local_corrente = :cod_local_corrente');
    end;
{$ENDIF}
    QAnim.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    QAnim.ParamByName('cod_evento').AsInteger := CodEvento;

    if CodAnimaisManejo <> '' then begin
      QAnim.ParamByName('cod_fazenda_manejo').AsInteger := CodFazenda;
    end;
    if CodLote > 0 then begin
      QAnim.ParamByName('cod_fazenda_corrente').AsInteger := CodFazenda;
      QAnim.ParamByName('cod_lote_corrente').AsInteger := CodLote;
    end;
    if CodLocal > 0 then begin
      QAnim.ParamByName('cod_fazenda_corrente').AsInteger := CodFazenda;
      QAnim.ParamByName('cod_local_corrente').AsInteger := CodLocal;
    end;

    QAnim.Open;
    if QAnim.IsEmpty then begin
      if IndRemover then begin
        Mensagens.Adicionar(952, Self.ClassName, NomeMetodo, []);
        Result := -952;
      end else begin
        Mensagens.Adicionar(783, Self.ClassName, NomeMetodo, []);
        Result := -783;
      end;
      Exit;
    end;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(693, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -693;
      Exit;
    end;
  end;
end;

function TIntAnimais.SelecionaAnimaisEventosEsp(CodFazenda: Integer;
  CodAnimaisManejo, CodAnimais: String; CodEvento: Integer;
  IndRemover: Boolean; var QAnim: THerdomQuery): Integer;
const
  NomeMetodo : String = 'SelecionaAnimaisEventosEsp';
var
  Param : TValoresParametro;
begin
  Result := 0;

  Param := TValoresParametro.Create(TValorParametro);
  // Verifica se pelo menos um parâmetro foi informado
  if (CodFazenda <= 0) and (CodAnimaisManejo = '') and (CodAnimais = '') then begin
    Mensagens.Adicionar(856, Self.ClassName, NomeMetodo, []);
    Result := -856;
    Exit;
  end;

  if CodAnimaisManejo <> '' then begin
     Param := TValoresParametro.Create(TValorParametro);
     Result := VerificaParametroMultiValorString(CodAnimaisManejo, Param);
  end;
  try
    // Se códigos de manejo foram informados, verifica se outras informações não foram
    // e verifica também se fazenda foi informada já que ela é necessária
    if CodAnimaisManejo <> '' then begin
      Result := VerificaFazenda(CodFazenda, True, 'Fazenda de manejo');
      if Result < 0 then begin
        Exit;
      end;
    end;
  finally
    Param.Free;
  end;

  // Obtem dados do animal
  try

    // Verifica o país informado
    QAnim.SQL.Clear;
{$IFDEF MSSQL}
    if IndRemover then begin
      QAnim.SQL.Add('select ta.cod_animal, ' +
                        '       ta.cod_pessoa_produtor, ' +
                        '       ta.cod_pessoa_tecnico, ' +
                        '       ta.cod_fazenda_manejo, ' +
                        '       tf.sgl_fazenda as sgl_fazenda_manejo, ' +
                        '       upper(ta.cod_animal_manejo) as cod_animal_manejo, ' +
                        '       ta.cod_animal_certificadora, ' +
                        '       ta.cod_pais_sisbov, ' +
                        '       ta.cod_estado_sisbov, ' +
                        '       ta.cod_micro_regiao_sisbov, ' +
                        '       ta.cod_animal_sisbov, ' +
                        '       ta.num_dv_sisbov, ' +
                        '       ta.cod_situacao_sisbov, ' +
                        '       ta.dta_identificacao_sisbov, ' +
                        '       ta.num_imovel_identificacao, ' +
                        '       ta.cod_localizacao_identificacao, ' +
                        '       ta.cod_propriedade_identificacao, ' +
                        '       ta.cod_fazenda_identificacao, ' +
                        '       ta.dta_nascimento, ' +
                        '       ta.num_imovel_nascimento, ' +
                        '       ta.cod_localizacao_nascimento, ' +
                        '       ta.cod_propriedade_nascimento, ' +
                        '       ta.cod_fazenda_nascimento, ' +
                        '       ta.dta_compra, ' +
                        '       ta.cod_pessoa_secundaria_criador, ' +
                        '       ta.nom_animal, ' +
                        '       ta.des_apelido, ' +
                        '       ta.cod_associacao_raca, ' +
                        '       ta.cod_grau_sangue, ' +
                        '       ta.cod_especie, ' +
                        '       ta.cod_aptidao, ' +
                        '       ta.cod_raca, ' +
                        '       ta.cod_pelagem, ' +
                        '       ta.ind_sexo, ' +
                        '       ta.cod_tipo_origem, ' +
                        '       ta.cod_animal_pai, ' +
                        '       ta.cod_animal_mae, ' +
                        '       ta.cod_animal_receptor, ' +
                        '       tae.ind_animal_castrado, ' +
                        '       tae.cod_regime_alimentar, ' +
                        '       tae.cod_categoria_animal, ' +
                        '       tae.cod_tipo_lugar, ' +
                        '       tae.cod_lote_corrente, ' +
                        '       tae.cod_local_corrente, ' +
                        '       tae.cod_fazenda_corrente, ' +
                        '       tae.num_imovel_corrente, ' +
                        '       tae.cod_localizacao_corrente, ' +
                        '       tae.cod_propriedade_corrente, ' +
                        '       tae.num_cnpj_cpf_corrente, ' +
                        '       tae.cod_pessoa_corrente, ' +
                        '       tae.cod_pessoa_secundaria_corrente, ' +
                        '       ta.dta_ultimo_evento, ' +
                        '       ta.dta_aplicacao_ultimo_evento, ' +
                        '       tae.dta_ultimo_evento as dta_ultimo_evento_anterior, ' +
                        '       tae.dta_aplicacao_ultimo_evento as dta_aplic_ult_evento_anterior, ' +
                        '       ta.cod_registro_log, ' +
                        '       ta.dta_efetivacao_cadastro, ' +
                        '       ta.cod_arquivo_sisbov, ' +
                        '       tae.cod_animal_associado, ' +
                        '       tae.qtd_peso_animal, ' +
                        '       ta.ind_apto_cobertura, ' +
                        '       tae.dta_desativacao, ' +
                        '       ta.cod_autenticacao_sisbov, ' +
                        '       null as dta_liberacao_abate, ' +
                        '       null as dta_insercao_sisbov, ' +
                        '       tce.cod_arquivo_sisbov as ind_animal_desmarcado_exportado ' +
                        '  from tab_animal ta ' +
                        '          left join tab_codigo_exportacao tce on ta.cod_pessoa_produtor = tce.cod_pessoa_produtor and ta.cod_animal = tce.cod_animal, ' +
//
//                        '  from tab_animal ta, ' +

                        '       tab_animal_evento tae, ' +
                        '       tab_fazenda  tf ' +
                        ' where tae.cod_pessoa_produtor = ta.cod_pessoa_produtor ' +
                        '   and tae.cod_animal = ta.cod_animal ' +
                        '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                        '   and ta.cod_fazenda_manejo = tf.cod_fazenda ' +
                        '   and tf.dta_fim_validade is null ' +
                        '   and ta.cod_tipo_origem <> 4 ' +
                        '   and ta.dta_fim_validade is null ' +
                        '   and tae.cod_evento = :cod_evento ');
    end else begin
      QAnim.SQL.Add('select ta.cod_animal, ' +
                        '       ta.cod_pessoa_produtor, ' +
                        '       ta.cod_pessoa_tecnico, ' +
                        '       ta.cod_fazenda_manejo, ' +
                        '       tf.sgl_fazenda as sgl_fazenda_manejo, ' +
                        '       upper(ta.cod_animal_manejo) as cod_animal_manejo, ' +
                        '       ta.cod_animal_certificadora, ' +
                        '       ta.cod_pais_sisbov, ' +
                        '       ta.cod_estado_sisbov, ' +
                        '       ta.cod_micro_regiao_sisbov, ' +
                        '       ta.cod_animal_sisbov, ' +
                        '       ta.num_dv_sisbov, ' +
                        '       ta.cod_situacao_sisbov, ' +
                        '       ta.dta_identificacao_sisbov, ' +
                        '       ta.num_imovel_identificacao, ' +
                        '       ta.cod_localizacao_identificacao, ' +
                        '       ta.cod_propriedade_identificacao, ' +
                        '       ta.cod_fazenda_identificacao, ' +
                        '       ta.dta_nascimento, ' +
                        '       ta.num_imovel_nascimento, ' +
                        '       ta.cod_localizacao_nascimento, ' +
                        '       ta.cod_propriedade_nascimento, ' +
                        '       ta.cod_fazenda_nascimento, ' +
                        '       ta.dta_compra, ' +
                        '       ta.cod_pessoa_secundaria_criador, ' +
                        '       ta.nom_animal, ' +
                        '       ta.des_apelido, ' +
                        '       ta.cod_associacao_raca, ' +
                        '       ta.cod_grau_sangue, ' +
                        '       ta.cod_especie, ' +
                        '       ta.cod_aptidao, ' +
                        '       ta.cod_raca, ' +
                        '       ta.cod_pelagem, ' +
                        '       ta.ind_sexo, ' +
                        '       ta.cod_tipo_origem, ' +
                        '       ta.cod_animal_pai, ' +
                        '       ta.cod_animal_mae, ' +
                        '       ta.cod_animal_receptor, ' +
                        '       ta.ind_animal_castrado, ' +
                        '       ta.cod_regime_alimentar, ' +
                        '       ta.cod_categoria_animal, ' +
                        '       ta.cod_tipo_lugar, ' +
                        '       ta.cod_lote_corrente, ' +
                        '       ta.cod_local_corrente, ' +
                        '       ta.cod_fazenda_corrente, ' +
                        '       ta.num_imovel_corrente, ' +
                        '       ta.cod_localizacao_corrente, ' +
                        '       ta.cod_propriedade_corrente, ' +
                        '       ta.num_cnpj_cpf_corrente, ' +
                        '       ta.cod_pessoa_corrente, ' +
                        '       ta.cod_pessoa_secundaria_corrente, ' +
                        '       ta.dta_ultimo_evento, ' +
                        '       ta.dta_aplicacao_ultimo_evento, ' +
                        '       convert(smalldatetime, null) as dta_ultimo_evento_anterior, ' +
                        '       convert(datetime, null) as dta_aplic_ult_evento_anterior, ' +
                        '       ta.cod_registro_log, ' +
                        '       ta.dta_efetivacao_cadastro, ' +
                        '       ta.cod_arquivo_sisbov, ' +
                        '       -1 as cod_animal_associado, ' +
                        '       0 as qtd_peso_animal, ' +
                        '       ta.ind_apto_cobertura, ' +
                        '       ta.dta_desativacao, ' +
                        '       ta.cod_autenticacao_sisbov, ' +
                        '       null as dta_liberacao_abate, ' +
                        '       null as dta_insercao_sisbov, ' +
                        '       tce.cod_arquivo_sisbov as ind_animal_desmarcado_exportado ' +
                        '  from tab_animal ta ' +
                        '          left join tab_codigo_exportacao tce on ta.cod_pessoa_produtor = tce.cod_pessoa_produtor and ta.cod_animal = tce.cod_animal, ' +
//
//                        '  from tab_animal ta, ' +
//
                        '       tab_fazenda tf ' +
                        ' where ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and ta.cod_tipo_origem <> 4 ' +
                        '   and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                        '   and ta.cod_fazenda_manejo = tf.cod_fazenda ' +
                        '   and tf.dta_fim_validade is null ' +
                        '   and ta.dta_fim_validade is null ' +
                        '   and not exists (select 1 ' +
                        '                     from tab_animal_evento tae ' +
                        '                    where tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '                      and tae.cod_evento = :cod_evento ' +
                        '                      and tae.cod_animal = ta.cod_animal ) ');
    end;
    if CodAnimaisManejo <> '' then begin
      QAnim.SQL.Add('   and ta.cod_fazenda_manejo = :cod_fazenda_manejo ' +
                        '   and ta.cod_animal_manejo in (' + CodAnimaisManejo + ')' );
    end;
    if CodAnimais <> '' then begin
      QAnim.SQL.Add('   and ta.cod_animal in (' + CodAnimais + ')' );
    end;
{$ENDIF}
    QAnim.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    QAnim.ParamByName('cod_evento').AsInteger := CodEvento;

    if CodAnimaisManejo <> '' then begin
      QAnim.ParamByName('cod_fazenda_manejo').AsInteger := CodFazenda;
    end;

    QAnim.Open;
    if QAnim.IsEmpty then begin
      if IndRemover then begin
        Mensagens.Adicionar(952, Self.ClassName, NomeMetodo, []);
        Result := -952;
      end else begin
        Mensagens.Adicionar(783, Self.ClassName, NomeMetodo, []);
        Result := -783;
      end;
      Exit;
    end;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(693, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -693;
      Exit;
    end;
  end;
end;

procedure TIntAnimais.ObtemAnimalSelecionadoEvento(
  var DadosAnimal: TDadosAnimal; QAnim: THerdomQuery);
begin
  DadosAnimal.CodPessoaProdutor           := QAnim.FieldByName('cod_pessoa_produtor').AsInteger;
  DadosAnimal.CodAnimal                   := QAnim.FieldByName('cod_animal').AsInteger;
  DadosAnimal.CodFazendaManejo            := QAnim.FieldByName('cod_fazenda_manejo').AsInteger;
  DadosAnimal.SglFazendaManejo            := QAnim.FieldByName('sgl_fazenda_manejo').AsString;
  DadosAnimal.CodAnimalManejo             := QAnim.FieldByName('cod_animal_manejo').AsString;
  DadosAnimal.CodAnimalCertificadora      := QAnim.FieldByName('cod_animal_certificadora').AsString;
  DadosAnimal.CodPaisSisbov               := QAnim.FieldByName('cod_pais_sisbov').AsInteger;
  DadosAnimal.CodEstadoSisbov             := QAnim.FieldByName('cod_estado_sisbov').AsInteger;
  DadosAnimal.CodMicroRegiaoSisbov        := QAnim.FieldByName('cod_micro_regiao_sisbov').AsInteger;
  DadosAnimal.CodAnimalSisbov             := QAnim.FieldByName('cod_animal_sisbov').AsInteger;
  DadosAnimal.NumDVSisbov                 := QAnim.FieldByName('num_dv_sisbov').AsInteger;
  DadosAnimal.CodSituacaoSisbov           := QAnim.FieldByName('cod_situacao_sisbov').AsString;
  DadosAnimal.DtaIdentificacaoSisbov      := Trunc(QAnim.FieldByName('dta_identificacao_sisbov').AsDateTime);
  DadosAnimal.NumImovelIdentificacao      := QAnim.FieldByName('num_imovel_identificacao').AsString;
  DadosAnimal.CodLocalizacaoIdentificacao := QAnim.FieldByName('cod_localizacao_identificacao').AsInteger;
  DadosAnimal.CodPropriedadeIdentificacao := QAnim.FieldByName('cod_propriedade_identificacao').AsInteger;
  DadosAnimal.CodFazendaIdentificacao     := QAnim.FieldByName('cod_fazenda_identificacao').AsInteger;
  DadosAnimal.DtaNascimento               := QAnim.FieldByName('dta_nascimento').AsDateTime;
  DadosAnimal.NumImovelNascimento         := QAnim.FieldByName('num_imovel_nascimento').AsString;
  DadosAnimal.CodLocalizacaoNascimento    := QAnim.FieldByName('cod_localizacao_nascimento').AsInteger;
  DadosAnimal.CodPropriedadeNascimento    := QAnim.FieldByName('cod_propriedade_nascimento').AsInteger;
  DadosAnimal.CodFazendaNascimento        := QAnim.FieldByName('cod_fazenda_nascimento').AsInteger;
  DadosAnimal.DtaCompra                   := QAnim.FieldByName('dta_compra').AsDatetime;
  DadosAnimal.CodPessoaSecundariaCriador  := QAnim.FieldByName('cod_pessoa_secundaria_criador').AsInteger;
  DadosAnimal.NomAnimal                   := QAnim.FieldByName('nom_animal').AsString;
  DadosAnimal.DesApelido                  := QAnim.FieldByName('des_apelido').AsString;
  DadosAnimal.CodAssociacaoRaca           := QAnim.FieldByName('cod_associacao_raca').AsInteger;
  DadosAnimal.CodGrauSangue               := QAnim.FieldByName('cod_grau_sangue').AsInteger;
  DadosAnimal.CodEspecie                  := QAnim.FieldByName('cod_especie').AsInteger;
  DadosAnimal.CodAptidao                  := QAnim.FieldByName('cod_aptidao').AsInteger;
  DadosAnimal.CodRaca                     := QAnim.FieldByName('cod_raca').AsInteger;
  DadosAnimal.CodPelagem                  := QAnim.FieldByName('cod_pelagem').AsInteger;
  DadosAnimal.IndSexo                     := QAnim.FieldByName('ind_sexo').AsString;
  DadosAnimal.CodTipoOrigem               := QAnim.FieldByName('cod_tipo_origem').AsInteger;
  DadosAnimal.CodAnimalPai                := QAnim.FieldByName('cod_animal_pai').AsInteger;
  DadosAnimal.CodAnimalMae                := QAnim.FieldByName('cod_animal_mae').AsInteger;
  DadosAnimal.CodAnimalReceptor           := QAnim.FieldByName('cod_animal_receptor').AsInteger;
  DadosAnimal.IndAnimalCastrado           := QAnim.FieldByName('ind_animal_castrado').AsString;
  DadosAnimal.CodRegimeAlimentar          := QAnim.FieldByName('cod_regime_alimentar').AsInteger;
  DadosAnimal.CodCategoriaAnimal          := QAnim.FieldByName('cod_categoria_animal').AsInteger;
  DadosAnimal.CodTipoLugar                := QAnim.FieldByName('cod_tipo_lugar').AsInteger;
  DadosAnimal.CodLoteCorrente             := QAnim.FieldByName('cod_lote_corrente').AsInteger;
  DadosAnimal.CodLocalCorrente            := QAnim.FieldByName('cod_local_corrente').AsInteger;
  DadosAnimal.CodFazendaCorrente          := QAnim.FieldByName('cod_fazenda_corrente').AsInteger;
  DadosAnimal.NumImovelCorrente           := QAnim.FieldByName('num_imovel_corrente').AsString;
  DadosAnimal.CodLocalizacaoCorrente      := QAnim.FieldByName('cod_localizacao_corrente').AsInteger;
  DadosAnimal.CodPropriedadeCorrente      := QAnim.FieldByName('cod_propriedade_corrente').AsInteger;
  DadosAnimal.NumCNPJCPFCorrente          := QAnim.FieldByName('num_cnpj_cpf_corrente').AsString;
  DadosAnimal.CodPessoaCorrente           := QAnim.FieldByName('cod_pessoa_corrente').AsInteger;
  DadosAnimal.CodPessoaSecundariaCorrente := QAnim.FieldByName('cod_pessoa_secundaria_corrente').AsInteger;
  DadosAnimal.DtaUltimoEvento             := QAnim.FieldByName('dta_ultimo_evento').AsDatetime;
  DadosAnimal.DtaAplicacaoUltimoEvento    := QAnim.FieldByName('dta_aplicacao_ultimo_evento').AsDatetime;
  DadosAnimal.DtaUltimoEventoAnterior     := QAnim.FieldByName('dta_ultimo_evento_anterior').AsDatetime;
  DadosAnimal.DtaAplicacaoUltimoEventoAnterior := QAnim.FieldByName('dta_aplic_ult_evento_anterior').AsDatetime;
  DadosAnimal.CodRegistroLog              := QAnim.FieldByName('cod_registro_log').AsInteger;
  DadosAnimal.DtaEfetivacaoCadastro       := QAnim.FieldByName('dta_efetivacao_cadastro').AsDateTime;
  DadosAnimal.CodArquivoSisbov            := QAnim.FieldByName('cod_arquivo_sisbov').AsInteger;
  DadosAnimal.CodAnimalAssociado          := QAnim.FieldByName('cod_animal_associado').AsInteger;
  DadosAnimal.QtdPesoAnimal               := QAnim.FieldByName('qtd_peso_animal').AsInteger;
  DadosAnimal.IndAptoCobertura            := QAnim.FieldByName('ind_apto_cobertura').AsString;
  DadosAnimal.DtaDesativacao              := QAnim.FieldByName('dta_desativacao').AsDateTime;
  DadosAnimal.CodAutenticacaoSisbov       := QAnim.FieldByName('cod_autenticacao_sisbov').AsString;
  DadosAnimal.CodPessoaTecnico            := QAnim.FieldByName('cod_pessoa_tecnico').AsInteger;
  DadosAnimal.IndAnimalExpDesmCancelado   := not (QAnim.FieldByName('ind_animal_desmarcado_exportado').IsNull);
  DadosAnimal.IndAptidaoRegimeAlimentarInvalidaNoEvento := 'N';
  if (not QAnim.FieldByName('dta_liberacao_abate').IsNull) then begin
    DadosAnimal.DtaLiberacaoAbate           := QAnim.FieldByName('dta_liberacao_abate').AsDateTime;
  end else begin
    DadosAnimal.DtaLiberacaoAbate           := 0;
  end;
  if (not QAnim.FieldByName('dta_insercao_sisbov').IsNull) then begin
    DadosAnimal.DtaInsercaoSisbov           := QAnim.FieldByName('dta_insercao_sisbov').AsDateTime;
  end else begin
    DadosAnimal.DtaInsercaoSisbov           := 0;
  end;
end;

procedure TIntAnimais.ObtemAnimalSelecionado(
  var DadosAnimal: TDadosAnimal);
begin
  DadosAnimal.CodPessoaProdutor           := FQueryAux.FieldByName('cod_pessoa_produtor').AsInteger;
  DadosAnimal.CodAnimal                   := FQueryAux.FieldByName('cod_animal').AsInteger;
  DadosAnimal.CodFazendaManejo            := FQueryAux.FieldByName('cod_fazenda_manejo').AsInteger;
  DadosAnimal.SglFazendaManejo            := FQueryAux.FieldByName('sgl_fazenda_manejo').AsString;
  DadosAnimal.CodAnimalManejo             := FQueryAux.FieldByName('cod_animal_manejo').AsString;
  DadosAnimal.CodAnimalCertificadora      := FQueryAux.FieldByName('cod_animal_certificadora').AsString;
  DadosAnimal.CodPaisSisbov               := FQueryAux.FieldByName('cod_pais_sisbov').AsInteger;
  DadosAnimal.CodEstadoSisbov             := FQueryAux.FieldByName('cod_estado_sisbov').AsInteger;
  DadosAnimal.CodMicroRegiaoSisbov        := FQueryAux.FieldByName('cod_micro_regiao_sisbov').AsInteger;
  DadosAnimal.CodAnimalSisbov             := FQueryAux.FieldByName('cod_animal_sisbov').AsInteger;
  DadosAnimal.NumDVSisbov                 := FQueryAux.FieldByName('num_dv_sisbov').AsInteger;
  DadosAnimal.CodSituacaoSisbov           := FQueryAux.FieldByName('cod_situacao_sisbov').AsString;
  DadosAnimal.DtaIdentificacaoSisbov      := Trunc(FQueryAux.FieldByName('dta_identificacao_sisbov').AsDateTime);
  DadosAnimal.NumImovelIdentificacao      := FQueryAux.FieldByName('num_imovel_identificacao').AsString;
  DadosAnimal.CodLocalizacaoIdentificacao := FQueryAux.FieldByName('cod_localizacao_identificacao').AsInteger;
  DadosAnimal.CodPropriedadeIdentificacao := FQueryAux.FieldByName('cod_propriedade_identificacao').AsInteger;
  DadosAnimal.CodFazendaIdentificacao     := FQueryAux.FieldByName('cod_fazenda_identificacao').AsInteger;
  DadosAnimal.DtaNascimento               := FQueryAux.FieldByName('dta_nascimento').AsDateTime;
  DadosAnimal.NumImovelNascimento         := FQueryAux.FieldByName('num_imovel_nascimento').AsString;
  DadosAnimal.CodLocalizacaoNascimento    := FQueryAux.FieldByName('cod_localizacao_nascimento').AsInteger;
  DadosAnimal.CodPropriedadeNascimento    := FQueryAux.FieldByName('cod_propriedade_nascimento').AsInteger;
  DadosAnimal.CodFazendaNascimento        := FQueryAux.FieldByName('cod_fazenda_nascimento').AsInteger;
  DadosAnimal.DtaCompra                   := FQueryAux.FieldByName('dta_compra').AsDatetime;
  DadosAnimal.CodPessoaSecundariaCriador  := FQueryAux.FieldByName('cod_pessoa_secundaria_criador').AsInteger;
  DadosAnimal.NomAnimal                   := FQueryAux.FieldByName('nom_animal').AsString;
  DadosAnimal.DesApelido                  := FQueryAux.FieldByName('des_apelido').AsString;
  DadosAnimal.CodAssociacaoRaca           := FQueryAux.FieldByName('cod_associacao_raca').AsInteger;
  DadosAnimal.CodGrauSangue               := FQueryAux.FieldByName('cod_grau_sangue').AsInteger;
  DadosAnimal.CodEspecie                  := FQueryAux.FieldByName('cod_especie').AsInteger;
  DadosAnimal.CodAptidao                  := FQueryAux.FieldByName('cod_aptidao').AsInteger;
  DadosAnimal.CodRaca                     := FQueryAux.FieldByName('cod_raca').AsInteger;
  DadosAnimal.CodPelagem                  := FQueryAux.FieldByName('cod_pelagem').AsInteger;
  DadosAnimal.IndSexo                     := FQueryAux.FieldByName('ind_sexo').AsString;
  DadosAnimal.CodTipoOrigem               := FQueryAux.FieldByName('cod_tipo_origem').AsInteger;
  DadosAnimal.CodAnimalPai                := FQueryAux.FieldByName('cod_animal_pai').AsInteger;
  DadosAnimal.CodAnimalMae                := FQueryAux.FieldByName('cod_animal_mae').AsInteger;
  DadosAnimal.CodAnimalReceptor           := FQueryAux.FieldByName('cod_animal_receptor').AsInteger;
  DadosAnimal.IndAnimalCastrado           := FQueryAux.FieldByName('ind_animal_castrado').AsString;
  DadosAnimal.CodRegimeAlimentar          := FQueryAux.FieldByName('cod_regime_alimentar').AsInteger;
  DadosAnimal.CodCategoriaAnimal          := FQueryAux.FieldByName('cod_categoria_animal').AsInteger;
  DadosAnimal.CodTipoLugar                := FQueryAux.FieldByName('cod_tipo_lugar').AsInteger;
  DadosAnimal.CodLoteCorrente             := FQueryAux.FieldByName('cod_lote_corrente').AsInteger;
  DadosAnimal.CodLocalCorrente            := FQueryAux.FieldByName('cod_local_corrente').AsInteger;
  DadosAnimal.CodFazendaCorrente          := FQueryAux.FieldByName('cod_fazenda_corrente').AsInteger;
  DadosAnimal.NumImovelCorrente           := FQueryAux.FieldByName('num_imovel_corrente').AsString;
  DadosAnimal.CodLocalizacaoCorrente      := FQueryAux.FieldByName('cod_localizacao_corrente').AsInteger;
  DadosAnimal.CodPropriedadeCorrente      := FQueryAux.FieldByName('cod_propriedade_corrente').AsInteger;
  DadosAnimal.NumCNPJCPFCorrente          := FQueryAux.FieldByName('num_cnpj_cpf_corrente').AsString;
  DadosAnimal.CodPessoaCorrente           := FQueryAux.FieldByName('cod_pessoa_corrente').AsInteger;
  DadosAnimal.CodPessoaSecundariaCorrente := FQueryAux.FieldByName('cod_pessoa_secundaria_corrente').AsInteger;
  DadosAnimal.DtaUltimoEvento             := FQueryAux.FieldByName('dta_ultimo_evento').AsDatetime;
  DadosAnimal.DtaAplicacaoUltimoEvento    := FQueryAux.FieldByName('dta_aplicacao_ultimo_evento').AsDatetime;
  DadosAnimal.DtaUltimoEventoAnterior     := FQueryAux.FieldByName('dta_ultimo_evento_anterior').AsDatetime;
  DadosAnimal.DtaAplicacaoUltimoEventoAnterior := FQueryAux.FieldByName('dta_aplic_ult_evento_anterior').AsDatetime;
  DadosAnimal.CodRegistroLog              := FQueryAux.FieldByName('cod_registro_log').AsInteger;
  DadosAnimal.DtaEfetivacaoCadastro       := FQueryAux.FieldByName('dta_efetivacao_cadastro').AsDateTime;
  DadosAnimal.CodArquivoSisbov            := FQueryAux.FieldByName('cod_arquivo_sisbov').AsInteger;
  DadosAnimal.CodAnimalAssociado          := FQueryAux.FieldByName('cod_animal_associado').AsInteger;
  DadosAnimal.QtdPesoAnimal               := 0;
  DadosAnimal.IndAptoCobertura            := FQueryAux.FieldByName('ind_apto_cobertura').AsString;
  DadosAnimal.DtaDesativacao              := FQueryAux.FieldByName('dta_desativacao').AsDateTime;
  DadosAnimal.IndCodSisBovReservado       := FQueryAux.FieldByName('ind_cod_sisbov_reservado').AsString;
  DadosAnimal.CodAutenticacaoSisbov       := FQueryAux.FieldByName('cod_autenticacao_sisbov').AsString;
  DadosAnimal.CodPessoaTecnico            := FQueryAux.FieldByName('cod_pessoa_tecnico').AsInteger;
  DadosAnimal.NumRgd                      := FQueryAux.FieldByName('num_rgd').AsString;
  DadosAnimal.CodAnimalVendido            := FQueryAux.FieldByName('cod_animal_vendido').AsInteger;
  DadosAnimal.CodSituacaoAnimalVendido    := FQueryAux.FieldByName('cod_situacao_animal_vendido').AsString;
end;

procedure TIntAnimais.MontaQueryUpdate;
begin
  FQueryAux.SQL.Clear;
{$IFDEF MSSQL}
  FQueryAux.SQL.Add('update tab_animal ' +
                    '   set cod_fazenda_manejo = :cod_fazenda_manejo, ' +
                    '       cod_animal_manejo = :cod_animal_manejo, ' +
                    '       cod_animal_certificadora = :cod_animal_certificadora, ' +
                    '       cod_pais_sisbov = :cod_pais_sisbov, ' +
                    '       cod_estado_sisbov = :cod_estado_sisbov, ' +
                    '       cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov, ' +
                    '       cod_animal_sisbov = :cod_animal_sisbov, ' +
                    '       num_dv_sisbov = :num_dv_sisbov, ' +
                    '       dta_identificacao_sisbov = :dta_identificacao_sisbov, ' +
                    '       num_imovel_identificacao = :num_imovel_identificacao, ' +
                    '       cod_localizacao_identificacao = :cod_localizacao_identificacao, ' +
                    '       cod_propriedade_identificacao = :cod_propriedade_identificacao, ' +
                    '       cod_fazenda_identificacao = :cod_fazenda_identificacao, ' +
                    '       dta_nascimento = :dta_nascimento, ' +
                    '       num_imovel_nascimento = :num_imovel_nascimento, ' +
                    '       cod_localizacao_nascimento = :cod_localizacao_nascimento, ' +
                    '       cod_propriedade_nascimento = :cod_propriedade_nascimento, ' +
                    '       cod_fazenda_nascimento = :cod_fazenda_nascimento, ' +
                    '       dta_compra = :dta_compra, ' +
                    '       cod_pessoa_secundaria_criador = :cod_pessoa_secundaria_criador, ' +
                    '       nom_animal = :nom_animal, ' +
                    '       des_apelido = :des_apelido, ' +
                    '       num_transponder = :num_transponder, ' +
                    '       cod_tipo_identificador_1 = :cod_tipo_identificador_1, ' +
                    '       cod_posicao_identificador_1 = :cod_posicao_identificador_1, ' +
                    '       cod_tipo_identificador_2 = :cod_tipo_identificador_2, ' +
                    '       cod_posicao_identificador_2 = :cod_posicao_identificador_2, ' +
                    '       cod_tipo_identificador_3 = :cod_tipo_identificador_3, ' +
                    '       cod_posicao_identificador_3 = :cod_posicao_identificador_3, ' +
                    '       cod_tipo_identificador_4 = :cod_tipo_identificador_4, ' +
                    '       cod_posicao_identificador_4 = :cod_posicao_identificador_4, ' +
                    '       cod_raca = :cod_raca, ' +
                    '       cod_pelagem = :cod_pelagem, ' +
                    '       ind_animal_castrado = :ind_animal_castrado, ' +
                    '       cod_regime_alimentar = :cod_regime_alimentar, ' +
                    '       cod_categoria_animal = :cod_categoria_animal, ' +
                    '       cod_lote_corrente = :cod_lote_corrente, ' +
                    '       cod_local_corrente = :cod_local_corrente, ' +
                    '       cod_tipo_lugar = :cod_tipo_lugar, ' +
                    '       num_imovel_corrente = :num_imovel_corrente, ' +
                    '       cod_localizacao_corrente = :cod_localizacao_corrente, ' +
                    '       cod_propriedade_corrente = :cod_propriedade_corrente, ' +
                    '       cod_fazenda_corrente = :cod_fazenda_corrente, ' +
                    '       num_cnpj_cpf_corrente = :num_cnpj_cpf_corrente, ' +
                    '       cod_pessoa_corrente = :cod_pessoa_corrente, ' +
                    '       cod_pessoa_secundaria_corrente = :cod_pessoa_secundaria_corrente, ' +
                    '       cod_pais_origem = :cod_pais_origem, ' +
                    '       des_propriedade_origem = :des_propriedade_origem, ' +
                    '       dta_autorizacao_importacao = :dta_autorizacao_importacao, ' +
                    '       dta_entrada_pais = :dta_entrada_pais, ' +
                    '       num_guia_importacao = :num_guia_importacao, ' +
                    '       num_licenca_importacao = :num_licenca_importacao, ' +
                    '       txt_observacao = :txt_observacao, ' +
                    '       num_gta = :num_gta, ' +
                    '       dta_emissao_gta = :dta_emissao_gta, ' +
                    '       num_nota_fiscal = :num_nota_fiscal, ' +
                    '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                    '       ind_cod_sisbov_reservado = :ind_cod_sisbov_reservado, ' +
                    '       cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                    ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                    '   and cod_animal = :cod_animal ');
{$ENDIF}
end;

function TIntAnimais.AlterarAnimal(ECodAnimal,
                                   ECodFazendaManejo: Integer;
                                   ECodAnimalManejo,
                                   ECodAnimalCertificadora: String;
                                   ECodPaisSisBov,
                                   ECodEstadoSisBov,
                                   ECodMicroRegiaoSisBov,
                                   ECodAnimalSisbov,
                                   ENumDVSisbov: Integer;
                                   EDtaIdentificacaoSisbov: TDateTime;
                                   ENumImovelIdentificacao: String;
                                   ECodLocalizacaoIdentificacao,
                                   ECodPropriedadeIdentificacao,
                                   ECodFazendaIdentificacao: Integer;
                                   EDtaNascimento: TDateTime;
                                   ENumImovelNascimento: String;
                                   ECodLocalizacaoNascimento,
                                   ECodPropriedadeNascimento,
                                   ECodFazendaNascimento: Integer;
                                   EDtaCompra: TDatetime;
                                   ECodPessoaSecundariaCriador: Integer;
                                   ENomAnimal,
                                   EDesApelido,
                                   ENumTransponder: String;
                                   ECodTipoIdentificador1,
                                   ECodPosicaoIdentificador1,
                                   ECodTipoIdentificador2,
                                   ECodPosicaoIdentificador2,
                                   ECodTipoIdentificador3,
                                   ECodPosicaoIdentificador3,
                                   ECodTipoIdentificador4,
                                   ECodPosicaoIdentificador4,
                                   ECodRaca,
                                   ECodPelagem: Integer;
                                   EIndAnimalCastrado: String;
                                   ECodRegimeAlimentar,
                                   ECodCategoriaAnimal,
                                   ECodTipoLugar,
                                   ECodLoteCorrente,
                                   ECodLocalCorrente,
                                   ECodFazendaCorrente: Integer;
                                   ENumImovelCorrente: String;
                                   ECodLocalizacaoCorrente,
                                   ECodPropriedadeCorrente: Integer;
                                   ENumCNPJCPFCorrente: String;
                                   ECodPessoaCorrente,
                                   ECodPessoaSecundariaCorrente,
                                   ECodPaisOrigem: Integer;
                                   EDesPropriedadeOrigem: String;
                                   EDtaAutorizacaoImportacao,
                                   EDtaEntradaPais: TDatetime;
                                   ENumGuiaImportacao,
                                   ENumLicencaImportacao,
                                   ETxtObservacao,
                                   EOrigem,
                                   ENumGta: String;
                                   EDtaEmissaoGta: TDateTime;
                                   ENumNotaFiscal: Integer;
                                   EUsarSisbov: Boolean;
                                   ECodMetodo: Integer;
                                   EDadosAnimal: TDadosAnimal;
                                   EIndCodSisBovReservado:String;
                                   ECodPessoaTecnico: Integer;
                                   EIndSexo: String): Integer;
const
   NomMetodo: String = 'AlterarAnimal';
var
  Q : THerdomQuery;
  X : Integer;
  CodTecnico, CodOrdemServico, CodIdPropriedadeSISBOV: Integer;
  IndAssociacaoTecnicoAnimal: String;
  DataNoventena: TDateTime;
begin
  DataNoventena := 0;
  // Altera animal
  Q := THerdomQuery.Create(conexao, nil);
  try
    // verifica se o animal a ser alterado é do produtor corrente no sistema
    with Q do
    begin
      SQL.Clear;
      SQL.Add(' select cod_pessoa_produtor as CodPessaProdutor ' +
              '   from tab_animal ta '+
              '  where ta.cod_animal = :cod_animal ');
      ParamByName('cod_animal').AsInteger := ECodAnimal;
      Open;

      if (FieldByName('CodPessaProdutor').AsInteger <> Conexao.CodProdutorTrabalho) and
         not (IsEmpty) then
      begin
        Mensagens.Adicionar(2262, Self.ClassName, NomMetodo, []);
        Result := -2262;
        Exit
      end;
    end;

    // verifica se o animal a ser alterado possui um tecnico associado.
    with Q do
    begin
      SQL.Clear;
      SQL.Add(' select isnull(ta.cod_pessoa_tecnico, -1) as cod_pessoa_tecnico ' +
              '   from tab_animal ta '+
              '  where ta.cod_animal = :cod_animal ');
      ParamByName('cod_animal').AsInteger := ECodAnimal;
      Open;
      CodTecnico := Q.FieldByName('cod_pessoa_tecnico').AsInteger;
    end;

    IndAssociacaoTecnicoAnimal := ValorParametro(107);
    if (UpperCase(IndAssociacaoTecnicoAnimal) = 'S') and
       (ECodPessoaTecnico <= 0) and
       (CodTecnico <= 0) then
    begin
       Mensagens.Adicionar(2192, Self.ClassName, NomMetodo, []);
       Result := -2192;
       Exit;
    end;

    if (Conexao.CodPapelUsuario = 9) and
       (ECodPessoaTecnico > 0) then
    begin
      Q.SQL.Clear;
      Q.SQL.Add(' select 1 ');
      Q.SQL.Add('   from tab_tecnico tt ');
      Q.SQL.Add('      , tab_tecnico_produtor ttp ');
      Q.SQL.Add('  where tt.cod_pessoa_tecnico = ttp.cod_pessoa_tecnico ');
      Q.SQL.Add('    and tt.cod_pessoa_tecnico = :cod_pessoa_tecnico ');
      Q.SQL.Add('    and tt.cod_pessoa_gestor  = :cod_pessoa_gestor ');
      Q.SQL.Add('    and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('    and tt.dta_fim_validade is null ');
      Q.SQL.Add('    and ttp.dta_fim_validade is null ');
      Q.ParamByName('cod_pessoa_tecnico').AsInteger := ECodPessoaTecnico;
      Q.ParamByName('cod_pessoa_gestor').AsInteger  := Conexao.CodPessoa;
      Q.ParamByName('cod_pessoa_produtor').AsInteger  := Conexao.CodProdutorTrabalho;

      Q.Open;
      if Q.IsEmpty then
      begin
        Mensagens.Adicionar(2191, Self.ClassName, NomMetodo, []);
        Result := -2191;
        Exit
      end;
    end;

    if (CodTecnico <> ECodPessoaTecnico) and (ECodPessoaTecnico > 0) then
    begin
      // Verifica se o Técnico atende o produtor corrente, caso contrário
      // lança mensagem informando e aborta op.
      Q.SQL.Clear;
      Q.SQL.Add(' select 1 ');
      Q.SQL.Add('   from tab_tecnico tt ');
      Q.SQL.Add('      , tab_tecnico_produtor ttp ');
      Q.SQL.Add('  where tt.cod_pessoa_tecnico = ttp.cod_pessoa_tecnico ');
      Q.SQL.Add('    and tt.cod_pessoa_tecnico = :cod_pessoa_tecnico ');
      Q.SQL.Add('    and tt.cod_pessoa_gestor  = :cod_pessoa_gestor ');
      Q.SQL.Add('    and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('    and tt.dta_fim_validade is null ');
      Q.SQL.Add('    and ttp.dta_fim_validade is null ');
      Q.ParamByName('cod_pessoa_tecnico').AsInteger   := ECodPessoaTecnico;
      Q.ParamByName('cod_pessoa_gestor').AsInteger    := Conexao.CodPessoa;
      Q.ParamByName('cod_pessoa_produtor').AsInteger  := Conexao.CodProdutorTrabalho;
      Q.Open;
      if (Q.IsEmpty) or
         ((Conexao.CodPapelUsuario = 3) and (ECodPessoaTecnico <> Conexao.CodPessoa)) then
      begin
        Mensagens.Adicionar(1705, Self.ClassName, NomMetodo, []);
        Result := -1705;
        Exit;
      end;
      CodTecnico := ECodPessoaTecnico;
    end;

    // Quando o animal está identificado não é permitido alterar os atributos
    // abaixo.
    if EDadosAnimal.CodSituacaoSisbov = 'I' then
    begin
      ECodFazendaNascimento     := EDadosAnimal.CodFazendaNascimento;
      ECodPropriedadeNascimento := EDadosAnimal.CodPropriedadeNascimento;
      ENumImovelNascimento      := EDadosAnimal.NumImovelNascimento;
      ECodLocalizacaoNascimento := EDadosAnimal.CodLocalizacaoNascimento;

      ECodFazendaIdentificacao     := EDadosAnimal.CodFazendaIdentificacao;
      ECodPropriedadeIdentificacao := EDadosAnimal.CodPropriedadeIdentificacao;
      ENumImovelIdentificacao      := EDadosAnimal.NumImovelIdentificacao;
      ECodLocalizacaoIdentificacao := EDadosAnimal.CodLocalizacaoIdentificacao;
    end;

    // Estes atributos só podem ser alterados pelos eventos
    ECodFazendaCorrente         := EDadosAnimal.CodFazendaCorrente;
    ECodPropriedadeCorrente     := EDadosAnimal.CodPropriedadeCorrente;
    ENumImovelCorrente          := EDadosAnimal.NumImovelCorrente;
    ECodLocalizacaoCorrente     := EDadosAnimal.CodLocalizacaoCorrente;
    ENumCNPJCPFCorrente         := EDadosAnimal.NumCNPJCPFCorrente;
    ECodPessoaCorrente          := EDadosAnimal.CodPessoaCorrente;
    ECodPessoaSecundariaCriador := EDadosAnimal.CodPessoaSecundariaCriador;

    try
      FQueryAux.SQLConnection := Conexao.SQLConnection;

      // Abre transação
      BeginTran;

      // Atualiza a situação do código sisbov para "DISP" (1) se todas as
      // condições abaixo forem satisfeitas
      // - o animal esta associado a um código SISBOV
      // - o código sisbov foi alterado
      // - a situação sisbov do animal é "P"
      // - o código não estiver sendo utilizado por nenhum outro animal
      // - o animal deve ser nascido ou comprado
      if (EDadosAnimal.CodSituacaoSisbov = 'P') and
         ((ECodPaisSisbov <> EDadosAnimal.CodPaisSisbov) or
          (ECodEstadoSisbov <> EDadosAnimal.CodEstadoSisbov) or
          (ECodMicroRegiaoSisbov <> EDadosAnimal.CodMicroRegiaoSisbov) or
          (ECodAnimalSisbov <> EDadosAnimal.CodAnimalSisbov) or
          (ENumDVSisbov <> EDadosAnimal.NumDVSisbov)) and
         (EDadosAnimal.CodPaisSisbov > 0) and
         (EDadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(EDadosAnimal.CodPaisSisbov,
                                                       EDadosAnimal.CodEstadoSisbov,
                                                       EDadosAnimal.CodMicroRegiaoSisbov,
                                                       EDadosAnimal.CodAnimalSisbov,
                                                       1);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      if (ECodAnimalSisBov > 0) and (EDadosanimal.CodTipoOrigem <> 4) then begin
        // verifica se o código sisbov está reservado para este produtor
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add(' select cod_ordem_servico from tab_codigo_sisbov ');
        Q.SQL.Add(' where cod_animal_sisbov = :cod_animal_sisbov ');
        Q.SQL.Add(' and   cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
        Q.SQL.Add(' and   cod_estado_sisbov = :cod_estado_sisbov ');
        Q.SQL.Add(' and   cod_pais_sisbov = :cod_pais_sisbov ');
        Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add(' and   cod_pessoa_produtor is not null ');
        {$ENDIF}
        Q.Parambyname('cod_animal_sisbov').AsInteger       := ECodAnimalSisBov;
        Q.Parambyname('cod_pais_sisbov').AsInteger         := ECodPaisSisBov;
        Q.Parambyname('cod_estado_sisbov').AsInteger       := ECodEstadoSisBov;
        Q.Parambyname('cod_micro_regiao_sisbov').AsInteger := ECodMicroRegiaoSisBov;
        Q.Parambyname('cod_pessoa_produtor').AsInteger     := Conexao.CodProdutorTrabalho;
        Q.Open;

        if Q.IsEmpty then
        begin
          if not ((EDadosanimal.CodTipoOrigem = 2) and (EDadosanimal.CodSituacaoSisbov = 'I')) then
          begin
            Mensagens.Adicionar(1589, Self.ClassName, 'InserirAnimal (' + EOrigem + ')', []);
            Result := -1589;
            RollBack;
            Exit;
          end;
          CodOrdemServico := -1;
        end
        else
        begin
          CodOrdemServico := Q.FieldByName('cod_ordem_servico').AsInteger;
        end;

        // Verifica se o código SISBOV está associado a uma OS
        if CodOrdemServico > 0 then
        begin
          Q.Close;
          Q.SQL.Text :=
          {$IFDEF MSSQL}
            'select ' +
            '  top 1 ' +
            '  tos.cod_pessoa_tecnico ' +
            '  , tos.cod_identificacao_dupla ' +
            '  , tidti.cod_tipo_identificador_1 ' +
            '  , tidti.cod_tipo_identificador_2 ' +
            'from ' +
            '  tab_ordem_servico tos ' +
            '  left outer join tab_ident_dupla_tipo_ident tidti on ' +
            '    tos.cod_identificacao_dupla = tidti.cod_identificacao_dupla ' +
            '    and tidti.cod_tipo_identificador_1 is not null ' +
            'where ' +
            '  tos.cod_ordem_servico = :cod_ordem_servico ';
          {$ENDIF}
          Q.ParamByName('cod_ordem_servico').AsInteger := CodOrdemServico;
          Q.Open;
          if not Q.IsEmpty then
          begin
            // Verifica se foi informado um técnico para o animal
            if CodTecnico > 0 then
            begin
              // Verifica se o técnico do animal é o técnico da OS
              if CodTecnico <> Q.FieldByName('cod_pessoa_tecnico').AsInteger then
              begin
                // Gera mensagem notificando o usuário da situação de #
                Mensagens.Adicionar(1947, Self.ClassName, 'InserirAnimal (' + EOrigem + ')', []);
              end;
            end;
            // Verifica se foi informado algum identificador para o animal
            if (ECodTipoIdentificador1 > 0) or
               (ECodTipoIdentificador2 > 0) or
               (ECodTipoIdentificador3 > 0) or
               (ECodTipoIdentificador4 > 0) then
            begin
              // Verifica se os identificadores do animal são os identificadores da OS
              if not ((ECodTipoIdentificador1 = Q.FieldByName('cod_tipo_identificador_1').AsInteger) or
                     (ECodTipoIdentificador2 = Q.FieldByName('cod_tipo_identificador_1').AsInteger) or
                     (ECodTipoIdentificador3 = Q.FieldByName('cod_tipo_identificador_1').AsInteger) or
                     (ECodTipoIdentificador4 = Q.FieldByName('cod_tipo_identificador_1').AsInteger)) or
                    ((Q.FieldByName('cod_tipo_identificador_2').AsInteger > 0) and not
                     ((ECodTipoIdentificador1 = Q.FieldByName('cod_tipo_identificador_2').AsInteger) or
                      (ECodTipoIdentificador2 = Q.FieldByName('cod_tipo_identificador_2').AsInteger) or
                      (ECodTipoIdentificador3 = Q.FieldByName('cod_tipo_identificador_2').AsInteger) or
                      (ECodTipoIdentificador4 = Q.FieldByName('cod_tipo_identificador_2').AsInteger))) then
              begin
                // Gera mensagem notificando o usuário da situação de #
                Mensagens.Adicionar(1948, Self.ClassName, 'AlterarAnimal (' + EOrigem + ')', []);
              end;
            end;
          end;
        end;
      end;

      Result := AlterarAnimalSISBOV(EDadosAnimal, EDtaIdentificacaoSisbov, EDtaNascimento,
        EDadosAnimal.NumRGD, ECodPropriedadeNascimento, ECodFazendaNascimento, ECodPaisSISBOV,
        ECodEstadoSISBOV, ECodMicroRegiaoSISBOV, ECodAnimalSISBOV, ENumDVSISBOV,
        ECodRaca, ECodTipoIdentificador1, ECodTipoIdentificador2, ECodTipoIdentificador3,
        ECodTipoIdentificador4, EDadosAnimal.IndSexo, False);
      if Result < 0 then
      begin
        Rollback;
        Exit;
      end;

      // Passa parâmetros para a Query de Update
      FQueryAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      FQueryAux.ParamByName('cod_animal').AsInteger        := ECodAnimal;
      FQueryAux.ParamByName('cod_raca').AsInteger          := ECodRaca;
      FQueryAux.ParamByName('cod_pelagem').AsInteger       := ECodPelagem;
      FQueryAux.ParamByName('cod_animal_manejo').AsString  := ECodAnimalManejo;
      FQueryAux.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(ECodCategoriaAnimal, EDadosAnimal);

      AtribuiParametro(FQueryAux, ECodFazendaManejo, 'cod_fazenda_manejo', ECodFazendaManejo > 0);
      AtribuiParametro(FQueryAux, ECodAnimalCertificadora, 'cod_animal_certificadora', '');
      AtribuiParametro(FQueryAux, ECodPaisSisbov, 'cod_pais_sisbov', ECodPaisSisbov > 0);
      AtribuiParametro(FQueryAux, ECodEstadoSisbov, 'cod_estado_sisbov', ECodEstadoSisbov > 0);
      AtribuiParametro(FQueryAux, ECodMicroRegiaoSisbov, 'cod_micro_regiao_sisbov', ECodMicroRegiaoSisbov >= -1);
      AtribuiParametro(FQueryAux, ECodAnimalSisbov, 'cod_animal_sisbov', ECodAnimalSisbov > 0);
      AtribuiParametro(FQueryAux, ENumDVSisbov, 'num_dv_sisbov', ENumDVSisbov >= 0);
      AtribuiParametro(FQueryAux, EDtaIdentificacaoSisbov, 'dta_identificacao_sisbov', 0);
      AtribuiParametro(FQueryAux, ENumImovelIdentificacao, 'num_imovel_identificacao', '');
      AtribuiParametro(FQueryAux, ECodLocalizacaoIdentificacao, 'cod_localizacao_identificacao', ECodLocalizacaoIdentificacao > 0);
      AtribuiParametro(FQueryAux, ECodPropriedadeIdentificacao, 'cod_propriedade_identificacao', ECodPropriedadeIdentificacao > 0);
      AtribuiParametro(FQueryAux, ECodFazendaIdentificacao, 'cod_fazenda_identificacao', ECodFazendaIdentificacao > 0);
      AtribuiParametro(FQueryAux, EDtaNascimento, 'dta_nascimento', 0);
      AtribuiParametro(FQueryAux, ENumImovelNascimento, 'num_imovel_nascimento', '');
      AtribuiParametro(FQueryAux, ECodPropriedadeNascimento, 'cod_propriedade_nascimento', ECodPropriedadeNascimento > 0);
      AtribuiParametro(FQueryAux, ECodLocalizacaoNascimento, 'cod_localizacao_nascimento', ECodLocalizacaoNascimento > 0);
      AtribuiParametro(FQueryAux, ECodFazendaNascimento, 'cod_fazenda_nascimento', ECodFazendaNascimento > 0);
      AtribuiParametro(FQueryAux, EDtaCompra, 'dta_compra', 0);
      AtribuiParametro(FQueryAux, ECodPessoaSecundariaCriador, 'cod_pessoa_secundaria_criador', ECodPessoaSecundariaCriador > 0);
      AtribuiParametro(FQueryAux, ENomAnimal, 'nom_animal', '');
      AtribuiParametro(FQueryAux, EDesApelido, 'des_apelido', '');
      AtribuiParametro(FQueryAux, ENumTransponder, 'num_transponder', '');
      AtribuiParametro(FQueryAux, ECodTipoIdentificador1, 'cod_tipo_identificador_1', ECodTipoIdentificador1 > 0);
      AtribuiParametro(FQueryAux, ECodPosicaoIdentificador1, 'cod_posicao_identificador_1', ECodPosicaoIdentificador1 > 0);
      AtribuiParametro(FQueryAux, ECodTipoIdentificador2, 'cod_tipo_identificador_2', ECodTipoIdentificador2 > 0);
      AtribuiParametro(FQueryAux, ECodPosicaoIdentificador2, 'cod_posicao_identificador_2', ECodPosicaoIdentificador2 > 0);
      AtribuiParametro(FQueryAux, ECodTipoIdentificador3, 'cod_tipo_identificador_3', ECodTipoIdentificador3 > 0);
      AtribuiParametro(FQueryAux, ECodPosicaoIdentificador3, 'cod_posicao_identificador_3', ECodPosicaoIdentificador3 > 0);
      AtribuiParametro(FQueryAux, ECodTipoIdentificador4, 'cod_tipo_identificador_4', ECodTipoIdentificador4 > 0);
      AtribuiParametro(FQueryAux, ECodPosicaoIdentificador4, 'cod_posicao_identificador_4', ECodPosicaoIdentificador4 > 0);
      AtribuiParametro(FQueryAux, EIndAnimalCastrado, 'ind_animal_castrado', '');
      AtribuiParametro(FQueryAux, ECodRegimeAlimentar, 'cod_regime_alimentar', ECodRegimeAlimentar > 0);
      AtribuiParametro(FQueryAux, ECodCategoriaAnimal, 'cod_categoria_animal', ECodCategoriaAnimal > 0);
      AtribuiParametro(FQueryAux, ECodTipoLugar, 'cod_tipo_lugar', ECodTipoLugar > 0);
      AtribuiParametro(FQueryAux, ECodLoteCorrente, 'cod_lote_corrente', ECodLoteCorrente > 0);
      AtribuiParametro(FQueryAux, ECodLocalCorrente, 'cod_local_corrente', ECodLocalCorrente > 0);
      AtribuiParametro(FQueryAux, ECodFazendaCorrente, 'cod_fazenda_corrente', ECodFazendaCorrente > 0);
      AtribuiParametro(FQueryAux, ENumImovelCorrente, 'num_imovel_corrente', '');
      AtribuiParametro(FQueryAux, ECodLocalizacaoCorrente, 'cod_localizacao_corrente', ECodLocalizacaoCorrente > 0);
      AtribuiParametro(FQueryAux, ECodPropriedadeCorrente, 'cod_propriedade_corrente', ECodPropriedadeCorrente > 0);
      AtribuiParametro(FQueryAux, ENumCNPJCPFCorrente, 'num_cnpj_cpf_corrente', '');
      AtribuiParametro(FQueryAux, ECodPessoaCorrente, 'cod_pessoa_corrente', ECodPessoaCorrente > 0);
      AtribuiParametro(FQueryAux, ECodPessoaSecundariaCorrente, 'cod_pessoa_secundaria_corrente', ECodPessoaSecundariaCorrente > 0);
      AtribuiParametro(FQueryAux, ECodPaisOrigem, 'cod_pais_origem', ECodPaisOrigem > 0);
      AtribuiParametro(FQueryAux, EDesPropriedadeOrigem, 'des_propriedade_origem', '');
      AtribuiParametro(FQueryAux, EDtaAutorizacaoImportacao, 'dta_autorizacao_importacao', 0);
      AtribuiParametro(FQueryAux, EDtaEntradaPais, 'dta_entrada_pais', 0);
      AtribuiParametro(FQueryAux, ENumGuiaImportacao, 'num_guia_importacao', '');
      AtribuiParametro(FQueryAux, ENumLicencaImportacao, 'num_licenca_importacao', '');
      AtribuiParametro(FQueryAux, ETxtObservacao, 'txt_observacao', '');
      AtribuiParametro(FQueryAux, ENumGta, 'num_gta', '');
      AtribuiParametro(FQueryAux, EDtaEmissaoGta, 'dta_emissao_gta', 0);
      AtribuiParametro(FQueryAux, ENumNotaFiscal, 'num_nota_fiscal', ENumNotaFiscal > 0);
      AtribuiParametro(FQueryAux, CodTecnico, 'cod_pessoa_tecnico', CodTecnico > 0);

      if EIndCodSisBovReservado = 'S' then
      begin
        FQueryAux.ParamByName('ind_cod_sisbov_reservado').AsString := EIndCodSisBovReservado;
      end
      else
      begin
        FQueryAux.ParamByName('ind_cod_sisbov_reservado').AsString := 'N';
      end;

      FQueryAux.ExecSQL;

      // Calculando Data de Noventena
      if (EDadosAnimal.CodRaca <> ECodRaca) or
         (EDadosAnimal.DtaNascimento <> EDtaNascimento) or
         (EDadosAnimal.IndSexo <> EIndSexo) or
         (EDadosAnimal.NomAnimal <> ENomAnimal) then
      begin
        if ((EDadosAnimal.DtaInsercaoSisbov + 15) < Date) then
          DataNoventena := Date + 90;
      end;


      if (DataNoventena > 0) then
      begin
        FQueryAux.SQL.Clear;
        {$IFDEF MSSQL}
        FQueryAux.SQL.Add('update tab_animal ' +
                          '   set dta_noventena = :dta_noventena ' +
                          ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                          '   and cod_animal = :cod_animal ');
        {$ENDIF}
        FQueryAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        FQueryAux.ParamByName('cod_animal').AsInteger          := ECodAnimal;
        FQueryAux.ParamByName('dta_noventena').AsDateTime      := DataNoventena;

        FQueryAux.ExecSQL;

      end;


      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_animal', EDadosAnimal.CodRegistroLog, 3, ECodMetodo);
      if Result < 0 then
      begin
        Rollback;
        Exit;
      end;

      // Atualiza a situação do código sisbov para "CAD" (2)
      // exceto para os animais externos ou importados
      if (ECodPaisSisbov > -1)
        and ((ECodPaisSisbov <> EDadosAnimal.CodPaisSisbov)
        or  (ECodEstadoSisbov <> EDadosAnimal.CodEstadoSisbov)
        or  (ECodMicroRegiaoSisbov <> EDadosAnimal.CodMicroRegiaoSisbov)
        or  (ECodAnimalSisbov <> EDadosAnimal.CodAnimalSisbov)
        or  (ENumDVSisbov <> EDadosAnimal.NumDVSisbov))
        and (EDadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(ECodPaisSisbov,
                                                       ECodEstadoSisbov,
                                                       ECodMicroRegiaoSisbov,
                                                       ECodAnimalSisbov,
                                                       2);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Cofirma transação
      Commit;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(699, Self.ClassName, 'AlterarAnimal (' + EOrigem + ')', [E.Message]);
        Result := -699;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.CalculaAptoCoberturaAlt(CodCategoriaAnimal: Integer; DadosAnimal: TDadosAnimal): String;
begin
  if CodCategoriaAnimal = DadosAnimal.CodCategoriaAnimal then begin
    Result := DadosAnimal.IndAptoCobertura;
  end else begin
    Case CodCategoriaAnimal of
       1: begin    // Animal mamando
            Result := 'N';
          end;

       2: begin    // Animal em recria
            Result := 'N';
          end;

       3: begin    // Animal em engorda
            Result := 'N';
          end;

       4: begin    // Touro
            Result := 'S';
          end;

       5: begin    // Novilha em reprodução
            Result := 'S';
          end;

       6: begin    // Vaca parida
            Result := 'N';
          end;

       7: begin    // Vaca solteira
            Result := 'S';
          end;

       8: begin    // Vaca em lactação
            Result := 'N';
          end;

       9: begin    // Vaca seca
            Result := 'N';
          end;

      10: begin    // Rufião
           Result := 'N';
          end;

      11: begin    // Animal para descarte
           Result := 'N';
          end;

      12: begin    // Animal vendido
           Result := 'N';
          end;

      13: begin    // Animal morto
           Result := 'N';
          end;

      14: begin    // Animal desaparecido
           Result := 'N';
          end;
    else
      Result := 'N';
    end;
  end;
end;

function TIntAnimais.CalculaAptoCoberturaIns(CodCategoriaAnimal: Integer): String;
begin
  Case CodCategoriaAnimal of
     1: begin    // Animal mamando
          Result := 'N';
        end;

     2: begin    // Animal em recria
          Result := 'N';
        end;

     3: begin    // Animal em engorda
          Result := 'N';
        end;

     4: begin    // Touro
          Result := 'S';
        end;

     5: begin    // Novilha em reprodução
          Result := 'S';
        end;

     6: begin    // Vaca parida
          Result := 'N';
        end;

     7: begin    // Vaca solteira
          Result := 'S';
        end;

     8: begin    // Vaca em lactação
          Result := 'N';
        end;

     9: begin    // Vaca seca
          Result := 'N';
        end;

    10: begin    // Rufião
         Result := 'N';
        end;

    11: begin    // Animal para descarte
         Result := 'N';
        end;

    12: begin    // Animal vendido
         Result := 'N';
        end;

    13: begin    // Animal morto
         Result := 'N';
        end;

    14: begin    // Animal desaparecido
         Result := 'N';
        end;
  else
    Result := 'N';
  end;
end;

function TIntAnimais.VerificaDtaCompra(
  DtaCompra: TDateTime): Integer;
var
  Q : THerdomQuery;
  DtaSistema : TDateTime;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      // Obtem data do sistema
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select getdate() as dta_sistema ');
{$ENDIF}

      Q.Open;
      DtaSistema := Trunc(Q.FieldByName('dta_sistema').AsDateTime);
      Q.Close;

      if DtaCompra > DtaSistema then begin
        Mensagens.Adicionar(2014, Self.ClassName, 'VerificaDtaCompra', []);
        Result := -2014;
        Exit;
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaDtaCompra', [E.Message, 'data da compra do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaDtaNascimento(
  DtaNascimento: TDateTime): Integer;
var
  Q : THerdomQuery;
  DtaSistema : TDateTime;
begin
  Result := 0;

  if DtaNascimento <= 0 then begin
    Mensagens.Adicionar(617, Self.ClassName, 'VerificaDtaNascimento', []);
    Result := -617;
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Obtem data do sistema
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select getdate() as dta_sistema ');
{$ENDIF}

      Q.Open;
      DtaSistema := Trunc(Q.FieldByName('dta_sistema').AsDateTime);
      Q.Close;

      if DtaNascimento > DtaSistema then begin
        Mensagens.Adicionar(706, Self.ClassName, 'VerificaDtaNascimento', []);
        Result := -706;
        Exit;
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, 'VerificaDtaNascimento', [E.Message, 'data de nascimento do animal']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaRegra08(DadosAnimal: TDadosAnimal;
  DtaNascimento: TDatetime; IndAnimalCastrado: String; CodRegimeAlimentar,
  CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer; NumImovelCorrente: String;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente: Integer): Integer;
const
  NomeMetodo : String = 'VerificaRegra08';
begin
  Result := 0;
  if DadosAnimal.DtaUltimoEvento > 0 then begin
//  if DtaNascimento > 0 then begin
//    if DtaNascimento <> DadosAnimal.DtaNascimento then begin
//      Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Data de nascimento do animal']);
//      Result := -711;
//    end;
//  end else begin
//    if DadosAnimal.DtaNascimento > 0 then begin
//      Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Data de nascimento do animal']);
//      Result := -711;
//    end;
//  end;
    if IndAnimalCastrado <> '' then begin
      if IndAnimalCastrado <> DadosAnimal.IndAnimalCastrado then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Status de animal castrado']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.IndAnimalCastrado <> '' then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Status de animal castrado']);
        Result := -711;
      end;
    end;
    if CodRegimeAlimentar > 0 then begin
      if CodRegimeAlimentar <> DadosAnimal.CodRegimeAlimentar then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Regime alimentar do animal']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodRegimeAlimentar > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Regime alimentar do animal']);
        Result := -711;
      end;
    end;
    if CodCategoriaAnimal > 0 then begin
      if CodCategoriaAnimal <> DadosAnimal.CodCategoriaAnimal then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Categoria do animal']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodCategoriaAnimal > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Categoria do animal']);
        Result := -711;
      end;
    end;
    if CodTipoLugar > 0 then begin
      if CodTipoLugar <> DadosAnimal.CodTipoLugar then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Tipo de lugar onde o animal está']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodTipoLugar > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Tipo de lugar onde o animal está']);
        Result := -711;
      end;
    end;
    if CodLoteCorrente > 0 then begin
      if CodLoteCorrente <> DadosAnimal.CodLoteCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Lote do animal']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodLoteCorrente > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Lote do animal']);
        Result := -711;
      end;
    end;
    if CodLocalCorrente > 0 then begin
      if CodLocalCorrente <> DadosAnimal.CodLocalCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Local do animal']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodLocalCorrente > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Local do animal']);
        Result := -711;
      end;
    end;
    if CodFazendaCorrente > 0 then begin
      if CodFazendaCorrente <> DadosAnimal.CodFazendaCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Fazenda do animal']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodFazendaCorrente > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Fazenda do animal']);
        Result := -711;
      end;
    end;
    if NumImovelCorrente <> '' then begin
      if NumImovelCorrente <> DadosAnimal.NumImovelCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['NIRF da proprieade rural do animal']);
        Result := -711;
      end;
//    end else begin
//      if DadosAnimal.NumImovelCorrente <> '' then begin
//        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['NIRF da propriedade rural do animal']);
//        Result := -711;
//      end;
    end;
    if CodPropriedadeCorrente > 0 then begin
      if CodPropriedadeCorrente <> DadosAnimal.CodPropriedadeCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Propriedade rural do animal']);
        Result := -711;
      end;
//    end else begin
//      if DadosAnimal.CodPropriedadeCorrente > 0 then begin
//        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Propriedade rural do animal']);
//        Result := -711;
//      end;
    end;
    if NumCNPJCPFCorrente <> '' then begin
      if NumCNPJCPFCorrente <> DadosAnimal.NumCNPJCPFCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['CPF/CNPJ da aglomeração ou frigorífico onde o animal está']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.NumCNPJCPFCorrente <> '' then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['CPF/CNPJ da aglomeração ou frigorífico onde o animal está']);
        Result := -711;
      end;
    end;
    if CodPessoaCorrente > 0 then begin
      if CodPessoaCorrente <> DadosAnimal.CodPessoaCorrente then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Aglomeração ou frigorífico onde o animal está']);
        Result := -711;
      end;
    end else begin
      if DadosAnimal.CodPessoaCorrente > 0 then begin
        Mensagens.Adicionar(711, Self.ClassName, NomeMetodo, ['Aglomeração ou frigorífico onde o animal está']);
        Result := -711;
      end;
    end;
  end;
end;

function TIntAnimais.GeraCodAnimalCertificadora(
  var CodAnimalCertificadora: String; CodFazendaManejo: Integer;
  CodAnimalManejo: String; CodAnimal: Integer): Integer;
const
  NomeMetodo : String = 'GeraCodAnimalCertificadora';
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      // Obtem siglas do produtor e da fazenda
      Q.SQL.Clear;

      if CodAnimal > 0 then begin
{$IFDEF MSSQL}
        Q.SQL.Add('select cod_animal_certificadora, ' +
                  '       cod_situacao_sisbov  ' +
                  '  from tab_animal  ' +
                  ' where cod_animal = :cod_animal ');
{$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        Q.Open;
        if (not Q.IsEmpty) And (Q.FieldByName('cod_situacao_sisbov').AsString = 'I') then begin
          CodAnimalCertificadora := Trim(Q.FieldByName('cod_animal_certificadora').AsString);
        end else begin
          CodAnimal := -1;
          Q.SQL.Clear;
        end;
      end;

      if CodAnimal = -1 then begin
{$IFDEF MSSQL}
        if CodFazendaManejo > 0 then begin
          Q.SQL.Add('select tp.sgl_produtor, ' +
                  '       tf.sgl_fazenda ' +
                  '  from tab_produtor tp, ' +
                  '       tab_fazenda tf ' +
                  ' where tp.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                  '   and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tf.cod_fazenda = :cod_fazenda ');
        end else begin
          Q.SQL.Add('select sgl_produtor, ' +
                  '       '' '' as sgl_fazenda ' +
                  '  from tab_produtor ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        end;
{$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        if CodFazendaManejo > 0 then begin
          Q.ParamByName('cod_fazenda').AsInteger := CodFazendaManejo;
        end;
        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(714, Self.ClassName, NomeMetodo, []);
          Result := -714;
          Exit;
        end;
        CodAnimalCertificadora := Trim(Q.FieldByName('sgl_produtor').AsString) + '.' +
                                  Trim(Q.FieldByName('sgl_fazenda').AsString) + '.' +
                                  Trim(CodAnimalManejo);
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(713, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

(* 03/02/2005 - Fábio - Esta função não está mais sendo usada.

function TIntAnimais.VerificaPropriedadeEfetivada(
  var CodPropriedadeRural: Integer; var NumImovelReceitaFederal: String;
  var DtaInicioCertificacao: TDateTime; NomeCampo: String): Integer;
const
  NomeMetodo : String = 'VerificaPropriedadeEfetivada';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select dta_efetivacao_cadastro, cod_propriedade_rural, ' +
                '       num_imovel_receita_federal, dta_inicio_certificacao ' +
                '  from tab_propriedade_rural ');
      if CodPropriedadeRural > 0 then begin
        Q.SQL.Add(' where cod_propriedade_rural = :cod_propriedade_rural ');
      end else begin
        Q.SQL.Add(' where num_imovel_receita_federal = :num_imovel_receita_federal ');
      end;
      Q.SQL.Add(' and dta_fim_validade is null ');
{$ENDIF}
      if CodPropriedadeRural > 0 then begin
        Q.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
      end else begin
        Q.ParamByName('num_imovel_receita_federal').AsString := NumImovelReceitaFederal;
      end;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(733, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -733;
        Exit;
      end;

      if Q.FieldByName('dta_efetivacao_cadastro').IsNull then begin
        Mensagens.Adicionar(732, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -732;
        Exit;
      end;

      CodPropriedadeRural := Q.FieldByName('cod_propriedade_rural').AsInteger;
      NumImovelReceitaFederal := Q.FieldByName('num_imovel_receita_federal').AsString;
      DtaInicioCertificacao := Trunc(Q.FieldByName('dta_inicio_certificacao').AsDateTime);

      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;
*)

function TIntAnimais.ObtemMicroRegiaoPropriedade(
  CodPropriedadeRural: Integer; var CodEstadoSisbov,
  CodMicroRegiaoSisbov: Integer; NomeCampo: String): Integer;
const
  NomeMetodo : String = 'ObtemMicroRegiaoPropriedade';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tm.cod_micro_regiao, ' +
                '       te.cod_estado_sisbov, ' +
                '       tmr.cod_micro_regiao_sisbov ' +
                 '  from tab_propriedade_rural tpr, ' +
                '       tab_municipio tm, ' +
                '       tab_estado te, ' +
                '       tab_micro_regiao tmr ' +
                ' where tm.cod_municipio = tpr.cod_municipio ' +
                '   and te.cod_estado = tm.cod_estado ' +
                '   and tmr.cod_micro_regiao =* tm.cod_micro_regiao ' +
                '   and tpr.cod_propriedade_rural = :cod_propriedade_rural ');
{$ENDIF}
      Q.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(734, Self.ClassName, NomeMetodo, []);
        Result := -734;
        Exit;
      end;

      if Q.FieldByName('cod_micro_regiao_sisbov').IsNull then begin
        Mensagens.Adicionar(734, Self.ClassName, NomeMetodo, []);
        Result := -734;
        Exit;
      end;

      CodMicroRegiaoSisbov := Q.FieldByName('cod_micro_regiao_sisbov').AsInteger;
      CodEstadoSisbov := Q.FieldByName('cod_estado_sisbov').AsInteger;

      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

(*
function TIntAnimais.ObtemCodigoSisbov(var CodPaisSisbov, CodEstadoSisbov,
  CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov: Integer;
  CodProdutorTrabalho,CodPropriedadeIdentificacao:Integer): Integer;
const
  NomeMetodo : String = 'ObtemCodigoSisbov';
var
  Q : THerdomQuery;
  CP: Integer;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // trava a tabela
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_codigo_sisbov with (tablock, holdlock) ' +
                '    set cod_pais_sisbov = cod_pais_sisbov  ' +
                ' where cod_pais_sisbov is null ');
{$ENDIF}
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tp.cod_pais_sisbov, ' +
                '       tmr.cod_micro_regiao_sisbov ' +
                '  from tab_pais tp, ' +
                '       tab_estado te, ' +
                '       tab_micro_regiao tmr ' +
                ' where tp.cod_pais = te.cod_pais ' +
                '   and te.cod_estado = tmr.cod_estado ' +
                '   and tmr.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
                '   and te.cod_estado_sisbov = :cod_estado_sisbov');
{$ENDIF}
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      Q.Open;
      CP := Q.FieldByName('cod_pais_sisbov').AsInteger;
      Q.Close;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select top 1 tcs.cod_pais_sisbov, ' +
                  '       tcs.cod_estado_sisbov, ' +
                  '       tcs.cod_micro_regiao_sisbov, ' +
                  '       tcs.cod_animal_sisbov, ' +
                  '       tcs.num_dv_sisbov ' +
                  '  from tab_codigo_sisbov tcs ' +
                  ' where tcs.cod_pais_sisbov = :cod_pais_sisbov ' +
                  '   and tcs.cod_estado_sisbov = :cod_estado_sisbov ' +
                  '   and tcs.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
                  '   and tcs.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_propriedade_rural = :cod_propriedade_rural '+
                  '   and tcs.dta_utilizacao_codigo is null '+
                  ' order by tcs.cod_animal_sisbov ');
{$ENDIF}
      Q.ParamByName('cod_pais_sisbov').AsInteger := CP;
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := CodProdutorTrabalho;
      Q.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeIdentificacao;

      Q.Open;
      if Q.IsEmpty then begin
        Q.Close;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := 0;
        Q.Open;
        if Q.IsEmpty then begin
          Q.Close;
          Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := -1;
          Q.Open;
          if Q.IsEmpty then begin
//            Mensagens.Adicionar(736, Self.ClassName, NomeMetodo, []);
            Result := -736;
            Exit;
          end;
        end;
       end;

      CodPaisSisbov   := Q.FieldByName('cod_pais_sisbov').AsInteger;
      CodEstadoSisbov := Q.FieldByName('cod_estado_sisbov').AsInteger;
      CodAnimalSisbov := Q.FieldByName('cod_animal_sisbov').AsInteger;
      NumDVSisbov     := Q.FieldByName('num_dv_sisbov').AsInteger;
      CodMicroRegiaoSisbov := Q.FieldByName('cod_micro_regiao_sisbov').AsInteger;

      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(737, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -737;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;
*)

function TIntAnimais.VerificaCodigoVariavel(Prefixo, CodInicial, Sufixo: String;
  Quantidade, TamanhoMaximo: Integer; NomeCampo: String): Integer;
const
  NomeMetodo : String = 'VerificaCodigoVariavel';
var
  CI, CF : Integer;
  CodFinal : String;
begin
  Result := 0;

  CI := StrToIntDef(CodInicial, -1);
  if CI = -1 then begin
    Mensagens.Adicionar(740, Self.ClassName, NomeMetodo, [NomeCampo]);
    Result := -740;
    Exit;
  end;

  if Length(Prefixo) + Length(CodInicial) + Length(Sufixo) > TamanhoMaximo then begin
    Mensagens.Adicionar(741, Self.ClassName, NomeMetodo, [NomeCampo, IntToStr(TamanhoMaximo)]);
    Result := -741;
    Exit;
  end;

  CF := CI + Quantidade - 1;
  CodFinal := StrZero(CF, Length(CodInicial));

  if Length(CodFinal) > Length(CodInicial) then begin
    Mensagens.Adicionar(752, Self.ClassName, NomeMetodo, [NomeCampo]);
    Result := -752;
    Exit;
  end;

  if Length(Prefixo) + Length(CodFinal) + Length(Sufixo) > TamanhoMaximo then begin
    Mensagens.Adicionar(742, Self.ClassName, NomeMetodo, [NomeCampo, Prefixo+CodFinal+Sufixo, IntToStr(TamanhoMaximo)]);
    Result := -742;
    Exit;
  end;
end;

function TIntAnimais.VerificaUtilizacaoCodAnimalManejo(
  CodFazendaManejo: Integer; TxtPrefixoAnimalManejo, CodInicialAnimalManejo,
  TxtSufixoAnimalManejo: String; QtdAnimais: Integer): Integer;
const
  NomeMetodo : String = 'VerificaUtilizacaoCodAnimalManejo';
var
  Q : THerdomQuery;
  CodAnimalManejoInicial, CodAnimalManejoFinal: String;
begin
  CodAnimalManejoInicial := TxtPrefixoAnimalManejo +
                            CodInicialAnimalManejo +
                            TxtSufixoAnimalManejo;

  CodAnimalManejoFinal := TxtPrefixoAnimalManejo +
                          StrZero(StrToInt(CodInicialAnimalManejo) + QtdAnimais - 1, Length(CodInicialAnimalManejo)) +
                          TxtSufixoAnimalManejo;
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_fazenda_manejo = :cod_fazenda_manejo ' +
                '   and cod_animal_manejo between :cod_animal_manejo_inicial and :cod_animal_manejo_final ' +
                '   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      Q.ParamByName('cod_animal_manejo_inicial').AsString := CodAnimalManejoInicial;
      Q.ParamByName('cod_animal_manejo_final').AsString := CodAnimalManejoFinal;

      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(743, Self.ClassName, NomeMetodo, [CodAnimalManejoInicial, CodAnimalManejoFinal]);
        Result := -743;
        Exit;
      end;
      Q.Close;

      // "Trava" a tabela
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal ' +
                '   set cod_pessoa_produtor = cod_pessoa_produtor ' +
                ' where cod_pessoa_produtor is null ');
{$ENDIF}
      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'utilização de códigos de manejo por intervalo']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaUtilizacaoCodAnimalCertificadora(
  TxtPrefixoAnimalCertificadora, CodInicialAnimalCertificadora,
  TxtSufixoAnimalCertificadora: String; QtdAnimais: Integer): Integer;
const
  NomeMetodo : String = 'VerificaUtilizacaoCodAnimalCertificadora';
var
  Q : THerdomQuery;
  CodAnimalCertificadoraInicial, CodAnimalCertificadoraFinal: String;
begin
  CodAnimalCertificadoraInicial := TxtPrefixoAnimalCertificadora +
                            CodInicialAnimalCertificadora +
                            TxtSufixoAnimalCertificadora;

  CodAnimalCertificadoraFinal := TxtPrefixoAnimalCertificadora +
                          StrZero(StrToInt(CodInicialAnimalCertificadora) + QtdAnimais - 1, Length(CodInicialAnimalCertificadora)) +
                          TxtSufixoAnimalCertificadora;
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ' +
                ' where cod_animal_certificadora between :cod_animal_certificadora_inicial and :cod_animal_certificadora_final ' +
                '   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_animal_certificadora_inicial').AsString := CodAnimalCertificadoraInicial;
      Q.ParamByName('cod_animal_certificadora_final').AsString := CodAnimalCertificadoraFinal;

      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(744, Self.ClassName, NomeMetodo, [CodAnimalCertificadoraInicial, CodAnimalCertificadoraFinal]);
        Result := -744;
        Exit;
      end;
      Q.Close;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'utilização de códigos de certificadora por intervalo']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

(* Fábio - 02/07/2004
   Esta função foi transferida para a classe de códigos SISBOV
   
{ Verifica se uma faixa de códigos SISBOV está disponivel. Se estiver marca os
  códigos como utilizados.

Parametros:
  CodPaisSISBOV: Código SISBOV do país
  CodEstadoSISBOV: Código SISBOV do estado
  CodMicroRegiaoSISBOV: Código SISBOV da micro região
  CodAInicialAnimalSisbov: Código SISBOV inicial do animal
  QtdAnimais: Quantidade de códigos SISBOV que devem ser verificados.

Retorno:
  > 0 se der tudo certo.
  < 0 se ocorrer algum erro}
function TIntAnimais.VerificaUtilizacaoCodAnimalSisbov(CodPaisSisbov,
  CodEstadoSisbov, CodMicroRegiaoSisbov, CodInicialAnimalSisbov,
  QtdAnimais: Integer): Integer;
const
  NomeMetodo : String = 'VerificaUtilizacaoCodAnimalSisbov';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select count(cod_animal_sisbov) as qtd_disponivel');
      Q.SQL.Add('  from tab_codigo_sisbov');
      Q.SQL.Add(' where cod_pais_sisbov = :cod_pais_sisbov');
      Q.SQL.Add('   and cod_estado_sisbov = :cod_estado_sisbov');
      Q.SQL.Add('   and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov');
      Q.SQL.Add('   and cod_animal_sisbov between :cod_inicial_animal_sisbov and :cod_final_animal_sisbov');
      Q.SQL.Add('   and dta_utilizacao_codigo is null');
{$ENDIF}
      Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      Q.ParamByName('cod_inicial_animal_sisbov').AsInteger := CodInicialAnimalSisbov;
      Q.ParamByName('cod_final_animal_sisbov').AsInteger := CodInicialAnimalSisbov + QtdAnimais - 1;

      Q.Open;
      if (Q.FieldByName('qtd_disponivel').AsInteger < QtdAnimais) or
         (Q.IsEmpty) then begin
        Mensagens.Adicionar(747, Self.ClassName, NomeMetodo, [IntToStr(QtdAnimais)]);
        Result := -747;
        Exit;
      end;
      Q.Close;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_codigo_sisbov');
      Q.SQL.Add('   set dta_utilizacao_codigo = getdate()');
      Q.SQL.Add(' where cod_pais_sisbov = :cod_pais_sisbov');
      Q.SQL.Add('   and cod_estado_sisbov = :cod_estado_sisbov');
      Q.SQL.Add('   and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov');
      Q.SQL.Add('   and cod_animal_sisbov between :cod_inicial_animal_sisbov and :cod_final_animal_sisbov');
      Q.SQL.Add('   and dta_utilizacao_codigo is null');
{$ENDIF}
      Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      Q.ParamByName('cod_inicial_animal_sisbov').AsInteger := CodInicialAnimalSisbov;
      Q.ParamByName('cod_final_animal_sisbov').AsInteger := CodInicialAnimalSisbov + QtdAnimais - 1;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'utilização de códigos sisbov por intervalo']);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;
*)

function TIntAnimais.ReservarCodigos(var CodAnimal, CodLogOperacao,
  CodRegistroLog: Integer; QtdAnimais: integer): Integer;
const
  NomeMetodo : String = 'ReservarCodigos';
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try

    // Obtem sequencias de CodAnimal
    BeginTran('RESERVAR_CODIGOS');
    try
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_sequencia_codigo ' +
                '   set cod_animal = cod_animal + :qtd_animais, ' +
                '       cod_registro_log = cod_registro_log + :qtd_animais, ' +
                '       cod_log_operacao = cod_log_operacao + :qtd_animais');
{$ENDIF}
      Q.ParamByName('qtd_animais').AsInteger := QtdAnimais;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select (cod_animal - :qtd_animais) + 1 as cod_animal, ' +
                '       (cod_registro_log - :qtd_animais) + 1 as cod_registro_log, ' +
                '       (cod_log_operacao - :qtd_animais) + 1 as cod_log_operacao ' +
                '  from tab_sequencia_codigo');
{$ENDIF}
      Q.ParamByName('qtd_animais').AsInteger := QtdAnimais;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(206, Self.ClassName, NomeMetodo, []);
        Result := -206;
        Rollback;
        Exit;
      end;

      CodAnimal := Q.FieldByName('cod_animal').AsInteger;
      CodRegistroLog := Q.FieldByName('cod_registro_log').AsInteger;
      CodLogOperacao := Q.FieldByName('cod_log_operacao').AsInteger;
      Result := 0;
      Q.Close;

      // Confirma Transação
      Commit('RESERVAR_CODIGOS');
    except
      on E: Exception do begin
//        Rollback('OBTER_PROXIMO_CODIGO');
        Rollback;
        Mensagens.Adicionar(207, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -207;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


function TIntAnimais.VerificaRemocaoCobertura(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaRemocaoCobertura';
var
  Q : THerdomQuery;
begin
  Result := -1;
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se já existe um evento de diag. de prenhez ou parto para a estação de monta
      Q.Close;
      Q.SQL.Text :=
          'select '+
          '  count(1) '+
          'from '+
          '  tab_evento te, '+
          '  tab_animal_evento tae '+
          'where '+
          '  te.cod_pessoa_produtor = :cod_pessoa_produtor '+
          '  and te.cod_evento_associado = :cod_evento_associado '+
          '  and te.cod_evento = tae.cod_evento '+
          '  and te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '  and tae.cod_animal =:cod_animal '+
          '  and cod_tipo_evento in (28, 30) ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento_associado').AsInteger := DadosEvento.CodEventoAssociado;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.Open;

      if Q.Fields[0].AsInteger > 0 then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal já recebeu um evento de parto ou diagnóstico de prenhez nesta estação de monta.', 'N');
      end;
      if Result > 0 then begin
         Result := 100;
         Exit;
      end;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1596, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1596;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaEvento(CodEvento: Integer; Obrigatorio: Boolean;
  NomeCampo: String; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaEvento';
var
  Q : THerdomQuery;
  X : Integer;
begin
  if CodEvento <= 0 then begin
    if Obrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select te.cod_evento,  ' +
                '       te.cod_tipo_evento, ' +
                '       tte.des_tipo_evento, ' +
                '       tte.ind_evento_sisbov, ' +
                '       tte.ind_restrito_sistema, ' +
                '       te.dta_inicio, ' +
                '       te.dta_fim, ' +
                '       isnull(te.cod_fazenda, -1) as cod_fazenda, ' +
                '       te.cod_situacao_sisbov, ' +
                '       te.qtd_animais, ' +
                '       te.dta_efetivacao_cadastro, ' +
                '       te.cod_registro_log, ' +
                '       te.cod_evento_associado, ' +
                '       tte.ind_dta_controlada, ' +
                '       getdate() as dta_sistema, ' +
                '       te.cod_tarefa ' +
                '  from tab_evento te,' +
                '       tab_tipo_evento tte ' +
                ' where tte.cod_tipo_evento = te.cod_tipo_evento ' +
                '   and te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -497;
        Exit;
      end;

      if Q.FieldByName('ind_restrito_sistema').AsString = 'S' then begin
        Mensagens.Adicionar(937, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -937;
        Exit;
      end;

      DadosEvento.CodEvento             := Q.FieldByName('cod_evento').AsInteger;
      DadosEvento.CodTipoEvento         := Q.FieldByName('cod_tipo_evento').AsInteger;
      DadosEvento.DesTipoEvento         := Q.FieldByName('des_tipo_evento').AsString;
      DadosEvento.IndEventoSisbov       := Q.FieldByName('ind_evento_sisbov').AsString;
      DadosEvento.DtaInicio             := Q.FieldByName('dta_inicio').AsDateTime;
      DadosEvento.DtaFim                := Q.FieldByName('dta_fim').AsDateTime;
      DadosEvento.CodFazenda            := Q.FieldByName('cod_fazenda').AsInteger;
      DadosEvento.CodSituacaoSisbov     := Q.FieldByName('cod_situacao_sisbov').asString;
      DadosEvento.QtdAnimais            := Q.FieldByName('qtd_animais').AsInteger;
      DadosEvento.DtaEfetivacaoCadastro := Q.FieldByName('dta_efetivacao_cadastro').AsDateTime;
      DadosEvento.CodRegistroLog        := Q.FieldByName('cod_registro_log').AsInteger;
      DadosEvento.DtaAplicacaoEvento    := Q.FieldByName('dta_sistema').AsDateTime;
      DadosEvento.CodEventoAssociado    := Q.FieldByName('cod_evento_associado').AsInteger;
      DadosEvento.IndDtaControlada      := Q.FieldByName('ind_dta_controlada').AsString;
      DadosEvento.CodTarefa             := Q.FieldByName('cod_tarefa').AsInteger;
      Q.Close;

      // verifica se o evento em questão é um evento associado!
      Q.SQL.Clear;
      Q.SQL.Add(' select cod_evento_associado from tab_evento ');
      Q.SQL.Add('  where cod_pessoa_produtor  = :cod_pessoa_produtor ');
      Q.SQL.Add('    and cod_evento_associado = :cod_evento_associado ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger  := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento_associado').AsInteger := CodEvento;
      Q.Open;
      DadosEvento.EventoAssociado := not Q.IsEmpty;

      // Obtem dados adicionais do evento
      Q.SQL.Clear;
      Case DadosEvento.CodTipoEvento of
        1 : begin  // Mudança de regime alimentar
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_aptidao,  ' +
                        '       cod_regime_alimentar_origem, ' +
                        '       cod_regime_alimentar_destino ' +
                        '  from tab_evento_mud_reg_alimentar ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;
              DadosEvento.CodAptidao          := Q.FieldByName('cod_aptidao').AsInteger;

              // Obtem dados do regime alimentar de origem
              Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_regime_alimentar_origem').AsInteger,
                                          DadosEvento.RegimeAlimentarOrigem);
              if Result < 0 then begin
                Exit;
              end;

              // Obtem dados do regime alimentar destino
              Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_regime_alimentar_destino').AsInteger,
                                          DadosEvento.RegimeAlimentarDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        2 : begin  // Desmame
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_aptidao,  ' +
                        '       cod_regime_alimentar_destino ' +
                        '  from tab_evento_desmame ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;
              DadosEvento.CodAptidao          := Q.FieldByName('cod_aptidao').AsInteger;

              // Categoria de destino para desmame é sempre 2 - Animal em recria
              Result := VerificaCategoriaEvento(2, DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;

              // Obtem dados do regime alimentar destino
              Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_regime_alimentar_destino').AsInteger,
                                DadosEvento.RegimeAlimentarDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        3 : begin  // Mudança de categoria
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_aptidao,  ' +
                        '       cod_categoria_origem, ' +
                        '       cod_categoria_destino ' +
                        '  from tab_evento_mud_categoria ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;
              DadosEvento.CodAptidao          := Q.FieldByName('cod_aptidao').AsInteger;

              // Obtem dados da categoria de origem
              Result := VerificaCategoriaEvento(Q.FieldByName('cod_categoria_origem').AsInteger,
                                          DadosEvento.CategoriaOrigem);
              if Result < 0 then begin
                Exit;
              end;

              // Obtem dados da categoria destino
              Result := VerificaCategoriaEvento(Q.FieldByName('cod_categoria_destino').AsInteger,
                                          DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        4 : begin  // Seleção para reprodução
              // Não há dados complementares para este tipo de evento
            end;

        5 : begin  // Castração
              // Não há dados complementares para este tipo de evento
            end;

        6 : begin  // Mudança de lote
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_fazenda, ' +
                        '       cod_lote_destino ' +
                        '  from tab_evento_mudanca_lote ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;

              // Obtem dados do lote destino
              if not Q.FieldByName('cod_lote_destino').IsNull then begin
                Result := VerificaLoteEvento(Q.FieldByName('cod_fazenda').AsInteger,
                                             Q.FieldByName('cod_lote_destino').AsInteger,
                                             DadosEvento.LoteDestino);
              end else begin
                DadosEvento.LoteDestino.CodFazenda := Q.FieldByName('cod_fazenda').AsInteger;
                DadosEvento.LoteDestino.CodLote := -1;
                DadosEvento.LoteDestino.DesLote := '';
                Result := 0;
              end;
              if Result < 0 then begin
                Exit;
              end;
            end;

        7 : begin  // Mudança de local
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_aptidao, ' +
                        '       cod_fazenda, ' +
                        '       cod_local_destino, ' +
                        '       cod_reg_alimentar_mamando, ' +
                        '       cod_reg_alimentar_desmamado ' +
                        '  from tab_evento_mudanca_local ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;

              DadosEvento.CodAptidao        := Q.FieldByName('cod_aptidao').AsInteger;

              // Obtem dados do local destino
              Result := VerificaLocalEvento(Q.FieldByName('cod_fazenda').AsInteger,
                                            Q.FieldByName('cod_local_destino').AsInteger,
                                            DadosEvento.LocalDestino);
              if Result < 0 then begin
                Exit;
              end;

              // Obtem dados do regime alimentar destino para animais mamando
              if not Q.FieldByName('cod_reg_alimentar_mamando').IsNull then begin
                Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_reg_alimentar_mamando').AsInteger,
                                                        DadosEvento.RegimeAlimentarMamando);
              end else begin
                DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar := -1;
                DadosEvento.RegimeAlimentarMamando.DesRegimeAlimentar := '';
                DadosEvento.RegimeAlimentarMamando.IndAnimalMamando   := '';
                Result := 0;
              end;
              if Result < 0 then begin
                Exit;
              end;

              // Obtem dados do regime alimentar destino para animais desmamados
              Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_reg_alimentar_desmamado').AsInteger,
                                DadosEvento.RegimeAlimentarDesmamado);
              if Result < 0 then begin
                Exit;
              end;
            end;

        8 : begin  // Transferência
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_aptidao, ' +
                        '       cod_tipo_lugar_origem, ' +
                        '       IsNull(cod_fazenda_origem, -1) AS cod_fazenda_origem, ' +
                        '       num_imovel_origem, ' +
                        '       IsNull(cod_localizacao_origem, -1) AS cod_localizacao_origem, ' +
                        '       IsNull(cod_propriedade_origem, -1) AS cod_propriedade_origem, ' +
                        '       num_cnpj_cpf_origem, ' +
                        '       IsNull(cod_pessoa_origem, -1) AS cod_pessoa_origem, ' +
                        '       IsNull(cod_pessoa_secundaria_origem, -1) AS cod_pessoa_secundaria_origem, ' +
                        '       cod_tipo_lugar_destino, ' +
                        '       IsNull(cod_fazenda_destino, -1) AS cod_fazenda_destino, ' +
                        '       IsNull(cod_local_destino, -1) AS cod_local_destino, ' +
                        '       IsNull(cod_lote_destino, -1) AS cod_lote_destino, ' +
                        '       num_imovel_destino, ' +
                        '       IsNull(cod_localizacao_destino, -1) AS cod_localizacao_destino, ' +
                        '       IsNull(cod_propriedade_destino, -1) AS cod_propriedade_destino, ' +
                        '       num_cnpj_cpf_destino, ' +
                        '       IsNull(cod_pessoa_destino, -1) AS cod_pessoa_destino,' +
                        '       IsNull(cod_pessoa_secundaria_destino, -1) AS cod_pessoa_secundaria_destino, ' +
                        '       IsNull(cod_reg_alimentar_mamando, -1) AS cod_reg_alimentar_mamando, ' +
                        '       IsNull(cod_reg_alimentar_desmamado, -1) AS cod_reg_alimentar_desmamado, ' +
                        '       num_gta, ' +
                        '       dta_emissao_gta ' +
                        '  from tab_evento_transferencia ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;

              DadosEvento.CodAptidao    := Q.FieldByName('cod_aptidao').AsInteger;

              DadosEvento.LugarOrigem.CodTipoLugar         := Q.FieldByName('cod_tipo_lugar_origem').AsInteger;
              DadosEvento.LugarOrigem.CodFazenda           := Q.FieldByName('cod_fazenda_origem').AsInteger;
              DadosEvento.LugarOrigem.CodLocal             := -1;
              DadosEvento.LugarOrigem.CodLote              := -1;
              DadosEvento.LugarOrigem.NumImovel            := Q.FieldByName('num_imovel_origem').AsString;
              DadosEvento.LugarOrigem.CodLocalizacaoSISBOV := Q.FieldByName('cod_localizacao_origem').AsInteger;
              DadosEvento.LugarOrigem.CodPropriedade       := Q.FieldByName('cod_propriedade_origem').AsInteger;
              DadosEvento.LugarOrigem.NumCNPJCPF           := Q.FieldByName('num_cnpj_cpf_origem').AsString;
              DadosEvento.LugarOrigem.CodPessoa            := Q.FieldByName('cod_pessoa_origem').AsInteger;
              DadosEvento.LugarOrigem.CodPessoaSecundaria  := Q.FieldByName('cod_pessoa_secundaria_origem').AsInteger;

              DadosEvento.LugarDestino.CodTipoLugar         := Q.FieldByName('cod_tipo_lugar_destino').AsInteger;
              DadosEvento.LugarDestino.CodFazenda           := Q.FieldByName('cod_fazenda_destino').AsInteger;
              DadosEvento.LugarDestino.CodLocal             := Q.FieldByName('cod_local_destino').AsInteger;
              DadosEvento.LugarDestino.CodLote              := Q.FieldByName('cod_lote_destino').AsInteger;
              DadosEvento.LugarDestino.NumImovel            := Q.FieldByName('num_imovel_destino').AsString;
              DadosEvento.LugarDestino.CodLocalizacaoSISBOV := Q.FieldByName('cod_localizacao_destino').AsInteger;
              DadosEvento.LugarDestino.CodPropriedade       := Q.FieldByName('cod_propriedade_destino').AsInteger;
              DadosEvento.LugarDestino.NumCNPJCPF           := Q.FieldByName('num_cnpj_cpf_destino').AsString;
              DadosEvento.LugarDestino.CodPessoa            := Q.FieldByName('cod_pessoa_destino').AsInteger;
              DadosEvento.LugarDestino.CodPessoaSecundaria  := Q.FieldByName('cod_pessoa_secundaria_destino').AsInteger;

              // Obtem dados do regime alimentar destino para animais mamando
//              if (not (Q.FieldByName('cod_reg_alimentar_mamando').IsNull))
//                  and (Q.FieldByName('cod_reg_alimentar_mamando').AsInteger > 0) then
//              begin
//                Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_reg_alimentar_mamando').AsInteger,
//                                                        DadosEvento.RegimeAlimentarMamando);
//              end
//              else
//              begin
                DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar := -1;
                DadosEvento.RegimeAlimentarMamando.DesRegimeAlimentar := '';
                DadosEvento.RegimeAlimentarMamando.IndAnimalMamando   := '';
                Result := 0;
//              end;
//              if Result < 0 then
//              begin
//                Exit;
//              end;

              // Obtem dados do regime alimentar destino para animais desmamados
//              Result := VerificaRegimeAlimentarEvento(Q.FieldByName('cod_reg_alimentar_desmamado').AsInteger,
//                                DadosEvento.RegimeAlimentarDesmamado);

//              if Result < 0 then begin
//                Exit;
//              end;

              DadosEvento.NumGTA        := Q.FieldByName('num_gta').AsString;
              DadosEvento.DtaEmissaoGTA := Q.FieldByName('dta_emissao_gta').AsDateTime;
            end;

        9 : begin  // Venda para criador
              // Categoria de destino para venda é sempre 12 - Animal vendido
              Result := VerificaCategoriaEvento(12, DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        10: begin  // Venda para frigorífico
              // Categoria de destino para venda é sempre 12 - Animal vendido
              Result := VerificaCategoriaEvento(12, DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        11: begin  // Desaparecimento
              // Categoria de destino para desaparecimento é sempre 14 - Animal desaparecido
              Result := VerificaCategoriaEvento(14, DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        12: begin  // Morte
              {$IFDEF MSSQL}
              Q.SQL.Add('select cod_tipo_morte, ' +
                        '       cod_causa_morte ' +
                        '  from tab_evento_morte ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;

              Result := VerificaMorteEvento(Q.FieldByName('cod_tipo_morte').AsInteger,
                                            Q.FieldByName('cod_causa_morte').AsInteger,
                                            DadosEvento.TipoMorte);

              if Result < 0 then begin
                Exit;
              end;

              // Categoria de destino para morte é sempre 13 - Animal morto
              Result := VerificaCategoriaEvento(13, DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        13: begin  // Parto

            end;

        14: begin  // Aborto

            end;

        15: begin  // Manejo sanitário
              {$IFDEF MSSQL}
              Q.SQL.Add('select te.cod_evento, ' +
                        '       tei.cod_entrada_insumo, ' +
                        '       ttses.des_tipo_sub_evento_sanitario, ' +
                        '       case isnull(tei.cod_insumo, 0) ' +
                        '         when 0 then tei.des_insumo ' +
                        '       else ' +
                        '         ti.des_insumo ' +
                        '       end as des_insumo, ' +
                        '       tei.cod_tipo_insumo, ' +
                        '       isnull(tei.cod_sub_tipo_insumo, 0) as cod_sub_tipo_insumo, ' +
                        '       tsti.des_sub_tipo_insumo, ' +
                        '       case isnull(tei.cod_sub_tipo_insumo, 0) ' +
                        '         when 0 then tti.qtd_intervalo_minimo_aplicacao ' +
                        '       else ' +
                        '         tsti.qtd_intervalo_minimo_aplicacao ' +
                        '       end as qtd_intervalo_minimo_aplicacao, ' +
                        '       case isnull(tei.cod_sub_tipo_insumo, 0) ' +
                        '         when 0 then ''A'' ' +
                        '       else ' +
                        '         tsti.ind_sexo_animal_aplicacao ' +
                        '       end as ind_sexo_animal_aplicacao ' +
                        '  from tab_evento te, ' +
                        '       tab_evento_sanitario tes, ' +
                        '       tab_entrada_insumo tei, ' +
                        '       tab_insumo ti, ' +
                        '       tab_tipo_insumo tti, ' +
                        '       tab_sub_tipo_insumo tsti, ' +
                        '       tab_tipo_sub_evento_sanitario ttses ' +
                        ' where tes.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                        '   and tes.cod_evento = te.cod_evento ' +
                        '   and tei.cod_pessoa_produtor = tes.cod_pessoa_produtor ' +
                        '   and tei.cod_entrada_insumo = tes.cod_entrada_insumo ' +
                        '   and ti.cod_insumo =* tei.cod_insumo ' +
                        '   and tti.cod_tipo_insumo = tei.cod_tipo_insumo ' +
                        '   and tsti.cod_sub_tipo_insumo =* tei.cod_sub_tipo_insumo ' +
                        '   and ttses.cod_tipo_sub_evento_sanitario = tti.cod_tipo_sub_evento_sanitario ' +
                        '   and te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and te.cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;

              if Q.IsEmpty then begin
                Mensagens.Adicionar(1058, Self.ClassName, NomeMetodo, []);
                Result := -1058;
                Exit;
              end;

              For X := 0 To MAX_SUBEVENTOS do begin
                DadosEvento.DadosSubEventoSanitario[X].CodEntradaInsumo := 0;
                DadosEvento.DadosSubEventoSanitario[X].DesTipoSubEventoSanitario := '';
                DadosEvento.DadosSubEventoSanitario[X].DesInsumo := '';
                DadosEvento.DadosSubEventoSanitario[X].CodTipoInsumo := 0;
                DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo := 0;
                DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo := '';
                DadosEvento.DadosSubEventoSanitario[X].QtdIntervaloMinimoAplicacao := 0;
                DadosEvento.DadosSubEventoSanitario[X].IndSexoAnimalAplicacao := '';
              end;

              X := 0;
              while not Q.EOf do begin
                DadosEvento.DadosSubEventoSanitario[X].CodEntradaInsumo            := Q.FieldByName('cod_entrada_insumo').AsInteger;
                DadosEvento.DadosSubEventoSanitario[X].DesTipoSubEventoSanitario   := Q.FieldByName('des_tipo_sub_evento_sanitario').AsString;
                DadosEvento.DadosSubEventoSanitario[X].DesInsumo                   := Q.FieldByName('des_insumo').AsString;
                DadosEvento.DadosSubEventoSanitario[X].CodTipoInsumo               := Q.FieldByName('cod_tipo_insumo').AsInteger;
                DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo            := Q.FieldByName('cod_sub_tipo_insumo').AsInteger;
                DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo            := Q.FieldByName('des_sub_tipo_insumo').AsString;
                DadosEvento.DadosSubEventoSanitario[X].QtdIntervaloMinimoAplicacao := Q.FieldByName('qtd_intervalo_minimo_aplicacao').AsInteger;
                DadosEvento.DadosSubEventoSanitario[X].IndSexoAnimalAplicacao      := Q.FieldByName('ind_sexo_animal_aplicacao').AsString;
                Q.Next;
                if Q.Eof then Break;
                Inc(X);
                if X > MAX_SUBEVENTOS then begin
                  Mensagens.Adicionar(1059, Self.ClassName, NomeMetodo, []);
                  Result := -1059;
                  Exit;
                end;
              end;

              Result := 0;
            end;

        16: begin  // Emissão de certificado

            end;

        17: begin  // Desmame do bezerro
              // Não há dados complementares para este tipo de evento
            end;

        18: begin  // Desaparecimento do bezerro
              // Não há dados complementares para este tipo de evento
            end;

        19: begin  // Morte do bezerro
              // Não há dados complementares para este tipo de evento
            end;

        20: begin  // Venda do bezerro
              // Não há dados complementares para este tipo de evento
            end;

        21: begin  // Abate de animal vendido
              // Categoria de destino para abate de animal vendido é sempre 13 - Animal morto
              Result := VerificaCategoriaEvento(13, DadosEvento.CategoriaDestino);
              if Result < 0 then begin
                Exit;
              end;
            end;

        22: begin  // Pesagem
              // Não há dados complementares para este tipo de evento
            end;

        25: begin  // Exame Andrológico
              // Não há dados complementares para este tipo de evento
            end;

        28: begin  // Diagnostico de prenhez
              // Não há dados complementares para este tipo de evento
            end;
        31: begin  // Avaliaçao de caracteristicas
              {$IFDEF MSSQL}

              Q.SQL.Add('select cod_tipo_avaliacao ' +
                        '  from tab_evento_avaliacao ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;
              DadosEvento.CodTipoAvaliacao := Q.Fieldbyname('cod_tipo_avaliacao').asinteger;
            end;
        36 : begin  // Retorno frigorifico
              {$IFDEF MSSQL}
              Q.SQL.Add('select num_cnpj_cpf_frigorifico ' +
                        '  ,    cod_pessoa ' +
                        '  from tab_evento_retorno_frigorifico ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := CodEvento;
              Q.Open;

              DadosEvento.LugarOrigem.NumCNPJCPF           := Q.FieldByName('num_cnpj_cpf_frigorifico').AsString;
              DadosEvento.LugarOrigem.CodPessoa            := Q.FieldByName('cod_pessoa').AsInteger;
            end;
      end;

      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

procedure TIntAnimais.MontaQueryInsertAnimalEvento;
begin
  FQueryAux1.SQLConnection := Conexao.SQLConnection;

  FQueryAux1.SQL.Clear;
  {$IFDEF MSSQL}
  FQueryAux1.SQL.Add('insert into tab_animal_evento ' +
                      '      (cod_pessoa_produtor, ' +
                      '       cod_evento, ' +
                      '       cod_animal, ' +
                      '       ind_animal_castrado, ' +
                      '       cod_regime_alimentar, ' +
                      '       cod_categoria_animal, ' +
                      '       cod_tipo_lugar, ' +
                      '       cod_lote_corrente, ' +
                      '       cod_local_corrente, ' +
                      '       cod_fazenda_corrente, ' +
                      '       num_imovel_corrente, ' +
                      '       cod_localizacao_corrente, ' +
                      '       cod_propriedade_corrente, ' +
                      '       num_cnpj_cpf_corrente, ' +
                      '       cod_pessoa_corrente, ' +
                      '       cod_pessoa_secundaria_corrente, ' +
                      '       ind_apto_cobertura, ' +
                      '       dta_desativacao, ' +
                      '       dta_ultimo_evento, ' +
                      '       dta_aplicacao_ultimo_evento, ' +
                      '       dta_aplicacao_evento, ' +
                      '       cod_animal_associado ) ' +
                      'values ' +
                      '      (:cod_pessoa_produtor, ' +
                      '       :cod_evento, ' +
                      '       :cod_animal, ' +
                      '       :ind_animal_castrado, ' +
                      '       :cod_regime_alimentar, ' +
                      '       :cod_categoria_animal, ' +
                      '       :cod_tipo_lugar, ' +
                      '       :cod_lote_corrente, ' +
                      '       :cod_local_corrente, ' +
                      '       :cod_fazenda_corrente, ' +
                      '       :num_imovel_corrente, ' +
                      '       :cod_localizacao_corrente, ' +
                      '       :cod_propriedade_corrente, ' +
                      '       :num_cnpj_cpf_corrente, ' +
                      '       :cod_pessoa_corrente, ' +
                      '       :cod_pessoa_secundaria_corrente, ' +
                      '       :ind_apto_cobertura, ' +
                      '       :dta_desativacao, ' +
                      '       :dta_ultimo_evento, ' +
                      '       :dta_aplicacao_ultimo_evento, ' +
                      '       :dta_aplicacao_evento, ' +
                      '       :cod_animal_associado ) ');
  {$ENDIF}
end;

procedure TIntAnimais.MontaQueryInsertPesoAnimal;
begin
  FQueryAux1.SQLConnection := Conexao.SQLConnection;

  FQueryAux1.SQL.Clear;
  {$IFDEF MSSQL}
  FQueryAux1.SQL.Add('insert into tab_animal_evento ' +
                      '      (cod_pessoa_produtor, ' +
                      '       cod_evento, ' +
                      '       cod_animal, ' +
                      '       ind_animal_castrado, ' +
                      '       cod_regime_alimentar, ' +
                      '       cod_categoria_animal, ' +
                      '       cod_tipo_lugar, ' +
                      '       cod_lote_corrente, ' +
                      '       cod_local_corrente, ' +
                      '       cod_fazenda_corrente, ' +
                      '       num_imovel_corrente, ' +
                      '       cod_localizacao_corrente, ' +
                      '       cod_propriedade_corrente, ' +
                      '       num_cnpj_cpf_corrente, ' +
                      '       cod_pessoa_corrente, ' +
                      '       cod_pessoa_secundaria_corrente, ' +
                      '       ind_apto_cobertura, ' +
                      '       dta_desativacao, ' +
                      '       dta_ultimo_evento, ' +
                      '       dta_aplicacao_ultimo_evento, ' +
                      '       dta_aplicacao_evento, ' +
                      '       cod_animal_associado, ' +
                      '       txt_dados, ' +
                      '       qtd_peso_animal) ' +
                      'values ' +
                      '      (:cod_pessoa_produtor, ' +
                      '       :cod_evento, ' +
                      '       :cod_animal, ' +
                      '       :ind_animal_castrado, ' +
                      '       :cod_regime_alimentar, ' +
                      '       :cod_categoria_animal, ' +
                      '       :cod_tipo_lugar, ' +
                      '       :cod_lote_corrente, ' +
                      '       :cod_local_corrente, ' +
                      '       :cod_fazenda_corrente, ' +
                      '       :num_imovel_corrente, ' +
                      '       :cod_localizacao_corrente, ' +
                      '       :cod_propriedade_corrente, ' +
                      '       :num_cnpj_cpf_corrente, ' +
                      '       :cod_pessoa_corrente, ' +
                      '       :cod_pessoa_secundaria_corrente, ' +
                      '       :ind_apto_cobertura, ' +
                      '       :dta_desativacao, ' +
                      '       :dta_ultimo_evento, ' +
                      '       :dta_aplicacao_ultimo_evento, ' +
                      '       :dta_aplicacao_evento, ' +
                      '       :cod_animal_associado, ' +
                      '       :txt_dados, ' +
                      '       :qtd_peso_animal) ');
  {$ENDIF}
end;

procedure TIntAnimais.MontaQueryInsertDiagnosticoAnimal(IndVaca:String);
begin
  FQueryAux1.SQLConnection := Conexao.SQLConnection;
  
  FQueryAux1.SQL.Clear;
  {$IFDEF MSSQL}
  FQueryAux1.SQL.Add('insert into tab_animal_evento ' +
                      '      (cod_pessoa_produtor, ' +
                      '       cod_evento, ' +
                      '       cod_animal, ' +
                      '       ind_animal_castrado, ' +
                      '       cod_regime_alimentar, ' +
                      '       cod_categoria_animal, ' +
                      '       cod_tipo_lugar, ' +
                      '       cod_lote_corrente, ' +
                      '       cod_local_corrente, ' +
                      '       cod_fazenda_corrente, ' +
                      '       num_imovel_corrente, ' +
                      '       cod_localizacao_corrente, ' +
                      '       cod_propriedade_corrente, ' +
                      '       num_cnpj_cpf_corrente, ' +
                      '       cod_pessoa_corrente, ' +
                      '       cod_pessoa_secundaria_corrente, ' +
                      '       ind_apto_cobertura, ' +
                      '       dta_desativacao, ' +
                      '       dta_ultimo_evento, ' +
                      '       dta_aplicacao_ultimo_evento, ' +
                      '       dta_aplicacao_evento, ' +
                      '       cod_animal_associado, ' +
                      '       txt_dados, ');
  if IndVaca = 'S'
     then FQueryAux1.SQL.Add(' ind_vaca_prenha) ')
     else FQueryAux1.SQL.Add(' ind_touro_apto) ');
  FQueryAux1.SQL.Add(' values ' +
                      '      (:cod_pessoa_produtor, ' +
                      '       :cod_evento, ' +
                      '       :cod_animal, ' +
                      '       :ind_animal_castrado, ' +
                      '       :cod_regime_alimentar, ' +
                      '       :cod_categoria_animal, ' +
                      '       :cod_tipo_lugar, ' +
                      '       :cod_lote_corrente, ' +
                      '       :cod_local_corrente, ' +
                      '       :cod_fazenda_corrente, ' +
                      '       :num_imovel_corrente, ' +
                      '       :cod_localizacao_corrente, ' +
                      '       :cod_propriedade_corrente, ' +
                      '       :num_cnpj_cpf_corrente, ' +
                      '       :cod_pessoa_corrente, ' +
                      '       :cod_pessoa_secundaria_corrente, ' +
                      '       :ind_apto_cobertura, ' +
                      '       :dta_desativacao, ' +
                      '       :dta_ultimo_evento, ' +
                      '       :dta_aplicacao_ultimo_evento, ' +
                      '       :dta_aplicacao_evento, ' +
                      '       :cod_animal_associado, ' +
                      '       :txt_dados, ');
  if IndVaca = 'S'
     then FQueryAux1.SQL.Add(' :ind_vaca_prenha) ')
     else FQueryAux1.SQL.Add(' :ind_touro_apto) ');
{$ENDIF}
end;

procedure TIntAnimais.MontaQueryDeleteAnimalEvento;
begin
  FQueryAux1.SQLConnection := Conexao.SQLConnection;

  FQueryAux1.SQL.Clear;
  {$IFDEF MSSQL}
  FQueryAux1.SQL.Add('delete from tab_animal_evento ' +
                     ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                     '   and cod_evento = :cod_evento ' +
                     '   and cod_animal = :cod_animal ');
  {$ENDIF}
end;

function TIntAnimais.InserirAnimalEvento(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal): Integer;
const
  NomeMetodo : String = 'InserirAnimalEvento';
var
  Qry: THerdomQuery;
begin
  try
    Qry := THerdomQuery.Create(Conexao, nil);
    try
      Qry.SQL.Clear;
      Qry.SQL.Add(' select 1 ');
      Qry.SQL.Add('   from tab_animal ');
      Qry.SQL.Add('  where dta_fim_validade is null ');
      if DadosEvento.CodTipoEvento <> 36 then begin
        Qry.SQL.Add('    and dta_desativacao is null ');
      end;
      Qry.SQL.Add('    and cod_animal = :cod_animal ');
      Qry.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Qry.Open;

      if Qry.IsEmpty then
      begin
        Mensagens.Adicionar(2252, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
        Result := -2252;
        Exit;
      end;

      Qry.SQL.Clear;
      Qry.SQL.Add('select cod_animal from tab_animal_evento');
      Qry.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
      Qry.SQL.Add('   and cod_evento = :cod_evento');
      Qry.SQL.Add('   and cod_animal = :cod_animal');
      Qry.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Qry.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Qry.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Qry.Open;

      if not Qry.IsEmpty then begin
        Mensagens.Adicionar(2110, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
        Result := -2110;
        Exit;
      end;

      if (DadosAnimal.CodPessoaCorrente > 0) and                      
         (not DadosEvento.CodTipoEvento in  [9, 10]) then // <> de Venda, A venda so é realizada pelo produtor do animal!
      begin
        FQueryAux1.ParamByName('cod_pessoa_produtor').AsInteger := DadosAnimal.CodPessoaCorrente;
      end
      else
      begin
        FQueryAux1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      end;

      FQueryAux1.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      FQueryAux1.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.IndAnimalCastrado <> '' then begin
        FQueryAux1.ParamByName('ind_animal_castrado').AsString := DadosAnimal.IndAnimalCastrado;
      end else begin
        FQueryAux1.ParamByName('ind_animal_castrado').DataType := ftString;
        FQueryAux1.ParamByName('ind_animal_castrado').Clear;
      end;

      if DadosAnimal.CodRegimeAlimentar > 0 then begin
        FQueryAux1.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;
      end else begin
        FQueryAux1.ParamByName('cod_regime_alimentar').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_regime_alimentar').Clear;
      end;

      if DadosAnimal.CodCategoriaAnimal > 0 then begin
        FQueryAux1.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
      end else begin
        FQueryAux1.ParamByName('cod_categoria_animal').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_categoria_animal').Clear;
      end;

      if DadosAnimal.CodTipoLugar > 0 then begin
        FQueryAux1.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
      end else begin
        FQueryAux1.ParamByName('cod_tipo_lugar').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_tipo_lugar').Clear;
      end;

      if DadosAnimal.CodLoteCorrente > 0 then begin
        FQueryAux1.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      end else begin
        FQueryAux1.ParamByName('cod_lote_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_lote_corrente').Clear;
      end;

      if DadosAnimal.CodLocalCorrente > 0 then begin
        FQueryAux1.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
      end else begin
        FQueryAux1.ParamByName('cod_local_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_local_corrente').Clear;
      end;

      if DadosAnimal.CodFazendaCorrente > 0 then begin
        FQueryAux1.ParamByName('cod_fazenda_corrente').AsInteger := DadosAnimal.CodFazendaCorrente;
      end else begin
        FQueryAux1.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_fazenda_corrente').Clear;
      end;

      if DadosAnimal.NumImovelCorrente <> '' then begin
        FQueryAux1.ParamByName('num_imovel_corrente').AsString := DadosAnimal.NumImovelCorrente;
      end else begin
        FQueryAux1.ParamByName('num_imovel_corrente').DataType := ftString;
        FQueryAux1.ParamByName('num_imovel_corrente').Clear;
      end;

      if DadosAnimal.CodLocalizacaoCorrente > 0 then begin
        FQueryAux1.ParamByName('cod_localizacao_corrente').AsInteger := DadosAnimal.CodLocalizacaoCorrente;
      end else begin
        FQueryAux1.ParamByName('cod_localizacao_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_localizacao_corrente').Clear;
      end;

      if DadosAnimal.CodPropriedadeCorrente > 0 then begin
        FQueryAux1.ParamByName('cod_propriedade_corrente').AsInteger := DadosAnimal.CodPropriedadeCorrente;
      end else begin
        FQueryAux1.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_propriedade_corrente').Clear;
      end;

      if DadosAnimal.NumCNPJCPFCorrente <> '' then begin
        FQueryAux1.ParamByName('num_cnpj_cpf_corrente').AsString := DadosAnimal.NumCNPJCPFCorrente;
      end else begin
        FQueryAux1.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
        FQueryAux1.ParamByName('num_cnpj_cpf_corrente').Clear;
      end;

      if (DadosAnimal.CodPessoaCorrente > 0) and
         (DadosAnimal.CodTipoLugar <> 3) then begin
        FQueryAux1.ParamByName('cod_pessoa_corrente').AsInteger := DadosAnimal.CodPessoaCorrente;
      end
      else if (DadosAnimal.CodTipoLugar = 3) then
      begin
        FQueryAux1.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_pessoa_corrente').Clear;
      end
      else
      begin
        FQueryAux1.ParamByName('cod_pessoa_corrente').AsInteger := DadosAnimal.CodPessoaProdutor;
      end;

      if DadosAnimal.CodPessoaSecundariaCorrente > 0 then begin
        FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').AsInteger := DadosAnimal.CodPessoaSecundariaCorrente;
      end else begin
        FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').Clear;
      end;

      FQueryAux1.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaDesativacao > 0 then begin
        FQueryAux1.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
      end else begin
        FQueryAux1.ParamByName('dta_desativacao').DataType := ftDateTime;
        FQueryAux1.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEvento > 0 then begin
        FQueryAux1.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEvento;
      end else begin
        FQueryAux1.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        FQueryAux1.ParamByName('dta_ultimo_evento').Clear;
      end;

      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      FQueryAux1.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      if DadosAnimal.CodAnimalAssociado > 0 then begin
        FQueryAux1.ParamByName('cod_animal_associado').AsInteger := DadosAnimal.CodAnimalAssociado;
      end else begin
        FQueryAux1.ParamByName('cod_animal_associado').DataType := ftInteger;
        FQueryAux1.ParamByName('cod_animal_associado').Clear;
      end;

      FQueryAux1.ExecSQL;
      Result := 0;
    finally
      Qry.Free;
    end;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(860, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -860;
      Exit;
    end;
  end;
end;

function TIntAnimais.InserirAnimalPesagem(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal;PesoAnimal:real): Integer;
const
  NomeMetodo : String = 'InserirAnimalPesagem';
begin
  try
    FQueryAux1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    FQueryAux1.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
    FQueryAux1.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

    if DadosAnimal.IndAnimalCastrado <> '' then begin
      FQueryAux1.ParamByName('ind_animal_castrado').AsString := DadosAnimal.IndAnimalCastrado;
    end else begin
      FQueryAux1.ParamByName('ind_animal_castrado').DataType := ftString;
      FQueryAux1.ParamByName('ind_animal_castrado').Clear;
    end;

    if DadosAnimal.CodRegimeAlimentar > 0 then begin
      FQueryAux1.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;
    end else begin
      FQueryAux1.ParamByName('cod_regime_alimentar').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_regime_alimentar').Clear;
    end;

    if DadosAnimal.CodCategoriaAnimal > 0 then begin
      FQueryAux1.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
    end else begin
      FQueryAux1.ParamByName('cod_categoria_animal').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_categoria_animal').Clear;
    end;

    if DadosAnimal.CodTipoLugar > 0 then begin
      FQueryAux1.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
    end else begin
      FQueryAux1.ParamByName('cod_tipo_lugar').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_tipo_lugar').Clear;
    end;

    if DadosAnimal.CodLoteCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_lote_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_lote_corrente').Clear;
    end;

    if DadosAnimal.CodLocalCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_local_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_local_corrente').Clear;
    end;

    if DadosAnimal.CodFazendaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_fazenda_corrente').AsInteger := DadosAnimal.CodFazendaCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_fazenda_corrente').Clear;
    end;

    if DadosAnimal.NumImovelCorrente <> '' then begin
      FQueryAux1.ParamByName('num_imovel_corrente').AsString := DadosAnimal.NumImovelCorrente;
    end else begin
      FQueryAux1.ParamByName('num_imovel_corrente').DataType := ftString;
      FQueryAux1.ParamByName('num_imovel_corrente').Clear;
    end;

    if DadosAnimal.CodLocalizacaoCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_localizacao_corrente').AsInteger := DadosAnimal.CodLocalizacaoCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_localizacao_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_localizacao_corrente').Clear;
    end;

    if DadosAnimal.CodPropriedadeCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_propriedade_corrente').AsInteger := DadosAnimal.CodPropriedadeCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_propriedade_corrente').Clear;
    end;

    if DadosAnimal.NumCNPJCPFCorrente <> '' then begin
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').AsString := DadosAnimal.NumCNPJCPFCorrente;
    end else begin
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').Clear;
    end;

    if DadosAnimal.CodPessoaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_pessoa_corrente').AsInteger := DadosAnimal.CodPessoaCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_pessoa_corrente').Clear;
    end;

    if DadosAnimal.CodPessoaSecundariaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').AsInteger := DadosAnimal.CodPessoaSecundariaCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').Clear;
    end;

    FQueryAux1.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

    if DadosAnimal.DtaDesativacao > 0 then begin
      FQueryAux1.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
    end else begin
      FQueryAux1.ParamByName('dta_desativacao').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_desativacao').Clear;
    end;

    if DadosAnimal.DtaUltimoEvento > 0 then begin
      FQueryAux1.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEvento;
    end else begin
      FQueryAux1.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_ultimo_evento').Clear;
    end;

    if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
    end else begin
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').Clear;
    end;

    FQueryAux1.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

    if DadosAnimal.CodAnimalAssociado > 0 then begin
      FQueryAux1.ParamByName('cod_animal_associado').AsInteger := DadosAnimal.CodAnimalAssociado;
    end else begin
      FQueryAux1.ParamByName('cod_animal_associado').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_animal_associado').Clear;
    end;
    FQueryAux1.ParamByName('qtd_peso_animal').Asfloat := PesoAnimal;
    FQueryAux1.ParamByName('txt_dados').AsString := 'Peso: ' + FloatToStr(DadosAnimal.QtdPesoAnimal)+ ' Kg';
    FQueryAux1.ExecSQL;

    // Atualiza campos da tab_animal
    FQueryAux2.SQLConnection := Conexao.SQLConnection;
    FQueryAux2.SQL.Clear;
    {$IFDEF MSSQL}
    FQueryAux2.SQL.Add('UPDATE tab_animal SET dta_ultima_pesagem = :dta_ultima_pesagem, qtd_ultima_pesagem = :qtd_ultima_pesagem ');
    FQueryAux2.SQL.Add('WHERE cod_pessoa_produtor = :cod_pessoa_produtor AND cod_animal = :cod_animal');
    {$ENDIF}
    FQueryAux2.ParamByName('dta_ultima_pesagem').AsDateTime := DadosEvento.DtaFim;
    FQueryAux2.ParamByName('qtd_ultima_pesagem').AsFloat    := PesoAnimal;
    FQueryAux2.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    FQueryAux2.ParamByName('cod_animal').AsInteger          := DadosAnimal.CodAnimal;
    FQueryAux2.ExecSQL;

    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(860, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -860;
      Exit;
    end;
  end;
end;

function TIntAnimais.InserirAnimalDiagnosticoExame(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal;IndVacaPrenha:string;IndTouroApto:String): Integer;
const
  NomeMetodo : String = 'InserirAnimalDiagnosticoExame';
var
  Resultado: String;
begin
  Resultado := '';
  if IndVacaPrenha = 'S'
     then Resultado := 'Resultado: Vaca Prenha'
     else if IndVacaPrenha = 'N'
             then Resultado := 'Resultado: Vaca Vazia';
  if IndTouroApto = 'S'
     then Resultado := 'Resultado: Touro Apto'
     else if IndTouroApto = 'N'
             then Resultado := 'Resultado: Touro Inapto';
  try
    FQueryAux1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    FQueryAux1.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
    FQueryAux1.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

    if DadosAnimal.IndAnimalCastrado <> '' then begin
      FQueryAux1.ParamByName('ind_animal_castrado').AsString := DadosAnimal.IndAnimalCastrado;
    end else begin
      FQueryAux1.ParamByName('ind_animal_castrado').DataType := ftString;
      FQueryAux1.ParamByName('ind_animal_castrado').Clear;
    end;

    if DadosAnimal.CodRegimeAlimentar > 0 then begin
      FQueryAux1.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;
    end else begin
      FQueryAux1.ParamByName('cod_regime_alimentar').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_regime_alimentar').Clear;
    end;

    if DadosAnimal.CodCategoriaAnimal > 0 then begin
      FQueryAux1.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
    end else begin
      FQueryAux1.ParamByName('cod_categoria_animal').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_categoria_animal').Clear;
    end;

    if DadosAnimal.CodTipoLugar > 0 then begin
      FQueryAux1.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
    end else begin
      FQueryAux1.ParamByName('cod_tipo_lugar').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_tipo_lugar').Clear;
    end;

    if DadosAnimal.CodLoteCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_lote_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_lote_corrente').Clear;
    end;

    if DadosAnimal.CodLocalCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_local_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_local_corrente').Clear;
    end;

    if DadosAnimal.CodFazendaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_fazenda_corrente').AsInteger := DadosAnimal.CodFazendaCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_fazenda_corrente').Clear;
    end;

    if DadosAnimal.NumImovelCorrente <> '' then begin
      FQueryAux1.ParamByName('num_imovel_corrente').AsString := DadosAnimal.NumImovelCorrente;
    end else begin
      FQueryAux1.ParamByName('num_imovel_corrente').DataType := ftString;
      FQueryAux1.ParamByName('num_imovel_corrente').Clear;
    end;

    if DadosAnimal.CodLocalizacaoCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_localizacao_corrente').AsInteger := DadosAnimal.CodLocalizacaoCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_localizacao_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_localizacao_corrente').Clear;
    end;

    if DadosAnimal.CodPropriedadeCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_propriedade_corrente').AsInteger := DadosAnimal.CodPropriedadeCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_propriedade_corrente').Clear;
    end;

    if DadosAnimal.NumCNPJCPFCorrente <> '' then begin
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').AsString := DadosAnimal.NumCNPJCPFCorrente;
    end else begin
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').Clear;
    end;

    if DadosAnimal.CodPessoaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_pessoa_corrente').AsInteger := DadosAnimal.CodPessoaCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_pessoa_corrente').Clear;
    end;

    if DadosAnimal.CodPessoaSecundariaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').AsInteger := DadosAnimal.CodPessoaSecundariaCorrente;
    end else begin
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').Clear;
    end;

    FQueryAux1.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

    if DadosAnimal.DtaDesativacao > 0 then begin
      FQueryAux1.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
    end else begin
      FQueryAux1.ParamByName('dta_desativacao').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_desativacao').Clear;
    end;

    if DadosAnimal.DtaUltimoEvento > 0 then begin
      FQueryAux1.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEvento;
    end else begin
      FQueryAux1.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_ultimo_evento').Clear;
    end;

    if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
    end else begin
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').Clear;
    end;

    FQueryAux1.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

    if DadosAnimal.CodAnimalAssociado > 0 then begin
      FQueryAux1.ParamByName('cod_animal_associado').AsInteger := DadosAnimal.CodAnimalAssociado;
    end else begin
      FQueryAux1.ParamByName('cod_animal_associado').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_animal_associado').Clear;
    end;

    if IndVacaPrenha <> '' then
       FQueryAux1.ParamByName('ind_vaca_prenha').AsString := IndVacaPrenha;
    if IndTouroApto <> '' then
       FQueryAux1.ParamByName('ind_touro_apto').AsString := IndTouroApto;
    FQueryAux1.ParamByName('txt_dados').AsString := Resultado;

    FQueryAux1.ExecSQL;
    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(860, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -860;
      Exit;
    end;
  end;
end;

function TIntAnimais.RemoverAnimalEvento(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal): Integer;
const
  NomeMetodo : String = 'RemoverAnimalEvento';
begin
  try
    FQueryAux1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    FQueryAux1.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
    FQueryAux1.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
    FQueryAux1.ExecSQL;
    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(900, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -900;
      Exit;
    end;
  end;
end;

function TIntAnimais.InserirErroAplicacaoEvento(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal; TxtMensagem, IndOperacaoRemocao: String): Integer;
const
  NomeMetodo : String = 'InserirErroAplicacaoEvento';
var
  Q : THerdomQuery;
  CodEventoPrincipal: Integer;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      if DadosAnimal.CodAnimal > 0 then
         Q.SQL.Add('   and cod_animal = :cod_animal ')
      else begin
         Q.SQL.Add('   and cod_animal_manejo =:cod_animal_manejo '+
                   '   and cod_fazenda_manejo = :cod_fazenda_manejo ');
      end;             
      Q.SQL.Add('   and ind_operacao_remocao = :ind_operacao_remocao ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      if DadosAnimal.CodAnimal > 0 then
         Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal
      else begin
         Q.ParamByName('cod_animal_manejo').AsString := DadosAnimal.CodAnimalManejo;
         Q.ParamByName('cod_fazenda_manejo').AsInteger := DadosAnimal.CodFazendaManejo;
      end;
      Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_erro_aplicacao_evento ' +
                '      (cod_pessoa_produtor, ' +
                '       cod_evento, ' +
                '       cod_animal, ' +
                '       cod_tipo_mensagem, ' +
                '       ind_operacao_remocao, ' +
                '       dta_aplicacao_evento, ' +
                '       txt_mensagem, ' +
                '       des_apelido, ' +
                '       cod_fazenda_manejo, ' +
                '       cod_animal_manejo, ' +
                '       cod_animal_certificadora, ' +
                '       cod_situacao_sisbov, ' +
                '       cod_pais_sisbov, ' +
                '       cod_estado_sisbov, ' +
                '       cod_micro_regiao_sisbov, ' +
                '       cod_animal_sisbov, ' +
                '       num_dv_sisbov, ' +
                '       cod_raca, ' +
                '       ind_sexo, ' +
                '       cod_tipo_origem, ' +
                '       cod_categoria_animal, ' +
                '       cod_local_corrente, ' +
                '       cod_lote_corrente, ' +
                '       cod_tipo_lugar, ' +
                '       qtd_peso_animal, ' +
                '       ind_touro_apto, ' +
                '       ind_vaca_prenha) ' +
                'values ' +
                '      (:cod_pessoa_produtor, ' +
                '       :cod_evento, ');
      if DadosAnimal.CodAnimal > 0
         then Q.SQL.Add(          '       :cod_animal, ')
         else Q.SQL.Add(          '       null, ');
      Q.SQL.Add('       2, ' +
                '       :ind_operacao_remocao, ' +
                '       :dta_aplicacao_evento, ' +
                '       :txt_mensagem, ' +
                '       :des_apelido, ' +
                '       :cod_fazenda_manejo, ' +
                '       :cod_animal_manejo, ' +
                '       :cod_animal_certificadora, ' +
                '       :cod_situacao_sisbov, ' +
                '       :cod_pais_sisbov, ' +
                '       :cod_estado_sisbov, ' +
                '       :cod_micro_regiao_sisbov, ' +
                '       :cod_animal_sisbov, ' +
                '       :num_dv_sisbov, ' +
                '       :cod_raca, ' +
                '       :ind_sexo, ' +
                '       :cod_tipo_origem, ' +
                '       :cod_categoria_animal, ' +
                '       :cod_local_corrente, ' +
                '       :cod_lote_corrente, ' +
                '       :cod_tipo_lugar, ' +
                '       :qtd_peso_animal, ' +
                '       :ind_touro_apto, ' +
                '       :ind_vaca_prenha) ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      if DadosAnimal.CodAnimal > 0 then
         Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
      Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('txt_mensagem').AsMemo := TxtMensagem;
      Q.ParamByName('des_apelido').AsString := DadosAnimal.DesApelido;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := DadosAnimal.CodFazendaManejo;
      Q.ParamByName('cod_animal_manejo').AsString := DadosAnimal.CodAnimalManejo;
      Q.ParamByName('cod_animal_certificadora').AsString := DadosAnimal.CodAnimalCertificadora;
      Q.ParamByName('cod_situacao_sisbov').AsString := DadosAnimal.CodSituacaoSisbov;
      Q.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
      Q.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
      Q.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
      Q.ParamByName('cod_raca').AsInteger := DadosAnimal.CodRaca;
      Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
      Q.ParamByName('cod_tipo_origem').AsInteger := DadosAnimal.CodTipoOrigem;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Q.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
      Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      Q.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
      Q.ParamByName('qtd_peso_animal').AsFloat := DadosAnimal.QtdPesoAnimal;
      Q.ParamByName('ind_touro_apto').AsString := DadosAnimal.IndTouroApto;
      Q.ParamByName('ind_vaca_prenha').AsString := DadosAnimal.IndVacaPrenha;
      Q.ExecSQL;

      //Verifica se o evento em que esta sendo gerado o log, se trata de um evento associado.
      //Caso se trate de um evento associado, a mensagem deverá ser gerada para o evento principal
      Q.SQL.Clear;
      Q.SQL.Add('select cod_evento from tab_evento ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
      Q.SQL.Add('   and cod_evento_associado = :cod_evento_associado');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento_associado').AsInteger := DadosEvento.CodEvento;
      Q.Open;

      if not Q.IsEmpty then
      begin
        CodEventoPrincipal := Q.FieldByName('cod_evento').AsInteger;
        Q.SQL.Clear;
        {$IFDEF MSSQL}        
        Q.SQL.Add('insert into tab_erro_aplicacao_evento ' +
                  '      (cod_pessoa_produtor, ' +
                  '       cod_evento, ' +
                  '       cod_animal, ' +
                  '       cod_tipo_mensagem, ' +
                  '       ind_operacao_remocao, ' +
                  '       dta_aplicacao_evento, ' +
                  '       txt_mensagem, ' +
                  '       des_apelido, ' +
                  '       cod_fazenda_manejo, ' +
                  '       cod_animal_manejo, ' +
                  '       cod_animal_certificadora, ' +
                  '       cod_situacao_sisbov, ' +
                  '       cod_pais_sisbov, ' +
                  '       cod_estado_sisbov, ' +
                  '       cod_micro_regiao_sisbov, ' +
                  '       cod_animal_sisbov, ' +
                  '       num_dv_sisbov, ' +
                  '       cod_raca, ' +
                  '       ind_sexo, ' +
                  '       cod_tipo_origem, ' +
                  '       cod_categoria_animal, ' +
                  '       cod_local_corrente, ' +
                  '       cod_lote_corrente, ' +
                  '       cod_tipo_lugar, ' +
                  '       qtd_peso_animal, ' +
                  '       ind_touro_apto, ' +
                  '       ind_vaca_prenha) ' +
                  'values ' +
                  '      (:cod_pessoa_produtor, ' +
                  '       :cod_evento, ');
        if DadosAnimal.CodAnimal > 0
           then Q.SQL.Add(          '       :cod_animal, ')
           else Q.SQL.Add(          '       null, ');
        Q.SQL.Add('       2, ' +
                  '       :ind_operacao_remocao, ' +
                  '       :dta_aplicacao_evento, ' +
                  '       :txt_mensagem, ' +
                  '       :des_apelido, ' +
                  '       :cod_fazenda_manejo, ' +
                  '       :cod_animal_manejo, ' +
                  '       :cod_animal_certificadora, ' +
                  '       :cod_situacao_sisbov, ' +
                  '       :cod_pais_sisbov, ' +
                  '       :cod_estado_sisbov, ' +
                  '       :cod_micro_regiao_sisbov, ' +
                  '       :cod_animal_sisbov, ' +
                  '       :num_dv_sisbov, ' +
                  '       :cod_raca, ' +
                  '       :ind_sexo, ' +
                  '       :cod_tipo_origem, ' +
                  '       :cod_categoria_animal, ' +
                  '       :cod_local_corrente, ' +
                  '       :cod_lote_corrente, ' +
                  '       :cod_tipo_lugar, ' +
                  '       :qtd_peso_animal, ' +
                  '       :ind_touro_apto, ' +
                  '       :ind_vaca_prenha) ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := CodEventoPrincipal;
        if DadosAnimal.CodAnimal > 0 then
           Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
        Q.ParamByName('txt_mensagem').AsMemo := 'Mensagem relacionada ao evento associado: ' + IntToStr(DadosEvento.CodEvento) + '.' + TxtMensagem;
        Q.ParamByName('des_apelido').AsString := DadosAnimal.DesApelido;
        Q.ParamByName('cod_fazenda_manejo').AsInteger := DadosAnimal.CodFazendaManejo;
        Q.ParamByName('cod_animal_manejo').AsString := DadosAnimal.CodAnimalManejo;
        Q.ParamByName('cod_animal_certificadora').AsString := DadosAnimal.CodAnimalCertificadora;
        Q.ParamByName('cod_situacao_sisbov').AsString := DadosAnimal.CodSituacaoSisbov;
        Q.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
        Q.ParamByName('cod_raca').AsInteger := DadosAnimal.CodRaca;
        Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
        Q.ParamByName('cod_tipo_origem').AsInteger := DadosAnimal.CodTipoOrigem;
        Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
        Q.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
        Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
        Q.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
        Q.ParamByName('qtd_peso_animal').AsFloat := DadosAnimal.QtdPesoAnimal;
        Q.ParamByName('ind_touro_apto').AsString := DadosAnimal.IndTouroApto;
        Q.ParamByName('ind_vaca_prenha').AsString := DadosAnimal.IndVacaPrenha;
        Q.ExecSQL;
      end;
      

      Result := 100;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(859, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -859;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.InserirErroAplicacaoEvento(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal; TxtMensagem, IndOperacaoRemocao: String; CodTipoMensagem:Integer): Integer;
const
  NomeMetodo : String = 'InserirErroAplicacaoEvento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ' +
                '   and cod_animal = :cod_animal ' +
                '   and ind_operacao_remocao = :ind_operacao_remocao ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_erro_aplicacao_evento ' +
                '      (cod_pessoa_produtor, ' +
                '       cod_evento, ' +
                '       cod_animal, ' +
                '       cod_tipo_mensagem, ' +
                '       ind_operacao_remocao, ' +
                '       dta_aplicacao_evento, ' +
                '       txt_mensagem, ' +
                '       des_apelido, ' +
                '       cod_fazenda_manejo, ' +
                '       cod_animal_manejo, ' +
                '       cod_animal_certificadora, ' +
                '       cod_situacao_sisbov, ' +
                '       cod_pais_sisbov, ' +
                '       cod_estado_sisbov, ' +
                '       cod_micro_regiao_sisbov, ' +
                '       cod_animal_sisbov, ' +
                '       num_dv_sisbov, ' +
                '       cod_raca, ' +
                '       ind_sexo, ' +
                '       cod_tipo_origem, ' +
                '       cod_categoria_animal, ' +
                '       cod_local_corrente, ' +
                '       cod_lote_corrente, ' +
                '       cod_tipo_lugar, ' +
                '       qtd_peso_animal, ' +
                '       ind_touro_apto, ' +
                '       ind_vaca_prenha) ' +
                'values ' +
                '      (:cod_pessoa_produtor, ' +
                '       :cod_evento, ');
      if DadosAnimal.CodAnimal > 0
         then Q.SQL.Add(          '       :cod_animal, ')
         else Q.SQL.Add(          '       null, ');
      Q.SQL.Add('       :cod_tipo_mensagem, ' +
                '       :ind_operacao_remocao, ' +
                '       :dta_aplicacao_evento, ' +
                '       :txt_mensagem, ' +
                '       :des_apelido, ' +
                '       :cod_fazenda_manejo, ' +
                '       :cod_animal_manejo, ' +
                '       :cod_animal_certificadora, ' +
                '       :cod_situacao_sisbov, ' +
                '       :cod_pais_sisbov, ' +
                '       :cod_estado_sisbov, ' +
                '       :cod_micro_regiao_sisbov, ' +
                '       :cod_animal_sisbov, ' +
                '       :num_dv_sisbov, ' +
                '       :cod_raca, ' +
                '       :ind_sexo, ' +
                '       :cod_tipo_origem, ' +
                '       :cod_categoria_animal, ' +
                '       :cod_local_corrente, ' +
                '       :cod_lote_corrente, ' +
                '       :cod_tipo_lugar, ' +
                '       :qtd_peso_animal, ' +
                '       :ind_touro_apto, ' +
                '       :ind_vaca_prenha) ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_tipo_mensagem').AsInteger := CodTipoMensagem;
      if DadosAnimal.CodAnimal > 0 then
         Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
      Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('txt_mensagem').AsMemo := TxtMensagem;
      Q.ParamByName('des_apelido').AsString := DadosAnimal.DesApelido;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := DadosAnimal.CodFazendaManejo;
      Q.ParamByName('cod_animal_manejo').AsString := DadosAnimal.CodAnimalManejo;
      Q.ParamByName('cod_animal_certificadora').AsString := DadosAnimal.CodAnimalCertificadora;
      Q.ParamByName('cod_situacao_sisbov').AsString := DadosAnimal.CodSituacaoSisbov;
      Q.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
      Q.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
      Q.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
      Q.ParamByName('cod_raca').AsInteger := DadosAnimal.CodRaca;
      Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
      Q.ParamByName('cod_tipo_origem').AsInteger := DadosAnimal.CodTipoOrigem;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Q.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
      Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      Q.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
      Q.ParamByName('qtd_peso_animal').AsFloat := DadosAnimal.QtdPesoAnimal;
      Q.ParamByName('ind_touro_apto').AsString := DadosAnimal.IndTouroApto;
      Q.ParamByName('ind_vaca_prenha').AsString := DadosAnimal.IndVacaPrenha;
      Q.ExecSQL;

      Result := 100;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(859, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -859;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.InserirMsgAplicacaoEvento(DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal; TxtMensagem, IndOperacaoRemocao: String): Integer;
const
  NomeMetodo : String = 'InserirMsgAplicacaoEvento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ' +
                '   and cod_animal = :cod_animal ' +
                '   and ind_operacao_remocao = :ind_operacao_remocao ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_erro_aplicacao_evento ' +
                '      (cod_pessoa_produtor, ' +
                '       cod_evento, ' +
                '       cod_animal, ' +
                '       cod_tipo_mensagem, ' +
                '       ind_operacao_remocao, ' +
                '       dta_aplicacao_evento, ' +
                '       txt_mensagem, ' +
                '       des_apelido, ' +
                '       cod_fazenda_manejo, ' +
                '       cod_animal_manejo, ' +
                '       cod_animal_certificadora, ' +
                '       cod_situacao_sisbov, ' +
                '       cod_pais_sisbov, ' +
                '       cod_estado_sisbov, ' +
                '       cod_micro_regiao_sisbov, ' +
                '       cod_animal_sisbov, ' +
                '       num_dv_sisbov, ' +
                '       cod_raca, ' +
                '       ind_sexo, ' +
                '       cod_tipo_origem, ' +
                '       cod_categoria_animal, ' +
                '       cod_local_corrente, ' +
                '       cod_lote_corrente, ' +
                '       cod_tipo_lugar) ' +
                'values ' +
                '      (:cod_pessoa_produtor, ' +
                '       :cod_evento, ' +
                '       :cod_animal, ' +
                '       3, ' +
                '       :ind_operacao_remocao, ' +
                '       :dta_aplicacao_evento, ' +
                '       :txt_mensagem, ' +
                '       :des_apelido, ' +
                '       :cod_fazenda_manejo, ' +
                '       :cod_animal_manejo, ' +
                '       :cod_animal_certificadora, ' +
                '       :cod_situacao_sisbov, ' +
                '       :cod_pais_sisbov, ' +
                '       :cod_estado_sisbov, ' +
                '       :cod_micro_regiao_sisbov, ' +
                '       :cod_animal_sisbov, ' +
                '       :num_dv_sisbov, ' +
                '       :cod_raca, ' +
                '       :ind_sexo, ' +
                '       :cod_tipo_origem, ' +
                '       :cod_categoria_animal, ' +
                '       :cod_local_corrente, ' +
                '       :cod_lote_corrente, ' +
                '       :cod_tipo_lugar) ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
      Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('txt_mensagem').AsMemo := TxtMensagem;
      Q.ParamByName('des_apelido').AsString := DadosAnimal.DesApelido;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := DadosAnimal.CodFazendaManejo;
      Q.ParamByName('cod_animal_manejo').AsString := DadosAnimal.CodAnimalManejo;
      Q.ParamByName('cod_animal_certificadora').AsString := DadosAnimal.CodAnimalCertificadora;
      Q.ParamByName('cod_situacao_sisbov').AsString := DadosAnimal.CodSituacaoSisbov;
      Q.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
      Q.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
      Q.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
      Q.ParamByName('cod_raca').AsInteger := DadosAnimal.CodRaca;
      Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
      Q.ParamByName('cod_tipo_origem').AsInteger := DadosAnimal.CodTipoOrigem;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Q.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
      Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      Q.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(859, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -859;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.InserirErroOperacaoAnimal(DadosAnimal: TDadosAnimal; DtaOperacao: TDateTime;
  TxtMensagem: String; CodOperacaoCadastro, CodTipoMensagem: Integer): Integer;
const
  NomeMetodo : String = 'InserirErroOperacaoAnimal';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Abre transação
      BeginTran;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_erro_operacao_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ' +
                '   and cod_operacao_cadastro = :cod_operacao_cadastro ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_operacao_cadastro').AsInteger := CodOperacaoCadastro;
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_erro_operacao_animal ' +
                '      (cod_pessoa_produtor, ' +
                '       cod_animal, ' +
                '       cod_operacao_cadastro, ' +
                '       dta_operacao, ' +
                '       cod_tipo_mensagem, ' +
                '       txt_mensagem, ' +
                '       des_apelido, ' +
                '       cod_fazenda_manejo, ' +
                '       cod_animal_manejo, ' +
                '       cod_animal_certificadora, ' +
                '       cod_situacao_sisbov, ' +
                '       cod_pais_sisbov, ' +
                '       cod_estado_sisbov, ' +
                '       cod_micro_regiao_sisbov, ' +
                '       cod_animal_sisbov, ' +
                '       num_dv_sisbov, ' +
                '       cod_raca, ' +
                '       ind_sexo, ' +
                '       cod_tipo_origem, ' +
                '       cod_categoria_animal, ' +
                '       cod_local_corrente, ' +
                '       cod_lote_corrente, ' +
                '       cod_tipo_lugar) ' +
                'values ' +
                '      (:cod_pessoa_produtor, ' +
                '       :cod_animal, ' +
                '       :cod_operacao_cadastro, ' +
                '       :dta_operacao, ' +
                '       :cod_tipo_mensagem, ' +
                '       :txt_mensagem, ' +
                '       :des_apelido, ' +
                '       :cod_fazenda_manejo, ' +
                '       :cod_animal_manejo, ' +
                '       :cod_animal_certificadora, ' +
                '       :cod_situacao_sisbov, ' +
                '       :cod_pais_sisbov, ' +
                '       :cod_estado_sisbov, ' +
                '       :cod_micro_regiao_sisbov, ' +
                '       :cod_animal_sisbov, ' +
                '       :num_dv_sisbov, ' +
                '       :cod_raca, ' +
                '       :ind_sexo, ' +
                '       :cod_tipo_origem, ' +
                '       :cod_categoria_animal, ' +
                '       :cod_local_corrente, ' +
                '       :cod_lote_corrente, ' +
                '       :cod_tipo_lugar) ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_operacao_cadastro').AsInteger := CodOperacaoCadastro;
      Q.ParamByName('dta_operacao').AsDateTime := DtaOperacao;
      Q.ParamByName('cod_tipo_mensagem').AsInteger := CodTipoMensagem;
      Q.ParamByName('txt_mensagem').AsMemo := TxtMensagem;
      Q.ParamByName('des_apelido').AsString := DadosAnimal.DesApelido;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := DadosAnimal.CodFazendaManejo;
      Q.ParamByName('cod_animal_manejo').AsString := DadosAnimal.CodAnimalManejo;
      Q.ParamByName('cod_animal_certificadora').AsString := DadosAnimal.CodAnimalCertificadora;
      Q.ParamByName('cod_situacao_sisbov').AsString := DadosAnimal.CodSituacaoSisbov;
      Q.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
      Q.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
      Q.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
      Q.ParamByName('cod_raca').AsInteger := DadosAnimal.CodRaca;
      Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
      Q.ParamByName('cod_tipo_origem').AsInteger := DadosAnimal.CodTipoOrigem;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Q.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
      Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      Q.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
      Q.ExecSQL;

      // Fecha transação
      Commit;

      Result := 100;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1004, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1004;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaRegimeAlimentarEvento(CodRegimeAlimentar: Integer;
  var DadosRegimeAlimentar: TDadosRegimeAlimentar): Integer;
const
  NomeMetodo : String = 'VerificaRegimeAlimentarEvento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_regime_alimentar,  ' +
                '       des_regime_alimentar, ' +
                '       ind_animal_mamando ' +
                '  from tab_regime_alimentar ' +
                ' where cod_regime_alimentar = :cod_regime_alimentar ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegimeAlimentar;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(321, Self.ClassName, NomeMetodo, []);
        Result := -321;
        Exit;
      end;

      DadosRegimeAlimentar.CodRegimeAlimentar := Q.FieldByName('cod_regime_alimentar').AsInteger;
      DadosRegimeAlimentar.DesRegimeAlimentar := Q.FieldByName('des_regime_alimentar').AsString;
      DadosRegimeAlimentar.IndAnimalMamando   := Q.FieldByName('ind_animal_mamando').AsString;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(338, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -338;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaLoteEvento(CodFazenda, CodLote: Integer;
  var DadosLote: TDadosLote): Integer;
const
  NomeMetodo : String = 'VerificaLoteEvento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_fazenda,  ' +
                '       cod_lote, ' +
                '       des_lote ' +
                '  from tab_lote ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_fazenda = :cod_fazenda ' +
                '   and cod_lote = :cod_lote ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_lote').AsInteger := CodLote;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(367, Self.ClassName, NomeMetodo, []);
        Result := -367;
        Exit;
      end;

      DadosLote.CodFazenda := Q.FieldByName('cod_fazenda').AsInteger;
      DadosLote.CodLote    := Q.FieldByName('cod_lote').AsInteger;
      DadosLote.DesLote    := Q.FieldByName('des_lote').AsString;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(363, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -363;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaLocalEvento(CodFazenda, CodLocal: Integer;
  var DadosLocal: TDadosLocal): Integer;
const
  NomeMetodo : String = 'VerificaLocalEvento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_fazenda,  ' +
                '       cod_local, ' +
                '       des_local ' +
                '  from tab_local ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_fazenda = :cod_fazenda ' +
                '   and cod_local = :cod_local ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local').AsInteger := CodLocal;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(314, Self.ClassName, NomeMetodo, []);
        Result := -314;
        Exit;
      end;

      DadosLocal.CodFazenda := Q.FieldByName('cod_fazenda').AsInteger;
      DadosLocal.CodLocal   := Q.FieldByName('cod_local').AsInteger;
      DadosLocal.DesLocal   := Q.FieldByName('des_local').AsString;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(308, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -308;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaMorteEvento(CodTipoMorte, CodCausaMorte: Integer;
  var DadosMorte: TDadosMorte): Integer;
const
  NomeMetodo : String = 'VerificaMorteEvento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select ttm.cod_tipo_morte, ' +
                '       ttm.des_tipo_morte, ' +
                '       tcm.cod_causa_morte, ' +
                '       tcm.sgl_causa_morte ' +
                '  from tab_tipo_morte ttm, ' +
                '       tab_causa_morte tcm, ' +
                '       tab_tipo_causa_morte ttcm ' +
                ' where ttcm.cod_tipo_morte = ttm.cod_tipo_morte ' +
                '   and ttcm.cod_causa_morte = tcm.cod_causa_morte ' +
                '   and ttm.dta_fim_validade is null ' +
                '   and tcm.dta_fim_validade is null ' +
                '   and ttm.cod_tipo_morte = :cod_tipo_morte ' +
                '   and tcm.cod_causa_morte = :cod_causa_morte ');
{$ENDIF}
      Q.ParamByName('cod_tipo_morte').AsInteger := CodTipoMorte;
      Q.ParamByName('cod_causa_morte').AsInteger := CodCausaMorte;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(996, Self.ClassName, NomeMetodo, []);
        Result := -996;
        Exit;
      end;

      DadosMorte.CodTipoMorte := Q.FieldByName('cod_tipo_morte').AsInteger;
      DadosMorte.DesTipoMorte := Q.FieldByName('des_tipo_morte').AsString;
      DadosMorte.CodCausaMorte := Q.FieldByName('cod_causa_morte').AsInteger;
      DadosMorte.DesCausaMorte := Q.FieldByName('sgl_causa_morte').AsString;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(997, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -997;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCategoriaEvento(CodCategoria: Integer;
  var DadosCategoria: TDadosCategoria): Integer;
const
  NomeMetodo : String = 'VerificaCategoria';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_categoria_animal,  ' +
                '       des_categoria_animal, ' +
                '       ind_sexo, ' +
                '       num_idade_minima, ' +
                '       num_idade_maxima, ' +
                '       ind_animal_castrado, ' +
                '       ind_animal_ativo ' +
                '  from tab_categoria_animal ' +
                ' where cod_categoria_animal = :cod_categoria_animal ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_categoria_animal').AsInteger := CodCategoria;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(873, Self.ClassName, NomeMetodo, []);
        Result := -873;
        Exit;
      end;

      DadosCategoria.CodCategoriaAnimal := Q.FieldByName('cod_categoria_animal').AsInteger;
      DadosCategoria.DesCategoriaAnimal := Q.FieldByName('des_categoria_animal').AsString;
      DadosCategoria.IndSexo            := Q.FieldByName('ind_sexo').AsString;
      DadosCategoria.NumIdadeMinima     := Q.FieldByName('num_idade_minima').AsInteger;
      DadosCategoria.NumIdadeMaxima     := Q.FieldByName('num_idade_maxima').AsInteger;
      DadosCategoria.IndAnimalCastrado  := Q.FieldByName('ind_animal_castrado').AsString;
      DadosCategoria.IndAnimalAtivo     := Q.FieldByName('ind_animal_ativo').AsString;
      Q.Close;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(357, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -357;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * CONSISTÊNCIAS PARA EVENTOS                      *
// ***************************************************
function TIntAnimais.ConsisteEventoDtaControlada(
  DadosAnimal: TDadosAnimal; DadosEvento: TDadosEvento;Tipo:string): Integer;
const
  NomeMetodo : String = 'ConsisteEventoDtaControlada';
var
  Q : THerdomQuery;
  DtaEvento: TDateTime;
begin
  DtaEvento := 0;
  if DadosEvento.IndDtaControlada = 'N' then begin
     Result := 0;
     exit;
  end;
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select max(dta_inicio) as dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_tipo_evento tte, ' +
                '      tab_animal ta, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_tipo_evento = tte.cod_tipo_evento ' +
                '   and ta.cod_animal = tae.cod_animal ' +
                '   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento != :cod_evento ' +
                '   and ta.cod_animal = :cod_animal ' +
                '   and tte.ind_dta_controlada = ''S'' ');
      {$ENDIF}
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
      begin
        DtaEvento := Q.Fieldbyname('dta_inicio').asdatetime;
      end;

      if DtaEvento > DadosEvento.DtaFim then
      begin
        if Tipo = 'A' then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Data do último evento do animal (Cód. manejo: ' + DadosAnimal.CodAnimalManejo + ') é maior que a data do evento a ser aplicado', 'N');
        end
        else
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Data do último evento do animal (Cód. manejo: ' + DadosAnimal.CodAnimalManejo + ') é maior que a data do evento a ser removido', 'N');
        end;
        if Result >= 0 then
        begin
          Result := 100;
        end;
        Exit;
      end;
      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(1465, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1465;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsisteInsercaoEvento(DadosEvento: TDadosEvento): Integer;
begin
  Result := 0;

  Case DadosEvento.CodTipoEvento of
    1 : begin  // Mudança de regime alimentar
          Result := VerificaMudancaRegimeAlimentar(DadosEvento);
        end;
    2 : begin  // Desmame
          Result := VerificaDesmame(DadosEvento);
        end;
    3 : begin  // Mudança de categoria
          Result := VerificaMudancaCategoria(DadosEvento);
        end;
    4 : begin  // Seleção para reprodução
          Result := VerificaSelecaoReproducao(DadosEvento)
        end;
    5 : begin  // Castração
          Result := VerificaCastracao(DadosEvento);
        end;
    6 : begin  // Mudança de lote
          Result := VerificaMudancaLote(DadosEvento);
        end;
    7 : begin  // Mudança de local
          Result := VerificaMudancaLocal(DadosEvento);
        end;
    8 : begin  // Transferência
//          Result := VerificaTransferencia(DadosEvento);
          Result := 0;
        end;
    9 : begin  // Venda para criador
          Result := VerificaVendaCriador(DadosEvento);
        end;
    10: begin  // Venda para frigorífico
          Result := VerificaVendaFrigorifico(DadosEvento);
        end;
    11: begin  // Desaparecimento
          Result := VerificaDesaparecimento(DadosEvento);
        end;
    12: begin  // Morte
          Result := VerificaMorte(DadosEvento);
        end;
    13: begin  // Parto

        end;
    14: begin  // Aborto

        end;
    15: begin  // Manejo sanitário
          Result := VerificaSanitario(DadosEvento);
        end;
    16: begin  // Emissão de certificado
          Result := VerificaEmissaoCertificado(DadosEvento);
        end;
    17: begin  // Desmame do bezerro
          Result := VerificaDesmameBezerro(DadosEvento);
        end;
    18: begin  // Desaparecimento do bezerro
          Result := VerificaDesaparecimentoBezerro(DadosEvento);
        end;
    19: begin  // Morte do bezerro
          Result := VerificaMorteBezerro(DadosEvento);
        end;
    20: begin  // Venda do bezerro
          Result := VerificaVendaBezerro(DadosEvento);
        end;
    21: begin  // Abate de animal vendido
          Result := VerificaAbateAnimalVendido(DadosEvento);
        end;
    22: begin  // Pesagem de animais
          Result := VerificaPesagemAnimal(DadosEvento);
        end;
    23: begin  // Cobertura em regime de pasto
          Result := VerificaCoberturaRegPasto(DadosEvento);
        end;
    24: begin  // Estação de monta
          Result := VerificaEstacaoMonta(DadosEvento);
        end;
    25: begin  // Diagnostico de prenhez
          Result := VerificaExameAndrologico(DadosEvento);
        end;
    28: begin  // Diagnostico de prenhez
          Result := VerificaDiagnosticoPrenhez(DadosEvento);
        end;
    36: begin  // Retorno do frigorífico
          Result := VerificaRetornoFrigorifico(DadosEvento);
        end;
  end;
end;

function TIntAnimais.InsereEventoAssociado(
  var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'InsereEventoAssociado';
var
  Q : THerdomQuery;
  CodEventoAssociado, CodRegistroLog : Integer;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento  ' +
                '   set cod_evento = cod_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento is null ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select max(cod_evento) + 1 as cod_evento ' +
                '  from tab_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.IsEmpty then begin
        CodEventoAssociado := Q.FieldByName('cod_evento').AsInteger;
      end else begin
        CodEventoAssociado := 1;
      end;

      // Pega próximo CodRegistroLog
      CodRegistroLog := ProximoCodRegistroLog;
      if CodRegistroLog < 0 then begin
        Rollback;
        Result := CodRegistroLog;
        Exit;
      end;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert tab_evento  ' +
                '     (cod_pessoa_produtor,  ' +
                '      cod_evento,  ' +
                '      cod_tipo_evento,  ' +
                '      dta_inicio,  ' +
                '      dta_fim,  ' +
                '      cod_fazenda, ' +
                '      txt_dados,  ' +
                '      txt_observacao,  ' +
                '      cod_situacao_sisbov,  ' +
                '      qtd_animais,  ' +
                '      dta_cadastramento,  ' +
                '      dta_efetivacao_cadastro,  ' +
                '      cod_arquivo_sisbov,  ' +
                '      cod_registro_log,  ' +
                '      cod_evento_associado)  ' +
                'values ' +
                '     (:cod_pessoa_produtor,  ' +
                '      :cod_evento,  ' +
                '      :cod_tipo_evento,  ' +
                '      :dta_inicio,  ' +
                '      :dta_fim,  ' +
                '      :cod_fazenda, ' +
                '      null,  ' +
                '      :txt_observacao,  ' +
                '      :cod_situacao_sisbov,  ' +
                '      :qtd_animais,  ' +
                '      getdate(),  ' +
                '      null,  ' +
                '      null,  ' +
                '      :cod_registro_log,  ' +
                '      null) ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEventoAssociado;
      if DadosEvento.CodTipoEvento = 2 then begin            // Desmame
        Q.ParamByName('cod_tipo_evento').AsInteger := 17;
      end else if DadosEvento.CodTipoEvento = 9 then begin   // Venda ao Criador
        Q.ParamByName('cod_tipo_evento').AsInteger := 20;
      end else if DadosEvento.CodTipoEvento = 10 then begin  // Venda ao Frigorífico
        Q.ParamByName('cod_tipo_evento').AsInteger := 20;
      end else if DadosEvento.CodTipoEvento = 11 then begin  // Desaparecimento
        Q.ParamByName('cod_tipo_evento').AsInteger := 18;
      end else if DadosEvento.CodTipoEvento = 12 then begin  // Morte
        Q.ParamByName('cod_tipo_evento').AsInteger := 19;
      end;
      Q.ParamByName('dta_inicio').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_fim').AsDateTime := DadosEvento.DtaFim;

      if DadosEvento.CodFazenda > 0 then begin
        Q.ParamByName('cod_fazenda').AsInteger := DadosEvento.CodFazenda;
      end else begin
        Q.ParamByName('cod_fazenda').DataType := ftInteger;
        Q.ParamByName('cod_fazenda').Clear;
      end;

      Q.ParamByName('txt_observacao').AsString := 'Criado pelo sistema a partir do evento ' + IntToStr(DadosEvento.CodEvento);
      Q.ParamByName('cod_situacao_sisbov').AsString := 'N';
      Q.ParamByName('qtd_animais').AsInteger := 0;
      Q.ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, DadosAnimal.CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_evento', CodRegistroLog, 1, 287);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Atualiza tab_evento (original)
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '   set cod_evento_associado = :cod_evento_associado ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_evento_associado').AsInteger := CodEventoAssociado;
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      {$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := DadosEvento.CodEvento;
      Q.ExecSQL;


      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_evento', DadosEvento.CodRegistroLog, 3, 287);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      DadosEvento.CodEventoAssociado := CodEventoAssociado;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(972, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -972;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.QtdFilhosMae(CodAnimaMae: Integer;
  CodTipoMae: String; IndFilhosMamando: Boolean): Integer;
const
  NomeMetodo : String = 'QtdFilhosMae';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select isnull(count(cod_animal), 0) as qtd_filho ' +
                '  from tab_animal ' +
                ' where dta_fim_validade is null ' +
                '   and cod_pessoa_produtor = :cod_pessoa_produtor ');
      if IndFilhosMamando then begin
        Q.SQL.Add('   and cod_categoria_animal = 1 ');
      end else begin
        Q.SQL.Add('   and cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ');
      end;
      if CodTipoMae = 'R' then begin
        Q.SQL.Add('   and cod_animal_receptor = :cod_animal_mae ');
      end;
      if CodTipoMae = 'M' then begin
        Q.SQL.Add('   and cod_animal_mae = :cod_animal_mae ');
      end;
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal_mae').AsInteger := CodAnimaMae;
      Q.Open;

      Result := Q.FieldByName('qtd_filho').AsInteger;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(973, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -973;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 01 - Mudança Regime Alimentar *
// ***************************************************
function TIntAnimais.VerificaMudancaRegimeAlimentar(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaMudancaRegimeAlimentar';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ' +
                '  from tab_regime_alimentar tra, ' +
                '       tab_aptidao ta, ' +
                '       tab_regime_alimentar_aptidao traa ' +
                ' where traa.cod_aptidao = ta.cod_aptidao ' +
                '   and traa.cod_regime_alimentar = tra.cod_regime_alimentar ' +
                '   and ta.dta_fim_validade is null ' +
                '   and tra.dta_fim_validade is null ' +
                '   and tra.cod_regime_alimentar = :cod_regime_alimentar ' +
                '   and ta.cod_aptidao = :cod_aptidao ');
{$ENDIF}
      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDestino.CodRegimeAlimentar;
      Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(958, Self.ClassName, NomeMetodo, []);
        Result := -958;
        Exit;
      end;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(959, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -959;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsisteMudancaRegimeAlimentar(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteMudancaRegimeAlimentar';
var
  Q : THerdomQuery;
  VerificaFC :Integer;
begin
  // Verifica aptidao
   if DadosAnimal.CodAptidao <> DadosEvento.CodAptidao then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Aptidão do animal é incompatível com a aptidão do evento', 'N');
    Exit;
  end;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Se tipo lugar for fazenda, consiste local
      if DadosAnimal.CodTipoLugar = 1 then begin
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ' +
                  '  from tab_local_regime_alimentar ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_fazenda = :cod_fazenda ' +
                  '   and cod_local = :cod_local ' +
                  '   and cod_regime_alimentar = :cod_regime_alimentar ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_fazenda').AsInteger := DadosAnimal.CodFazendaCorrente;
        Q.ParamByName('cod_local').AsInteger := DadosAnimal.CodLocalCorrente;
        Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDestino.CodRegimeAlimentar;

        Q.Open;

        if Q.IsEmpty then begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O regime alimentar destino é incompatível com o local corrente do animal', 'N');
          Exit;
        end;
      end;

      // Verifica compatibilidade com categoria do animal
      if DadosAnimal.CodCategoriaAnimal = 1 then begin
        if DadosEvento.RegimeAlimentarDestino.IndAnimalMamando = 'N' then begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal está mamando e não pode ser submetido ao regime alimentar ' +
            DadosEvento.RegimeAlimentarDestino.DesRegimeAlimentar, 'N');
          Exit;
        end;
      end else begin
        if DadosEvento.RegimeAlimentarDestino.IndAnimalMamando = 'S' then begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está mamando e não pode ser submetido ao regime alimentar ' +
            DadosEvento.RegimeAlimentarDestino.DesRegimeAlimentar, 'N');
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(923, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -923;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarMudancaRegimeAlimentar(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMudancaRegimeAlimentar';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_regime_alimentar = :cod_regime_alimentar, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_regime_alimentar = :cod_regime_alimentar, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDestino.CodRegimeAlimentar;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(920, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -920;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverMudancaRegimeAlimentar(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverMudancaRegimeAlimentar';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_regime_alimentar = :cod_regime_alimentar, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end
      else
      begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end
      else
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(920, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -920;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 02 - Desmame                 *
// **************************************************
function TIntAnimais.VerificaDesmame(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaDesmame';
var
  Q : THerdomQuery;
begin
  if DadosEvento.RegimeAlimentarDestino.IndAnimalMamando = 'S' then begin
    Mensagens.Adicionar(960, Self.ClassName, NomeMetodo, []);
    Result := -960;
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ' +
                '  from tab_regime_alimentar tra, ' +
                '       tab_aptidao ta, ' +
                '       tab_regime_alimentar_aptidao traa ' +
                ' where traa.cod_aptidao = ta.cod_aptidao ' +
                '   and traa.cod_regime_alimentar = tra.cod_regime_alimentar ' +
                '   and ta.dta_fim_validade is null ' +
                '   and tra.dta_fim_validade is null ' +
                '   and tra.cod_regime_alimentar = :cod_regime_alimentar ' +
                '   and ta.cod_aptidao = :cod_aptidao ');
{$ENDIF}
      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDestino.CodRegimeAlimentar;
      Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(958, Self.ClassName, NomeMetodo, []);
        Result := -958;
        Exit;
      end;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(961, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -961;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsisteDesmame(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteDesmame';
var
  Q : THerdomQuery;
  AnimalMae : Integer;
  TipoMae : String;
  VerificaFC :Integer;
  QtdIdadeMinimaDesmame, QtdIdadeMaximaDesmame: Integer;
  IndDesmamar : Boolean; { Fábio Vilela - 13/07/2004 }
  DadosMae: TDadosAnimal; { Fábio Vilela - 13/07/2004 }
  QtdFilhos: Integer; { Fábio Vilela - 20/07/2004 }
begin
  AnimalMae := -1;
  TipoMae := '';

  // Consiste categoria origem do animal
  if DadosAnimal.CodCategoriaAnimal <> 1 then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O evento desmame não pode ser aplicado em um animal já desmamado', 'N');
    Exit;
  end;

  // Verifica idade do animal
  if ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) < DadosEvento.CategoriaDestino.NumIdadeMinima) or
     ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) > DadosEvento.CategoriaDestino.NumIdadeMaxima) then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Idade do animal é incompatível com a categoria "Animal em Recria"', 'N');
    Exit;
  end;

  // Verifica aptidao
  if DadosAnimal.CodAptidao <> DadosEvento.CodAptidao then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Aptidão do animal é incompatível com a aptidão do evento', 'N');
    Exit;
  end;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      // Se tipo lugar for fazenda, consiste local
      if DadosAnimal.CodTipoLugar = 1 then begin
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select 1 ' +
                  '  from tab_local_regime_alimentar ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_fazenda = :cod_fazenda ' +
                  '   and cod_local = :cod_local ' +
                  '   and cod_regime_alimentar = :cod_regime_alimentar ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_fazenda').AsInteger := DadosAnimal.CodFazendaCorrente;
        Q.ParamByName('cod_local').AsInteger := DadosAnimal.CodLocalCorrente;
        Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDestino.CodRegimeAlimentar;

        Q.Open;

        if Q.IsEmpty then begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O regime alimentar destino é incompatível com o local corrente do animal', 'N');
          Exit;
        end;
      end;

      //verifica se a idade do animal é compatível com o evento para o produtor
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select qtd_idade_minima_desmame, qtd_idade_maxima_desmame ' +
                '  from tab_produtor ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

      Q.Open;

      QtdIdadeMinimaDesmame := Q.FieldbyName('qtd_idade_minima_desmame').asinteger;
      QtdIdadeMaximaDesmame := Q.FieldbyName('qtd_idade_maxima_desmame').asinteger;

      if DadosEvento.CodTarefa > 0 then
      begin
        if (DadosEvento.DtaInicio - DadosAnimal.DtaNascimento < QtdIdadeMaximaDesmame) then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O idade do animal é incompatível com a aplicação do evento de desmame para o produtor', 'N');
          Exit;
        end;
      end
      else
      begin
        if (DadosEvento.DtaInicio - DadosAnimal.DtaNascimento < QtdIdadeMinimaDesmame) or
           (DadosEvento.DtaInicio - DadosAnimal.DtaNascimento > QtdIdadeMaximaDesmame) then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O idade do animal é incompatível com a aplicação deste evento para este produtor', 'N');
          Exit;
        end;
      end;

      // Verifica se possui mãe ou receptora
      if DadosAnimal.CodAnimalReceptor > 0 then begin
        AnimalMae := DadosAnimal.CodAnimalReceptor;
        TipoMae := 'R';
      end else begin
        if DadosAnimal.CodAnimalMae > 0 then begin
          AnimalMae := DadosAnimal.CodAnimalMae;
          TipoMae := 'M';
        end;
      end;

      // Se animal possui mae e é o último filho mamando, aplica evento
      // desmame do bezerro à mãe
      if AnimalMae > 0 then begin
        Result := QtdFilhosMae(AnimalMae, TipoMae, True);
        if Result < 0 then begin
          Exit;
        end;
        QtdFilhos := Result;

        { Inicio Alteração - Fábio Vilela - 13/07/2004   }
        { Verifica se a vaca esta em lacatação ou parida }
        Result := BuscaDadosAnimal(AnimalMae, -1, -1, -1, -1, -1, -1, '', '', DadosMae);
        if Result < 0 then
          Exit;

        IndDesmamar := DadosMae.CodCategoriaAnimal in [6, 8];
        { Fim Alteração - Fábio Vilela - 13/07/2004      }

        if (QtdFilhos = 1) and IndDesmamar then begin { Fábio Vilela - 13/07/2004 }
          if DadosEvento.CodEventoAssociado <= 0 then begin
            Result := InsereEventoAssociado(DadosEvento);
            if Result < 0 then begin
              Exit;
            end;
          end;
          Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1, DadosEvento.CodEventoAssociado, 'S');
          if Result < 0 then begin
            if Abs(Result) <> 783 then begin
              Exit;
            end else begin
              // Exclui a última mensagem quando ela for 783
              Mensagens.Delete(Mensagens.Count - 1);
            end;
          end else begin
            DadosAnimal.CodAnimalAssociado := AnimalMae;
          end;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(963, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -963;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarDesmame(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarDesmame';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_regime_alimentar = :cod_regime_alimentar, ' +
                  '       cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_regime_alimentar = :cod_regime_alimentar, ' +
                  '       cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;

        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDestino.CodRegimeAlimentar;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then
      begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(964, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -964;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverDesmame(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverDesmame';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_regime_alimentar = :cod_regime_alimentar, ' +
                '       cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;

      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then
      begin
        if DadosAnimal.DtaDesativacao > 0 then
        begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end
        else
        begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(965, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -965;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 03 - Mudança de Categoria     *
// ***************************************************
function TIntAnimais.VerificaMudancaCategoria(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaMudancaCategoria';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ' +
                '  from tab_mudanca_categoria_animal tmca, ' +
                '       tab_aptidao ta, ' +
                '       tab_categoria_animal tco, ' +
                '       tab_categoria_animal tcd ' +
                ' where ta.cod_aptidao = tmca.cod_aptidao ' +
                '   and ta.dta_fim_validade is null ' +
                '   and tco.cod_categoria_animal = tmca.cod_categoria_origem ' +
                '   and tco.dta_fim_validade is null ' +
                '   and tcd.cod_categoria_animal = tmca.cod_categoria_destino ' +
                '   and tcd.dta_fim_validade is null ' +
                '   and tmca.cod_tipo_evento = :cod_tipo_evento ' +
                '   and tmca.cod_aptidao = :cod_aptidao ' +
                '   and tmca.cod_categoria_origem = :cod_categoria_origem ' +
                '   and tmca.cod_categoria_destino = :cod_categoria_destino ');
{$ENDIF}
      Q.ParamByName('cod_tipo_evento').AsInteger := DadosEvento.CodTipoEvento;
      Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
      Q.ParamByName('cod_categoria_origem').AsInteger := DadosEvento.CategoriaOrigem.CodCategoriaAnimal;
      Q.ParamByName('cod_categoria_destino').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(955, Self.ClassName, NomeMetodo, []);
        Result := -955;
        Exit;
      end;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(956, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -956;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsistePesagemAnimal(var DadosAnimal: TDadosAnimal;
  var DadosEvento: TDadosEvento; PesoAnimal:real): Integer;
const
  NomeMetodo : String = 'ConsistePesagemAnimal';
var
  Q : THerdomQuery;
  idade_animal, VerificaFC : integer;
begin 
  DadosAnimal.QtdPesoAnimal := PesoAnimal;
  //consistir aqui se o peso é compativel com a idade do animal
  idade_animal := trunc(DadosEvento.DtaInicio) - trunc(DadosAnimal.DtaNascimento);

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
    Exit;
  end;
  if VerificaFC = -200 then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
    Exit;
  end;

  if (DadosAnimal.DtaDesativacao <= DadosEvento.DtaInicio) and
     (DadosAnimal.DtaDesativacao <> 0) then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal não pode receber um evento de pesagem quando já estiver inativo.', 'N');
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      //verifica se o animal já recebeu uma pesagem na mesma data
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add(' select 1 ' +
                '   from tab_evento as te, ' +
                '        tab_animal_evento as tae ' +
                '  where te.cod_evento = tae.cod_evento ' +
                '    and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '    and te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '    and te.cod_tipo_evento = 22 ' +
                '    and te.dta_inicio = :dta_inicio ' +
                '    and tae.cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('dta_inicio').AsDateTime := DadosEvento.DtaInicio;
      Q.Open;

      if not Q.IsEmpty then
      begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal já recebeu um evento de pesagem nesta data.', 'N');
        Exit;
      end;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select  qtd_idade_minima_pesagem, ' +
                '  num_limite_equivale_idade ' +
                '  from tab_produtor ' +
                '  where cod_pessoa_produtor = :cod_pessoa_produtor ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if (idade_animal > Q.FieldByName('num_limite_equivale_idade').asinteger) and
         (idade_animal < Q.FieldByName('qtd_idade_minima_pesagem').asinteger) then
      begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não é possível inserir pesagem para animais com idade entre '+Q.FieldByName('num_limite_equivale_idade').asstring+' e '+Q.FieldByName('qtd_idade_minima_pesagem').asstring+' dia(s)', 'N');
        Exit;
      end;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select qtd_peso_minimo ' +
                '     , qtd_peso_maximo ' +
                '  from tab_limite_peso_animal ' +
                '  where num_idade_inicial <= :idade_animal ' +
                '   and num_idade_final >= :idade_animal ');
      {$ENDIF}
      Q.ParamByName('idade_animal').AsInteger := idade_animal;
      Q.Open;

      //se exite limite de peso para a faixa de idade do animal fazer as devidas consistências
      if not Q.IsEmpty then
      begin
        if (Q.fieldbyname('qtd_peso_minimo').asfloat > PesoAnimal) or
           (Q.fieldbyname('qtd_peso_maximo').asfloat < PesoAnimal) then //animal fora da faixa de peso
        begin
          InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Peso do animal é incompatível com a idade', 'N', 3);
        end;
      end;
      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(1149, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1149;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsisteMudancaCategoria(var DadosAnimal: TDadosAnimal;
  var DadosEvento: TDadosEvento): Integer;
var VerificaFC:Integer;
begin
  Result := 0;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  // Verifica aptidao
   if DadosAnimal.CodAptidao <> DadosEvento.CodAptidao then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Aptidão do animal é incompatível com a aptidão do evento', 'N');
    Exit;
  end;

  // Verifica categoria do animal
  if DadosAnimal.CodCategoriaAnimal <> DadosEvento.CategoriaOrigem.CodCategoriaAnimal then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Categoria do animal é incompatível com a categoria de origem do evento', 'N');
    Exit;
  end;

  // Verifica sexo do animal
  if DadosEvento.CategoriaDestino.IndSexo <> 'A' then begin
    if DadosAnimal.IndSexo <> DadosEvento.CategoriaDestino.IndSexo then begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Sexo do animal é incompatível com a categoria de destino do evento', 'N');
      Exit;
    end;
  end;

  // Verifica idade do animal
  if ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) < DadosEvento.CategoriaDestino.NumIdadeMinima) or
     ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) > DadosEvento.CategoriaDestino.NumIdadeMaxima) then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Idade do animal é incompatível com a categoria de destino do evento', 'N');
    Exit;
  end;

  // Verifica sexo do animal
  if DadosEvento.CategoriaDestino.IndAnimalCastrado <> 'A' then begin
    if DadosAnimal.IndAnimalCastrado <> DadosEvento.CategoriaDestino.IndAnimalCastrado then begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Status de castrado do animal é incompatível com a categoria de destino do evento', 'N');
      Exit;
    end;
  end;
end;

function TIntAnimais.AplicarMudancaCategoria(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMudancaCategoria';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(874, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -874;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverMudancaCategoria(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverMudancaCategoria';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;

      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(874, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -874;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 04 - Selecao para Reproducao *
// **************************************************
function TIntAnimais.VerificaSelecaoReproducao(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaSelecaoReproducao';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteSelecaoReproducao(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteSelecaoReproducao';
var
  Q : THerdomQuery;
begin
  // Consiste se o animal é castrado
  if DadosAnimal.IndAnimalCastrado = 'S' then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O evento "selecao para reprodução" não pode ser aplicado em um animal castrado', 'N');
    Exit;
  end;

  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select cod_categoria_destino ' +
                '  from tab_mudanca_categoria_animal ' +
                ' where cod_tipo_evento = :cod_tipo_evento ' +
                '   and cod_aptidao = :cod_aptidao ' +
                '   and ind_sexo = :ind_sexo ' +
                '   and cod_categoria_origem = :cod_categoria_origem ');
      {$ENDIF}
      Q.ParamByName('cod_tipo_evento').AsInteger := DadosEvento.CodTipoEvento;
      Q.ParamByName('cod_aptidao').AsInteger := DadosAnimal.CodAptidao;
      Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
      Q.ParamByName('cod_categoria_origem').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Q.Open;

      if Q.IsEmpty then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A categoria / aptidão do animal é incompatível com o evento "seleção para reprodução"', 'N');
        Exit;
      end;

      // Obtem categoria de destino
      Result := VerificaCategoriaEvento(Q.FieldByName('cod_categoria_destino').AsInteger, DadosEvento.CategoriaDestino);
      if Result < 0 then begin
        Exit;
      end;

      // Verifica idade do animal
      if ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) < DadosEvento.CategoriaDestino.NumIdadeMinima) or
         ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) > DadosEvento.CategoriaDestino.NumIdadeMaxima) then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Idade do animal é incompatível com o evento "seleção para reprodução"', 'N');
        Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(979, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -979;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarSelecaoReproducao(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarSelecaoReproducao';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao,nil);
  try
    try
      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;

        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(980, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -980;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverSelecaoReproducao(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverSelecaoReproducao';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(981, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -981;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 05 - Castração               *
// **************************************************
function TIntAnimais.VerificaCastracao(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaCastracao';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteCastracao(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteCastracao';
var
  Q : THerdomQuery;
  VerificaFC : Integer;
begin
  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;
  // Consiste se o animal é castrado
  if DadosAnimal.IndAnimalCastrado = 'S' then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal já é castrado', 'N');
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select cod_categoria_destino ' +
                '  from tab_mudanca_categoria_animal ' +
                ' where cod_tipo_evento = :cod_tipo_evento ' +
                '   and cod_aptidao = :cod_aptidao ' +
                '   and ind_sexo = :ind_sexo ' +
                '   and cod_categoria_origem = :cod_categoria_origem ');
      {$ENDIF}
      Q.ParamByName('cod_tipo_evento').AsInteger := DadosEvento.CodTipoEvento;
      Q.ParamByName('cod_aptidao').AsInteger := DadosAnimal.CodAptidao;
      Q.ParamByName('ind_sexo').AsString := DadosAnimal.IndSexo;
      Q.ParamByName('cod_categoria_origem').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Q.Open;

      if Q.IsEmpty then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A categoria / aptidão do animal é incompatível com o evento "castração"', 'N');
        Exit;
      end;

      // Obtem categoria de destino
      Result := VerificaCategoriaEvento(Q.FieldByName('cod_categoria_destino').AsInteger, DadosEvento.CategoriaDestino);
      if Result < 0 then begin
        Exit;
      end;

      // Verifica idade do animal
      if ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) < DadosEvento.CategoriaDestino.NumIdadeMinima) or
         ((DadosEvento.DtaInicio - DadosAnimal.DtaNascimento) > DadosEvento.CategoriaDestino.NumIdadeMaxima) then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Idade do animal é incompatível com o evento "castração"', 'N');
        Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(982, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -982;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarCastracao(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarCastracao';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_animal_castrado = ''S'', ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_animal_castrado = ''S'', ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(983, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -983;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverCastracao(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverCastracao';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_animal_castrado = ''N'', ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(985, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -985;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 06 - Mudança de Lote          *
// ***************************************************
function TIntAnimais.VerificaMudancaLote(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaMudancaLote';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteMudancaLote(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteMudancaLote';
begin
  Result := 0;

  // Verifica fazenda do animal
  if DadosAnimal.CodTipoLugar = 1 then begin
    if DadosAnimal.CodFazendaCorrente <> DadosEvento.LoteDestino.CodFazenda then begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Fazenda do animal é incompatível com a fazenda do lote destino', 'N');
      Exit;
    end;
  end else begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal não está em uma fazenda e não pode ser submetido ao evento "mudança de lote"', 'N');
    Exit;
  end;
end;

function TIntAnimais.AplicarMudancaLote(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMudancaLote';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_lote_corrente = :cod_lote_corrente, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_lote_corrente = :cod_lote_corrente, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;

        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      if DadosEvento.LoteDestino.CodLote > 0 then
      begin
        Q.ParamByName('cod_lote_corrente').AsInteger := DadosEvento.LoteDestino.CodLote;
      end
      else
      begin
        Q.ParamByName('cod_lote_corrente').DataType := ftInteger;
        Q.ParamByName('cod_lote_corrente').Clear;
      end;


      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(987, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -987;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverMudancaLote(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverMudancaLote';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_lote_corrente = :cod_lote_corrente, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;

      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      if DadosAnimal.CodLoteCorrente > 0 then begin
        Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      end else begin
        Q.ParamByName('cod_lote_corrente').DataType := ftInteger;
        Q.ParamByName('cod_lote_corrente').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(988, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -988;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 07 - Mudança de Local         *
// ***************************************************
function TIntAnimais.VerificaMudancaLocal(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaMudancaLocal';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ' +
                '  from tab_regime_alimentar tra, ' +
                '       tab_aptidao ta, ' +
                '       tab_regime_alimentar_aptidao traa ' +
                ' where traa.cod_aptidao = ta.cod_aptidao ' +
                '   and traa.cod_regime_alimentar = tra.cod_regime_alimentar ' +
                '   and ta.dta_fim_validade is null ' +
                '   and tra.dta_fim_validade is null ' +
                '   and tra.cod_regime_alimentar = :cod_regime_alimentar ' +
                '   and ta.cod_aptidao = :cod_aptidao ');
{$ENDIF}
      if DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar > 0 then begin
        Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar;
        Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
        Q.Open;

        if Q.IsEmpty then begin
          Mensagens.Adicionar(998, Self.ClassName, NomeMetodo, []);
          Result := -998;
          Exit;
        end;
      end;

      Q.Close;
      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar;
      Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(999, Self.ClassName, NomeMetodo, []);
        Result := -999;
        Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1000, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1000;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsisteMudancaLocal(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteMudancaLocal';
var
  Q : THerdomQuery;
  AnimalMae : Integer;
  TipoMae, CodFilhos : String;
begin
  AnimalMae := -1;
  TipoMae := '';

  // Verifica fazenda do animal
  if DadosAnimal.CodTipoLugar = 1 then begin
    if DadosAnimal.CodFazendaCorrente <> DadosEvento.LocalDestino.CodFazenda then begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Fazenda do animal é incompatível com a fazenda do local destino', 'N');
      Exit;
    end;
  end else begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal não está em uma fazenda e não pode ser submetido ao evento "mudança de local"', 'N');
    Exit;
  end;

  // Verifica aptidao
  if DadosAnimal.CodAptidao <> DadosEvento.CodAptidao then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Aptidão do animal é incompatível com a aptidão do evento', 'N');
    Exit;
  end;

  // Verifica se animal está mamando e se foi informado regime alimentar mamando
  if DadosAnimal.CodCategoriaAnimal = 1 then begin
    if DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar < 0  then begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal está mamando e não foi informado regime alimentar para animal manando ', 'N');
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Se for um bezerro mamando, aplica o evento pra mãe também.
      if DadosAnimal.CodCategoriaAnimal = 1 then begin
        // Verifica se mãe (ou receptora) do animal é vaca parida ou em lactação
        if DadosAnimal.CodAnimalReceptor > 0 then begin
          AnimalMae := DadosAnimal.CodAnimalReceptor;
          TipoMae := 'R';
        end else begin
          if DadosAnimal.CodAnimalMae > 0 then begin
            AnimalMae := DadosAnimal.CodAnimalMae;
            TipoMae := 'M';
          end;
        end;

        // Se animal possui mae e é o último filho mamando, aplica evento à mãe
        if AnimalMae > 0 then begin
          Result := QtdFilhosMae(AnimalMae, TipoMae, True);
          if Result < 0 then begin
            Exit;
          end;
          if Result = 1 then begin
            Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1, DadosEvento.CodEvento, 'N');
            if Result < 0 then begin
              if Abs(Result) <> 783 then begin
                Exit;
              end else begin
                // Exclui a última mensagem quando ela for 783
                Mensagens.Delete(Mensagens.Count - 1);
              end;
            end else begin
              DadosAnimal.CodAnimalAssociado := AnimalMae;
            end;
          end;
        end;
      end else begin
        if (DadosAnimal.CodCategoriaAnimal = 6) or (DadosAnimal.CodCategoriaAnimal = 8) then begin
          Result := ObtemFilhos(DadosAnimal, CodFilhos);
          if Result < 0 then begin
            Exit;
          end;
          if CodFilhos <> '' then begin
            Result := AplicarEventoInt(CodFilhos, -1, '', -1, -1, DadosEvento.CodEvento, 'N');
            if Result < 0 then begin
              if Abs(Result) <> 783 then begin
                Exit;
              end else begin
                // Exclui a última mensagem quando ela for 783
                Mensagens.Delete(Mensagens.Count - 1);
              end;
            end;
          end;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1001, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1001;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarMudancaLocal(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMudancaLocal';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_fazenda_corrente = :cod_fazenda_corrente, ' +
                  '       cod_local_corrente = :cod_local_corrente, ' +
                  '       cod_regime_alimentar = :cod_regime_alimentar, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_fazenda_corrente = :cod_fazenda_corrente, ' +
                  '       cod_local_corrente = :cod_local_corrente, ' +
                  '       cod_regime_alimentar = :cod_regime_alimentar, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      Q.ParamByName('cod_fazenda_corrente').AsInteger := DadosEvento.LocalDestino.CodFazenda;
      Q.ParamByName('cod_local_corrente').AsInteger := DadosEvento.LocalDestino.CodLocal;

      if DadosAnimal.CodCategoriaAnimal = 1 then begin
        Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar;
      end else begin
        Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1002, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1002;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverMudancaLocal(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverMudancaLocal';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_lote_corrente = :cod_lote_corrente, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then
      begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end
      else
      begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end
      else
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      if DadosAnimal.CodLoteCorrente > 0 then
      begin
        Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      end
      else
      begin
        Q.ParamByName('cod_lote_corrente').DataType := ftInteger;
        Q.ParamByName('cod_lote_corrente').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(988, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -988;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 08 - Transferência            *
// ***************************************************
{
function TIntAnimais.VerificaTransferencia(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaTransferencia';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
$IFDEF MSSQL
      Q.SQL.Add('select 1 ' +
                '  from tab_regime_alimentar tra, ' +
                '       tab_aptidao ta, ' +
                '       tab_regime_alimentar_aptidao traa ' +
                ' where traa.cod_aptidao = ta.cod_aptidao ' +
                '   and traa.cod_regime_alimentar = tra.cod_regime_alimentar ' +
                '   and ta.dta_fim_validade is null ' +
                '   and tra.dta_fim_validade is null ' +
                '   and tra.cod_regime_alimentar = :cod_regime_alimentar ' +
                '   and ta.cod_aptidao = :cod_aptidao ');
$ENDIF
      if DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar > 0 then begin
        Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar;
        Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
        Q.Open;

        if Q.IsEmpty then begin
          Mensagens.Adicionar(998, Self.ClassName, NomeMetodo, []);
          Result := -998;
          Exit;
        end;
      end;

      Q.Close;
      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar;
      Q.ParamByName('cod_aptidao').AsInteger := DadosEvento.CodAptidao;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(999, Self.ClassName, NomeMetodo, []);
        Result := -999;
        Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1000, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1000;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;
}

function TIntAnimais.ConsisteTransferencia(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteTransferencia';
var
  Q: THerdomQuery;
  AnimalMae: Integer;
  TipoMae,
  CodFilhos: String;
  CodPropriedadeRural,
  CodLocalizacao,
  CodPessoaProdutor: Integer;
  NumImovelReceitaFederal,
  NumCNPJCPFPessoa: String;
begin
  AnimalMae := -1;
  TipoMae := '';

{  // Verifica aptidao
  if DadosAnimal.CodAptidao <> DadosEvento.CodAptidao then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
      'Aptidão do animal é incompatível com a aptidão do evento', 'N');
    Exit;
  end;
} // Consistência removida 18/08/2005, por Solicitação de Paulo Nobre (TRACER) - Daniel Nascimento

  if DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Somente o produtor do animal pode aplicar o evento de transferência.', 'N');
    Exit;
  end; // Daniel 15/10/2005

  // Verifica Tipo lugar
  if DadosAnimal.CodTipoLugar <> DadosEvento.LugarOrigem.CodTipoLugar then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
      'Lugar de origem do animal é incompatível com o lugar de origem do evento',
      'N');
    Exit;
  end;

  // Verifica origem do animal
  if DadosAnimal.CodTipoLugar = 1 then
  begin
    if DadosAnimal.CodFazendaCorrente <> DadosEvento.LugarOrigem.CodFazenda then
    begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
        'Fazenda do animal é incompatível com a fazenda destino', 'N');
      Exit;
    end;
  end;

  if DadosAnimal.CodTipoLugar = 2 then
  begin
    if DadosAnimal.CodPropriedadeCorrente <= 0 then
    begin
      if DadosAnimal.NumImovelCorrente <> DadosEvento.LugarOrigem.NumImovel then
      begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
          'Propriedade de origem do animal é incompatível com a propriedade ' +
          'de origem do evento', 'N');
        Exit;
      end;
    end
    else
    begin
      if DadosAnimal.CodPropriedadeCorrente <> DadosEvento.LugarOrigem.CodPropriedade then
      begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
          'Propriedade de origem do animal é incompatível com a propriedade ' +
          'de origem do evento', 'N');
        Exit;
      end;
    end;
  end;

  if DadosAnimal.CodTipoLugar = 3 then
  begin
    if DadosAnimal.CodPessoaCorrente <= 0 then
    begin
      if DadosAnimal.CodPessoaSecundariaCorrente <= 0 then
      begin
        if DadosAnimal.NumCNPJCPFCorrente <> DadosEvento.LugarOrigem.NumCNPJCPF then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'Aglomeração de origem do animal é incompatível com a aglomeração' +
            ' de origem do evento', 'N');
          Exit;
        end;
      end
      else
      begin
        if DadosAnimal.CodPessoaSecundariaCorrente <> DadosEvento.LugarOrigem.CodPessoaSecundaria then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'Aglomeração de origem do animal é incompatível com a aglomeração' +
            ' de origem do evento', 'N');
          Exit;
        end;
      end;
    end
    else
    begin
      if DadosAnimal.CodPessoaCorrente <> DadosEvento.LugarOrigem.CodPessoa then
      begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
          'Aglomeração de origem do animal é incompatível com a aglomeração ' +
          'de origem do evento', 'N');
        Exit;
      end;
    end;
  end;

  // Verifica se animal está mamando e se foi informado regime alimentar mamando
  if DadosAnimal.CodCategoriaAnimal = 1 then
  begin
    if DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar < 0  then
    begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
        'O Animal está mamando e não foi informado regime alimentar para ' +
        'animal mamando ', 'N');
      Exit;
    end;

    if DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar > 0 then
    begin
      Result := VerificaRegimeAlimentar(DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar,
                                        DadosEvento.LugarDestino.CodTipoLugar,
                                        DadosEvento.LugarDestino.CodFazenda,
                                        DadosEvento.LugarDestino.CodLocal,
                                        DadosEvento.CategoriaDestino.CodCategoriaAnimal,
                                        DadosAnimal.CodAptidao);
      if (Result < 0) and
         (Abs(Result) <> 669) then
      begin
        Mensagens.Delete(Mensagens.Count - 1);
        DadosAnimal.IndAptidaoRegimeAlimentarInvalidaNoEvento := 'S';
      end;
    end;
  end;

  // Verifica aptidão e regime alimentar do animal/evento. Caso seja incompatível,
  // o regime alimentar do animal será alterado para Não especificado - Daniel 19/08/2005
  Result := VerificaRegimeAlimentar(DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar,
                                    DadosEvento.LugarDestino.CodTipoLugar,
                                    DadosEvento.LugarDestino.CodFazenda,
                                    DadosEvento.LugarDestino.CodLocal,
                                    DadosEvento.CategoriaDestino.CodCategoriaAnimal,
                                    DadosAnimal.CodAptidao);
  if (Result < 0) then
  begin
    Mensagens.Delete(Mensagens.Count - 1);
    DadosAnimal.IndAptidaoRegimeAlimentarInvalidaNoEvento := 'S';
  end;

  try
    Q := THerdomQuery.Create(Conexao, nil);
    try
      // Se o animal estiver efetivado deve ser verificado se o local de
      // origem e destino são válidos
      if DadosAnimal.CodSituacaoSisbov = 'I' then
      begin
        // Consiste origem
        case DadosEvento.LugarOrigem.CodTipoLugar of
          1: begin
            Result := TIntFazendas.VerificaFazendaEfetivada(Conexao,
               Mensagens,
               DadosEvento.LugarOrigem.CodFazenda,
               DadosEvento.LugarOrigem.CodPropriedade ,
               DadosEvento.LugarOrigem.NumImovel,
               DadosEvento.LugarOrigem.CodLocalizacaoSISBOV,
               DadosEvento.DtaInicio, 'Fazenda Origem');
            if Result < 0 then
            begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
                'Erro ao validar a fazenda de origem: ' +
                  Mensagens.Items[Mensagens.Count - 1].Texto, 'N');
              Mensagens.Clear;
              Exit;
            end;
          end;

          2: begin
            CodPropriedadeRural := DadosEvento.LugarOrigem.CodPropriedade;
            NumImovelReceitaFederal := DadosEvento.LugarOrigem.NumImovel;
            CodLocalizacao := DadosEvento.LugarOrigem.CodLocalizacaoSISBOV;
            CodPessoaProdutor := DadosEvento.LugarOrigem.CodPessoa;
            NumCNPJCPFPessoa := DadosEvento.LugarOrigem.NumCNPJCPF;
            if CodPropriedadeRural > 0 then
            begin
              NumImovelReceitaFederal := '';
              CodLocalizacao := -1;
            end;

            // Busca a pessoa
            if CodPessoaProdutor <= 0 then
            begin
              Q.SQL.Clear;
              Q.SQL.Add('SELECT cod_pessoa');
              Q.SQL.Add('  FROM tab_pessoa');
              Q.SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
              Q.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoa;
              Q.Open;

              if Q.IsEmpty then
              begin
                Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
                  'Erro ao validar a propriedade de origem: produtor não encontrado.', 'N');
                Exit;
              end;

              CodPessoaProdutor := Q.FieldByName('cod_pessoa').AsInteger;
            end;

            Result := TIntPropriedadesRurais.VerificaLocalizacaoSISBOVPropriedade(
              Conexao, Mensagens, NumImovelReceitaFederal, CodPropriedadeRural,
              CodLocalizacao, CodPessoaProdutor, True);
            if Result < 0 then
            begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
                'Erro ao validar a propriedade de origem: ' +
                  Mensagens.Items[Mensagens.Count - 1].Texto, 'N');
              Mensagens.Clear;
              Exit;
            end;
          end;
        end;

        // Consiste destino
        case DadosEvento.LugarDestino.CodTipoLugar of
          1: begin
            Result := TIntFazendas.VerificaFazendaEfetivada(Conexao,
              Mensagens,
              DadosEvento.LugarDestino.CodFazenda,
              DadosEvento.LugarDestino.CodPropriedade,
              DadosEvento.LugarDestino.NumImovel,
              DadosEvento.LugarDestino.CodLocalizacaoSISBOV,
              DadosEvento.DtaInicio, 'Fazenda Destino');
            if Result < 0 then
            begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
                'Erro ao validar a fazenda de destino: ' +
                  Mensagens.Items[Mensagens.Count - 1].Texto, 'N');
              Mensagens.Clear;
              Exit;
            end;
          end;

          2: begin
            CodPropriedadeRural := DadosEvento.LugarDestino.CodPropriedade;
            NumImovelReceitaFederal := DadosEvento.LugarDestino.NumImovel;
            CodLocalizacao := DadosEvento.LugarDestino.CodLocalizacaoSISBOV;
            CodPessoaProdutor := DadosEvento.LugarDestino.CodPessoa;
            NumCNPJCPFPessoa := DadosEvento.LugarDestino.NumCNPJCPF;
            if CodPropriedadeRural > 0 then
            begin
              NumImovelReceitaFederal := '';
              CodLocalizacao := -1;
            end;

            // Busca a pessoa
            if CodPessoaProdutor <= 0 then
            begin
              Q.SQL.Clear;
              Q.SQL.Add('SELECT cod_pessoa');
              Q.SQL.Add('  FROM tab_pessoa');
              Q.SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
              Q.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoa;
              Q.Open;

              if Q.IsEmpty then
              begin
                Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
                  'Erro ao validar a propriedade de destino: produtor não encontrado.', 'N');
                Exit;
              end;

              CodPessoaProdutor := Q.FieldByName('cod_pessoa').AsInteger;
            end;

            Result := TIntPropriedadesRurais.VerificaLocalizacaoSISBOVPropriedade(
              Conexao, Mensagens, NumImovelReceitaFederal, CodPropriedadeRural,
              CodLocalizacao, CodPessoaProdutor, True);
            if Result < 0 then
            begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
                'Erro ao validar a propriedade de destino: ' +
                  Mensagens.Items[Mensagens.Count - 1].Texto, 'N');
              Mensagens.Clear;
              Exit;
            end;
          end;
        end;
      end;
      
      // Se for um bezerro mamando, aplica o evento pra mãe também.
      if DadosAnimal.CodCategoriaAnimal = 1 then
      begin
        // Verifica se mãe (ou receptora) do animal é vaca parida ou em lactação
        if DadosAnimal.CodAnimalReceptor > 0 then
        begin
          AnimalMae := DadosAnimal.CodAnimalReceptor;
          TipoMae := 'R';
        end
        else
        begin
          if DadosAnimal.CodAnimalMae > 0 then
          begin
            AnimalMae := DadosAnimal.CodAnimalMae;
            TipoMae := 'M';
          end;
        end;

        // Se animal possui mae aplica evento à mãe
        if AnimalMae > 0 then
        begin
          Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1,
            DadosEvento.CodEvento, 'N');
          if Result < 0 then
          begin
            if Abs(Result) <> 783 then
            begin
              Exit;
            end
            else
            begin
              // Exclui a última mensagem quando ela for 783
              Mensagens.Delete(Mensagens.Count - 1);
            end;
          end
          else
          begin
            DadosAnimal.CodAnimalAssociado := AnimalMae;
          end;
        end;
      end
      else // Se animal é mãe de filho mamando
      begin
        if (DadosAnimal.CodCategoriaAnimal = 6)
          or (DadosAnimal.CodCategoriaAnimal = 8) then
        begin
          Result := ObtemFilhos(DadosAnimal, CodFilhos);
          if Result < 0 then
          begin
            Exit;
          end;
          if CodFilhos <> '' then
          begin
            Result := AplicarEventoInt(CodFilhos, -1, '', -1, -1,
              DadosEvento.CodEvento, 'N');
            if Result < 0 then
            begin
              if Abs(Result) <> 783 then
              begin
                Exit;
              end
              else
              begin
                // Exclui a última mensagem quando ela for 783
                Mensagens.Delete(Mensagens.Count - 1);
              end;
            end;
          end;
        end;
      end;

      Result := 0;
    finally
      Q.Free;
    end;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(1075, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1075;
      Exit;
    end;
  end;
end;

function TIntAnimais.AplicarTransferencia(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarTransferencia';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_tipo_lugar = :cod_tipo_lugar, ' +
                  '       cod_fazenda_corrente = :cod_fazenda_corrente, ' +
                  '       cod_lote_corrente = :cod_lote_corrente, ' +
                  '       cod_local_corrente = :cod_local_corrente, ' +
                  '       num_imovel_corrente = :num_imovel_corrente, ' +
                  '       cod_localizacao_corrente = :cod_localizacao_corrente, ' +
                  '       cod_propriedade_corrente = :cod_propriedade_corrente, ' +
                  '       num_cnpj_cpf_corrente = :num_cnpj_cpf_corrente, ' +
                  '       cod_pessoa_corrente = :cod_pessoa_corrente, ' +
                  '       cod_pessoa_secundaria_corrente = :cod_pessoa_secundaria_corrente, ');

        if ((DadosAnimal.CodCategoriaAnimal = 1)  and (DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar > 0)) or
           ((DadosAnimal.CodCategoriaAnimal > 1) and (DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar > 0)) then
        begin
          Q.SQL.Add('     cod_regime_alimentar = :cod_regime_alimentar, ');
        end;

        Q.SQL.Add('       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_tipo_lugar = :cod_tipo_lugar ' +
                  '     , cod_fazenda_corrente = :cod_fazenda_corrente ' +
                  '     , cod_lote_corrente = :cod_lote_corrente ' +
                  '     , cod_local_corrente = :cod_local_corrente ' +
                  '     , num_imovel_corrente = :num_imovel_corrente ' +
                  '     , cod_localizacao_corrente = :cod_localizacao_corrente ' +
                  '     , cod_propriedade_corrente = :cod_propriedade_corrente ' +
                  '     , num_cnpj_cpf_corrente = :num_cnpj_cpf_corrente ' +
                  '     , cod_pessoa_corrente = :cod_pessoa_corrente ' +
                  '     , cod_pessoa_secundaria_corrente = :cod_pessoa_secundaria_corrente ');
        if ((DadosAnimal.CodCategoriaAnimal = 1)  and (DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar > 0)) or
           ((DadosAnimal.CodCategoriaAnimal <> 1) and (DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar > 0)) then
        begin
          Q.SQL.Add('   , cod_regime_alimentar = :cod_regime_alimentar ');
        end;
        Q.SQL.Add('     , dta_ultimo_evento = :dta_ultimo_evento ' +
                  '     , dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_tipo_lugar').AsInteger := DadosEvento.LugarDestino.CodTipoLugar;

      AtribuiParametro(Q, DadosEvento.LugarDestino.CodFazenda,
        'cod_fazenda_corrente', -1);
      AtribuiParametro(Q, DadosEvento.LugarDestino.CodLocal,
        'cod_local_corrente', -1);
      AtribuiParametro(Q, DadosEvento.LugarDestino.CodLote,
        'cod_lote_corrente', -1);
      AtribuiParametro(Q, DadosEvento.LugarDestino.NumImovel,
        'num_imovel_corrente', '');
      AtribuiParametro(Q, DadosEvento.LugarDestino.CodLocalizacaoSISBOV,
        'cod_localizacao_corrente', -1);
      AtribuiParametro(Q, DadosEvento.LugarDestino.CodPropriedade,
        'cod_propriedade_corrente', -1);
      AtribuiParametro(Q, DadosEvento.LugarDestino.NumCNPJCPF,
        'num_cnpj_cpf_corrente', '');
      AtribuiParametro(Q, DadosEvento.LugarDestino.CodPessoa,
        'cod_pessoa_corrente', -1);
      AtribuiParametro(Q, DadosEvento.LugarDestino.CodPessoaSecundaria,
        'cod_pessoa_secundaria_corrente', -1);

      if (DadosAnimal.CodCategoriaAnimal = 1) and (DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar > 0) then
      begin
        if DadosAnimal.IndAptidaoRegimeAlimentarInvalidaNoEvento = 'N' then
        begin
          AtribuiParametro(Q, DadosEvento.RegimeAlimentarMamando.CodRegimeAlimentar, 'cod_regime_alimentar', -1);
        end
        else
        begin
          AtribuiParametro(Q, 99, 'cod_regime_alimentar', -1);
        end;
      end
      else if (DadosAnimal.CodCategoriaAnimal > 1) and (DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar > 0) then
      begin
        if DadosAnimal.IndAptidaoRegimeAlimentarInvalidaNoEvento = 'N' then
        begin
          AtribuiParametro(Q, DadosEvento.RegimeAlimentarDesmamado.CodRegimeAlimentar, 'cod_regime_alimentar', -1);
        end
        else
        begin
          AtribuiParametro(Q, 99, 'cod_regime_alimentar', -1);
        end;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1076, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1076;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverTransferencia(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverTransferencia';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_tipo_lugar = :cod_tipo_lugar, ' +
                '       cod_fazenda_corrente = :cod_fazenda_corrente, ' +
                '       cod_lote_corrente = :cod_lote_corrente, ' +
                '       cod_local_corrente = :cod_local_corrente, ' +
                '       num_imovel_corrente = :num_imovel_corrente, ' +
                '       cod_localizacao_corrente = :cod_localizacao_corrente, ' +
                '       cod_propriedade_corrente = :cod_propriedade_corrente, ' +
                '       num_cnpj_cpf_corrente = :num_cnpj_cpf_corrente, ' +
                '       cod_pessoa_corrente = :cod_pessoa_corrente, ' +
                '       cod_pessoa_secundaria_corrente = :cod_pessoa_secundaria_corrente, ' +
                '       cod_regime_alimentar = :cod_regime_alimentar, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;

      if DadosAnimal.CodFazendaCorrente > 0 then begin
        Q.ParamByName('cod_fazenda_corrente').AsInteger := DadosAnimal.CodFazendaCorrente;
      end else begin
        Q.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
        Q.ParamByName('cod_fazenda_corrente').Clear;
      end;
      if DadosAnimal.CodLocalCorrente > 0 then begin
        Q.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
      end else begin
        Q.ParamByName('cod_local_corrente').DataType := ftInteger;
        Q.ParamByName('cod_local_corrente').Clear;
      end;
      if DadosAnimal.CodLoteCorrente > 0 then begin
        Q.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
      end else begin
        Q.ParamByName('cod_lote_corrente').DataType := ftInteger;
        Q.ParamByName('cod_lote_corrente').Clear;
      end;
      if DadosAnimal.NumImovelCorrente <> '' then begin
        Q.ParamByName('num_imovel_corrente').AsString := DadosAnimal.NumImovelCorrente;
      end else begin
        Q.ParamByName('num_imovel_corrente').DataType := ftString;
        Q.ParamByName('num_imovel_corrente').Clear;
      end;
      if DadosAnimal.CodLocalizacaoCorrente > 0 then begin
        Q.ParamByName('cod_localizacao_corrente').AsInteger := DadosAnimal.CodLocalizacaoCorrente;
      end else begin
        Q.ParamByName('cod_localizacao_corrente').DataType := ftInteger;
        Q.ParamByName('cod_localizacao_corrente').Clear;
      end;
      if DadosAnimal.CodPropriedadeCorrente > 0 then begin
        Q.ParamByName('cod_propriedade_corrente').AsInteger := DadosAnimal.CodPropriedadeCorrente;
      end else begin
        Q.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
        Q.ParamByName('cod_propriedade_corrente').Clear;
      end;
      if DadosAnimal.NumCNPJCPFCorrente <> '' then begin
        Q.ParamByName('num_cnpj_cpf_corrente').AsString := DadosAnimal.NumCNPJCPFCorrente;
      end else begin
        Q.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
        Q.ParamByName('num_cnpj_cpf_corrente').Clear;
      end;
      if DadosAnimal.CodPessoaCorrente > 0 then begin
        Q.ParamByName('cod_pessoa_corrente').AsInteger := DadosAnimal.CodPessoaCorrente;
      end else begin
        Q.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
        Q.ParamByName('cod_pessoa_corrente').Clear;
      end;
      if DadosAnimal.CodPessoaSecundariaCorrente > 0 then begin
        Q.ParamByName('cod_pessoa_secundaria_corrente').AsInteger := DadosAnimal.CodPessoaSecundariaCorrente;
      end else begin
        Q.ParamByName('cod_pessoa_secundaria_corrente').DataType := ftInteger;
        Q.ParamByName('cod_pessoa_secundaria_corrente').Clear;
      end;

      Q.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(988, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -988;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 09 - Venda ao Criador         *
// ***************************************************
function TIntAnimais.VerificaVendaCriador(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaVendaCriador';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteVendaCriador(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento;
  QueryAnimais: THerdomQuery): Integer;
const
  NomeMetodo : String = 'ConsisteVendaCriador';
var
  Q : THerdomQuery;
  AnimalMae, VerificaFC : Integer;
  TipoMae : String;
  IndDesmamar, IndNaLista : Boolean; { Fábio Vilela - 13/07/2004 }
  DadosMae: TDadosAnimal; { Fábio Vilela - 13/07/2004 }
  QtdFilhos : Integer; { Fábio Vilela - 13/07/2004 }
  CodManejoFilhos: String; { Fábio Vilela - 22/11/2004 }
begin
  AnimalMae := -1;
  TipoMae := '';

  if DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Somente o produtor do animal pode aplicar o evento de venda para criador.', 'N');
    Exit;
  end; // Daniel 15/10/2005

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
    Exit;
  end;

  if UpperCase(DadosAnimal.CodSituacaoSisbov) = 'P' then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não é possível realizar a venda de um animal com a situação SISBOV pendente. É necessário efetivar o animal antes de aplicar o evento.', 'N');
    Exit;
  end;

  if (UpperCase(DadosAnimal.CodSituacaoSisbov) = 'I') and
     (DadosAnimal.CodArquivoSisbov <= 0) and (not DadosAnimal.IndAnimalExpDesmCancelado) then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não é possível realizar a venda de um animal pois o mesmo não foi exportado para o SISBOV.', 'N');
    Exit;
  end;

  if (DadosEvento.LugarDestino.CodPessoa = Conexao.CodProdutorTrabalho) and
     (DadosEvento.LugarDestino.CodFazenda = Conexao.CodFazendaTrabalho) then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não é possível realizar a venda de um animal para o mesmo produtor/propriedade do evento.', 'N');
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se mãe (ou receptora) do animal é vaca parida ou em lactação
      if DadosAnimal.CodAnimalReceptor > 0 then
      begin
        AnimalMae := DadosAnimal.CodAnimalReceptor;
        TipoMae := 'R';
      end
      else
      begin
        if DadosAnimal.CodAnimalMae > 0 then
        begin
          AnimalMae := DadosAnimal.CodAnimalMae;
          TipoMae := 'M';
        end;
      end;

      // Se animal possui mae e é o último filho mamando, aplica evento
      // desmame do bezerro à mãe
      if (AnimalMae > 0) and
         (DadosAnimal.CodCategoriaAnimal = 1) then
      begin
        Result := QtdFilhosMae(AnimalMae, TipoMae, True);
        if Result < 0 then
        begin
          Exit;
        end;
        { Inicio Alteração - Fábio Vilela - 13/07/2004   }
        QtdFilhos := Result;

        { Verifica se a mae do bezerro ja esta na lista }
        Result := BuscaAnimalLista(QueryAnimais,
                                   AnimalMae,
                                   IndNaLista);
        if Result < 0 then
        begin
          Exit;
        end;

        IndDesmamar := not IndNaLista;

        { Verifica se a vaca esta em lacatação ou parida }
        if IndDesmamar then
        begin
          Result := BuscaDadosAnimal(AnimalMae, -1, -1, -1, -1, -1, -1, '', '', DadosMae);
          if Result < 0 then
          begin
            Exit;
          end;

          IndDesmamar := DadosMae.CodCategoriaAnimal in [6, 8];
        end;
        { Fim Alteração - Fábio Vilela - 13/07/2004      }

        if (QtdFilhos = 1) and IndDesmamar then { Fábio Vilela - 13/07/2004 }
        begin
          if DadosEvento.CodEventoAssociado <= 0 then
          begin
            Result := InsereEventoAssociado(DadosEvento);
            if Result < 0 then
            begin
              Exit;
            end;
          end;
          Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1, DadosEvento.CodEventoAssociado, 'S');
          if Result < 0 then
          begin
            if Abs(Result) <> 783 then
            begin
              Exit;
            end
            else
            begin
              // Exclui a última mensagem quando ela for 783
              Mensagens.Delete(Mensagens.Count - 1);
            end;
          end
          else
          begin
            DadosAnimal.CodAnimalAssociado := AnimalMae;
          end;
        end;
      end
      { Inicio Alteração - Fábio Vilela - 13/07/2004       }
      { Se for uma vaca Parida ou em lactação, incluir uma }
      { mensagem avisando que o bezerro deve ser desmamado }
      else if DadosAnimal.CodCategoriaAnimal in [6, 8] then
      begin
        with Q.SQL do
        begin
          Clear;
          Add('select cod_animal, cod_animal_manejo ');
          Add('  from tab_animal ');
          Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
          Add('   and ((cod_animal_mae = :cod_animal) or (cod_animal_receptor = :cod_animal)) ');
          Add('   and cod_categoria_animal = 1 ');
          Add('   and dta_fim_validade is null ');
        end;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        while not Q.Eof do
        begin
          { Verifica se o bezerro ja esta na lista }
          Result := BuscaAnimalLista(QueryAnimais,
                                     Q.FieldByName('cod_animal').AsInteger,
                                     IndNaLista);
          if Result < 0 then
          begin
            Exit;
          end;

          if not IndNaLista then
          begin
            if CodManejoFilhos = '' then
            begin
              CodManejoFilhos := Q.FieldByName('cod_animal_manejo').AsString
            end
            else
            begin
              CodManejoFilhos := CodManejoFilhos + ', ' + Q.FieldByName('cod_animal_manejo').AsString;
            end;
          end;

          Q.Next;
        end;

        if CodManejoFilhos <> '' then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'Os animais ' + CodManejoFilhos + ' estão mamando, favor aplicar o'
            + ' evento de desmame caso seja necessário.', 'N');
        end;
      end;
      { Fim Alteração - Fábio Vilela - 13/07/2004          }

      // Atualiza a situação do código sisbov para transferido "TRANS" (6)
      if (DadosAnimal.CodPaisSisbov > 0) and
         (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
                                                       DadosAnimal.CodEstadoSisbov,
                                                       DadosAnimal.CodMicroRegiaoSisbov,
                                                       DadosAnimal.CodAnimalSisbov,
                                                       6);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(1031, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1031;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarVendaCriador(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarVendaCriador';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        Q.SQL.Add('   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        Q.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then
      begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1029, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1029;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverVendaCriador(DadosAnimal: TDadosAnimal;
                                         DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverVendaCriador';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      Q.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      // Restaura a situação SISBOV do animal
      if (DadosAnimal.CodPaisSisbov > 0)
          and (DadosAnimal.CodTipoOrigem in [1, 5, 6]) then
//        and (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.RestaurarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1030, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1030;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 10 - Venda ao Frigorifico     *
// ***************************************************
function TIntAnimais.VerificaVendaFrigorifico(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaVendaFrigorifico';
begin
  Result := 0;
end;

// ***************************************************
// * Tratamento evento 36 - Retorno do Frigorifico     *
// ***************************************************
function TIntAnimais.VerificaRetornoFrigorifico(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaRetornoFrigorifico';
begin
  Result := 0;
end;


function TIntAnimais.ConsisteVendaFrigorifico(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento;
  QueryAnimais: THerdomQuery): Integer;
const
  NomeMetodo : String = 'ConsisteVendaFrigorifico';
var
  Q : THerdomQuery;
  AnimalMae, VerificaFC : Integer;
  TipoMae : String;
  IndDesmamar, IndNaLista : Boolean; { Fábio Vilela - 13/07/2004 }
  DadosMae: TDadosAnimal; { Fábio Vilela - 13/07/2004 }
  QtdFilhos : Integer; { Fábio Vilela - 13/07/2004 }
  CodManejoFilhos: String; { Fábio Vilela - 22/11/2004 }
begin
  AnimalMae := -1;
  TipoMae := '';

  if DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Somente o produtor do animal pode aplicar o evento de venda para frigorífico.', 'N');
    Exit;
  end; // Daniel 15/10/2005

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;

  if UpperCase(DadosAnimal.CodSituacaoSisbov) = 'P' then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não é possível realizar o retorno de um animal com a situação SISBOV pendente. É necessário efetivar o animal antes de aplicar o evento.', 'N');
    Exit;
  end;

  if (UpperCase(DadosAnimal.CodSituacaoSisbov) = 'I') and
     (DadosAnimal.CodArquivoSisbov <= 0) and (not DadosAnimal.IndAnimalExpDesmCancelado) then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não é possível realizar o retorno de um animal pois o mesmo não foi exportado para o SISBOV.', 'N');
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se mãe (ou receptora) do animal é vaca parida ou em lactação
      if DadosAnimal.CodAnimalReceptor > 0 then begin
        AnimalMae := DadosAnimal.CodAnimalReceptor;
        TipoMae := 'R';
      end else begin
        if DadosAnimal.CodAnimalMae > 0 then begin
          AnimalMae := DadosAnimal.CodAnimalMae;
          TipoMae := 'M';
        end;
      end;

      // Se animal possui mae e é o último filho mamando, aplica evento
      // desmame do bezerro à mãe
      if (AnimalMae > 0) and (DadosAnimal.CodCategoriaAnimal = 1) then begin
        Result := QtdFilhosMae(AnimalMae, TipoMae, True);
        if Result < 0 then begin
          Exit;
        end;
        { Inicio Alteração - Fábio Vilela - 13/07/2004   }
        QtdFilhos := Result;

        { Verifica se a mae do bezerro ja esta na lista }
        Result := BuscaAnimalLista(
          QueryAnimais,
          AnimalMae,
          IndNaLista
        );
        if Result < 0 then
          Exit;
        IndDesmamar := not IndNaLista;

        { Verifica se a vaca esta em lacatação ou parida }
        if IndDesmamar then
        begin
          Result := BuscaDadosAnimal(AnimalMae, -1, -1, -1, -1, -1, -1, '', '', DadosMae);
          if Result < 0 then
            Exit;

          IndDesmamar := DadosMae.CodCategoriaAnimal in [6, 8];
        end;
        { Fim Alteração - Fábio Vilela - 13/07/2004      }

        if (QtdFilhos = 1) and IndDesmamar then begin { Fábio Vilela - 13/07/2004 }
          if DadosEvento.CodEventoAssociado <= 0 then begin
            Result := InsereEventoAssociado(DadosEvento);
            if Result < 0 then begin
              Exit;
            end;
          end;
          Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1, DadosEvento.CodEventoAssociado, 'S');
          if Result < 0 then begin
            if Abs(Result) <> 783 then begin
              Exit;
            end else begin
              // Exclui a última mensagem quando ela for 783
              Mensagens.Delete(Mensagens.Count - 1);
            end;
          end else begin
            DadosAnimal.CodAnimalAssociado := AnimalMae;
          end;
        end;
      end
      { Inicio Alteração - Fábio Vilela - 13/07/2004       }
      { Se for uma vaca Parida ou em lactação, incluir uma }
      { mensagem avisando que o bezerro deve ser desmamado }
      else if DadosAnimal.CodCategoriaAnimal in [6, 8] then begin
        with Q.SQL do
        begin
          Clear;
          Add('select cod_animal, cod_animal_manejo ');
          Add('  from tab_animal ');
          Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
          Add('   and ((cod_animal_mae = :cod_animal) or (cod_animal_receptor = :cod_animal)) ');
          Add('   and cod_categoria_animal = 1 ');
          Add('   and dta_fim_validade is null ');
        end;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        while not Q.Eof do
        begin
          { Verifica se o bezerro ja esta na lista }
          Result := BuscaAnimalLista(
            QueryAnimais,
            Q.FieldByName('cod_animal').AsInteger,
            IndNaLista
          );
          if Result < 0 then
            Exit;

          if not IndNaLista then
          begin
            if CodManejoFilhos = '' then
              CodManejoFilhos := Q.FieldByName('cod_animal_manejo').AsString
            else
              CodManejoFilhos := CodManejoFilhos + ', ' + Q.FieldByName('cod_animal_manejo').AsString;
          end;

          Q.Next;
        end;
        
        if CodManejoFilhos <> '' then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'Os animais ' + CodManejoFilhos + ' estão mamando, favor aplicar o'
            + ' evento de desmame caso seja necessário.', 'N');
        end;
      end;
      { Fim Alteração - Fábio Vilela - 13/07/2004          }

      // Atualiza a situação do código sisbov para "INAT" (9)
      if (DadosAnimal.CodPaisSisbov > 0)
        and (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov, 7);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1031, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1031;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


function TIntAnimais.ConsisteRetornoFrigorifico(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento;
  QueryAnimais: THerdomQuery): Integer;
const
  NomeMetodo : String = 'ConsisteRetornoFrigorifico';
var
  Q : THerdomQuery;
//  VerificaFC : Integer;
begin

  if DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Somente o produtor do animal pode aplicar o evento de venda para frigorífico.', 'N');
    Exit;
  end; // Daniel 15/10/2005

{
  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
}

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      { 20/10/2006 - Canival       }
      { Verifica se o animal que está retornando tem um evento }
      { de venda para frigorífico e se o frigorífico é o mesmo }
      { que está sendo aplicado o retorno }
      with Q.SQL do
      begin
        Clear;
        Add('select te.dta_inicio ');
        Add('  ,    tev.num_cnpj_cpf_frigorifico ');
        Add('  from tab_animal_evento tae');
        Add('  ,	  tab_evento te ');
        Add('  ,	  tab_evento_venda_frigorifico tev ');
        Add('  ,    tab_animal ta ');
        Add(' where ta.cod_animal = :cod_animal ');
        Add('   and ta.cod_categoria_animal = 12 ');
        Add('   and tae.cod_animal = :cod_animal ');
        Add('   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Add('   and	tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        Add('   and	tae.cod_evento = te.cod_evento ');
        Add('   and	te.cod_tipo_evento = 10 ');
        Add('   and	tae.cod_pessoa_produtor = tev.cod_pessoa_produtor ');
        Add('   and	tae.cod_evento = tev.cod_evento ');
        Add('group by te.dta_inicio ');
        Add('  ,    	tev.num_cnpj_cpf_frigorifico ');
        Add('order by 1 desc ');
      end;

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.Open;

      if (Q.Eof) or (Q.FieldByName('num_cnpj_cpf_frigorifico').AsString <> DadosEvento.LugarOrigem.NumCNPJCPF) then
      begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'O animal não possui um evento de venda para frigorífico ou o frigorifico'+
            ' informado de retorno não é o mesmo do evento de venda. Operação não será realizada.', 'N');
          Exit;
      end else begin
        if Q.FieldByName('dta_inicio').AsDateTime > DadosEvento.DtaInicio then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'A data início do evento é menor que o evento de venda para frigorífico aplicado '+
            'no animal. Operação não será realizada.', 'N');
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1031, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1031;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


function TIntAnimais.AplicarVendaFrigorifico(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarVendaFrigorifico';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        Q.SQL.Add('   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        Q.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then
      begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(1029, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1029;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarRetornoFrigorifico(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarRetornoFrigorifico';
var
  Q  : THerdomQuery;
  Qu : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  Qu := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      with Q.SQL do
      begin
        Clear;
        Add('select te.dta_inicio ');
        Add('  ,    tev.num_cnpj_cpf_frigorifico ');
        Add('  ,    tae.cod_categoria_animal ');
        Add('  ,    tae.ind_apto_cobertura ');
        Add('from   tab_animal_evento tae');
        Add('  ,	  tab_evento te ');
        Add('  ,	  tab_evento_venda_frigorifico tev ');
        Add('  ,    tab_animal ta ');
        Add('where  ta.cod_animal = :cod_animal ');
        Add('   and ta.cod_categoria_animal = 12 ');
        Add('   and tae.cod_animal = :cod_animal ');
        Add('   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Add('   and	tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        Add('   and	tae.cod_evento = te.cod_evento ');
        Add('   and	te.cod_tipo_evento = 10 ');
        Add('   and	tae.cod_pessoa_produtor = tev.cod_pessoa_produtor ');
        Add('   and	tae.cod_evento = tev.cod_evento ');
        Add('group by te.dta_inicio ');
        Add('  ,    	tev.num_cnpj_cpf_frigorifico ');
        Add('  ,      tae.cod_categoria_animal ');
        Add('  ,      tae.ind_apto_cobertura ');
        Add('order by 1 desc ');
      end;


      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.Open;

      if (Q.Eof) or (Q.FieldByName('num_cnpj_cpf_frigorifico').AsString <> DadosEvento.LugarOrigem.NumCNPJCPF) then
      begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'O animal não possui um evento de venda para frigorífico ou o frigorifico'+
            ' informado de retorno não é o mesmo do evento de venda. Operação não será realizada', 'N');
          Exit;
      end;

      Qu.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Qu.SQL.Add('update tab_animal  ' +
                   '   set cod_categoria_animal = :cod_categoria_animal ' +
                   '   ,   dta_desativacao = null ' +
                   '   ,   dta_ultimo_evento = :dta_ultimo_evento ' +
                   '   ,   dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                   '   ,   num_imovel_corrente = tpr.num_imovel_receita_federal ' +
                   '   ,   cod_localizacao_corrente = tls.cod_localizacao_sisbov ' +
                   '   ,   cod_propriedade_corrente = tf.cod_propriedade_rural ' +
                   '   ,   cod_fazenda_corrente = :cod_fazenda ' +
                   '	 ,   num_cnpj_cpf_corrente = tp.num_cnpj_cpf ' +
                   '   ,   cod_local_corrente = tl.cod_local ' +
                   '   ,   cod_pessoa_corrente = :cod_pessoa_produtor '+
                   '  from tab_animal ta ' +
                   '   ,   tab_animal_evento tae ' +
                   '   ,   tab_fazenda tf ' +
                   '   ,   tab_propriedade_rural tpr ' +
                   '   ,   tab_localizacao_sisbov tls ' +
                   '   ,   tab_pessoa tp ' +
                   '   ,   tab_local tl ' +
                   ' where (1 = 1) ');
        Qu.SQL.Add('   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                   '   and ta.cod_animal = tae.cod_animal ' +
                   '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   '   and tae.cod_evento = :cod_evento ' +
                   '   and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   '   and tf.cod_fazenda = :cod_fazenda ' +
                   '   and tf.cod_propriedade_rural = tpr.cod_propriedade_rural ' +
                   '   and tf.cod_pessoa_produtor = tls.cod_pessoa_produtor ' +
                   '   and tf.cod_propriedade_rural = tls.cod_propriedade_rural ' +
                   '   and tf.cod_pessoa_produtor = tl.cod_pessoa_produtor ' +
                   '   and tf.cod_fazenda = tl.cod_fazenda ' +
                   '   and tl.ind_principal = ''S'' ' +
                   '   and tp.cod_pessoa = :cod_pessoa_produtor ');
        {$ENDIF}
        Qu.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      end else begin
        {$IFDEF MSSQL}
        Qu.SQL.Add('update tab_animal  ' +
                 '   set cod_categoria_animal = :cod_categoria_animal ' +
                 '   ,   dta_desativacao = null ' +
                 '   ,   dta_ultimo_evento = :dta_ultimo_evento ' +
                 '   ,   dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                 '   ,   num_imovel_corrente = tpr.num_imovel_receita_federal ' +
                 '   ,   cod_localizacao_corrente = tls.cod_localizacao_sisbov ' +
                 '   ,   cod_propriedade_corrente = tf.cod_propriedade_rural ' +
                 '   ,   cod_fazenda_corrente = :cod_fazenda ' +
                 '   ,   cod_local_corrente = tl.cod_local ' +
                 '	 ,   num_cnpj_cpf_corrente = tp.num_cnpj_cpf ' +
                 '   ,   cod_pessoa_corrente = :cod_pessoa_produtor '+
                 '  from tab_animal ta ' +
                 '   ,   tab_fazenda tf ' +
                 '   ,   tab_propriedade_rural tpr ' +
                 '   ,   tab_localizacao_sisbov tls ' +
                 '   ,   tab_pessoa tp ' +
                 '   ,   tab_local tl ' +
                 ' where (1 = 1) ');
        Qu.SQL.Add('   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   '   and ta.cod_animal = :cod_animal ' +
                   '   and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                   '   and tf.cod_fazenda = :cod_fazenda  ' +
                   '   and tf.cod_propriedade_rural = tpr.cod_propriedade_rural ' +
                   '   and tf.cod_pessoa_produtor = tls.cod_pessoa_produtor ' +
                   '   and tf.cod_propriedade_rural = tls.cod_propriedade_rural ' +
                   '   and tf.cod_pessoa_produtor = tl.cod_pessoa_produtor ' +
                   '   and tf.cod_fazenda = tl.cod_fazenda ' +
                   '   and tl.ind_principal = ''S'' ' +
                   '   and tp.cod_pessoa = :cod_pessoa_produtor ');
        {$ENDIF}
        Qu.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Qu.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Qu.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Qu.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Qu.ParamByName('cod_fazenda').AsInteger := DadosEvento.CodFazenda;

      if Q.FieldByName('cod_categoria_animal').AsInteger = 0 then begin
        Qu.ParamByName('cod_categoria_animal').DataType := ftInteger;
        Qu.ParamByName('cod_categoria_animal').Clear;
      end else begin
        Qu.ParamByName('cod_categoria_animal').AsInteger := Q.FieldByName('cod_categoria_animal').AsInteger;
      end;

      Qu.ExecSQL;

      // Restaura a situação SISBOV do animal
      if (DadosAnimal.CodPaisSisbov > 0)
        and (DadosAnimal.CodTipoOrigem in [1, 5, 6]) then
      begin
        Result := FCodigosSisbov.RestaurarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(1029, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1029;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


function TIntAnimais.RemoverVendaFrigorifico(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverVendaFrigorifico';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      Q.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      // Restaura a situação SISBOV do animal
      if (DadosAnimal.CodPaisSisbov > 0)
        and (DadosAnimal.CodTipoOrigem in [1, 5, 6]) then
      begin
        Result := FCodigosSisbov.RestaurarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1030, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1030;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverRetornoFrigorifico(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverRetornoFrigorifico';
var
  Q : THerdomQuery;
  Qu : THerdomQuery;

begin
  Q := THerdomQuery.Create(Conexao, nil);
  Qu := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;

      with Q.SQL do
      begin
        Clear;
        Add('select tae.cod_categoria_animal ');
        Add('  ,    tae.ind_apto_cobertura ');
        Add('  ,    te.dta_inicio ');
        Add('  ,    te.dta_cadastramento ');
        Add('  ,    tae.cod_fazenda_corrente ');
        Add('  ,    tae.num_imovel_corrente ');
        Add('  ,    tae.cod_localizacao_corrente ');
        Add('  ,    tae.cod_propriedade_corrente ');
        Add('  ,    tae.num_cnpj_cpf_corrente ');
        Add('  ,    tae.cod_pessoa_corrente ');
        Add('  from tab_animal_evento tae');
        Add('  ,	  tab_evento te ');
        Add('  ,	  tab_evento_venda_frigorifico tev ');
        Add('  ,    tab_animal ta ');
        Add(' where ta.cod_animal = :cod_animal ');
        Add('   and tae.cod_animal = :cod_animal ');
        Add('   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Add('   and	tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        Add('   and	tae.cod_evento = te.cod_evento ');
        Add('   and	te.cod_tipo_evento = 10 ');
        Add('   and	tae.cod_pessoa_produtor = tev.cod_pessoa_produtor ');
        Add('   and	tae.cod_evento = tev.cod_evento ');
        Add('   and tev.num_cnpj_cpf_frigorifico = :num_cpf_cnpj ');
      end;

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('num_cpf_cnpj').AsString := DadosEvento.LugarOrigem.NumCNPJCPF;
      Q.Open;

      if Q.Eof then
      begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'O animal não possui um evento de venda para frigorífico ou o frigorifico'+
            ' informado de retorno não é o mesmo do evento de venda. Operação não será realizada', 'N');
          Exit;
      end;

      Qu.SQL.Clear;
      {$IFDEF MSSQL}
      Qu.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = 12, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       cod_fazenda_corrente = :cod_fazenda_corrente, ' +
                '       num_imovel_corrente = :num_imovel_corrente, ' +
                '       cod_localizacao_corrente = :cod_localizacao_corrente, ' +
                '       cod_propriedade_corrente = :cod_propriedade_corrente, ' +
                '       num_cnpj_cpf_corrente = :num_cnpj_cpf_corrente, ' +
                '       cod_pessoa_corrente = :cod_pessoa_corrente, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      Qu.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor ');
      Qu.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}

      Qu.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Qu.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if Q.FieldByName('dta_inicio').AsDateTime = 0 then begin
        Qu.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Qu.ParamByName('dta_ultimo_evento').Clear;
      end else begin
        Qu.ParamByName('dta_ultimo_evento').AsDateTime := Q.FieldByName('dta_inicio').AsDateTime;
      end;

      if Q.FieldByName('dta_cadastramento').AsDateTime = 0 then begin
        Qu.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Qu.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end else begin
        Qu.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := Q.FieldByName('dta_cadastramento').AsDateTime;
      end;

      if Q.FieldByName('dta_inicio').AsDateTime = 0 then begin
        Qu.ParamByName('dta_desativacao').DataType := ftDateTime;
        Qu.ParamByName('dta_desativacao').Clear;
      end else begin
        Qu.ParamByName('dta_desativacao').AsDateTime := Q.FieldByName('dta_inicio').AsDateTime;
      end;

      Qu.ParamByName('ind_apto_cobertura').AsString := Q.FieldByName('ind_apto_cobertura').AsString;

      if Q.FieldByName('cod_fazenda_corrente').AsInteger = 0 then begin
        Qu.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
        Qu.ParamByName('cod_fazenda_corrente').Clear;
      end else begin
        Qu.ParamByName('cod_fazenda_corrente').AsInteger := Q.FieldByName('cod_fazenda_corrente').AsInteger;
      end;

      if Q.FieldByName('num_imovel_corrente').AsString = '' then begin
        Qu.ParamByName('num_imovel_corrente').DataType := ftString;
        Qu.ParamByName('num_imovel_corrente').Clear;
      end else begin
        Qu.ParamByName('num_imovel_corrente').AsString := Q.FieldByName('num_imovel_corrente').AsString;
      end;

      if Q.FieldByName('cod_localizacao_corrente').AsInteger = 0 then begin
        Qu.ParamByName('cod_localizacao_corrente').DataType := ftInteger;
        Qu.ParamByName('cod_localizacao_corrente').Clear;
      end else begin
        Qu.ParamByName('cod_localizacao_corrente').AsInteger := Q.FieldByName('cod_localizacao_corrente').AsInteger;
      end;

      if Q.FieldByName('cod_propriedade_corrente').AsInteger = 0 then begin
        Qu.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
        Qu.ParamByName('cod_propriedade_corrente').Clear;
      end else begin
        Qu.ParamByName('cod_propriedade_corrente').AsInteger := Q.FieldByName('cod_propriedade_corrente').AsInteger;
      end;

      if Q.FieldByName('num_cnpj_cpf_corrente').AsString = '' then begin
        Qu.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
        Qu.ParamByName('num_cnpj_cpf_corrente').Clear;
      end else begin
        Qu.ParamByName('num_cnpj_cpf_corrente').AsString := Q.FieldByName('num_cnpj_cpf_corrente').AsString;
      end;

      if Q.FieldByName('cod_pessoa_corrente').AsInteger = 0 then begin
        Qu.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
        Qu.ParamByName('cod_pessoa_corrente').Clear;
      end else begin
        Qu.ParamByName('cod_pessoa_corrente').AsInteger := Q.FieldByName('cod_pessoa_corrente').AsInteger;
      end;

      Qu.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1030, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1030;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


// **************************************************
// * Tratamento evento 11 - Desaparecimento         *
// **************************************************
function TIntAnimais.VerificaDesaparecimento(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaDesaparecimento';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteDesaparecimento(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento;
  QueryAnimais: THerdomQuery): Integer;
const
  NomeMetodo : String = 'ConsisteDesaparecimento';
var
  Q : THerdomQuery;
  AnimalMae, VerificaFC : Integer;
  TipoMae : String;
  IndDesmamar, IndNaLista : Boolean; { Fábio Vilela - 13/07/2004 }
  DadosMae: TDadosAnimal; { Fábio Vilela - 13/07/2004 }
  QtdFilhos : Integer; { Fábio Vilela - 13/07/2004 }
  CodManejoFilhos: String; { Fábio Vilela - 22/11/2004 }
begin
  AnimalMae := -1;
  TipoMae := '';

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se mãe (ou receptora) do animal é vaca parida ou em lactação
      if DadosAnimal.CodAnimalReceptor > 0 then begin
        AnimalMae := DadosAnimal.CodAnimalReceptor;
        TipoMae := 'R';
      end else begin
        if DadosAnimal.CodAnimalMae > 0 then begin
          AnimalMae := DadosAnimal.CodAnimalMae;
          TipoMae := 'M';
        end;
      end;

      // Se animal possui mae e é o último filho mamando, aplica evento
      // desmame do bezerro à mãe
      if (AnimalMae > 0) and (DadosAnimal.CodCategoriaAnimal = 1) then begin
        Result := QtdFilhosMae(AnimalMae, TipoMae, True);
        if Result < 0 then begin
          Exit;
        end;
        { Inicio Alteração - Fábio Vilela - 13/07/2004   }
        QtdFilhos := Result;

        { Verifica se a mae do bezerro ja esta na lista }
        Result := BuscaAnimalLista(
          QueryAnimais,
          AnimalMae,
          IndNaLista
        );
        if Result < 0 then
          Exit;
        IndDesmamar := not IndNaLista;

        { Verifica se a vaca esta em lacatação ou parida }
        if IndDesmamar then
        begin
          Result := BuscaDadosAnimal(AnimalMae, -1, -1, -1, -1, -1, -1, '', '', DadosMae);
          if Result < 0 then
            Exit;

          IndDesmamar := DadosMae.CodCategoriaAnimal in [6, 8];
        end;
        { Fim Alteração - Fábio Vilela - 13/07/2004      }

        if (QtdFilhos = 1) and IndDesmamar then begin { Fábio Vilela - 13/07/2004 }
          if DadosEvento.CodEventoAssociado <= 0 then begin
            Result := InsereEventoAssociado(DadosEvento);
            if Result < 0 then begin
              Exit;
            end;
          end;
          Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1, DadosEvento.CodEventoAssociado, 'S');
          if Result < 0 then begin
            if Abs(Result) <> 783 then begin
              Exit;
            end else begin
              // Exclui a última mensagem quando ela for 783
              Mensagens.Delete(Mensagens.Count - 1);
            end;
          end else begin
            DadosAnimal.CodAnimalAssociado := AnimalMae;
          end;
        end;
      end
      { Inicio Alteração - Fábio Vilela - 13/07/2004       }
      { Se for uma vaca Parida ou em lactação, incluir uma }
      { mensagem avisando que o bezerro deve ser desmamado }
      else if DadosAnimal.CodCategoriaAnimal in [6, 8] then begin
        with Q.SQL do
        begin
          Clear;
          Add('select cod_animal, cod_animal_manejo ');
          Add('  from tab_animal ');
          Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
          Add('   and ((cod_animal_mae = :cod_animal) or (cod_animal_receptor = :cod_animal)) ');
          Add('   and cod_categoria_animal = 1 ');
          Add('   and dta_fim_validade is null ');
        end;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        while not Q.Eof do
        begin
          { Verifica se o bezerro ja esta na lista }
          Result := BuscaAnimalLista(
            QueryAnimais,
            Q.FieldByName('cod_animal').AsInteger,
            IndNaLista
          );
          if Result < 0 then
            Exit;

          if not IndNaLista then
          begin
            if CodManejoFilhos = '' then
              CodManejoFilhos := Q.FieldByName('cod_animal_manejo').AsString
            else
              CodManejoFilhos := CodManejoFilhos + ', ' + Q.FieldByName('cod_animal_manejo').AsString;
          end;

          Q.Next;
        end;
        
        if CodManejoFilhos <> '' then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'Os animais ' + CodManejoFilhos + ' estão mamando, favor aplicar o'
            + ' evento de desmame caso seja necessário.', 'N');
        end;
      end;
      { Fim Alteração - Fábio Vilela - 13/07/2004          }

      // Atualiza a situação do código sisbov para "INAT" (9)
      if (DadosAnimal.CodPaisSisbov > 0)
        and (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov, 7);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(989, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -989;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarDesaparecimento(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarDesaparecimento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1071, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1071;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverDesaparecimento(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverDesaparecimento';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then
      begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end
      else
      begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end
      else
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then
      begin
        if DadosAnimal.DtaDesativacao > 0 then
        begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end
        else
        begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      // Restaura a situação SISBOV do animal
      if (DadosAnimal.CodPaisSisbov > 0) and                  
         (DadosAnimal.CodTipoOrigem in [1, 5, 6]) then
      begin
        Result := FCodigosSisbov.RestaurarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(1072, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1072;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 12 - Morte                   *
// **************************************************
function TIntAnimais.VerificaMorte(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaMorte';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteMorte(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento;
  QueryAnimais: THerdomQuery): Integer;
const
  NomeMetodo : String = 'ConsisteMorte';
var
  Q : THerdomQuery;
  AnimalMae, VerificaFC : Integer;
  TipoMae : String;
  IndDesmamar, IndNaLista : Boolean; { Fábio Vilela - 13/07/2004 }
  DadosMae: TDadosAnimal; { Fábio Vilela - 13/07/2004 }
  QtdFilhos : Integer; { Fábio Vilela - 13/07/2004 }
  CodManejoFilhos: String; { Fábio Vilela - 22/11/2004 }
begin
  AnimalMae := -1;
  TipoMae := '';

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se mãe (ou receptora) do animal é vaca parida ou em lactação
      if DadosAnimal.CodAnimalReceptor > 0 then begin
        AnimalMae := DadosAnimal.CodAnimalReceptor;
        TipoMae := 'R';
      end else begin
        if DadosAnimal.CodAnimalMae > 0 then begin
          AnimalMae := DadosAnimal.CodAnimalMae;
          TipoMae := 'M';
        end;
      end;

      // Se animal possui mae e é o último filho mamando, aplica evento
      // desmame do bezerro à mãe
      if (AnimalMae > 0) and (DadosAnimal.CodCategoriaAnimal = 1) then begin
        Result := QtdFilhosMae(AnimalMae, TipoMae, True);
        if Result < 0 then begin
          Exit;
        end;
        { Inicio Alteração - Fábio Vilela - 13/07/2004   }
        QtdFilhos := Result;

        { Verifica se a mae do bezerro ja esta na lista }
        Result := BuscaAnimalLista(
          QueryAnimais,
          AnimalMae,
          IndNaLista
        );
        if Result < 0 then
          Exit;
        IndDesmamar := not IndNaLista;

        { Verifica se a vaca esta em lacatação ou parida }
        if IndDesmamar then
        begin
          Result := BuscaDadosAnimal(AnimalMae, -1, -1, -1, -1, -1, -1, '', '', DadosMae);
          if Result < 0 then
            Exit;

          IndDesmamar := DadosMae.CodCategoriaAnimal in [6, 8];
        end;
        { Fim Alteração - Fábio Vilela - 13/07/2004      }

        if (QtdFilhos = 1) and IndDesmamar then { Fábio Vilela - 13/07/2004 }
        begin
          if DadosEvento.CodEventoAssociado <= 0 then
          begin
            Result := InsereEventoAssociado(DadosEvento);
            if Result < 0 then
            begin
              Exit;
            end;
          end;
          
          Result := AplicarEventoInt(IntToStr(AnimalMae), -1, '', -1, -1, DadosEvento.CodEventoAssociado, 'S');
          if Result < 0 then begin
            if Abs(Result) <> 783 then
            begin
              Exit;
            end
            else
            begin
              // Exclui a última mensagem quando ela for 783
              Mensagens.Delete(Mensagens.Count - 1);
            end;
          end
          else
          begin
            DadosAnimal.CodAnimalAssociado := AnimalMae;
          end;
        end;
      end
      { Inicio Alteração - Fábio Vilela - 13/07/2004       }
      { Se for uma vaca Parida ou em lactação, incluir uma }
      { mensagem avisando que o bezerro deve ser desmamado }
      else
      if DadosAnimal.CodCategoriaAnimal in [6, 8] then
      begin
        with Q.SQL do
        begin
          Clear;
          Add('select cod_animal, cod_animal_manejo ');
          Add('  from tab_animal ');
          Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
          Add('   and ((cod_animal_mae = :cod_animal) or (cod_animal_receptor = :cod_animal)) ');
          Add('   and cod_categoria_animal = 1 ');
          Add('   and dta_fim_validade is null ');
        end;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        CodManejoFilhos := '';
        while not Q.Eof do
        begin
          { Verifica se o bezerro ja esta na lista }
          Result := BuscaAnimalLista(
            QueryAnimais,
            Q.FieldByName('cod_animal').AsInteger,
            IndNaLista
          );
          if Result < 0 then
          begin
            Exit;
          end;

          if not IndNaLista then
          begin
            if CodManejoFilhos = '' then
              CodManejoFilhos := Q.FieldByName('cod_animal_manejo').AsString
            else
              CodManejoFilhos := CodManejoFilhos + ', ' + Q.FieldByName('cod_animal_manejo').AsString;
          end;

          Q.Next;
        end;
        
        if CodManejoFilhos <> '' then
        begin
          Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal,
            'Os animais ' + CodManejoFilhos + ' estão mamando, favor aplicar o'
            + ' evento de desmame caso seja necessário.', 'N');
        end;
      end;
      { Fim Alteração - Fábio Vilela - 13/07/2004          }

      // Atualiza a situação do código sisbov para "INAT" (9)
      if (DadosAnimal.CodPaisSisbov > 0)
        and (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov, 7);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(989, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -989;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarMorte(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMorte';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);

      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then
      begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;


      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1038, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1038;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverMorte(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverMorte';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then
      begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end
      else
      begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end
      else
      begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then
      begin
        if DadosAnimal.DtaDesativacao > 0 then
        begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end
        else
        begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end
      else
      begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      // Restaura a situação SISBOV do animal
      if (DadosAnimal.CodPaisSisbov > 0) and
         (DadosAnimal.CodTipoOrigem in [1, 5, 6]) then
      begin
        Result := FCodigosSisbov.RestaurarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
                                                         DadosAnimal.CodEstadoSisbov,
                                                         DadosAnimal.CodMicroRegiaoSisbov,
                                                         DadosAnimal.CodAnimalSisbov);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1039, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1039;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 15 - Manejo Sanitario        *
// **************************************************
function TIntAnimais.VerificaSanitario(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaSanitario';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteSanitario(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteSanitario';
var
  Q, Q1 : THerdomQuery;
  X : Integer;
  Erro : Boolean;
  Msg : String;
begin
  Erro := False;
  Msg := '';

  For X := 0 to MAX_SUBEVENTOS do begin
    if DadosEvento.DadosSubEventoSanitario[X].CodEntradaInsumo <= 0 then Break;
    if DadosEvento.DadosSubEventoSanitario[X].IndSexoAnimalAplicacao <> 'A' then begin
      if DadosEvento.DadosSubEventoSanitario[X].IndSexoAnimalAplicacao <> DadosAnimal.IndSexo then begin
        Msg := Msg + 'Sexo do animal é incompatível com o insumo ' +
               DadosEvento.DadosSubEventoSanitario[X].DesInsumo;
        if DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo <> '' then begin
          Msg := Msg + ' (' + DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo + ')';
        end;
        Msg := Msg + ' para o sub evento santiário ' +
               DadosEvento.DadosSubEventoSanitario[X].DesTipoSubEventoSanitario + '. ' + #13#10;
        Erro := True;
      end;
    end;
  end;

  if Erro then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, Msg, 'N');
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    Q1 := THerdomQuery.Create(Conexao, nil);
    try
      try
        {$IFDEF MSSQL}
        Q.SQL.Add('select top 1 datediff(day, dta_evento, :dta_evento_atual) as qtd_dias ' +
                  '  from tab_animal_tipo_insumo ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ' +
                  '   and cod_tipo_insumo = :cod_tipo_insumo ' +
                  '   and cod_sub_tipo_insumo = :cod_sub_tipo_insumo ' +
                  '   and dta_evento < :dta_evento_atual ' +
                  ' order by dta_evento desc ');
        {$ENDIF}

        {$IFDEF MSSQL}
        Q1.SQL.Add('select top 1 datediff(day, :dta_evento_atual, dta_evento) as qtd_dias ' +
                   '  from tab_animal_tipo_insumo ' +
                   ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   '   and cod_animal = :cod_animal ' +
                   '   and cod_tipo_insumo = :cod_tipo_insumo ' +
                   '   and cod_sub_tipo_insumo = :cod_sub_tipo_insumo ' +
                   '   and dta_evento >= :dta_evento_atual ' +
                   ' order by dta_evento ');
        {$ENDIF}

        Msg := '';
        For X := 0 to MAX_SUBEVENTOS do begin
          if DadosEvento.DadosSubEventoSanitario[X].CodEntradaInsumo <= 0 then Break;
          // Verifica se a aplicação do insumo antes da data do evento atual
          // dentro do período mínimo recomendado entre as aplicações
          Q.Close;
          Q.ParamByName('dta_evento_atual').AsDateTime := DadosEvento.DtaInicio;
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
          Q.ParamByName('cod_tipo_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodTipoInsumo;
          if DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo > 0 then begin
            Q.ParamByName('cod_sub_tipo_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo;
          end else begin
            Q.ParamByName('cod_sub_tipo_insumo').DataType := ftInteger;
            Q.ParamByName('cod_sub_tipo_insumo').Clear;
          end;
          Q.Open;

          if not Q.IsEmpty then begin
            if Q.FieldByName('qtd_dias').AsInteger < DadosEvento.DadosSubEventoSanitario[X].QtdIntervaloMinimoAplicacao then begin
              Msg := Msg + 'O animal sofreu aplicação de ' + DadosEvento.DadosSubEventoSanitario[X].DesInsumo;
              if DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo <> '' then begin
                Msg := Msg + ' (' + DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo + ')';
              end;
              Msg := Msg + ' a ' + IntToStr(Q.FieldByName('qtd_dias').AsInteger) + ' dia(s) entretanto o intervalo mínimo recomendado entre as aplicações é de ' +
                     IntToStr(DadosEvento.DadosSubEventoSanitario[X].QtdIntervaloMinimoAplicacao) + ' dia(s). ' + #13#10;
            end;
          end;

          // Verifica se a aplicação do insumo após a data do evento atual
          // dentro do período mínimo recomendado entre as aplicações
          Q1.Close;
          Q1.ParamByName('dta_evento_atual').AsDateTime := DadosEvento.DtaInicio;
          Q1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q1.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
          Q1.ParamByName('cod_tipo_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodTipoInsumo;
          if DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo > 0 then begin
            Q1.ParamByName('cod_sub_tipo_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo;
          end else begin
            Q1.ParamByName('cod_sub_tipo_insumo').DataType := ftInteger;
            Q1.ParamByName('cod_sub_tipo_insumo').Clear;
          end;
          Q1.Open;

          if not Q1.IsEmpty then begin
            if Q1.FieldByName('qtd_dias').AsInteger < DadosEvento.DadosSubEventoSanitario[X].QtdIntervaloMinimoAplicacao then begin
              Msg := Msg + 'Existe uma aplicação de ' + DadosEvento.DadosSubEventoSanitario[X].DesInsumo;
              if DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo <> '' then begin
                Msg := Msg + ' (' + DadosEvento.DadosSubEventoSanitario[X].DesSubTipoInsumo + ')';
              end;
              Msg := Msg + ' registrada ' + IntToStr(Q1.FieldByName('qtd_dias').AsInteger) + ' após a data do evento atual, entretanto o intervalo mínimo recomendado entre as aplicações é de ' +
                     IntToStr(DadosEvento.DadosSubEventoSanitario[X].QtdIntervaloMinimoAplicacao) + ' dia(s). ' + #13#10;
            end;
          end;
        end;

        if Msg <> '' then begin
          Result := InserirMsgAplicacaoEvento(DadosEvento, DadosAnimal, Msg, 'N');
          if Result < 0 then Exit;
        end;

        Result := 0;
      except
        on E: Exception do begin
          Rollback;
          Mensagens.Adicionar(1060, Self.ClassName, NomeMetodo, [E.Message]);
          Result := -1060;
          Exit;
        end;
      end;
    finally
      Q1.Free;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarSanitario(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'AplicarSanitario';
var
  Q : THerdomQuery;
  X : Integer;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_animal_tipo_insumo  ' +
                '     (cod_pessoa_produtor, ' +
                '      cod_evento, ' +
                '      cod_animal, ' +
                '      cod_entrada_insumo, ' +
                '      dta_evento, ' +
                '      cod_tipo_insumo, ' +
                '      cod_sub_tipo_insumo) ' +
                'values ' +
                '     (:cod_pessoa_produtor, ' +
                '      :cod_evento, ' +
                '      :cod_animal, ' +
                '      :cod_entrada_insumo, ' +
                '      :dta_evento, ' +
                '      :cod_tipo_insumo, ' +
                '      :cod_sub_tipo_insumo)');
      {$ENDIF}

      For X := 0 to MAX_SUBEVENTOS do begin
        if DadosEvento.DadosSubEventoSanitario[X].CodEntradaInsumo > 0 then begin
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
          Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
          Q.ParamByName('cod_entrada_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodEntradaInsumo;
          Q.ParamByName('dta_evento').AsDateTime := DadosEvento.DtaInicio;
          Q.ParamByName('cod_tipo_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodTipoInsumo;
          if DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo > 0 then begin
            Q.ParamByName('cod_sub_tipo_insumo').AsInteger := DadosEvento.DadosSubEventoSanitario[X].CodSubTipoInsumo;
          end else begin
            Q.ParamByName('cod_sub_tipo_insumo').DataType := ftInteger;
            Q.ParamByName('cod_sub_tipo_insumo').Clear;
          end;
          Q.ExecSQL;
        end;
      end;

//      Q.SQL.Clear;
//      {$IFDEF MSSQL}
//      Q.SQL.Add('update tab_animal  ' +
//                '   set dta_ultimo_evento = :dta_ultimo_evento, ' +
//                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
//                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
//                '   and cod_animal = :cod_animal ');
//      {$ENDIF}
//      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
//      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
//      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
//      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
//      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1061, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1061;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverSanitario(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverSanitario';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_animal_tipo_insumo  ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ExecSQL;

//      Q.SQL.Clear;
//      {$IFDEF MSSQL}
//      Q.SQL.Add('update tab_animal  ' +
//                '   set dta_ultimo_evento = :dta_ultimo_evento, ' +
//                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
//                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
//                '   and cod_animal = :cod_animal ');
//      {$ENDIF}
//      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
//      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
//      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEvento;
//      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1062, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1062;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 16 - Emissão de Certificado  *
// **************************************************
function TIntAnimais.VerificaEmissaoCertificado(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaEmissaoCertificado';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteEmissaoCertificado(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteEmissaoCertificado';
var VerificaFC: Integer;
begin
  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
//  Consistência retirada, pois, para emissão de certificado, os animais
//  poderão estar em propriedade de terceiros ou aglomerações.
//  if VerificaFC = -100 then begin
//     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
//     Exit;
//  end;

  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;
  // Consiste se o animal é efetivado
  if DadosAnimal.DtaEfetivacaoCadastro <= 0 then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O cadastro do animal ainda não foi efetivado', 'N');
    Exit;
  end;

  if DadosAnimal.DtaIdentificacaoSisbov > DadosEvento.DtaInicio then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A data de identificação do animal no SISBOV é maior que a data do evento. ', 'N');
    Exit;
  end;

  // Verifica se o animal já possui o código de autenticação fornecido pelo SISBOV
  if (Trim(DadosAnimal.CodAutenticacaoSisbov) = '') or (DadosAnimal.DtaInsercaoSisbov = 0) then begin
    Result := ObterDadosAnimalSisbov(DadosAnimal);
    if Result < 0 then begin
      Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal ainda não possui o código de autenticação ou data inserção fornecidos pelo SISBOV.', 'N');
    end;  
    Exit;
  end;

  Result := 0;
end;

function TIntAnimais.AplicarEmissaoCertificado(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarEmissaoCertificado';
begin
  Result := 0;
end;

function TIntAnimais.RemoverEmissaoCertificado(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverEmissaoCertificado';
begin
  Result := 0;
end;

// **************************************************
// * Tratamento evento 17 - Desmame do bezerro      *
// **************************************************
function TIntAnimais.VerificaDesmameBezerro(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaDesmameBezerro';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteDesmameBezerro(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteDesmameBezerro';
begin
  Result := 0;
end;

function TIntAnimais.AplicarDesmameBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarDesmameBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      if DadosAnimal.CodCategoriaAnimal = 6 then begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 7;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(7, DadosAnimal);
      end else if DadosAnimal.CodCategoriaAnimal = 8 then begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 9;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(9, DadosAnimal);
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(974, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -974;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverDesmameBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverDesmameBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(975, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -975;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// *****************************************************
// * Tratamento evento 18 - Desaparecimento do bezerro *
// *****************************************************
function TIntAnimais.VerificaDesaparecimentoBezerro(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaDesaparecimentoBezerro';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteDesaparecimentoBezerro(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteDesaparecimentoBezerro';
begin
  Result := 0;
end;

function TIntAnimais.AplicarDesaparecimentoBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarDesaparecimentoBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      if (DadosAnimal.CodAptidao = 1)
      or (DadosAnimal.CodAptidao = 3)
      or (DadosAnimal.CodAptidao = 6) then begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 7;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(7, DadosAnimal);
      end else begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 9;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(9, DadosAnimal);
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(990, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -990;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverDesaparecimentoBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverDesaparecimentoBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(991, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -991;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ********************************************
// * Tratamento evento 19 - Morte do bezerro  *
// ********************************************
function TIntAnimais.VerificaMorteBezerro(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaMorteBezerro';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteMorteBezerro(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteMorteBezerro';
begin
  Result := 0;
end;

function TIntAnimais.AplicarMorteBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMorteBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      if (DadosAnimal.CodAptidao = 1)
      or (DadosAnimal.CodAptidao = 3)
      or (DadosAnimal.CodAptidao = 6) then begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 7;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(7, DadosAnimal);
      end else begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 9;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(9, DadosAnimal);
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(992, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -992;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverMorteBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverMorteBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(993, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -993;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ********************************************
// * Tratamento evento 20 - Venda do bezerro  *
// ********************************************
function TIntAnimais.VerificaVendaBezerro(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaVendaBezerro';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteVendaBezerro(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteVendaBezerro';
begin
  Result := 0;
end;

function TIntAnimais.AplicarVendaBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarVendaBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      if DadosAnimal.CodCategoriaAnimal = 6 then begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 7;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(7, DadosAnimal);
      end else if DadosAnimal.CodCategoriaAnimal = 8 then begin
        Q.ParamByName('cod_categoria_animal').AsInteger := 9;
        Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(9, DadosAnimal);
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1026, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1026;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverVendaBezerro(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverVendaBezerro';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1027, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1027;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// **************************************************
// * Tratamento evento 21 - Abate de animal vendido *
// **************************************************
function TIntAnimais.VerificaAbateAnimalVendido(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaAbateAnimalVendido';
begin
  Result := 0;
end;

// **************************************************
// * Tratamento evento 22 - Pesagem de animais      *
// **************************************************
function TIntAnimais.VerificaPesagemAnimal(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaPesagemAnimais';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteAbateAnimalVendido(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteAbateAnimalVendido';
begin
  Result := 0;
//  if DadosAnimal.CodCategoriaAnimal <> 12 then begin
//    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A categoria atual do animal não é "Animal Vendido"', 'N');
//    Exit;
//  end;
end;

function TIntAnimais.AplicarAbateAnimalVendido(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarAbateAnimalVendido';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = :cod_categoria_animal, ' +
                  '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_desativacao = :dta_desativacao, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      Q.ParamByName('cod_categoria_animal').AsInteger := DadosEvento.CategoriaDestino.CodCategoriaAnimal;
      Q.ParamByName('ind_apto_cobertura').AsString := CalculaAptoCoberturaAlt(DadosEvento.CategoriaDestino.CodCategoriaAnimal, DadosAnimal);
      if DadosEvento.CategoriaDestino.IndAnimalAtivo = 'N' then begin
        Q.ParamByName('dta_desativacao').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1036, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1036;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverAbateAnimalVendido(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverAbateAnimalVendido';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria_animal, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;
      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1037, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1037;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// *******************************************************
// * Tratamento evento 23 - Cobertura em Regime de Pasto *
// *******************************************************
function TIntAnimais.VerificaCoberturaRegPasto(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaCoberturaRegPasto';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteCoberturaRegPasto(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteCoberturaRegPasto';
var
  Q : THerdomQuery;
  DtaInicio: TDateTime;
  VerificaFC : Integer;
  TipoMae : String;
begin
  TipoMae := '';

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
    Exit;
  end;
  if VerificaFC = -200 then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
    Exit;
  end;

  // Verifica se a vaca está nas categoria válidas para este evento
  if not(DadosAnimal.CodCategoriaAnimal in [5, 6, 7, 8, 9]) then
  begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A categoria do animal não é compatível com este evento.', 'N');
    Exit;
  end;
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.Close;
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select te.dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_tipo_evento in (23,26,27) ' +
                '   and tae.cod_animal = :cod_animal ' +
                '   and te.dta_inicio <= :dta_inicio ' +
                '   and te.dta_fim >= :dta_inicio ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').asinteger := DadosAnimal.CodAnimal;
      Q.ParamByName('dta_inicio').asdatetime := DadosEvento.DtaInicio;
      Q.Open;
      if not Q.IsEmpty then
      begin
        Result:= InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A vaca já possui um evento de cobertura neste período.', 'N');
        Exit;
      end;
      // Verifica se o animal está apto para reprodução
      Q.Close;
      Q.SQL.Clear;
      Q.SQL.Add('select ind_apto_cobertura from tab_animal ' +
                ' where cod_animal = :cod_animal ' +
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   dta_fim_validade is null ');
      Q.ParamByName('cod_animal').asInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if Q.FieldByName('ind_apto_cobertura').asstring = 'N' then begin
         Q.Close;
         Q.SQL.Clear;
         Q.SQL.Add('select max(dta_inicio) as dta_inicio '+
                   ' from tab_animal_evento as tae, tab_evento as te ' +
                   ' where tae.cod_animal = :cod_animal ' +
                   ' and   tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   ' and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
                   ' and   tae.cod_evento = te.cod_evento '+
                   ' and   te.cod_tipo_evento = 28 ');
         Q.ParamByName('cod_animal').asInteger := DadosAnimal.CodAnimal;
         Q.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
         Q.Open;
         if not Q.IsEmpty then begin
            if Q.FieldByName('dta_inicio').asdatetime <= DadosEvento.DtaInicio - StrtoInt(ValorParametro(60)) then begin
               Q.close;
               Q.SQL.Clear;
               Q.SQL.Add(' update tab_animal set ind_apto_cobertura = ''S'' '+
                         ' where cod_animal = :cod_animal ' +
                         ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
               Q.Parambyname('cod_animal').asinteger := DadosAnimal.CodAnimal;
               Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
               Q.ExecSQL;

               Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A fêmea possui diagnóstico de prenha a mais de '+ValorParametro(60)+' dias sem a ocorrência de parto. O mesmo foi desconsiderado para lançamento da cobertura.', 'N',1);
            end else begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A fêmea está prenha (não está apta para reprodução).', 'N');
              Exit;
            end;
         end else begin
           Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A fêmea está prenha (não está apta para reprodução).', 'N');
           Exit;
         end;
      end;

      // Verifica se a fêmea está no período reprodutivo
      Q.Close;
      Q.SQL.Clear;
      Q.SQL.Add('select max(te.dta_inicio) dta_inicio from tab_evento as te, tab_animal_evento as tae ' +
                ' where tae.cod_animal = :cod_animal ' +
                ' and   tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_tipo_evento in (30) ' + //Fazer: eventos de parto e aborto
                ' and   tae.cod_evento = te.cod_evento ' +
                ' and   te.dta_inicio < :dta_inicio ' +
                ' and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
      Q.ParamByName('cod_animal').asInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('dta_inicio').asDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.IsEmpty then begin
         if not Q.FieldByName('dta_inicio').isnull then begin
            DtaInicio := Q.FieldbyName('dta_inicio').AsDateTime;
            Q.Close;
            Q.SQL.Clear;
            Q.SQL.Add('select qtd_dias_descanso_reprodutivo from tab_produtor ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
            Q.Open;
            if (DadosEvento.DtaInicio - DtaInicio) <= Q.FieldByName('qtd_dias_descanso_reprodutivo').asinteger then begin
               Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal está no período de descanso reprodutivo.', 'N');
               Exit;
            end;
         end;
      end;

      //verifica se a fêmea teve uma evento de cobertura em regime de pasto menos de d dias
      Q.Close;
      Q.SQL.Clear;
      Q.SQL.Add('select max(te.dta_inicio) dta_inicio from tab_evento as te, tab_animal_evento as tae ' +
                ' where tae.cod_animal = :cod_animal ' +
                ' and   tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_tipo_evento = 23 ' +
                ' and   te.dta_inicio < :dta_inicio ' +
                ' and   tae.cod_evento = te.cod_evento ' +
                ' and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
      Q.ParamByName('cod_animal').asInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('dta_inicio').asDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.IsEmpty then begin
         DtaInicio := Q.FieldbyName('dta_inicio').AsDateTime;
         Q.Close;
         Q.SQL.Clear;
         Q.SQL.Add('select qtd_dias_entre_coberturas from tab_produtor ' +
                   ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
         Q.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
         Q.Open;
         if (DadosEvento.DtaInicio - DtaInicio) <= Q.FieldByName('qtd_dias_entre_coberturas').asinteger then begin
             if (DtaInicio - DadosEvento.DtaInicio < StrtoInt(ValorParametro(61))) or (DtaInicio - DadosEvento.DtaInicio > StrtoInt(ValorParametro(62))) then
                Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O animal teve um evento de cobertura a ' + Floattostr(DadosEvento.DtaInicio - DtaInicio) + ' dias.', 'N');
         end;
      end;

      // Verifica se a fêmea informada está relacionada ao evento de estação de monta correspondente
      Q.Close;
      Q.SQL.Text :=
        'select '+
        '  1 '+
        'from '+
        '  tab_animal_evento '+
        'where '+
        '  cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and cod_evento = :cod_evento '+
        '  and cod_animal = :cod_animal ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEventoAssociado;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.Open;
      if Q.IsEmpty then begin
         Result:= InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A vaca não está associada ao evento de estação de monta correspondente.', 'N');
         Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1441, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1441;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarCoberturaRegPasto(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarEstacaoMonta';
begin
  Result := 0;
end;

function TIntAnimais.RemoverCoberturaRegPasto(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverCoberturaRegPasto';
begin
  Result := 0;
end;
// ***************************************************
// * Tratamento evento 24 - Estação de monta         *
// ***************************************************
function TIntAnimais.VerificaEstacaoMonta(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaEstacaoMonta';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteEstacaoMonta(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'ConsisteEstacaoMonta';
var
  Q : THerdomQuery;
  TipoMae : String;
  VerificaFC : Integer;
begin
  TipoMae := '';

  // Verifica categoria do animal
  if not ((DadosAnimal.CodCategoriaAnimal = 5) or (DadosAnimal.CodCategoriaAnimal = 7) or (DadosAnimal.CodCategoriaAnimal = 9) or (DadosAnimal.CodCategoriaAnimal = 6) or (DadosAnimal.CodCategoriaAnimal = 8)) then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não possui categoria necessária para aplicação no evento ', 'N');
     Exit;
  end;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se o animal está associado a outro evento deste tipo no mesmo perído.
      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select 1 ');
      Q.SQL.Add('from tab_animal_evento as tae, tab_evento as te ');
      Q.SQL.Add('where tae.cod_evento = te.cod_evento ');
      Q.SQL.Add('and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
      Q.SQL.Add('and   te.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('and   te.dta_inicio <= :dta_fim ');
      Q.SQL.Add('and   te.dta_fim >= :dta_inicio ');
      Q.SQL.Add('and   tae.cod_animal = :cod_animal ');
      Q.SQL.Add('and   te.cod_tipo_evento = 24 ');

      Q.Parambyname('cod_pessoa_produtor').asinteger :=  Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger :=  DadosAnimal.CodAnimal;
      Q.Parambyname('dta_inicio').asdatetime :=  DadosEvento.DtaInicio;
      Q.Parambyname('dta_fim').asdatetime :=  DadosEvento.DtaFim;

      Q.open;

      if not Q.IsEmpty then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal já está associado a um evento de Estação de Monta neste período ', 'N');
        Exit;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1352, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1352;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarEstacaoMonta(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarEstacaoMonta';
begin
  Result := 0;
end;

function TIntAnimais.RemoverEstacaoMonta(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverEstacaoMonta';
begin
  Result := 0;
end;

// ***************************************************
// * Tratamento evento 25 - Exame Andrologico        *
// ***************************************************
function TIntAnimais.VerificaExameAndrologico(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaExameAndrologico';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteExameAndrologico(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento; IndDiagnostico:String): Integer;
const
  NomeMetodo : String = 'ConsisteExameAndrologico';
var
  VerificaFC: Integer;
begin
  DadosAnimal.IndTouroApto := IndDiagnostico;
  // Verifica categoria do animal
  if not (DadosAnimal.CodCategoriaAnimal = 4) then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não possui categoria necessária para aplicação no evento ', 'N');
     exit;
  end;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Result := 0;
end;

function TIntAnimais.AplicarExameAndrologico(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; IndTouroApto:String; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarExameAndrologico';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      if IndTouroApto = 'S'
         then Q.ParamByName('ind_apto_cobertura').AsString := 'S'
         else Q.ParamByName('ind_apto_cobertura').AsString := 'N';

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1459, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1459;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverExameAndrologico(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverExameAndrologico';
var
  Q : THerdomQuery;
  IndTouroApto: String;
begin
  IndTouroApto := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select tae.ind_touro_apto, te.dta_inicio  ' +
               '  from tab_evento te, ' +
               '       tab_animal_evento tae ' +
               ' where te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
               '   and te.cod_evento = tae.cod_evento ' +
               '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               '   and tae.cod_animal = :cod_animal ' +
               '   and te.cod_evento != :cod_evento ' +
               '   and te.cod_tipo_evento = 25 ' +
               '   order by te.dta_inicio desc');
      {$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.Open;
      if not Q.FieldByName('ind_touro_apto').isnull then
         IndTouroApto := Q.FieldByName('ind_touro_apto').asstring;

      Q.Close;
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                  '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      if IndTouroApto = 'N'
         then Q.ParamByName('ind_apto_cobertura').AsString := 'N'
         else Q.ParamByName('ind_apto_cobertura').AsString := 'S';

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1462, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1462;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************************
// * Tratamento evento 28 - Diagnostico de prenhez   *
// ***************************************************
function TIntAnimais.VerificaDiagnosticoPrenhez(DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaDiagnosticoPrenhez';
begin
  Result := 0;
end;

function TIntAnimais.ConsisteDiagnosticoPrenhez(
  var DadosAnimal: TDadosAnimal; var DadosEvento: TDadosEvento; IndDiagnostico:String): Integer;
const
  NomeMetodo : String = 'ConsisteDiagnosticoPrenhez';
var
  Q : THerdomQuery;
  DtaEventoMonta : Tdatetime;
  VerificaFC, MaxGestacao : Integer;
begin
  DtaEventoMonta := 0;
  DadosAnimal.IndVacaPrenha := IndDiagnostico;
  // Verifica categoria do animal
  if not ((DadosAnimal.CodCategoriaAnimal = 5) or (DadosAnimal.CodCategoriaAnimal = 7) or (DadosAnimal.CodCategoriaAnimal = 9) or (DadosAnimal.CodCategoriaAnimal = 6) or (DadosAnimal.CodCategoriaAnimal = 8)) then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não possui categoria necessária para aplicação no evento ', 'N');
     Exit;
  end;

  if (DadosAnimal.CodCategoriaAnimal = 6) or (DadosAnimal.CodCategoriaAnimal = 8) then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal é uma vaca seca ou uma vaca em lactação.', 'N',1);
     if Result < 0 then
        Exit;
  end;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se a fêmea informada está relacionada ao evento de estação de monta correspondente
      Q.Close;
      Q.SQL.Text :=
        'select '+
        '  1 '+
        'from '+
        '  tab_animal_evento '+
        'where '+
        '  cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and cod_evento = :cod_evento '+
        '  and cod_animal = :cod_animal ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEventoAssociado;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.Open;
      if Q.IsEmpty then begin
         Result:= InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A vaca não está associada ao evento de estação de monta correspondente.', 'N');
         Exit;
      end;

      // Verifica se existe evento de estação de monta há pelo menos o período máximo de gestação da raça em dias.
      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select qtd_max_dias_gestacao ' +
                ' from tab_raca ' +
                ' where cod_raca = :cod_raca ');
      Q.ParamByName('cod_raca').asinteger := DadosAnimal.CodRaca;
      Q.Open;
      MaxGestacao := Q.FieldByName('Qtd_max_dias_gestacao').asinteger;

      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select min(dta_inicio) as dta_evento ');
      Q.SQL.Add('from tab_animal_evento as tae, tab_evento as te ');
      Q.SQL.Add('where tae.cod_evento = te.cod_evento ');
      Q.SQL.Add('and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
      Q.SQL.Add('and   te.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('and   te.dta_inicio <= :dta_evento ');
      Q.SQL.Add('and   te.dta_inicio >= :dta_minima ');
      Q.SQL.Add('and   tae.cod_animal = :cod_animal ');
      Q.SQL.Add('and   te.cod_tipo_evento in (23,27,26) ');

      Q.Parambyname('cod_pessoa_produtor').asinteger :=  Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger :=  DadosAnimal.CodAnimal;
      Q.Parambyname('dta_evento').asdatetime :=  DadosEvento.DtaInicio;
      Q.Parambyname('dta_minima').asdatetime :=  DadosEvento.DtaInicio - MaxGestacao;

      Q.open;

      //verifica se a mais antiga estação de monta está a N dias do diagnóstico de prenhez
      //onde N = dias para diagnóstico de gestação
      if Q.FieldByName('dta_evento').isnull
         then Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Não existe cobertura cadastrada para o animal que está recebendo diagnóstico de prenhez.', 'N',1)
         else DtaEventoMonta := Q.FieldbyName('dta_evento').asdatetime;

      if not Q.FieldByName('dta_evento').isnull then begin
         Q.Close;
         Q.SQL.Clear;
         Q.SQL.Add('select qtd_dias_diagnostico_gestacao ' +
                   'from tab_produtor ' +
                   'where cod_pessoa_produtor = :cod_pessoa_produtor');
         Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
         Q.Open;

         if (DadosEvento.DtaInicio-Q.FieldByName('qtd_dias_diagnostico_gestacao').asinteger) < DtaEventoMonta then begin
           Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não possui cobertura que dê condições para realizar um diagnóstico de prenhez.', 'N');
           Exit;
         end;
      end;

      //verifica se existe outro diagnóstico de prenhez a N dias one N é o máximo período de gestação da raça
      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select te.dta_inicio, tae.ind_vaca_prenha ');
      Q.SQL.Add('from tab_animal_evento as tae, tab_evento as te ');
      Q.SQL.Add('where tae.cod_evento = te.cod_evento ');
      Q.SQL.Add('and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
      Q.SQL.Add('and   te.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('and   te.dta_inicio < :dta_evento ');
      Q.SQL.Add('and   te.dta_inicio >= :dta_minima ');
      Q.SQL.Add('and   tae.cod_animal = :cod_animal ');
      Q.SQL.Add('and   te.cod_tipo_evento = 28 ');

      Q.Parambyname('cod_pessoa_produtor').asinteger :=  Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger :=  DadosAnimal.CodAnimal;
      Q.Parambyname('dta_evento').asdatetime :=  DadosEvento.DtaInicio;
      Q.Parambyname('dta_minima').asdatetime :=  DadosEvento.DtaInicio - MaxGestacao;

      Q.open;

      if not Q.IsEmpty then begin
         if Q.FieldByName('ind_vaca_prenha').asstring <> IndDiagnostico
            then Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Existe um diagnóstico de prenhez para este animal em '+Q.FieldByName('dta_inicio').asstring + ' com resultado diferente deste.', 'N',1)
            else Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Existe um diagnóstico de prenhez para este animal em '+Q.FieldByName('dta_inicio').asstring + ' com resultado igual a este.', 'N',1);
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1460, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1460;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarDiagnosticoPrenhez(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; IndVacaPrenha:String; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarDiagnosticoPrenhez';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                  '   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      if IndVacaPrenha = 'S'
         then Q.ParamByName('ind_apto_cobertura').AsString := 'N'
         else Q.ParamByName('ind_apto_cobertura').AsString := 'S';

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1461, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1461;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverDiagnosticoPrenhez(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverDiagnosticoPrenhez';
var
  Q : THerdomQuery;
  IndVacaPrenha: String;
begin
  IndVacaPrenha := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select tae.ind_vaca_prenha, te.dta_inicio  ' +
               '  from tab_evento te, ' +
               '       tab_animal_evento tae ' +
               ' where te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
               '   and te.cod_evento = tae.cod_evento ' +
               '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               '   and tae.cod_animal = :cod_animal ' +
               '   and te.cod_evento != :cod_evento ' +
               '   and te.cod_tipo_evento = 28 ' +
               '   order by te.dta_inicio desc');
      {$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.Open;
      if not Q.FieldByName('ind_vaca_prenha').isnull then
         IndVacaPrenha := Q.FieldByName('ind_vaca_prenha').asstring;

      Q.Close;
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                  '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_animal = :cod_animal ');
        {$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      if IndVacaPrenha = 'S'
         then Q.ParamByName('ind_apto_cobertura').AsString := 'N'
         else Q.ParamByName('ind_apto_cobertura').AsString := 'S';

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1458, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1458;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

//************************************************************************
//* Evento de Cobertura por Monta Controlada
//************************************************************************
function TIntAnimais.RemoverCoberturaMontaControlada(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverCoberturaMontaControlada';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1488, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1488;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

//************************************************************************
//* Evento de Inseminação Artificial
//************************************************************************
function TIntAnimais.RemoverCoberturaInseminArtificial(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverCoberturaInseminArtificial';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1489, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1489;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

// ***************************************
// * Tratamento evento 30 - Parto        *
// ***************************************
function TIntAnimais.RemoverParto(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverParto';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1601, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1601;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


// ***************************************
// * Tratamento evento 33 - Descarte     *
// ***************************************
function TIntAnimais.ConsisteDescarte(var DadosAnimal: TDadosAnimal;
  var DadosEvento: TDadosEvento): Integer;
var VerificaFC:Integer;
begin
  Result := 0;

  VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
  if VerificaFC = -100 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
     Exit;
  end;
  if VerificaFC = -200 then begin
     Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
     Exit;
  end;

  // Verifica categoria do animal
  if DadosAnimal.CodCategoriaAnimal in [11,12,13,14] then begin
    Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este tipo de só pode ser aplicado em animais ativos e com categoria diferente de descarte.', 'N');
    Exit;
  end;
end;

function TIntAnimais.AplicarDescarte(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; AplicarAnimaisAssociados: Boolean): Integer;
const
  NomeMetodo : String = 'AplicarMudancaCategoria';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try

      Q.SQL.Clear;
      if AplicarAnimaisAssociados then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = 11, ' +
                  '       ind_apto_cobertura = ''N'', ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  '  from tab_animal ta, ' +
                  '       tab_animal_evento tae ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
        end;
        Q.SQL.Add('   and ta.cod_animal = tae.cod_animal ' +
                  '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and tae.cod_evento = :cod_evento ' +
                  '   and tae.dta_aplicacao_evento = :dta_aplicacao_evento ');
        {$ENDIF}
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.ParamByName('dta_aplicacao_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;
      end else begin
        {$IFDEF MSSQL}
        Q.SQL.Add('update tab_animal  ' +
                  '   set cod_categoria_animal = 11, ' +
                  '       ind_apto_cobertura = ''N'', ' +
                  '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                  '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                  ' where (1 = 1) ');
        if (not (DadosAnimal.CodPessoaCorrente > 0)) or
           (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
        begin
          Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
        end
        else
        begin
          Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
        end;

        Q.SQL.Add('   and cod_animal = :cod_animal ');
        {$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosEvento.DtaInicio;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosEvento.DtaAplicacaoEvento;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1600, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1600;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RemoverDescarte(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'RemoverDescarte';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal  ' +
                '   set cod_categoria_animal = :cod_categoria, ' +
                '       ind_apto_cobertura = :ind_apto_cobertura, ' +
                '       dta_desativacao = :dta_desativacao, ' +
                '       dta_ultimo_evento = :dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento = :dta_aplicacao_ultimo_evento ' +
                ' where (1 = 1) ');
      if (not (DadosAnimal.CodPessoaCorrente > 0)) or
         (DadosAnimal.CodPessoaProdutor = Conexao.CodProdutorTrabalho) then
      begin
        Q.SQL.Add(' and cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else
      begin
        Q.SQL.Add(' and cod_pessoa_corrente = :cod_pessoa_produtor ');
      end;

      Q.SQL.Add('   and cod_animal = :cod_animal ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      Q.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        if DadosAnimal.DtaDesativacao > 0 then begin
          Q.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
        end else begin
          Q.ParamByName('dta_desativacao').DataType := ftDateTime;
          Q.ParamByName('dta_desativacao').Clear;
        end;
      end else begin
        Q.ParamByName('dta_desativacao').DataType := ftDateTime;
        Q.ParamByName('dta_desativacao').Clear;
      end;

      if DadosAnimal.DtaUltimoEventoAnterior > 0 then begin
        Q.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEventoAnterior;
      end else begin
        Q.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_ultimo_evento').Clear;
      end;
      if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
      end else begin
        Q.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
        Q.ParamByName('dta_aplicacao_ultimo_evento').Clear;
      end;

      Q.ParamByName('cod_categoria').AsInteger := DadosAnimal.CodCategoriaAnimal;

      Q.ExecSQL;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(874, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -874;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

//***************************
//* FIM TRATAMENTOS EVENTOS *
//***************************

function TIntAnimais.PesquisarRelatorio(CodFazendaManejo: Integer;
  CodManejoInicio, CodManejoFim, CodAnimalCertificadora: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer;
  CodSituacaoSisbov: String; DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
  CodFazendaNascimento: Integer; DtaCompraInicio, DtaCompraFim: TDateTime;
  CodPessoaSecundariaCriador: Integer; NomAnimal, DesApelido: String;
  CodAptidao: Integer; CodRaca, IndSexo, CodOrigem, SglFazendaPai: String;
  CodAnimalPai, DesApelidoPai, SglFazendaMae: String; CodAnimalMae,
  IndAnimalCastrado: String; CodRegimeAlimentar: Integer; CodCategoria: String;
  IndConsiderarExterno:String; CodAssociacao, CodGrauSangue: Integer;
  NumRGD: String; CodTipoLugar: Integer; CodLocal, CodLote: String;
  CodFazendaCorrente: Integer; NumImovelCorrente: String;
  CodLocalizacaoCorrente: Integer;  NumCPFCNPJCorrente,
  IndCadastroEfetivado, CodOrdenacao: String; CodEvento: Integer;
  IndEventoAplicado, IndAnimaisEvento: String;IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
  IndAptoCobertura, IndAutenticacao: String;
  IndAnimalSemTecnico: String; CodPessoaTecnico: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorio';
  CodRelatorio: Integer = 1;
var
  X: Integer;
  sSQL: String;
  bPersonalizavel, bTemporaria: Boolean;
  IntRelatorios: TIntRelatorios;
  CodTecnico: Integer;
  strOrderBy: String;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  CodTecnico := CodPessoaTecnico;
  if (Conexao.CodPapelUsuario = 3) and (CodPessoaTecnico > 0) then begin
    CodTecnico := Conexao.CodPessoa;
  end;

  if CodEvento <= 0 then begin
     IndEventoAplicado := '';
     IndAnimaisEvento := '';
  end;
  if IndEventoAplicado <> 'A' then begin
     IndAnimaisEvento := '';
  end;
  if CodTipoLugar = 1 then begin
    NumCPFCNPJCorrente := '';
    NumImovelCorrente  := '';
    CodLocalizacaoCorrente := -1;
  end else if CodTipoLugar = 2 then begin
    NumCPFCNPJCorrente := '';
    CodLocal           := '';
    CodLote            := '';
    CodFazendaCorrente := -1;
  end else if CodTipoLugar = 3 then begin
    NumImovelCorrente  := '';
    CodLocalizacaoCorrente := -1;
    CodLocal           := '';
    CodLote            := '';
    CodFazendaCorrente := -1;
  end else begin
    NumCPFCNPJCorrente := '';
    NumImovelCorrente  := '';
    CodLocalizacaoCorrente := -1;
    CodLocal           := '';
    CodLote            := '';
    CodFazendaCorrente := -1;
  end;

  if CodLocal <> '' then
     CodFazendaCorrente := -1;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    // Monta o order by
    strOrderBy := '';
    IntRelatorios.IrAoPrimeiro;
    while not IntRelatorios.EOF do begin
      if IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S' then
      begin
        if strOrderBy = '' then
          strOrderBy := ' '
        else
          strOrderBy := strOrderBy + ', ';
        strOrderBy := strOrderBy + IntRelatorios.ValorCampo('NomField');
      end;
      IntRelatorios.IrAoProximo;
    end;
    IntRelatorios.IrAoPrimeiro;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');
    bTemporaria := (not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1)
      or (IntRelatorios.CampoAssociado(26) = 1) or (IntRelatorios.CampoAssociado(27) = 1)
      or (IntRelatorios.CampoAssociado(44) = 1) or (IntRelatorios.CampoAssociado(45) = 1));

    Query.Close;
{$IFDEF MSSQL}
   Query.SQL.Clear;
   if bTemporaria then begin
      // Cria temporária caso não exista
      sSQL :=
        #13#10'if object_id(''tempdb..#tmp_animais_pesquisar_relatorio'') is null '+
        #13#10'  create table #tmp_animais_pesquisar_relatorio '+
        #13#10'  ( '+
        #13#10'    CodPessoaProdutor int '+     
        #13#10'    , CodAnimal int '+
        #13#10'    , NomReduzidoTecnico varchar(15) null ' +
        #13#10'    , CodAnimalManejo varchar(11) null '+
        #13#10'    , CodCertificadora varchar(20) null '+
        #13#10'    , CodAnimalSisBov varchar(21) null '+
        #13#10'    , CodSituacaoSisBov char(1) null '+
        #13#10'    , DtaIdentificacaoSisbov smalldatetime null '+
        #13#10'    , DtaNascimento smalldatetime null '+
        #13#10'    , SglFazendaNascimento char(2) null '+
        #13#10'    , NomFazendaNascimento varchar(50) null '+
        #13#10'    , DtaCompra smalldatetime null '+
        #13#10'    , NomReduzidoCriador varchar(15) null '+
        #13#10'    , NomAnimal varchar(60) null '+
        #13#10'    , DesApelido varchar(20) null '+
        #13#10'    , SglAssociacaoRaca varchar(10) null '+
        #13#10'    , SglGrauSangue char(5) null '+
        #13#10'    , NumRGD varchar(20) null '+
        #13#10'    , SglRaca char(3) null '+
        #13#10'    , DesRaca varchar(35) null '+
        #13#10'    , SglAptidao char(3) null '+
        #13#10'    , DesAptidao varchar(15) null '+
        #13#10'    , SglCategoria char(3) null '+
        #13#10'    , DesCategoria varchar(25) null '+
        #13#10'    , IndSexo char(1) null '+
        #13#10'    , SglOrigem char(3) null '+
        #13#10'    , DesOrigem varchar(10) null '+
        #13#10'    , cod_animal_pai int null '+
        #13#10'    , cod_reprodutor_multiplo int null '+
        #13#10'    , CodAnimalManejoPai varchar(11) null '+
        #13#10'    , NomAnimalPai varchar(60) null '+
        #13#10'    , DesApelidoPai varchar(20) null '+
        #13#10'    , cod_animal_mae int null '+
        #13#10'    , CodAnimalManejoMae varchar(11) null '+
        #13#10'    , cod_animal_receptor int null '+
        #13#10'    , CodAnimalManejoReceptor varchar(11) null '+
        #13#10'    , IndAnimalCastrado char(1) null '+
        #13#10'    , SglRegimeAlimentar char(6) null '+
        #13#10'    , DesRegimeAlimentar varchar(50) null '+
        #13#10'    , SglTipoLugar char(3) null '+
        #13#10'    , DesTipoLugar varchar(25) null '+
        #13#10'    , SglLote char(2) null '+
        #13#10'    , DesLote varchar(30) null '+
        #13#10'    , SglLocal char(2) null '+
        #13#10'    , DesLocal varchar(30) null '+
        #13#10'    , SglFazendaCorrente char(2) null '+
        #13#10'    , NomFazendaCorrente varchar(50) null '+
        #13#10'    , NumCNPJCPFCorrente varchar(18) null '+
        #13#10'    , NumImovelCorrente varchar(13) null '+ { Fábio - 14/07/2004 - Alteração do tamanho do campo de 8 para 13 }
        #13#10'    , CodLocalizacaoCorrente int null '+ { Fábio - 18/01/2005 - Inclusão da localização SISBOV }
        #13#10'    , IndEventoAplicado char(1) null '+
        #13#10'    , Idade varchar(7) null '+
        #13#10'    , DesComposicaoRacial varchar(50) null '+
        #13#10'    , TxtObservacao varchar(30) null '+
        #13#10'    , DtaCadastramento datetime null '+        
        #13#10'  ) ';
      Query.SQL.Clear;
      Query.SQL.Add(sSQL);
      Query.ExecSQL;
      // Limpa a tabela
      sSQL :=
        #13#10'truncate table #tmp_animais_pesquisar_relatorio ';
      Query.SQL.Clear;
      Query.SQL.Add(sSQL);
      Query.ExecSQL;
      sSQL :=
        #13#10'insert into #tmp_animais_pesquisar_relatorio '+
        #13#10'  ( '+
        #13#10'     CodPessoaProdutor '+
        #13#10'     , CodAnimal ' +
        #13#10'     , NomReduzidoTecnico ';
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(1) = 1) then begin // CodAnimalManejo
        sSQL := sSQL +
          #13#10'     , CodAnimalManejo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(2) = 1) then begin // CodCertificadora
        sSQL := sSQL +
          #13#10'     , CodCertificadora ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(3) = 1) then begin // CodAnimalSisBov
        sSQL := sSQL +
          #13#10'     , CodAnimalSisBov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(4) = 1) then begin // CodSituacaoSisBov
        sSQL := sSQL +
          #13#10'     , CodSituacaoSisBov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(5) = 1) then begin // DtaIdentificacaoSisbov
        sSQL := sSQL +
          #13#10'     , DtaIdentificacaoSisbov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(6) = 1) then begin // DtaNascimento
        sSQL := sSQL +
          #13#10'     , DtaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(7) = 1) then begin // SglFazendaNascimento
        sSQL := sSQL +
          #13#10'     , SglFazendaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'     , NomFazendaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(9) = 1) then begin // DtaCompra
        sSQL := sSQL +
          #13#10'     , DtaCompra ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'     , NomReduzidoCriador ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) then begin // NomAnimal
        sSQL := sSQL +
          #13#10'     , NomAnimal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) then begin // DesApelido
        sSQL := sSQL +
          #13#10'     , DesApelido ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'     , SglAssociacaoRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'     , SglGrauSangue ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then begin // NumRGD
        sSQL := sSQL +
          #13#10'     , NumRGD ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(16) = 1) then begin // SglRaca
        sSQL := sSQL +
          #13#10'     , SglRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'     , DesRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(18) = 1) then begin // SglAptidao
        sSQL := sSQL +
          #13#10'     , SglAptidao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'     , DesAptidao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(20) = 1) then begin // SglCategoria
        sSQL := sSQL +
          #13#10'     , SglCategoria ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'     , DesCategoria ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(22) = 1) then begin // IndSexo
        sSQL := sSQL +
          #13#10'     , IndSexo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(23) = 1) then begin // SglOrigem
        sSQL := sSQL +
          #13#10'     , SglOrigem ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'     , DesOrigem ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) or
        (IntRelatorios.CampoAssociado(44) = 1) or (IntRelatorios.CampoAssociado(45) = 1) then begin // CodAnimalManejoPai, DesApelidoPai, NomAnimalPai
        sSQL := sSQL +
          #13#10'     , cod_animal_pai '+
          #13#10'     , cod_reprodutor_multiplo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(26) = 1) then begin // CodAnimalManejoMae
        sSQL := sSQL +
          #13#10'     , cod_animal_mae ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(27) = 1) then begin // CodAnimalManejoReceptor
        sSQL := sSQL +
          #13#10'     , cod_animal_receptor ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(28) = 1) then begin // IndAnimalCastrado
        sSQL := sSQL +
          #13#10'     , IndAnimalCastrado ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(29) = 1) then begin // SglRegimeAlimentar
        sSQL := sSQL +
          #13#10'     , SglRegimeAlimentar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'     , DesRegimeAlimentar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(31) = 1) then begin // SglTipoLugar
        sSQL := sSQL +
          #13#10'     , SglTipoLugar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        sSQL := sSQL +
          #13#10'     , DesTipoLugar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(33) = 1) then begin // SglLote
        sSQL := sSQL +
          #13#10'     , SglLote ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        sSQL := sSQL +
          #13#10'     , DesLote ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(35) = 1) then begin // SglLocal
        sSQL := sSQL +
          #13#10'     , SglLocal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
        sSQL := sSQL +
          #13#10'     , DesLocal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(37) = 1) then begin // SglFazendaCorrente
        sSQL := sSQL +
          #13#10'     , SglFazendaCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
          #13#10'     , NomFazendaCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(39) = 1) then begin // NumCNPJCPFCorrente
        sSQL := sSQL +
          #13#10'     , NumCNPJCPFCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(40) = 1) then begin // NumImovelCorrente
        sSQL := sSQL +
          #13#10'     , NumImovelCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(48) = 1) then begin // CodLocalizacaoCorrente
        sSQL := sSQL +
          #13#10'     , CodLocalizacaoCorrente ';
      end;
      sSQL := sSQL +
        #13#10'     , IndEventoAplicado ';
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(42) = 1) then begin // Idade
        sSQL := sSQL +
          #13#10'     , Idade ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(43) = 1) then begin // Idade
        sSQL := sSQL +
          #13#10'     , DesComposicaoRacial ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(46) = 1) then begin // Observacao
        sSQL := sSQL +
          #13#10'  , TxtObservacao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(47) = 1) then begin // Observacao
        sSQL := sSQL +
          #13#10'  , DtaCadastramento ';
      end;

      sSQL := sSQL +
        #13#10'  ) ';
      Query.SQL.Clear;
      Query.SQL.Add(sSQL);
    end;
    sSQL :=
      #13#10'select '+
      #13#10'  ta.cod_pessoa_produtor as CodPessoaProdutor '+
      #13#10'  , ta.cod_animal as CodAnimal ' +
      #13#10'  , ttec.nom_reduzido_pessoa as NomReduzidoTecnico ';
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(1) = 1) then begin // CodAnimalManejo
      sSQL := sSQL +
        #13#10'  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodAnimalManejo ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(2) = 1) then begin // CodCertificadora
      sSQL := sSQL +
        #13#10'  , ta.cod_animal_certificadora as CodCertificadora ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(3) = 1) then begin // CodAnimalSisBov
      sSQL := sSQL +
        #13#10' , case ta.cod_animal_sisbov '+
        #13#10'    when null then null '+
        #13#10'    else '+
        #13#10'      case ta.cod_micro_regiao_sisbov when -1 '+
        #13#10'        then '+
        #13#10'           right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) + '' '' + '+
        #13#10'           right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + '+
        #13#10'           right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) +  '' '' + '+
        #13#10'           right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) '+
        #13#10'        else '+
        #13#10'          right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + '+
        #13#10'          right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) + '' '' + '+
        #13#10'          right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '' '' + '+
        #13#10'          right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) '+
        #13#10'        end '+
        #13#10'    end as CodAnimalSisbov ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(4) = 1) then begin // CodSituacaoSisBov
      sSQL := sSQL +
        #13#10'  , ta.cod_situacao_sisBov as CodSituacaoSisBov ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(5) = 1) then begin // DtaIdentificacaoSisbov
      sSQL := sSQL +
        #13#10'  , ta.dta_identificacao_sisbov as DtaIdentificacaoSisbov ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(6) = 1) then begin // DtaNascimento
      sSQL := sSQL +
        #13#10'  , ta.dta_nascimento as DtaNascimento ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(7) = 1) then begin // SglFazendaNascimento
      sSQL := sSQL +
        #13#10'  , tfn.sgl_fazenda as SglFazendaNascimento ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
      sSQL := sSQL +
        #13#10'  , tfn.nom_fazenda as NomFazendaNascimento ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(9) = 1) then begin // DtaCompra
      sSQL := sSQL +
        #13#10'  , ta.dta_compra as DtaCompra ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
      sSQL := sSQL +
        #13#10'  , tpsc.nom_reduzido_pessoa_secundaria as NomReduzidoCriador ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) then begin // NomAnimal
      sSQL := sSQL +
        #13#10'  , ta.nom_animal as NomAnimal ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) then begin // DesApelido
      sSQL := sSQL +
        #13#10'  , ta.des_apelido as DesApelido ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
      sSQL := sSQL +
        #13#10'  , tar.sgl_associacao_raca as SglAssociacaoRaca ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
      sSQL := sSQL +
        #13#10'  , tgs.sgl_grau_sangue as SglGrauSangue ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then begin // NumRGD
      sSQL := sSQL +
        #13#10'  , ta.num_rgd as NumRGD ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(16) = 1) then begin // SglRaca
      sSQL := sSQL +
        #13#10'  , tr.sgl_raca as SglRaca ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
      sSQL := sSQL +
        #13#10'  , tr.des_raca as DesRaca ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(18) = 1) then begin // SglAptidao
      sSQL := sSQL +
        #13#10'  , taa.sgl_aptidao as SglAptidao ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
      sSQL := sSQL +
        #13#10'  , taa.des_aptidao as DesAptidao ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(20) = 1) then begin // SglCategoria
      sSQL := sSQL +
        #13#10'  , tc.sgl_categoria_animal as SglCategoria ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
      sSQL := sSQL +
        #13#10'  , tc.des_categoria_animal as DesCategoria ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(22) = 1) then begin // IndSexo
      sSQL := sSQL +
        #13#10'  , ta.ind_sexo as IndSexo ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(23) = 1) then begin // SglOrigem
      sSQL := sSQL +
        #13#10'  , tto.sgl_tipo_origem as SglOrigem ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
      sSQL := sSQL +
        #13#10'  , tto.des_tipo_origem as DesOrigem ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) or
      (IntRelatorios.CampoAssociado(44) = 1) or (IntRelatorios.CampoAssociado(45) = 1) then begin // CodAnimalManejoPai, DesApelidoPai, NomAnimalPai
      sSQL := sSQL +
        #13#10'  , ta.cod_animal_pai '+
        #13#10'  , ta.cod_reprodutor_multiplo ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(26) = 1) then begin // CodAnimalManejoMae
      sSQL := sSQL +
        #13#10'  , ta.cod_animal_mae ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(27) = 1) then begin // CodAnimalManejoReceptor
      sSQL := sSQL +
        #13#10'  , ta.cod_animal_receptor ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(28) = 1) then begin // IndAnimalCastrado
      sSQL := sSQL +
        #13#10'  , ta.ind_animal_castrado as IndAnimalCastrado ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(29) = 1) then begin // SglRegimeAlimentar
      sSQL := sSQL +
        #13#10'  , tra.sgl_regime_alimentar as SglRegimeAlimentar ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
      sSQL := sSQL +
        #13#10'  , tra.des_regime_alimentar as DesRegimeAlimentar ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(31) = 1) then begin // SglTipoLugar
      sSQL := sSQL +
        #13#10'  , tlu.sgl_tipo_lugar as SglTipoLugar ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
      sSQL := sSQL +
        #13#10'  , tlu.des_tipo_lugar as DesTipoLugar ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(33) = 1) then begin // SglLote
      sSQL := sSQL +
        #13#10'  , tlt.sgl_lote as SglLote ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
      sSQL := sSQL +
        #13#10'  , tlt.des_lote as DesLote ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(35) = 1) then begin // SglLocal
      sSQL := sSQL +
        #13#10'  , tl.sgl_local as SglLocal ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
      sSQL := sSQL +
        #13#10'  , tl.des_local as DesLocal ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(37) = 1) then begin // SglFazendaCorrente
      sSQL := sSQL +
        #13#10'  , tfc.sgl_fazenda as SglFazendaCorrente ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
      sSQL := sSQL +
        #13#10'  , tfc.nom_fazenda as NomFazendaCorrente ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(39) = 1) then begin // NumCNPJCPFCorrente
      sSQL := sSQL +
        #13#10'  , ta.num_cnpj_cpf_corrente as NumCNPJCPFCorrente ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(40) = 1) then begin // NumImovelCorrente
      sSQL := sSQL +
        #13#10'  , ta.num_imovel_corrente as NumImovelCorrente ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(48) = 1) then begin // CodLocalizacaoCorrente
      sSQL := sSQL +
        #13#10'  , ta.cod_localizacao_corrente as CodLocalizacaoCorrente ';
    end;
    if CodEvento > 0 then begin
      if IndEventoAplicado = 'S' then begin
        sSQL := sSQL +
          #13#10'  , ''S'' as IndEventoAplicado ';
      end else begin
        if IndEventoAplicado = 'N' then begin
          sSQL := sSQL +
            #13#10'  , ''N'' as IndEventoAplicado '
        end else begin
          sSQL := sSQL +
            #13#10'  , case isnull(tev.dta_aplicacao_evento, 0) '+
            #13#10'    when 0 then ''N''  '+
            #13#10'    else ''S'' '+
            #13#10'    end as IndEventoAplicado ';
        end;
      end;
    end else begin
      sSQL := sSQL +
        #13#10'  ,''N'' as IndEventoAplicado ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(42) = 1) then begin // Idade
      sSQL := sSQL +
        #13#10'  , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as Idade';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(43) = 1) then begin // Comp Racial
      sSQL := sSQL +
        #13#10'  , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(46) = 1) then begin // Observacao
      sSQL := sSQL +
        #13#10'  , substring(ta.txt_observacao, 1,30) as TxtObservacao ';
    end;
    if not bPersonalizavel or (IntRelatorios.CampoAssociado(47) = 1) then begin // Data de Cadastramento
      sSQL := sSQL +
        #13#10'  , ta.dta_cadastramento as DtaCadastramento ';
    end;

    Query.SQL.Add(sSQL);
    sSQL :=
      #13#10'from '+
      #13#10'  tab_animal as ta with (nolock) '+
      #13#10'  , tab_fazenda as tf with (nolock) ' +
      #13#10'  , tab_pessoa as ttec with (nolock) ';
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(7) = 1) // SglFazendaNascimento
    or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
      sSQL := sSQL +
        #13#10'  , tab_fazenda tfn with (nolock) ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
      sSQL := sSQL +
        #13#10'  , tab_pessoa_secundaria tpsc with (nolock) ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
      sSQL := sSQL +
        #13#10'  , tab_associacao_raca tar with (nolock) ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
      sSQL := sSQL +
        #13#10'  , tab_grau_sangue tgs with (nolock) ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(16) = 1) // SglRaca
    or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
      sSQL := sSQL +
        #13#10'  , tab_raca tr with (nolock) ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(18) = 1) // SglAptidao
    or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
      sSQL := sSQL +
        #13#10'  , tab_aptidao taa ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(23) = 1) // SglOrigem
    or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
      sSQL := sSQL +
        #13#10'  , tab_tipo_origem as tto ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(29) = 1)  // SglRegimeAlimentar
    or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
      sSQL := sSQL +
        #13#10'  , tab_regime_alimentar tra ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(31) = 1) // SglTipoLugar
    or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
      sSQL := sSQL +
        #13#10'  , tab_tipo_lugar as tlu ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(33) = 1) // SglLote
    or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
      sSQL := sSQL +
        #13#10'  , tab_lote as tlt ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(35) = 1) // SglLocal
    or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
      sSQL := sSQL +
        #13#10'  , tab_local as tl ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(20) = 1) // SglCategoria
    or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
      sSQL := sSQL +
        #13#10'  , tab_categoria_animal as tc ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(37) = 1) // SglFazendaCorrente
    or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
      sSQL := sSQL +
      #13#10'  , tab_fazenda tfc with (nolock) ';
    end;
    if (CodEvento > 0) and (IndEventoAplicado <> 'N') then begin
      sSQL := sSQL +
        #13#10'  , tab_animal_evento as tev with (nolock) ';
    end;
    if IndAgrupRaca1 = 'N' then begin
      sSQL := sSQL +
      #13#10'  , tab_composicao_racial as tcr with (nolock) ';
    end;
    if IndAgrupRaca2 = 'N' then begin
      sSQL := sSQL +
      #13#10'  , tab_composicao_racial as tcr2 with (nolock) ';
    end;
    if IndAgrupRaca3 = 'N' then begin
      sSQL := sSQL +
      #13#10'  , tab_composicao_racial as tcr3 with (nolock) ';
    end;
    if IndAgrupRaca4 = 'N' then begin
      sSQL := sSQL +
      #13#10'  , tab_composicao_racial as tcr4 with (nolock) ';
    end;
    Query.SQL.Add(sSQL);
    sSQL :=
      #13#10'where '+
      #13#10'  ta.dta_fim_validade is null '+
      #13#10'  and ta.cod_pessoa_produtor = :CodPessoaProdutor '+
      #13#10'  and ta.cod_fazenda_manejo *= tf.cod_fazenda '+
      #13#10'  and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor ' +
      #13#10'  and ta.cod_pessoa_tecnico *= ttec.cod_pessoa ';

   if (IndAnimalSemTecnico = 'N') then begin
     if CodPessoaTecnico > 0 then begin
        sSQL := sSQL +
                #13#10'      and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ';
     end
     else begin
       if (Conexao.CodPapelUsuario = 3) then begin
          sSQL := sSQL +
                  #13#10'      and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                  #13#10'       or  ta.cod_pessoa_tecnico is null)';
       end;
     end;
   end
   else begin
          sSQL := sSQL +
                  #13#10'      and ta.cod_pessoa_tecnico is null';
   end;

    if (CodEvento > 0) then begin
      if IndEventoAplicado = 'S' then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_pessoa_produtor = tev.cod_pessoa_produtor '+
          #13#10'  and ta.cod_animal = tev.cod_animal '+
          #13#10'  and tev.cod_evento = :CodEvento ';
      end else begin
        if IndEventoAplicado = 'N' then begin
          sSQL := sSQL +
            #13#10'  and ta.cod_animal not in ( '+
            #13#10'    select cod_animal from tab_animal_evento '+
            #13#10'     where cod_evento =:CodEvento '+
            #13#10'       and cod_pessoa_produtor =:CodPessoaProdutor) ';
        end else begin
         sSQL := sSQL +
            #13#10'  and ta.cod_pessoa_produtor *= tev.cod_pessoa_produtor '+
            #13#10'  and ta.cod_animal *= tev.cod_animal '+
            #13#10'  and tev.cod_evento = :CodEvento ';
        end;
      end;
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(7) = 1) // SglFazendaNascimento
    or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
      sSQL := sSQL +
        #13#10'  and tfn.cod_fazenda =* ta.cod_fazenda_nascimento '+
        #13#10'  and tfn.cod_pessoa_produtor =* ta.cod_pessoa_produtor ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
      sSQL := sSQL +
        #13#10'  and tpsc.cod_pessoa_secundaria =* ta.cod_pessoa_secundaria_criador '+
        #13#10'  and tpsc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
      sSQL := sSQL +
        #13#10'  and tar.cod_associacao_raca =* ta.cod_associacao_raca ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
      sSQL := sSQL +
        #13#10'  and tgs.cod_grau_sangue =* ta.cod_grau_sangue ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(16) = 1) // SglRaca
    or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
      sSQL := sSQL +
        #13#10'  and tr.cod_raca = ta.cod_raca ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(18) = 1) // SglAptidao
    or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
      sSQL := sSQL +
        #13#10'  and taa.cod_aptidao = ta.cod_aptidao ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(23) = 1) // SglOrigem
    or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
      sSQL := sSQL +
        #13#10'  and tto.cod_tipo_origem = ta.cod_tipo_origem ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(29) = 1)  // SglRegimeAlimentar
    or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
      sSQL := sSQL +
        #13#10'  and tra.cod_regime_alimentar =* ta.cod_regime_alimentar ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(31) = 1)  // SglTipoLugar
    or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
      if (CodTipoLugar <> -1) then begin
        sSQL := sSQL +
          #13#10'  and tlu.cod_tipo_lugar = ta.cod_tipo_lugar ';
      end else begin
        sSQL := sSQL +
          #13#10'  and tlu.cod_tipo_lugar =* ta.cod_tipo_lugar ';
      end;
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(33) = 1)  // SglLote
    or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
      if (CodLote <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_lote_corrente = tlt.cod_lote '+
          #13#10'  and ta.cod_pessoa_produtor = tlt.cod_pessoa_produtor '+
          #13#10'  and ta.cod_fazenda_corrente = tlt.cod_fazenda ';
      end else begin
        sSQL := sSQL +
          #13#10'  and ta.cod_lote_corrente *= tlt.cod_lote '+
          #13#10'  and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor '+
          #13#10'  and ta.cod_fazenda_corrente *= tlt.cod_fazenda ';
      end;
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(35) = 1)  // SglLocal
    or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
//      if (CodLocal <> '') then begin
//        sSQL := sSQL +
//          #13#10'  and ta.cod_local_corrente = tl.cod_local '+
//          #13#10'  and ta.cod_pessoa_produtor = tl.cod_pessoa_produtor '+
//          #13#10'  and ta.cod_fazenda_manejo = tl.cod_fazenda ';
//      end else begin
        sSQL := sSQL +
          #13#10'  and ta.cod_local_corrente *= tl.cod_local '+
          #13#10'  and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
          #13#10'  and ta.cod_fazenda_manejo *= tl.cod_fazenda ';
//      end;
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(37) = 1) // SglFazendaCorrente
    or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
      sSQL := sSQL +
        #13#10'  and (tfc.cod_fazenda =* ta.cod_fazenda_corrente '+
        #13#10'  and tfc.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
        #13#10'  or  tfc.cod_pessoa_produtor =* ta.cod_pessoa_corrente '+
        #13#10'  and tfc.cod_propriedade_rural =* ta.cod_propriedade_corrente) ';
    end;
    if not bPersonalizavel
    or (IntRelatorios.CampoAssociado(20) = 1) // SglCategoria
    or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
      sSQL := sSQL +
        #13#10'  and ta.cod_categoria_animal *= tc.cod_categoria_animal ';
    end;
    if IndConsiderarExterno = 'N' then begin
      if (CodOrigem <> '') then begin
        sSQL := sSQL +
          #13#10'  and (ta.cod_tipo_origem in (' + CodOrigem + ') and ta.cod_tipo_origem <> 4) ';
      end else begin
        sSQL := sSQL +
          #13#10'  and ta.cod_tipo_origem <> 4';
      end;
    end else begin
      if (CodOrigem <> '') then begin
        sSQL := sSQL +
          #13#10'  and (ta.cod_tipo_origem in (' + CodOrigem + ') or ta.cod_tipo_origem = 4) ';
      end;
    end;
    if CodFazendaManejo <> -1 then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_fazenda_manejo = :CodFazendaManejo';
    end;
    if (CodManejoInicio <> '') and (CodManejoFim <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim';
    end;
    if (CodAnimalCertificadora <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_animal_certificadora = :CodAnimalCertificadora';
    end;
    if (CodPaisSisBov <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_pais_sisbov = :CodPaisSisBov';
    end;
    if (CodEstadoSisBov <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_estado_sisbov = :CodEstadoSisBov';
    end;
    if (CodMicroRegiaoSisBov <> -1) then begin
      if (CodMicroRegiaoSisBov = 88) then
         sSQL := sSQL +  #13#10'  and ta.cod_micro_regiao_sisbov = -1'
      else
         sSQL := sSQL +  #13#10'  and ta.cod_micro_regiao_sisbov = :CodMicroRegiaoSisBov';
    end;
    if (CodSisBovInicio <> -1) and (CodSisBovFim <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_animal_sisbov between :CodSisBovInicio and :CodSisBovFim';
    end;
    if (CodSituacaoSisBov <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_situacao_sisbov = :CodSituacaoSisBov';
    end;
    if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then begin
      sSQL := sSQL +
        #13#10'  and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim';
    end;
    if (CodFazendaNascimento <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_fazenda_nascimento = :CodFazendaNascimento';
    end;
    if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then begin
      sSQL := sSQL +
        #13#10'  and ta.dta_compra between :DtaCompraInicio and :DtaCompraFim';
    end;
    if (CodPessoaSecundariaCriador <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_pessoa_secundaria_criador = :CodPessoaSecundariaCriador';
    end;
    if (NomAnimal <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.nom_animal like :NomAnimal';
    end;
    if (DesApelido <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.des_apelido like :DesApelido';
    end;
    if (CodAptidao <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_aptidao = :CodAptidao';
    end;
    if (CodRaca <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_raca in (' + CodRaca + ')';
    end;
    if (IndSexo = 'M') or (IndSexo = 'F') then begin
      sSQL := sSQL +
        #13#10'  and ta.ind_sexo = :IndSexo';
    end;
    if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then begin
      sSQL := sSQL +
        #13#10'  and (ta.cod_animal_pai in'+
        #13#10'    (select cod_animal '+
        #13#10'       from tab_animal as ta, tab_fazenda as tf '+
        #13#10'      where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
        #13#10'        and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ';
      if (SglFazendaPai <> '') then begin
      sSQL := sSQL +
        #13#10'        and tf.sgl_fazenda = :SglFazendaPai ';
      end;
      if (CodAnimalPai <> '') then begin
      sSQL := sSQL +
        #13#10'        and ta.cod_animal_manejo =:CodAnimalPai ';
      end;
      if (DesApelidoPai <> '') then begin
      sSQL := sSQL +
        #13#10'        and ta.des_apelido =:DesApelidoPai ';
      end;
      sSQL := sSQL +
        #13#10'    ) ';
      sSQL := sSQL + ' or ( ta.cod_reprodutor_multiplo in ' +
        #13#10'    (select cod_reprodutor_multiplo ' +
        #13#10'       from tab_reprodutor_multiplo as trm, tab_fazenda as tf '+
        #13#10'      where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
        #13#10'        and trm.cod_pessoa_produtor = :CodPessoaProdutor1 ';
      if (SglFazendaPai <> '') then begin
      sSQL := sSQL +
        #13#10'        and tf.sgl_fazenda = :SglFazendaPai ';
      end;
      if (CodAnimalPai <> '') then begin
      sSQL := sSQL +
        #13#10'        and trm.cod_reprodutor_multiplo_manejo =:CodAnimalPai ';
      end;
      sSQL := sSQL +
        #13#10'    ))) ';

    end;
    if (SglFazendaMae <> '') or (CodAnimalMae <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_animal_mae in '+
        #13#10'    (select cod_animal '+
        #13#10'       from tab_animal as ta, tab_fazenda as tf '+
        #13#10'      where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
        #13#10'        and ta.cod_pessoa_produtor = :CodPessoaProdutor2 ';
      if (SglFazendaMae <> '') then begin
      sSQL := sSQL +
        #13#10'        and tf.sgl_fazenda =:SglFazendaMae ';
      end;
      if (CodAnimalMae <> '') then begin
      sSQL := sSQL +
        #13#10'        and ta.cod_animal_manejo =:CodAnimalMae ';
      end;
      sSQL := sSQL +
        #13#10'    ) ';
    end;
    if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then begin
      sSQL := sSQL +
        #13#10'  and ta.ind_animal_castrado =:IndAnimalCastrado';
    end;
    if (CodRegimeAlimentar <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_regime_alimentar = :CodRegimeAlimentar';
    end;
    if (CodCategoria <> '') then begin
      if IndConsiderarExterno = 'S' then begin
        sSQL := sSQL +
          #13#10'  and (ta.cod_categoria_animal in (' + CodCategoria + ') or ta.cod_tipo_origem = 4) ';
      end else begin
        sSQL := sSQL +
          #13#10'  and ta.cod_categoria_animal in (' + CodCategoria + ')';
      end;
    end;
    if (CodAssociacao <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_associacao_raca = :CodAssociacaoRaca';
    end;
    if (CodGrauSangue <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_grau_sangue = :CodGrauSangue';
    end;
    if (NumRgd <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.num_rgd like :NumRgd';
    end;
    if (CodTipoLugar <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_tipo_lugar = :CodTipoLugar';
    end;
    if (CodLocal <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_fazenda_corrente in (' + CodLocal + ')';
    end;
    if (CodLote <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_lote_corrente in (' + CodLote + ')';
    end;
    if (IndCadastroEfetivado <> 'A') then begin
      if IndCadastroEfetivado = 'S' then begin
        sSQL := sSQL +
          #13#10'  and ta.dta_efetivacao_cadastro is not null';
      end;
      if IndCadastroEfetivado = 'N' then begin
        sSQL := sSQL +
          #13#10'  and ta.dta_efetivacao_cadastro is null';
      end;
    end;
    if (CodFazendaCorrente <> -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_fazenda_corrente = :CodFazendaCorrente ';
    end;
    if (NumImovelCorrente <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.num_imovel_corrente = :NumImovelCorrente ';
    end;
    if (CodLocalizacaoCorrente > -1) then begin
      sSQL := sSQL +
        #13#10'  and ta.cod_localizacao_corrente = :CodLocalizacaoCorrente ';
    end;
    if (NumCPFCNPJCorrente <> '') then begin
      sSQL := sSQL +
        #13#10'  and ta.num_cnpj_cpf_corrente = :NumCPFCNPJCorrente ';
    end;
    if IndAgrupRaca1 = 'N' then begin
      sSQL := sSQL +
      #13#10'  and ta.cod_animal = tcr.cod_animal  ' +
      #13#10'  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ' +
      #13#10'  and tcr.cod_raca = :codraca1  ' +
      #13#10'  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ';
    end;
    if IndAgrupRaca2 = 'N' then begin
      sSQL := sSQL +
      #13#10'  and ta.cod_animal = tcr2.cod_animal  ' +
      #13#10'  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ' +
      #13#10'  and tcr2.cod_raca = :codraca2  ' +
      #13#10'  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ';
    end;
    if IndAgrupRaca3 = 'N' then begin
      sSQL := sSQL +
      #13#10'  and ta.cod_animal = tcr3.cod_animal  ' +
      #13#10'  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ' +
      #13#10'  and tcr3.cod_raca = :codraca3  ' +
      #13#10'  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ';
    end;
    if IndAgrupRaca4 = 'N' then begin
      sSQL := sSQL +
      #13#10'  and ta.cod_animal = tcr4.cod_animal  ' +
      #13#10'  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ' +
      #13#10'  and tcr4.cod_raca = :codraca4  ' +
      #13#10'  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ';
    end;
    if IndAgrupRaca1 = 'S' then begin
      sSQL := sSQL +
      #13#10' and ta.cod_animal in (select cod_animal ' +
      #13#10' from tab_composicao_racial as tcr with (nolock), ' +
      #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
      #13#10' where tacr.cod_agrupamento_racas = :codraca1 ' +
      #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
      #13#10' group by cod_animal ' +
      #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ';
    end;
    if IndAgrupRaca2 = 'S' then begin
      sSQL := sSQL +
      #13#10' and ta.cod_animal in (select cod_animal ' +
      #13#10' from tab_composicao_racial as tcr with (nolock), ' +
      #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
      #13#10' where tacr.cod_agrupamento_racas = :codraca2 ' +
      #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
      #13#10' group by cod_animal ' +
      #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ';
    end;
    if IndAgrupRaca3 = 'S' then begin
      sSQL := sSQL +
      #13#10' and ta.cod_animal in (select cod_animal ' +
      #13#10' from tab_composicao_racial as tcr with (nolock), ' +
      #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
      #13#10' where tacr.cod_agrupamento_racas = :codraca3 ' +
      #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
      #13#10' group by cod_animal ' +
      #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ';
    end;
    if IndAgrupRaca4 = 'S' then begin
      sSQL := sSQL +
      #13#10' and ta.cod_animal in (select cod_animal ' +
      #13#10' from tab_composicao_racial as tcr with (nolock), ' +
      #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
      #13#10' where tacr.cod_agrupamento_racas = :codraca4 ' +
      #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
      #13#10' group by cod_animal ' +
      #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ';
    end;

    if IndAptoCobertura = 'S'
     then sSQL := sSQL + ' and ta.ind_apto_cobertura = ''S'' '
     else if IndAptoCobertura = 'N' then sSQL := sSQL + ' and ta.ind_apto_cobertura = ''N'' ';

    if IndAutenticacao = 'S' then begin
      sSQL := sSQL + '  and ta.cod_autenticacao_sisbov is not null  ';
    end;

    Query.SQL.Add(sSQL);

    if (CodTipoLugar <> 2) and (CodTipoLugar <> 3) then
    begin
      sSQL :=
        #13#10'union select '+
        #13#10'  ta.cod_pessoa_produtor as CodPessoaProdutor '+
        #13#10'  , ta.cod_animal as CodAnimal '+
        #13#10'  , ttec.nom_reduzido_pessoa as NomReduzidoTecnico ';
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(1) = 1) then begin // CodAnimalManejo
        sSQL := sSQL +
          #13#10'  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodAnimalManejo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(2) = 1) then begin // CodCertificadora
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_certificadora as CodCertificadora ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(3) = 1) then begin // CodAnimalSisBov
        sSQL := sSQL +
          #13#10' , case ta.cod_animal_sisbov '+
          #13#10'    when null then null '+
          #13#10'    else '+
          #13#10'      case ta.cod_micro_regiao_sisbov when -1 '+
          #13#10'        then '+
          #13#10'           right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) + '' '' + '+
          #13#10'           right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + '+
          #13#10'           right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) +  '' '' + '+
          #13#10'           right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) '+
          #13#10'        else '+
          #13#10'          right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + '+
          #13#10'          right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) + '' '' + '+
          #13#10'          right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '' '' + '+
          #13#10'          right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) '+
          #13#10'        end '+
          #13#10'    end as CodAnimalSisbov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(4) = 1) then begin // CodSituacaoSisBov
        sSQL := sSQL +
          #13#10'  , ta.cod_situacao_sisBov as CodSituacaoSisBov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(5) = 1) then begin // DtaIdentificacaoSisbov
        sSQL := sSQL +
          #13#10'  , ta.dta_identificacao_sisbov as DtaIdentificacaoSisbov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(6) = 1) then begin // DtaNascimento
        sSQL := sSQL +
          #13#10'  , ta.dta_nascimento as DtaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(7) = 1) then begin // SglFazendaNascimento
        sSQL := sSQL +
          #13#10'  , tfn.sgl_fazenda as SglFazendaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'  , tfn.nom_fazenda as NomFazendaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(9) = 1) then begin // DtaCompra
        sSQL := sSQL +
          #13#10'  , ta.dta_compra as DtaCompra ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'  , tpsc.nom_reduzido_pessoa_secundaria as NomReduzidoCriador ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) then begin // NomAnimal
        sSQL := sSQL +
          #13#10'  , ta.nom_animal as NomAnimal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) then begin // DesApelido
        sSQL := sSQL +
          #13#10'  , ta.des_apelido as DesApelido ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'  , tar.sgl_associacao_raca as SglAssociacaoRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'  , tgs.sgl_grau_sangue as SglGrauSangue ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then begin // NumRGD
        sSQL := sSQL +
          #13#10'  , ta.num_rgd as NumRGD ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(16) = 1) then begin // SglRaca
        sSQL := sSQL +
          #13#10'  , tr.sgl_raca as SglRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'  , tr.des_raca as DesRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(18) = 1) then begin // SglAptidao
        sSQL := sSQL +
          #13#10'  , taa.sgl_aptidao as SglAptidao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'  , taa.des_aptidao as DesAptidao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(20) = 1) then begin // SglCategoria
        sSQL := sSQL +
          #13#10'  , tc.sgl_categoria_animal as SglCategoria ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'  , tc.des_categoria_animal as DesCategoria ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(22) = 1) then begin // IndSexo
        sSQL := sSQL +
          #13#10'  , ta.ind_sexo as IndSexo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(23) = 1) then begin // SglOrigem
        sSQL := sSQL +
          #13#10'  , tto.sgl_tipo_origem as SglOrigem ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'  , tto.des_tipo_origem as DesOrigem ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) or
        (IntRelatorios.CampoAssociado(44) = 1) or (IntRelatorios.CampoAssociado(45) = 1) then begin // CodAnimalManejoPai, DesApelidoPai, NomAnimalPai
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_pai '+
          #13#10'  , ta.cod_reprodutor_multiplo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(26) = 1) then begin // CodAnimalManejoMae
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_mae ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(27) = 1) then begin // CodAnimalManejoReceptor
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_receptor ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(28) = 1) then begin // IndAnimalCastrado
        sSQL := sSQL +
          #13#10'  , ta.ind_animal_castrado as IndAnimalCastrado ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(29) = 1) then begin // SglRegimeAlimentar
        sSQL := sSQL +
          #13#10'  , tra.sgl_regime_alimentar as SglRegimeAlimentar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'  , tra.des_regime_alimentar as DesRegimeAlimentar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(31) = 1) then begin // SglTipoLugar
        sSQL := sSQL +
          #13#10'  , tlu.sgl_tipo_lugar as SglTipoLugar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        sSQL := sSQL +
          #13#10'  , tlu.des_tipo_lugar as DesTipoLugar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(33) = 1) then begin // SglLote
        sSQL := sSQL +
          #13#10'  , tlt.sgl_lote as SglLote ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        sSQL := sSQL +
          #13#10'  , tlt.des_lote as DesLote ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(35) = 1) then begin // SglLocal
        sSQL := sSQL +
          #13#10'  , tl.sgl_local as SglLocal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
        sSQL := sSQL +
          #13#10'  , tl.des_local as DesLocal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(37) = 1) then begin // SglFazendaCorrente
        sSQL := sSQL +
          #13#10'  , tfc.sgl_fazenda as SglFazendaCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
          #13#10'  , tfc.nom_fazenda as NomFazendaCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(39) = 1) then begin // NumCNPJCPFCorrente
        sSQL := sSQL +
          #13#10'  , ta.num_cnpj_cpf_corrente as NumCNPJCPFCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(40) = 1) then begin // NumImovelCorrente
        sSQL := sSQL +
          #13#10'  , ta.num_imovel_corrente as NumImovelCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(48) = 1) then begin // CodLocalizacaoCorrente
        sSQL := sSQL +
          #13#10'  , ta.cod_localizacao_corrente as CodLocalizacaoCorrente ';
      end;
      if CodEvento > 0 then begin
        if IndEventoAplicado = 'S' then begin
          sSQL := sSQL +
            #13#10'  , ''S'' as IndEventoAplicado ';
        end else begin
          if IndEventoAplicado = 'N' then begin
            sSQL := sSQL +
              #13#10'  , ''N'' as IndEventoAplicado '
          end else begin
            sSQL := sSQL +
              #13#10'  , case isnull(tev.dta_aplicacao_evento, 0) '+
              #13#10'    when 0 then ''N''  '+
              #13#10'    else ''S'' '+
              #13#10'    end as IndEventoAplicado ';
          end;
        end;
      end else begin
        sSQL := sSQL +
          #13#10'  ,''N'' as IndEventoAplicado ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(42) = 1) then begin // Idade
        sSQL := sSQL +
          #13#10'  , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as Idade';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(43) = 1) then begin // Comp Racial
        sSQL := sSQL +
          #13#10'  , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(46) = 1) then begin // Observacao
        sSQL := sSQL +
          #13#10'  , substring(ta.txt_observacao, 1,30) as TxtObservacao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(47) = 1) then begin // Data de Cadastramento
        sSQL := sSQL +
          #13#10'  , ta.dta_cadastramento as DtaCadastramento ';
      end;

      Query.SQL.Add(sSQL);
      sSQL :=
        #13#10'from '+
        #13#10'  tab_animal as ta with (nolock) '+
        #13#10'  , tab_fazenda as tf with (nolock) '+
        #13#10'  , tab_pessoa as ttec with (nolock) ';
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(7) = 1) // SglFazendaNascimento
      or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'  , tab_fazenda tfn with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'  , tab_pessoa_secundaria tpsc with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'  , tab_associacao_raca tar with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'  , tab_grau_sangue tgs with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(16) = 1) // SglRaca
      or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'  , tab_raca tr with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(18) = 1) // SglAptidao
      or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'  , tab_aptidao taa ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(23) = 1) // SglOrigem
      or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'  , tab_tipo_origem as tto ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(29) = 1)  // SglRegimeAlimentar
      or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'  , tab_regime_alimentar tra ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(31) = 1) // SglTipoLugar
      or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        sSQL := sSQL +
          #13#10'  , tab_tipo_lugar as tlu ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(33) = 1) // SglLote
      or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        sSQL := sSQL +
          #13#10'  , tab_lote as tlt ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(35) = 1) // SglLocal
      or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
        sSQL := sSQL +
          #13#10'  , tab_local as tl ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(20) = 1) // SglCategoria
      or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'  , tab_categoria_animal as tc ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(37) = 1) // SglFazendaCorrente
      or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
        #13#10'  , tab_fazenda tfc with (nolock) ';
      end;
      if (CodEvento > 0) and (IndEventoAplicado <> 'N') then begin
        sSQL := sSQL +
          #13#10'  , tab_animal_evento as tev with (nolock) ';
      end;
      if IndAgrupRaca1 = 'N' then begin
        sSQL := sSQL +
        #13#10'  , tab_composicao_racial as tcr with (nolock) ';
      end;
      if IndAgrupRaca2 = 'N' then begin
        sSQL := sSQL +
        #13#10'  , tab_composicao_racial as tcr2 with (nolock) ';
      end;
      if IndAgrupRaca3 = 'N' then begin
        sSQL := sSQL +
        #13#10'  , tab_composicao_racial as tcr3 with (nolock) ';
      end;
      if IndAgrupRaca4 = 'N' then begin
        sSQL := sSQL +
        #13#10'  , tab_composicao_racial as tcr4 with (nolock) ';
      end;
      Query.SQL.Add(sSQL);
      sSQL :=
        #13#10'where '+
        #13#10'  ta.dta_fim_validade is null '+
        #13#10'  and ta.cod_pessoa_corrente = :CodPessoaProdutor '+
        #13#10'  and ta.cod_fazenda_manejo *= tf.cod_fazenda '+
        #13#10'  and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor ' +
        #13#10'  and ta.cod_pessoa_tecnico *= ttec.cod_pessoa ';

     if (IndAnimalSemTecnico = 'N') then begin
       if CodPessoaTecnico > 0 then begin
          sSQL := sSQL +
                  #13#10'      and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ';
       end
       else begin
         if (Conexao.CodPapelUsuario = 3) then begin
            sSQL := sSQL +
                    #13#10'      and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                    #13#10'       or  ta.cod_pessoa_tecnico is null)';
         end;
       end;
     end
     else begin
            sSQL := sSQL +
                    #13#10'      and ta.cod_pessoa_tecnico is null';
     end;

      if (CodEvento > 0) then begin
        if IndEventoAplicado = 'S' then begin
          sSQL := sSQL +
            #13#10'  and ta.cod_pessoa_produtor = tev.cod_pessoa_produtor '+
            #13#10'  and ta.cod_animal = tev.cod_animal '+
            #13#10'  and tev.cod_evento = :CodEvento ';
        end else begin
          if IndEventoAplicado = 'N' then begin
            sSQL := sSQL +
              #13#10'  and ta.cod_animal not in ( '+
              #13#10'    select cod_animal from tab_animal_evento '+
              #13#10'     where cod_evento =:CodEvento '+
              #13#10'       and cod_pessoa_produtor =:CodPessoaProdutor) ';
          end else begin
           sSQL := sSQL +
              #13#10'  and ta.cod_pessoa_produtor *= tev.cod_pessoa_produtor '+
              #13#10'  and ta.cod_animal *= tev.cod_animal '+
              #13#10'  and tev.cod_evento = :CodEvento ';
          end;
        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(7) = 1) // SglFazendaNascimento
      or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'  and tfn.cod_fazenda =* ta.cod_fazenda_nascimento '+
          #13#10'  and tfn.cod_pessoa_produtor =* ta.cod_pessoa_produtor ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'  and tpsc.cod_pessoa_secundaria =* ta.cod_pessoa_secundaria_criador '+
          #13#10'  and tpsc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'  and tar.cod_associacao_raca =* ta.cod_associacao_raca ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'  and tgs.cod_grau_sangue =* ta.cod_grau_sangue ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(16) = 1) // SglRaca
      or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'  and tr.cod_raca = ta.cod_raca ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(18) = 1) // SglAptidao
      or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'  and taa.cod_aptidao = ta.cod_aptidao ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(23) = 1) // SglOrigem
      or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'  and tto.cod_tipo_origem = ta.cod_tipo_origem ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(29) = 1)  // SglRegimeAlimentar
      or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'  and tra.cod_regime_alimentar =* ta.cod_regime_alimentar ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(31) = 1)  // SglTipoLugar
      or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        if (CodTipoLugar <> -1) then begin
          sSQL := sSQL +
            #13#10'  and tlu.cod_tipo_lugar = ta.cod_tipo_lugar ';
        end else begin
          sSQL := sSQL +
            #13#10'  and tlu.cod_tipo_lugar =* ta.cod_tipo_lugar ';
        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(33) = 1)  // SglLote
      or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        if (CodLote <> '') then begin
          sSQL := sSQL +
            #13#10'  and ta.cod_lote_corrente *= tlt.cod_lote '+
            #13#10'  and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor '+
            #13#10'  and ta.cod_fazenda_corrente *= tlt.cod_fazenda ';
        end else begin
          sSQL := sSQL +
            #13#10'  and ta.cod_lote_corrente *= tlt.cod_lote '+
            #13#10'  and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor '+
            #13#10'  and ta.cod_fazenda_corrente *= tlt.cod_fazenda ';
        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(35) = 1)  // SglLocal
      or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
//        if (CodLocal <> '') then begin
//          sSQL := sSQL +
//            #13#10'  and ta.cod_local_corrente *= tl.cod_local '+
//            #13#10'  and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
//            #13#10'  and ta.cod_fazenda_manejo *= tl.cod_fazenda ';
//        end else begin
          sSQL := sSQL +
            #13#10'  and ta.cod_local_corrente *= tl.cod_local '+
            #13#10'  and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
            #13#10'  and ta.cod_fazenda_manejo *= tl.cod_fazenda ';
//        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(37) = 1) // SglFazendaCorrente
      or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
          #13#10'  and (tfc.cod_fazenda =* ta.cod_fazenda_corrente '+
          #13#10'  and tfc.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          #13#10'  or  tfc.cod_pessoa_produtor =* ta.cod_pessoa_corrente '+
          #13#10'  and tfc.cod_propriedade_rural =* ta.cod_propriedade_corrente) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(20) = 1) // SglCategoria
      or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'  and ta.cod_categoria_animal *= tc.cod_categoria_animal ';
      end;
      if IndConsiderarExterno = 'N' then begin
        if (CodOrigem <> '') then begin
          sSQL := sSQL +
            #13#10'  and (ta.cod_tipo_origem in (' + CodOrigem + ') and ta.cod_tipo_origem <> 4) ';
        end else begin
          sSQL := sSQL +
            #13#10'  and ta.cod_tipo_origem <> 4';
        end;
      end else begin
        if (CodOrigem <> '') then begin
          sSQL := sSQL +
            #13#10'  and (ta.cod_tipo_origem in (' + CodOrigem + ') or ta.cod_tipo_origem = 4) ';
        end;
      end;
      if CodFazendaManejo <> -1 then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_fazenda_manejo = :CodFazendaManejo';
      end;
      if (CodManejoInicio <> '') and (CodManejoFim <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim';
      end;
      if (CodAnimalCertificadora <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_animal_certificadora = :CodAnimalCertificadora';
      end;
      if (CodPaisSisBov <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_pais_sisbov = :CodPaisSisBov';
      end;
      if (CodEstadoSisBov <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_estado_sisbov = :CodEstadoSisBov';
      end;
      if (CodMicroRegiaoSisBov <> -1) then begin
        if (CodMicroRegiaoSisBov = 88) then
           sSQL := sSQL +  #13#10'  and ta.cod_micro_regiao_sisbov = -1'
        else
           sSQL := sSQL +  #13#10'  and ta.cod_micro_regiao_sisbov = :CodMicroRegiaoSisBov';
      end;
      if (CodSisBovInicio <> -1) and (CodSisBovFim <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_animal_sisbov between :CodSisBovInicio and :CodSisBovFim';
      end;
      if (CodSituacaoSisBov <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_situacao_sisbov = :CodSituacaoSisBov';
      end;
      if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then begin
        sSQL := sSQL +
          #13#10'  and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim';
      end;
      if (CodFazendaNascimento <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_fazenda_nascimento = :CodFazendaNascimento';
      end;
      if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then begin
        sSQL := sSQL +
          #13#10'  and ta.dta_compra between :DtaCompraInicio and :DtaCompraFim';
      end;
      if (CodPessoaSecundariaCriador <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_pessoa_secundaria_criador = :CodPessoaSecundariaCriador';
      end;
      if (NomAnimal <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.nom_animal like :NomAnimal';
      end;
      if (DesApelido <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.des_apelido like :DesApelido';
      end;
      if (CodAptidao <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_aptidao = :CodAptidao';
      end;
      if (CodRaca <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_raca in (' + CodRaca + ')';
      end;
      if (IndSexo = 'M') or (IndSexo = 'F') then begin
        sSQL := sSQL +
          #13#10'  and ta.ind_sexo = :IndSexo';
      end;
      if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then begin
        sSQL := sSQL +
          #13#10'  and (ta.cod_animal_pai in'+
          #13#10'    (select cod_animal '+
          #13#10'       from tab_animal as ta, tab_fazenda as tf '+
          #13#10'      where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
          #13#10'        and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ';
        if (SglFazendaPai <> '') then begin
        sSQL := sSQL +
          #13#10'        and tf.sgl_fazenda = :SglFazendaPai ';
        end;
        if (CodAnimalPai <> '') then begin
        sSQL := sSQL +
          #13#10'        and ta.cod_animal_manejo =:CodAnimalPai ';
        end;
        if (DesApelidoPai <> '') then begin
        sSQL := sSQL +
          #13#10'        and ta.des_apelido =:DesApelidoPai ';
        end;
        sSQL := sSQL +
          #13#10'    ) ';
        sSQL := sSQL + ' or ( ta.cod_reprodutor_multiplo in ' +
          #13#10'    (select cod_reprodutor_multiplo ' +
          #13#10'       from tab_reprodutor_multiplo as trm, tab_fazenda as tf '+
          #13#10'      where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
          #13#10'        and trm.cod_pessoa_produtor = :CodPessoaProdutor1 ';
        if (SglFazendaPai <> '') then begin
        sSQL := sSQL +
          #13#10'        and tf.sgl_fazenda = :SglFazendaPai ';
        end;
        if (CodAnimalPai <> '') then begin
        sSQL := sSQL +
          #13#10'        and trm.cod_reprodutor_multiplo_manejo =:CodAnimalPai ';
        end;
        sSQL := sSQL +
          #13#10'    ))) ';

      end;
      if (SglFazendaMae <> '') or (CodAnimalMae <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_animal_mae in '+
          #13#10'    (select cod_animal '+
          #13#10'       from tab_animal as ta, tab_fazenda as tf '+
          #13#10'      where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
          #13#10'        and ta.cod_pessoa_produtor = :CodPessoaProdutor2 ';
        if (SglFazendaMae <> '') then begin
        sSQL := sSQL +
          #13#10'        and tf.sgl_fazenda =:SglFazendaMae ';
        end;
        if (CodAnimalMae <> '') then begin
        sSQL := sSQL +
          #13#10'        and ta.cod_animal_manejo =:CodAnimalMae ';
        end;
        sSQL := sSQL +
          #13#10'    ) ';
      end;
      if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then begin
        sSQL := sSQL +
          #13#10'  and ta.ind_animal_castrado =:IndAnimalCastrado';
      end;
      if (CodRegimeAlimentar <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_regime_alimentar = :CodRegimeAlimentar';
      end;
      if (CodCategoria <> '') then begin
        if IndConsiderarExterno = 'S' then begin
          sSQL := sSQL +
            #13#10'  and (ta.cod_categoria_animal in (' + CodCategoria + ') or ta.cod_tipo_origem = 4) ';
        end else begin
          sSQL := sSQL +
            #13#10'  and ta.cod_categoria_animal in (' + CodCategoria + ')';
        end;
      end;
      if (CodAssociacao <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_associacao_raca = :CodAssociacaoRaca';
      end;
      if (CodGrauSangue <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_grau_sangue = :CodGrauSangue';
      end;
      if (NumRgd <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.num_rgd like :NumRgd';
      end;
      if (CodTipoLugar <> -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_tipo_lugar in (2, 3)';
      end;

      if (IndCadastroEfetivado <> 'A') then begin
        if IndCadastroEfetivado = 'S' then begin
          sSQL := sSQL +
            #13#10'  and ta.dta_efetivacao_cadastro is not null';
        end;
        if IndCadastroEfetivado = 'N' then begin
          sSQL := sSQL +
            #13#10'  and ta.dta_efetivacao_cadastro is null';
        end;
      end;
      if (NumImovelCorrente <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.num_imovel_corrente = :NumImovelCorrente ';
      end;
      if (CodLocalizacaoCorrente > -1) then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_localizacao_corrente = :CodLocalizacaoCorrente ';
      end;
      if (NumCPFCNPJCorrente <> '') then begin
        sSQL := sSQL +
          #13#10'  and ta.num_cnpj_cpf_corrente = :NumCPFCNPJCorrente ';
      end;
      if IndAgrupRaca1 = 'N' then begin
        sSQL := sSQL +
        #13#10'  and ta.cod_animal = tcr.cod_animal  ' +
        #13#10'  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ' +
        #13#10'  and tcr.cod_raca = :codraca1  ' +
        #13#10'  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ';
      end;
      if IndAgrupRaca2 = 'N' then begin
        sSQL := sSQL +
        #13#10'  and ta.cod_animal = tcr2.cod_animal  ' +
        #13#10'  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ' +
        #13#10'  and tcr2.cod_raca = :codraca2  ' +
        #13#10'  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ';
      end;
      if IndAgrupRaca3 = 'N' then begin
        sSQL := sSQL +
        #13#10'  and ta.cod_animal = tcr3.cod_animal  ' +
        #13#10'  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ' +
        #13#10'  and tcr3.cod_raca = :codraca3  ' +
        #13#10'  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ';
      end;
      if IndAgrupRaca4 = 'N' then begin
        sSQL := sSQL +
        #13#10'  and ta.cod_animal = tcr4.cod_animal  ' +
        #13#10'  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ' +
        #13#10'  and tcr4.cod_raca = :codraca4  ' +
        #13#10'  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ';
      end;
      if IndAgrupRaca1 = 'S' then begin
        sSQL := sSQL +
        #13#10' and ta.cod_animal in (select cod_animal ' +
        #13#10' from tab_composicao_racial as tcr with (nolock), ' +
        #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
        #13#10' where tacr.cod_agrupamento_racas = :codraca1 ' +
        #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
        #13#10' group by cod_animal ' +
        #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ';
      end;
      if IndAgrupRaca2 = 'S' then begin
        sSQL := sSQL +
        #13#10' and ta.cod_animal in (select cod_animal ' +
        #13#10' from tab_composicao_racial as tcr with (nolock), ' +
        #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
        #13#10' where tacr.cod_agrupamento_racas = :codraca2 ' +
        #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
        #13#10' group by cod_animal ' +
        #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ';
      end;
      if IndAgrupRaca3 = 'S' then begin
        sSQL := sSQL +
        #13#10' and ta.cod_animal in (select cod_animal ' +
        #13#10' from tab_composicao_racial as tcr with (nolock), ' +
        #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
        #13#10' where tacr.cod_agrupamento_racas = :codraca3 ' +
        #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
        #13#10' group by cod_animal ' +
        #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ';
      end;
      if IndAgrupRaca4 = 'S' then begin
        sSQL := sSQL +
        #13#10' and ta.cod_animal in (select cod_animal ' +
        #13#10' from tab_composicao_racial as tcr with (nolock), ' +
        #13#10' tab_composicao_agrup_racas as tacr with (nolock) ' +
        #13#10' where tacr.cod_agrupamento_racas = :codraca4 ' +
        #13#10' and   tacr.cod_raca = tcr.cod_raca ' +
        #13#10' group by cod_animal ' +
        #13#10' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ';
      end;

      if IndAptoCobertura = 'S'
       then sSQL := sSQL + ' and ta.ind_apto_cobertura = ''S'' '
       else if IndAptoCobertura = 'N' then sSQL := sSQL + ' and ta.ind_apto_cobertura = ''N'' ';

      if IndAutenticacao = 'S' then begin
        sSQL := sSQL + '  and ta.cod_autenticacao_sisbov is not null  ';
      end;

      Query.SQL.Add(sSQL);
    end;

    sSQL := '';
    if IndAnimaisEvento = 'S' then begin
      sSQL :=
        #13#10'union '+      #13#10+
        #13#10'select '+
        #13#10'  ta.cod_pessoa_produtor as CodPessoaProdutor '+
        #13#10'  , ta.cod_animal as CodAnimal ' +
        #13#10'  , ttec.nom_reduzido_pessoa as NomReduzidoTecnico ';
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(1) = 1) then begin // CodAnimalManejo
        sSQL := sSQL +
          #13#10'  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodAnimalManejo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(2) = 1) then begin // CodCertificadora
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_certificadora as CodCertificadora ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(3) = 1) then begin // CodAnimalSisBov
        sSQL := sSQL +
          #13#10'  , case ta.cod_animal_sisbov '+
          #13#10'    when null then null ' +
          #13#10'    else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + '+
          #13#10'    case ta.cod_micro_regiao_sisbov when -1 then  ''' +
          #13#10'         else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end + ''  ' +
          #13#10'    right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) + '' '' + '+
          #13#10'    right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '' '' + '+
          #13#10'    right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(4) = 1) then begin // CodSituacaoSisBov
        sSQL := sSQL +
          #13#10'  , ta.cod_situacao_sisBov as CodSituacaoSisBov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(5) = 1) then begin // DtaIdentificacaoSisbov
        sSQL := sSQL +
          #13#10'  , ta.dta_identificacao_sisbov as DtaIdentificacaoSisbov ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(6) = 1) then begin // DtaNascimento
        sSQL := sSQL +
          #13#10'  , ta.dta_nascimento as DtaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(7) = 1) then begin // SglFazendaNascimento
        sSQL := sSQL +
          #13#10'  , tfn.sgl_fazenda as SglFazendaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'  , tfn.nom_fazenda as NomFazendaNascimento ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(9) = 1) then begin // DtaCompra
        sSQL := sSQL +
          #13#10'  , ta.dta_compra as DtaCompra ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'  , tpsc.nom_reduzido_pessoa_secundaria as NomReduzidoCriador ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) then begin // NomAnimal
        sSQL := sSQL +
          #13#10'  , ta.nom_animal as NomAnimal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) then begin // DesApelido
        sSQL := sSQL +
          #13#10'  , ta.des_apelido as DesApelido ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'  , tar.sgl_associacao_raca as SglAssociacaoRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'  , tgs.sgl_grau_sangue as SglGrauSangue ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then begin // NumRGD
        sSQL := sSQL +
          #13#10'  , ta.num_rgd as NumRGD ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(16) = 1) then begin // SglRaca
        sSQL := sSQL +
          #13#10'  , tr.sgl_raca as SglRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'  , tr.des_raca as DesRaca ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(18) = 1) then begin // SglAptidao
        sSQL := sSQL +
          #13#10'  , taa.sgl_aptidao as SglAptidao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'  , taa.des_aptidao as DesAptidao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(20) = 1) then begin // SglCategoria
        sSQL := sSQL +
          #13#10'  , tc.sgl_categoria_animal as SglCategoria ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'  , tc.des_categoria_animal as DesCategoria ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(22) = 1) then begin // IndSexo
        sSQL := sSQL +
          #13#10'  , ta.ind_sexo as IndSexo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(23) = 1) then begin // SglOrigem
        sSQL := sSQL +
          #13#10'  , tto.sgl_tipo_origem as SglOrigem ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'  , tto.des_tipo_origem as DesOrigem ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) or
        (IntRelatorios.CampoAssociado(44) = 1) or (IntRelatorios.CampoAssociado(45) = 1) then begin // CodAnimalManejoPai, DesApelidoPai, NomAnimalPai
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_pai '+
          #13#10'  , ta.cod_reprodutor_multiplo ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(26) = 1) then begin // CodAnimalManejoMae
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_mae ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(27) = 1) then begin // CodAnimalManejoReceptor
        sSQL := sSQL +
          #13#10'  , ta.cod_animal_receptor ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(28) = 1) then begin // IndAnimalCastrado
        sSQL := sSQL +
          #13#10'  , ta.ind_animal_castrado as IndAnimalCastrado ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(29) = 1) then begin // SglRegimeAlimentar
        sSQL := sSQL +
          #13#10'  , tra.sgl_regime_alimentar as SglRegimeAlimentar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'  , tra.des_regime_alimentar as DesRegimeAlimentar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(31) = 1) then begin // SglTipoLugar
        sSQL := sSQL +
          #13#10'  , tlu.sgl_tipo_lugar as SglTipoLugar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        sSQL := sSQL +
          #13#10'  , tlu.des_tipo_lugar as DesTipoLugar ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(33) = 1) then begin // SglLote
        sSQL := sSQL +
          #13#10'  , tlt.sgl_lote as SglLote ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        sSQL := sSQL +
          #13#10'  , tlt.des_lote as DesLote ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(35) = 1) then begin // SglLocal
        sSQL := sSQL +
          #13#10'  , tl.sgl_local as SglLocal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
        sSQL := sSQL +
          #13#10'  , tl.des_local as DesLocal ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(37) = 1) then begin // SglFazendaCorrente
        sSQL := sSQL +
          #13#10'  , tfc.sgl_fazenda as SglFazendaCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
          #13#10'  , tfc.nom_fazenda as NomFazendaCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(39) = 1) then begin // NumCNPJCPFCorrente
        sSQL := sSQL +
          #13#10'  , ta.num_cnpj_cpf_corrente as NumCNPJCPFCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(40) = 1) then begin // NumImovelCorrente
        sSQL := sSQL +
          #13#10'  , ta.num_imovel_corrente as NumImovelCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(48) = 1) then begin // CodLocalizacaoCorrente
        sSQL := sSQL +
          #13#10'  , ta.cod_localizacao_corrente as CodLocalizacaoCorrente ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(42) = 1) then begin // Idade
        sSQL := sSQL +
          #13#10'  , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as Idade';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(43) = 1) then begin // Comp Racial
        sSQL := sSQL +
          #13#10'  , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(46) = 1) then begin // Observacao
        sSQL := sSQL +
          #13#10'  , substring(ta.txt_observacao, 1,30) as TxtObservacao ';
      end;
      if not bPersonalizavel or (IntRelatorios.CampoAssociado(47) = 1) then begin // Data de Cadastramento
        sSQL := sSQL +
          #13#10'  , ta.dta_cadastramento as DtaCadastramento ';
      end;


      sSQL := sSQL +
        #13#10'  , case isnull(tev.dta_aplicacao_evento, 0) '+
        #13#10'    when 0 then ''N'' '+
        #13#10'    else ''S'' '+
        #13#10'    end as IndEventoAplicado ';
      Query.SQL.Add(sSQL);

      sSQL :=
        #13#10'from '+
        #13#10'  tab_animal as ta with (nolock) '+
        #13#10'  , tab_fazenda as tf with (nolock) '+
        #13#10'  , tab_pessoa as ttec with (nolock) '+
        #13#10'  , tab_animal_evento as tev with (nolock) ';
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(7) = 1) // SglFazendaNascimento
      or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'  , tab_fazenda tfn with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'  , tab_pessoa_secundaria tpsc with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'  , tab_associacao_raca tar with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'  , tab_grau_sangue tgs with (nolock) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(16) = 1) // SglRaca
      or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'  , tab_raca tr ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(18) = 1) // SglAptidao
      or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'  , tab_aptidao taa ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(23) = 1) // SglOrigem
      or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'  , tab_tipo_origem as tto ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(29) = 1)  // SglRegimeAlimentar
      or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'  , tab_regime_alimentar tra ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(31) = 1) // SglTipoLugar
      or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        sSQL := sSQL +
          #13#10'  , tab_tipo_lugar as tlu ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(33) = 1) // SglLote
      or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        sSQL := sSQL +
          #13#10'  , tab_lote as tlt ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(35) = 1) // SglLocal
      or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
        sSQL := sSQL +
          #13#10'  , tab_local as tl ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(20) = 1) // SglCategoria
      or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'  , tab_categoria_animal as tc ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(37) = 1) // SglFazendaCorrente
      or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
          #13#10'  , tab_fazenda tfc with (nolock) ';
      end;
      Query.SQL.Add(sSQL);

      sSQL :=
        #13#10'where '+
        #13#10'  ta.dta_fim_validade is null '+
        #13#10'  and ta.cod_pessoa_produtor = :CodPessoaProdutor '+
        #13#10'  and ta.cod_fazenda_manejo *= tf.cod_fazenda '+
        #13#10'  and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor '+
        #13#10'  and ta.cod_pessoa_tecnico *= ttec.cod_pessoa '+
        #13#10'  and ta.cod_pessoa_produtor = tev.cod_pessoa_produtor '+
        #13#10'  and ta.cod_animal = tev.cod_animal '+
        #13#10'  and tev.cod_evento = :CodEvento ';

      if (IndAnimalSemTecnico = 'N') then begin
        if CodPessoaTecnico > 0 then begin
           sSQL := sSQL +
                   #13#10'      and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ';
        end
        else begin
          if (Conexao.CodPapelUsuario = 3) then begin
             sSQL := sSQL +
                     #13#10'      and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                     #13#10'       or  ta.cod_pessoa_tecnico is null)';
          end;
        end;
      end
      else begin
             sSQL := sSQL +
                     #13#10'      and ta.cod_pessoa_tecnico is null';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(7) = 1) // SglFazendaNascimento
      or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
        sSQL := sSQL +
          #13#10'  and tfn.cod_fazenda =* ta.cod_fazenda_nascimento '+
          #13#10'  and tfn.cod_pessoa_produtor =* ta.cod_pessoa_produtor ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
        sSQL := sSQL +
          #13#10'  and tpsc.cod_pessoa_secundaria =* ta.cod_pessoa_secundaria_criador '+
          #13#10'  and tpsc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
        sSQL := sSQL +
          #13#10'  and tar.cod_associacao_raca =* ta.cod_associacao_raca ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
        sSQL := sSQL +
          #13#10'  and tgs.cod_grau_sangue =* ta.cod_grau_sangue ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(16) = 1) // SglRaca
      or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
        sSQL := sSQL +
          #13#10'  and tr.cod_raca = ta.cod_raca ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(18) = 1) // SglAptidao
      or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
        sSQL := sSQL +
          #13#10'  and taa.cod_aptidao = ta.cod_aptidao ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(23) = 1) // SglOrigem
      or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
        sSQL := sSQL +
          #13#10'  and tto.cod_tipo_origem = ta.cod_tipo_origem ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(29) = 1)  // SglRegimeAlimentar
      or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
        sSQL := sSQL +
          #13#10'  and tra.cod_regime_alimentar =* ta.cod_regime_alimentar ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(31) = 1)  // SglTipoLugar
      or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
        if (CodTipoLugar <> -1) then begin
          sSQL := sSQL +
            #13#10'  and tlu.cod_tipo_lugar = ta.cod_tipo_lugar ';
        end else begin
          sSQL := sSQL +
            #13#10'  and tlu.cod_tipo_lugar =* ta.cod_tipo_lugar ';
        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(33) = 1)  // SglLote
      or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
        if (CodLote <> '') then begin
          sSQL := sSQL +
            #13#10'  and ta.cod_lote_corrente = tlt.cod_lote '+
            #13#10'  and ta.cod_pessoa_produtor = tlt.cod_pessoa_produtor '+
            #13#10'  and ta.cod_fazenda_manejo = tlt.cod_fazenda ';
        end else begin
          sSQL := sSQL +
            #13#10'  and ta.cod_lote_corrente *= tlt.cod_lote '+
            #13#10'  and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor '+
            #13#10'  and ta.cod_fazenda_manejo *= tlt.cod_fazenda ';
        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(35) = 1)  // SglLocal
      or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
//        if (CodLocal <> '') then begin
//          sSQL := sSQL +
//            #13#10'  and ta.cod_local_corrente = tl.cod_local '+
//            #13#10'  and ta.cod_pessoa_produtor = tl.cod_pessoa_produtor '+
//            #13#10'  and ta.cod_fazenda_manejo = tl.cod_fazenda ';
//        end else begin
          sSQL := sSQL +
            #13#10'  and ta.cod_local_corrente *= tl.cod_local '+
            #13#10'  and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
            #13#10'  and ta.cod_fazenda_manejo *= tl.cod_fazenda ';
//        end;
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(37) = 1) // SglFazendaCorrente
      or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
        sSQL := sSQL +
          #13#10'  and tfc.cod_fazenda =* ta.cod_fazenda_corrente '+
          #13#10'  and tfc.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          #13#10'  or  tfc.cod_pessoa_produtor =* ta.cod_pessoa_corrente '+
          #13#10'  and tfc.cod_propriedade_rural =* ta.cod_propriedade_corrente) ';
      end;
      if not bPersonalizavel
      or (IntRelatorios.CampoAssociado(20) = 1) // SglCategoria
      or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
        sSQL := sSQL +
          #13#10'  and ta.cod_categoria_animal *= tc.cod_categoria_animal ';
      end;
      if IndAutenticacao = 'S' then begin
        sSQL := sSQL +
          #13#10'  and ta.cod_autenticacao_sisbov is not null ';
      end;
      Query.SQL.Add(sSQL);
    end;
    sSQL := '';
{ A ordenação da query foi substituida para que os registros sejam ordenados
  de acordo com os campos selecionados

    if CodOrdenacao = 'M' then begin
      sSQL := sSQL +
        #13#10'order by '+
        #13#10'  tf.sgl_fazenda, ta.cod_animal_manejo ';
    end;
    if CodOrdenacao = 'C' then begin
      sSQL := sSQL +
        #13#10'order by '+
        #13#10'  ta.cod_animal_certificadora ';
    end;
    if CodOrdenacao = 'S' then begin
      sSQL := sSQL +
        #13#10'order by '+
        #13#10'  ta.cod_animal_sisbov ';
    end;
    if CodOrdenacao = 'A' then begin
      sSQL := sSQL +
        #13#10'order by '+
        #13#10'  ta.des_apelido ';
    end;}
    if not bTemporaria then begin
       sSQL := #13#10'order by ' + strOrderBy;
    end;
    
    if sSQL <> '' then begin
      Query.SQL.Add(sSQL);
    end;
{$ENDIF}
    Query.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;
    if CodFazendaManejo <> -1 then
          Query.ParamByName('CodFazendaManejo').AsInteger := CodFazendaManejo;
    if (CodManejoInicio <> '') and (CodManejoFim <> '') then
        begin
          Query.ParamByName('CodManejoInicio').AsString := CodManejoInicio;
          Query.ParamByName('CodManejoFim').AsString := CodManejoFim;
         end;
    if (CodAnimalCertificadora <> '') then
          Query.ParamByName('CodAnimalCertificadora').AsString := CodAnimalCertificadora;
    if (CodPaisSisBov <> -1) then
          Query.ParamByName('CodPaisSisBov').AsInteger := CodPaisSisBov;
    if (CodEstadoSisBov <> -1) then
          Query.ParamByName('CodEstadoSisBov').AsInteger := CodEstadoSisBov;
    if (CodMicroRegiaoSisBov <> -1) then
    begin
      if (CodMicroRegiaoSisBov <> 88) then
        Query.ParamByName('CodMicroRegiaoSisBov').AsInteger := CodMicroRegiaoSisBov;
    end;
    if (CodSisBovInicio <> -1) and (CodSisBovFim <> -1) then
        begin
          Query.ParamByName('CodSisBovInicio').AsInteger := CodSisBovInicio;
          Query.ParamByName('CodSisBovFim').AsInteger := CodSisBovFim;
         end;
    if (CodSituacaoSisBov <> '') then
          Query.ParamByName('CodSituacaoSisBov').AsString := CodSituacaoSisBov;
    if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
        begin
          Query.ParamByName('DtaNascimentoInicio').AsDateTime := DtaNascimentoInicio;
          Query.ParamByName('DtaNascimentoFim').AsDateTime := DtaNascimentoFim;
         end;
    if (CodFazendaNascimento <> -1) then
          Query.ParamByName('CodFazendaNascimento').AsInteger := CodFazendaNascimento;
    if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then
        begin
          Query.ParamByName('DtaCompraInicio').AsDateTime := DtaCompraInicio;
          Query.ParamByName('DtaCompraFim').AsDateTime := DtaCompraFim;
         end;
    if (IndAnimalSemTecnico = 'N') then begin
       if (CodTecnico > 0) then begin
          Query.ParamByName('cod_pessoa_tecnico').AsInteger := CodTecnico;
       end;
       if (CodTecnico < 0) and (Conexao.CodPapelUsuario = 3) then begin
          Query.ParamByName('cod_pessoa_tecnico').AsInteger := Conexao.CodPessoa;
       end;
    end;
    if (CodPessoaSecundariaCriador <> -1) then
          Query.ParamByName('CodPessoaSecundariaCriador').AsInteger := CodPessoaSecundariaCriador;
    if (NomAnimal <> '') then
          Query.ParamByName('NomAnimal').AsString := '%' + NomAnimal + '%';
    if (DesApelido <> '') then
          Query.ParamByName('DesApelido').AsString := '%' + DesApelido + '%';
    if (CodAptidao <> -1) then
          Query.ParamByName('CodAptidao').AsInteger := CodAptidao;
    if (IndSexo = 'F') or (IndSexo = 'M') then
          Query.ParamByName('IndSexo').AsString := IndSexo;
    if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then
          Query.ParamByName('CodPessoaProdutor1').AsInteger := Conexao.CodProdutorTrabalho;
    if (SglFazendaPai <> '') then
          Query.ParamByName('SglFazendaPai').AsString := SglFazendaPai;
    if (CodAnimalPai <> '') then
          Query.ParamByName('CodAnimalPai').AsString := CodAnimalPai;
    if (DesApelidoPai <> '') then
          Query.ParamByName('DesApelidoPai').AsString := DesApelidoPai;
    if (SglFazendaMae <> '') or (CodAnimalMae <> '') then
          Query.ParamByName('CodPessoaProdutor2').AsInteger := Conexao.CodProdutorTrabalho;
    if (SglFazendaMae <> '') then
          Query.ParamByName('SglFazendaMae').AsString := SglFazendaMae;
    if (CodAnimalMae <> '') then
          Query.ParamByName('CodAnimalMae').AsString := CodAnimalMae;
    if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then
          Query.ParamByName('IndAnimalCastrado').AsString := IndAnimalCastrado;
    if (CodRegimeAlimentar <> -1) then
          Query.ParamByName('CodRegimeAlimentar').AsInteger := CodRegimeAlimentar;
    if (CodAssociacao <> -1) then
          Query.ParamByName('CodAssociacaoRaca').AsInteger := CodAssociacao;
    if (CodGrauSangue <> -1) then
          Query.ParamByName('CodGrauSangue').AsInteger := CodGrauSangue;
    if (NumRgd <> '') then
          Query.ParamByName('NumRgd').AsString := NumRgd + '%';
    if (CodTipoLugar <> -1) then
          Query.ParamByName('CodTipoLugar').AsInteger := CodTipoLugar;
    if (CodFazendaCorrente <> -1) then
          Query.ParamByName('CodFazendaCorrente').AsInteger := CodFazendaCorrente;
    if (NumImovelCorrente <> '') then
          Query.ParamByName('NumImovelCorrente').AsString := NumImovelCorrente;
    if (CodLocalizacaoCorrente > -1) then
          Query.ParamByName('CodLocalizacaoCorrente').AsInteger := CodLocalizacaoCorrente;
    if (NumCPFCNPJCorrente <> '') then
          Query.ParamByName('NumCPFCNPJCorrente').AsString := NumCPFCNPJCorrente;
    if (CodEvento > 0) then
          Query.ParamByName('CodEvento').AsInteger := CodEvento;
    if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          Query.ParamByName('codraca1').AsInteger := CodRaca1;
          Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
    end;
    if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          Query.ParamByName('codraca2').AsInteger := CodRaca2;
          Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
    end;
    if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          Query.ParamByName('codraca3').AsInteger := CodRaca3;
          Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
    end;
    if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          Query.ParamByName('codraca4').AsInteger := CodRaca4;
          Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
    end;

    try
{$IFDEF MSSQL}
      if bTemporaria then begin
        Query.ExecSQL;

        if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) // CodAnimalManejoPai
          or (IntRelatorios.CampoAssociado(44) = 1)                      // DesApelidoPai
          or (IntRelatorios.CampoAssociado(45) = 1) then begin           // NomAnimalPai
          // Atualizando animais que tem como pai um touro
          sSQL :=
            #13#10'update #tmp_animais_pesquisar_relatorio '+
            #13#10'  set '+
            #13#10'    CodAnimalManejoPai = '+
            #13#10'      case when ta.cod_fazenda_manejo is null then '+
            #13#10'        ta.cod_animal_manejo '+
            #13#10'      else '+
            #13#10'        tf.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
            #13#10'      end '+
            #13#10'    , NomAnimalPai = ta.nom_animal '+
            #13#10'    , DesApelidoPai = ta.des_apelido '+
            #13#10'  from '+
            #13#10'    tab_fazenda tf '+
            #13#10'    , tab_animal ta '+
            #13#10'  where '+
            #13#10'    tf.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
            #13#10'    and tf.cod_fazenda =* ta.cod_fazenda_manejo '+
            #13#10'    and ta.cod_pessoa_produtor = #tmp_animais_pesquisar_relatorio.CodPessoaProdutor '+
            #13#10'    and ta.cod_animal = #tmp_animais_pesquisar_relatorio.cod_animal_pai '+
            #13#10'    and #tmp_animais_pesquisar_relatorio.cod_animal_pai is not null ';
          Query.SQL.Clear;
          Query.SQL.Add(sSQL);
          Query.ExecSQL;

          // Atualizando os animais que tem como pai um RM
          sSQL :=
            #13#10'update #tmp_animais_pesquisar_relatorio '+
            #13#10'  set '+
            #13#10'    CodAnimalManejoPai = '+
            #13#10'      case when trm.cod_fazenda_manejo is null then '+
            #13#10'        trm.cod_reprodutor_multiplo_manejo '+
            #13#10'      else '+
            #13#10'        tf.sgl_fazenda + '' '' + trm.cod_reprodutor_multiplo_manejo '+
            #13#10'      end '+
            #13#10'  from '+
            #13#10'      tab_fazenda tf '+
            #13#10'    , tab_reprodutor_multiplo trm '+
            #13#10'  where '+
            #13#10'    tf.cod_pessoa_produtor =* trm.cod_pessoa_produtor '+
            #13#10'    and tf.cod_fazenda =* trm.cod_fazenda_manejo '+
            #13#10'    and trm.cod_pessoa_produtor = #tmp_animais_pesquisar_relatorio.CodPessoaProdutor '+
            #13#10'    and trm.cod_reprodutor_multiplo = #tmp_animais_pesquisar_relatorio.cod_reprodutor_multiplo '+
            #13#10'    and #tmp_animais_pesquisar_relatorio.cod_reprodutor_multiplo is not null ';
          Query.SQL.Clear;
          Query.SQL.Add(sSQL);
          Query.ExecSQL;
        end;

        if not bPersonalizavel or (IntRelatorios.CampoAssociado(26) = 1) then begin
          sSQL :=
            #13#10'update #tmp_animais_pesquisar_relatorio '+
            #13#10'  set CodAnimalManejoMae = isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo '+
            #13#10'  from '+
            #13#10'    tab_fazenda tf '+
            #13#10'    , tab_animal ta '+
            #13#10'  where '+
            #13#10'    tf.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
            #13#10'    and tf.cod_fazenda =* ta.cod_fazenda_manejo '+
            #13#10'    and ta.cod_pessoa_produtor = #tmp_animais_pesquisar_relatorio.CodPessoaProdutor '+
            #13#10'    and ta.cod_animal = #tmp_animais_pesquisar_relatorio.cod_animal_mae '+
            #13#10'    and #tmp_animais_pesquisar_relatorio.cod_animal_mae is not null ';
          Query.SQL.Clear;
          Query.SQL.Add(sSQL);
          Query.ExecSQL;
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(27) = 1) then begin
          sSQL :=
            #13#10'update #tmp_animais_pesquisar_relatorio '+
            #13#10'  set CodAnimalManejoReceptor = isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo '+
            #13#10'  from '+
            #13#10'    tab_fazenda tf '+
            #13#10'    , tab_animal ta '+
            #13#10'  where '+
            #13#10'    tf.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
            #13#10'    and tf.cod_fazenda =* ta.cod_fazenda_manejo '+
            #13#10'    and ta.cod_pessoa_produtor = #tmp_animais_pesquisar_relatorio.CodPessoaProdutor '+
            #13#10'    and ta.cod_animal = #tmp_animais_pesquisar_relatorio.cod_animal_receptor '+
            #13#10'    and #tmp_animais_pesquisar_relatorio.cod_animal_receptor is not null ';
          Query.SQL.Clear;
          Query.SQL.Add(sSQL);
          Query.ExecSQL;
        end;
        sSQL :=
        #13#10'select '+
        #13#10'    CodPessoaProdutor '+
        #13#10'    , CodAnimal '+
        #13#10'    , NomReduzidoTecnico';
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(1) = 1) then begin // CodAnimalManejo
          sSQL := sSQL +
            #13#10'  , CodAnimalManejo ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(2) = 1) then begin // CodCertificadora
          sSQL := sSQL +
            #13#10'  , CodCertificadora ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(3) = 1) then begin // CodAnimalSisBov
          sSQL := sSQL +
            #13#10'  , CodAnimalSisBov ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(4) = 1) then begin // CodSituacaoSisBov
          sSQL := sSQL +
            #13#10'  , CodSituacaoSisBov ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(5) = 1) then begin // DtaIdentificacaoSisbov
          sSQL := sSQL +
            #13#10'  , DtaIdentificacaoSisbov ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(6) = 1) then begin // DtaNascimento
          sSQL := sSQL +
            #13#10'  , DtaNascimento ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(7) = 1) then begin // SglFazendaNascimento
          sSQL := sSQL +
            #13#10'  , SglFazendaNascimento ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(8) = 1) then begin // NomFazendaNascimento
          sSQL := sSQL +
            #13#10'  , NomFazendaNascimento ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(9) = 1) then begin // DtaCompra
          sSQL := sSQL +
            #13#10'  , DtaCompra ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) then begin // NomReduzidoCriador
          sSQL := sSQL +
            #13#10'  , NomReduzidoCriador ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) then begin // NomAnimal
          sSQL := sSQL +
            #13#10'  , NomAnimal ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) then begin // DesApelido
          sSQL := sSQL +
            #13#10'  , DesApelido ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) then begin // SglAssociacaoRaca
          sSQL := sSQL +
            #13#10'  , SglAssociacaoRaca ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) then begin // SglGrauSangue
          sSQL := sSQL +
            #13#10'  , SglGrauSangue ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then begin // NumRGD
          sSQL := sSQL +
            #13#10'  , NumRGD ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(16) = 1) then begin // SglRaca
          sSQL := sSQL +
            #13#10'  , SglRaca ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(17) = 1) then begin // DesRaca
          sSQL := sSQL +
            #13#10'  , DesRaca ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(18) = 1) then begin // SglAptidao
          sSQL := sSQL +
            #13#10'  , SglAptidao ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(19) = 1) then begin // DesAptidao
          sSQL := sSQL +
            #13#10'  , DesAptidao ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(20) = 1) then begin // SglCategoria
          sSQL := sSQL +
            #13#10'  , SglCategoria ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(21) = 1) then begin // DesCategoria
          sSQL := sSQL +
            #13#10'  , DesCategoria ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(22) = 1) then begin // IndSexo
          sSQL := sSQL +
            #13#10'  , IndSexo ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(23) = 1) then begin // SglOrigem
          sSQL := sSQL +
            #13#10'  , SglOrigem ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(24) = 1) then begin // DesOrigem
          sSQL := sSQL +
            #13#10'  , DesOrigem ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) then begin // CodAnimalManejoPai
          sSQL := sSQL +
            #13#10'  , CodAnimalManejoPai ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(45) = 1) then begin // NomAnimalPai
          sSQL := sSQL +
            #13#10'  , NomAnimalPai ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(44) = 1) then begin // DesApelidoPai
          sSQL := sSQL +
            #13#10'  , DesApelidoPai ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(26) = 1) then begin // CodAnimalManejoMae
          sSQL := sSQL +
            #13#10'  , CodAnimalManejoMae ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(27) = 1) then begin // CodAnimalManejoReceptor
          sSQL := sSQL +
            #13#10'  , CodAnimalManejoReceptor ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(28) = 1) then begin // IndAnimalCastrado
          sSQL := sSQL +
            #13#10'  , IndAnimalCastrado ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(29) = 1) then begin // SglRegimeAlimentar
          sSQL := sSQL +
            #13#10'  , SglRegimeAlimentar ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(30) = 1) then begin // DesRegimeAlimentar
          sSQL := sSQL +
            #13#10'  , DesRegimeAlimentar ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(31) = 1) then begin // SglTipoLugar
          sSQL := sSQL +
            #13#10'  , SglTipoLugar ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(32) = 1) then begin // DesTipoLugar
          sSQL := sSQL +
            #13#10'  , DesTipoLugar ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(33) = 1) then begin // SglLote
          sSQL := sSQL +
            #13#10'  , SglLote ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(34) = 1) then begin // DesLote
          sSQL := sSQL +
            #13#10'  , DesLote ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(35) = 1) then begin // SglLocal
          sSQL := sSQL +
            #13#10'  , SglLocal ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(36) = 1) then begin // DesLocal
          sSQL := sSQL +
            #13#10'  , DesLocal ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(37) = 1) then begin // SglFazendaCorrente
          sSQL := sSQL +
            #13#10'  , SglFazendaCorrente ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(38) = 1) then begin // NomFazendaCorrente
          sSQL := sSQL +
            #13#10'  , NomFazendaCorrente ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(39) = 1) then begin // NumCNPJCPFCorrente
          sSQL := sSQL +
            #13#10'  , NumCNPJCPFCorrente ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(40) = 1) then begin // NumImovelCorrente
          sSQL := sSQL +
            #13#10'  , NumImovelCorrente ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(48) = 1) then begin // CodLocalizacaoCorrente
          sSQL := sSQL +
            #13#10'     , CodLocalizacaoCorrente ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(42) = 1) then begin // Idade
          sSQL := sSQL +
            #13#10'  , Idade ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(43) = 1) then begin // Composicao Racial
          sSQL := sSQL +
            #13#10'  , DesComposicaoRacial ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(46) = 1) then begin // Observacao
          sSQL := sSQL +
            #13#10'  , TxtObservacao ';
        end;
        if not bPersonalizavel or (IntRelatorios.CampoAssociado(47) = 1) then begin // Observacao
          sSQL := sSQL +
            #13#10'  , DtaCadastramento ';
        end;

        sSQL := sSQL +
          #13#10'  , IndEventoAplicado '+
          #13#10'from '+
          #13#10'  #tmp_animais_pesquisar_relatorio ';

        sSQL := sSQL +
          #13#10' ORDER BY ' + strOrderBy;

        Query.SQL.Clear;
        Query.SQL.Add(sSQL);
      end;
{$ENDIF}
      Query.Open;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1006, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1006;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntAnimais.ObtemFilhos(DadosAnimal: TDadosAnimal;
  var CodFilhos: String): Integer;
const
  NomeMetodo : String = 'ObtemFilhos';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select distinct cod_animal ' +
                '  from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and ((cod_animal_mae = :cod_animal) or (cod_animal_receptor = :cod_animal)) '+
                '   and cod_categoria_animal = 1 ' +
                '   and dta_fim_validade is null ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

      CodFilhos := '';

      Q.Open;

      while not Q.EOF do begin
        CodFilhos := CodFilhos + IntToStr(Q.FieldByName('cod_animal').AsInteger);
        Q.Next;
        if not Q.EOF then begin
          CodFilhos := CodFilhos + ', ';
        end;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1077, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1077;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarRelatorioConsolidado(Query: THerdomQuery;
                                                   SglProdutor,
                                                   NomPessoaProdutor,
                                                   CodSituacaoSisbov: String;
                                                   DtaNascimentoInicio,
                                                   DtaNascimentoFim,
                                                   DtaIdentificacaoInicio,
                                                   DtaIdentifcacaoFim: TDateTime;
                                                   CodMicroRegiaoSisbovNascimento: Integer;
                                                   NomMicroRegiaoNascimento: String;
                                                   CodEstadoNascimento: Integer;
                                                   NumImovelNascimento: String;
                                                   CodLocalizacaoNascimento,
                                                   CodMicroRegiaoSisbovIdentificacao: Integer;
                                                   NomMicroRegiaoIdentificacao: String;
                                                   CodEstadoIdentificacao: Integer;
                                                   NumImovelIdentificacao: String;
                                                   CodLocalizacaoIdentificacao: Integer;
                                                   DtaCompraInicio,
                                                   DtaCompraFim: TDateTime;
                                                   CodRaca,
                                                   IndSexo,
                                                   CodOrigem,
                                                   IndAnimalCastrado: String;
                                                   CodRegimeAlimentar: Integer;
                                                   CodCategoria: String;
                                                   CodAssociacaoRaca,
                                                   CodGrauSangue,
                                                   CodTipoLugar: Integer;
                                                   NumImovelCorrente: String;
                                                   CodLocalizacaoCorrente: Integer;
                                                   NumCNPJCPFCorrente,
                                                   NomPaisOrigem: String;
                                                   IndAgrupRaca1: String;
                                                   CodRaca1: Integer;
                                                   QtdCompRacialInicio1,
                                                   QtdCompRacialFim1: Double;
                                                   IndAgrupRaca2: String;
                                                   CodRaca2: Integer;
                                                   QtdCompRacialInicio2,
                                                   QtdCompRacialFim2: Double;
                                                   IndAgrupRaca3: String;
                                                   CodRaca3: Integer;
                                                   QtdCompRacialInicio3,
                                                   QtdCompRacialFim3: Double;
                                                   IndAgrupRaca4: String;
                                                   CodRaca4: Integer;
                                                   QtdCompRacialInicio4,
                                                   QtdCompRacialFim4: Double;
                                                   IndAptoCobertura: String;
                                                   DtaInicioCertificado,
                                                   DtaFimCertificado,
                                                   DtaInicioCadastramento,
                                                   DtaFimCadastramento: TDateTime;
                                                   NumCNPJCPFTecnico,
                                                   IndAnimalSemTecnico,
                                                   IndAnimalCompradoComEvento: String;
                                                   CodTarefa: Integer;
                                                   DtaInicioCadastramentoHerdom,
                                                   DtaFimCadastramentoHerdom: TDateTime): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioConsolidado';
  CodRelatorio: Integer = 3;

  // Indicadores utilizados como campos que determinam a inclusão ou
  // exclusão de alguma string SQL
  ccDesprezar = -1;
  ccAdicionar = 0;

  // Campos que compõe o relatório
  ccSglProdutor:                 Integer = 1;
  ccNomPessoaProdutor:           Integer = 2;
  ccCodSituacaoSISBOV:           Integer = 3;
  ccDesSituacaoSISBOV:           Integer = 4;
  ccMesIdentificacaoSISBOV:      Integer = 5;
  ccAnoIdentificacaoSISBOV:      Integer = 6;
  ccMesNascimento:               Integer = 7;
  ccAnoNascimento:               Integer = 8;
  ccNomLugarNascimento:          Integer = 9;
  ccNomMunicipioNascimento:      Integer = 10;
  ccNomMicroRegiaoNascimento:    Integer = 11;
  ccSglEstadoNascimento:         Integer = 12;
  ccNomEstadoNascimento:         Integer = 13;
  ccNomLugarIdentificacao:       Integer = 14;
  ccNomMunicipioIdentificacao:   Integer = 15;
  ccNomMicroRegiaoIdentificacao: Integer = 16;
  ccSglEstadoIdentificacao:      Integer = 17;
  ccNomEstadoIdentificacao:      Integer = 18;
  ccMesCompra:                   Integer = 19;
  ccAnoCompra:                   Integer = 20;
  ccNomReduzidoCriador:          Integer = 21;
  ccSglAssociacaoRaca:           Integer = 22;
  ccSglGrauSangue:               Integer = 23;
  ccDesGrauSangue:               Integer = 24;
  ccSglRaca:                     Integer = 25;
  ccDesRaca:                     Integer = 26;
  ccSglAptidao:                  Integer = 27;
  ccDesAptidao:                  Integer = 28;
  ccSglCategoria:                Integer = 29;
  ccDesCategoria:                Integer = 30;
  ccIndSexo:                     Integer = 31;
  ccSglOrigem:                   Integer = 32;
  ccDesOrigem:                   Integer = 33;
  ccSglRegimeAlimentar:          Integer = 34;
  ccDesRegimeAlimentar:          Integer = 35;
  ccSglTipoLugar:                Integer = 36;
  ccDesTipoLugar:                Integer = 37;
  ccNomLugarCorrente:            Integer = 38;
  ccNomPaisOrigem:               Integer = 39;
  ccQtdAnimais:                  Integer = 40;
  ccDesComposicaoRacial:         Integer = 41;
  ccDtaPrevisaoCertificado:      Integer = 42;
  ccNomProdutorAnimalVendido:    Integer = 43;
  ccDtaCompra:                   Integer = 44;
  ccDtaNascimento:               Integer = 45;
  ccDtaIdentificacaoSISBOV:      Integer = 46;
  ccNomPessoaTecnico:            Integer = 47;
  ccNumeroSISBOV:                Integer = 48;
  ccCodigoManejo:                Integer = 49;
  ccIdade:                       Integer = 50;
  ccDataCadastroHerdom:          Integer = 51;
var
  X, NumDiasEspera: Integer;
  sAux: String;
  iAux: Integer;
  CodCampo: Integer;
  IntRelatorios: TIntRelatorios;
  bPersonalizavel, bGroupBy,
  bGroupByFirst, bOrderByFirst,
  bDtaPrevisaoCertificado, bDtaCadastramento, bDtaCadastramentoHerdom: Boolean;
  Param : TValoresParametro;
  CodTecnico: Integer;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        Query.SQL.Text := Query.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

  function SQLgb(Linha: String; VerificaCampos: Array Of Integer): Boolean;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      if bGroupByFirst then begin
        bGroupByFirst := False;
        Linha := '  ' + Linha;
      end else begin
        Linha := '  , ' + Linha;
      end;
      SQL(Linha, ccAdicionar);
    end;
  end;

  function CamposAssociados(VerificaCampos: Array Of Integer): Boolean;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
  end;

  function RetornaCodTecnico(numCNPJCPFTecnico: String): Integer;
   begin
      with Query do begin
        SQL.Clear;
        SQL.Add('Select cod_pessoa From tab_pessoa');
        SQL.Add('Where num_cnpj_cpf = :num_cnpj_cpf_tecnico');
        ParamByName('num_cnpj_cpf_tecnico').AsString := numCNPJCPFTecnico;
        Open;
        if IsEmpty then begin
            Result := -1718;
            Exit;
        end;
        CodTecnico := Query.fieldByName('cod_pessoa').AsInteger;
        Result := 1;
      end;
   end;
begin
  {----------------------------------------------------------------------------
  * Notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  if DtaNascimentoInicio > DtaNascimentoFim then begin
    Mensagens.Adicionar(2022, Self.ClassName, NomMetodo, []);
    Result := -2022;
    Exit;
  end;

  if DtaIdentificacaoInicio > DtaIdentifcacaoFim then begin
    Mensagens.Adicionar(2023, Self.ClassName, NomMetodo, []);
    Result := -2023;
    Exit;
  end;

  if DtaCompraInicio > DtaCompraFim then begin
    Mensagens.Adicionar(2024, Self.ClassName, NomMetodo, []);
    Result := -2024;
    Exit;
  end;

  if DtaInicioCertificado > DtaFimCertificado then begin
    Mensagens.Adicionar(2025, Self.ClassName, NomMetodo, []);
    Result := -2025;
    Exit;
  end;

  if DtaInicioCadastramento > DtaFimCadastramento then
  begin
    Mensagens.Adicionar(2240, Self.ClassName, NomMetodo, []);
    Result := -2240;
    Exit;
  end;

  if DtaInicioCadastramentoHerdom > DtaFimCadastramentoHerdom then
  begin
    Mensagens.Adicionar(2240, Self.ClassName, NomMetodo, []);
    Result := -2240;
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    Param.Clear;
    if CodRaca <> '' then begin
      Result := VerificaParametroMultiValor(CodRaca, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodOrigem <> '' then begin
      Result := VerificaParametroMultiValor(CodOrigem, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategoria <> '' then begin
      Result := VerificaParametroMultiValor(CodCategoria, Param);
      if Result < 0 then Exit;
    end;
  finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    try
      bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');
      bGroupBy := False;
      bGroupByFirst := True;
      bOrderByFirst := True;
      IntRelatorios.IrAoPrimeiro;
      while not(IntRelatorios.EOF) and not(bGroupBy) do begin
        CodCampo := IntRelatorios.ValorCampo('CodCampo');
        if not (CodCampo in [ccQtdAnimais]) then begin
          if not bPersonalizavel
            or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
            or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S')
            and not(bGroupBy) then begin
              bGroupBy := True;
            end;
        end;
        IntRelatorios.IrAoProximo;
      end;

      bDtaPrevisaoCertificado := (IntRelatorios.CampoAssociado(42) = 1)
        or ((DtaInicioCertificado > 0) and (DtaFimCertificado > 0));

      bDtaCadastramento       := ((DtaInicioCadastramento > 0) and (DtaFimCadastramento > 0));
      bDtaCadastramentoHerdom := ((DtaInicioCadastramentoHerdom > 0) and (DtaFimCadastramentoHerdom > 0));

      if bDtaPrevisaoCertificado then begin
        // Verifica se as datas foram informadas
        if (DtaInicioCertificado = 0) or (DtaFimCertificado = 0) then begin
          Mensagens.Adicionar(1616, Self.ClassName, NomMetodo, []);
          Result := -1616;
          Exit;
        end;

        // Verifica se o intervalo entre datas informado é válido
        if (DtaInicioCertificado > DtaFimCertificado) then begin
          Mensagens.Adicionar(1616, Self.ClassName, NomMetodo, []);
          Result := -1616;
          Exit;
        end;

        // Verifica se o campo que identifica a data prevista para emissão
        // foi selecionado para ser apresentado no relatório
        if IntRelatorios.CampoAssociado(ccDtaPrevisaoCertificado) <> 1 then
        begin
          Mensagens.Adicionar(1617, Self.ClassName, NomMetodo, []);
          Result := -1617;
          Exit;
        end;
      end;

      CodTecnico := -1;
      if (Trim(NumCNPJCPFTecnico) <> '') then
      begin
         Result := RetornaCodTecnico(NumCNPJCPFTecnico);
         if Result < 0 then
         begin
            if Result = -1718 then
            begin
              Mensagens.Adicionar(1718, Self.ClassName, NomMetodo, []);
              Result := -1718;
              Exit;
            end;
         end;
      end;

      if CamposAssociados([ccNomProdutorAnimalVendido]) then
      begin
        if (AnsiStrScan(pChar(CodOrigem), '2') = nil) or
           (UpperCase(IndAnimalCompradoComEvento) = 'N') then
        begin
          Mensagens.Adicionar(2255, Self.ClassName, NomMetodo, []);
          Result := -2255;
          Exit;
        end;
      end;

      if (Conexao.CodPapelUsuario = 3) and
         (CodTecnico <> -1) and
         (CodTecnico <> Conexao.CodPessoa) then
      begin
        CodTecnico := -1;
      end;

      Query.SQL.Clear;
      {$IFDEF MSSQL}
      SQL('select ', ccAdicionar);
      SQL('  null as TxtAjuste ', ccAdicionar);
      SQL('  , tp.sgl_produtor as SglProdutor ', ccSglProdutor);
      SQL('  , tpp.nom_pessoa as NomPessoaProdutor ', ccNomPessoaProdutor);
      SQL('  , ta.cod_situacao_sisbov as CodSituacaoSISBOV ', ccCodSituacaoSISBOV);
      SQL('  , tss.des_situacao_sisbov as DesSituacaoSISBOV ', ccDesSituacaoSISBOV);
      SQL('  , CAST( ' +
          '      CAST(YEAR(ta.dta_identificacao_sisbov) as varchar(4)) + ''.'' + ' +
          '      CAST(MONTH(ta.dta_identificacao_sisbov) as varchar(2)) + ''.01'' ' +
          '      as smalldatetime) as MesIdentificacaoSISBOV ', ccMesIdentificacaoSISBOV);
      SQL('  , CAST( ' +
          '      CAST(YEAR(ta.dta_identificacao_sisbov) as varchar(4)) + ''.01.01'' ' +
          '      as smalldatetime) as AnoIdentificacaoSISBOV ', ccAnoIdentificacaoSISBOV);
      SQL('  , CAST( ' +
          '      CAST(YEAR(ta.dta_nascimento) as varchar(4)) + ''.'' + ' +
          '      CAST(MONTH(ta.dta_nascimento) as varchar(2)) + ''.01'' ' +
          '      as smalldatetime) as MesNascimento ', ccMesNascimento);
      SQL('  , CAST( ' +
          '      CAST(YEAR(ta.dta_nascimento) as varchar(4)) + ''.01.01'' ' +
          '      as smalldatetime) as AnoNascimento ', ccAnoNascimento);
      SQL('  , CAST( ' +
          '      case when ta.cod_fazenda_nascimento is not null then ' +
          '        case when tfn.cod_propriedade_rural is null then ' +
          '          tfn.nom_fazenda ' +
          '        else ' +
          '          tfnpr.nom_propriedade_rural + '' '' + ISNULL(tfnpr.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsln.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
          '        end ' +
          '      when ta.cod_propriedade_nascimento is not null then ' +
          '        tprn.nom_propriedade_rural + '' '' + ISNULL(tprn.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsln.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
          '      when ta.num_imovel_nascimento is not null then ' +
          '        ta.num_imovel_nascimento + '' '' + ISNULL(CAST(ta.cod_localizacao_nascimento AS VARCHAR(10)), '''')' +
          '      else ' +
          '        null ' +
          '      end ' +
          '      as varchar(66)) as NomLugarNascimento ', ccNomLugarNascimento);
      SQL('  , case when ta.cod_fazenda_nascimento is not null then ' +
          '      case when tfn.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfnm.nom_municipio ' +
          '      end ' +
          '    when ta.cod_propriedade_nascimento is not null then ' +
          '      tprnm.nom_municipio ' +
          '    else ' +
          '      null ' +
          '    end as NomMunicipioNascimento ', ccNomMunicipioNascimento);
      SQL('  , case when ta.cod_fazenda_nascimento is not null then ' +
          '      case when tfn.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfnmr.nom_micro_regiao ' +
          '      end ' +
          '    when ta.cod_propriedade_nascimento is not null then ' +
          '      tprnmr.nom_micro_regiao ' +
          '    else ' +
          '      null ' +
          '    end as NomMicroRegiaoNascimento ', ccNomMicroRegiaoNascimento);
      SQL('  , case when ta.cod_fazenda_nascimento is not null then ' +
          '      case when tfn.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfne.sgl_estado ' +
          '      end ' +
          '    when ta.cod_propriedade_nascimento is not null then ' +
          '      tprne.sgl_estado ' +
          '    else ' +
          '      null ' +
          '    end as SglEstadoNascimento ', ccSglEstadoNascimento);
      SQL('  , case when ta.cod_fazenda_nascimento is not null then ' +
          '      case when tfn.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfne.nom_estado ' +
          '      end ' +
          '    when ta.cod_propriedade_nascimento is not null then ' +
          '      tprne.nom_estado ' +
          '    else ' +
          '      null ' +
          '    end as NomEstadoNascimento ', ccNomEstadoNascimento);
      SQL('  , CAST( ' +
          '      case when ta.cod_fazenda_identificacao is not null then ' +
          '        case when tfi.cod_propriedade_rural is null then ' +
          '          tfi.nom_fazenda ' +
          '        else ' +
          '          tfipr.nom_propriedade_rural + '' '' + ISNULL(tfipr.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsli.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
          '        end ' +
          '      when ta.cod_propriedade_identificacao is not null then ' +
          '        tpri.nom_propriedade_rural + '' '' + ISNULL(tpri.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsli.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
          '      when ta.num_imovel_identificacao is not null then ' +
          '        ta.num_imovel_identificacao + '' '' + ISNULL(CAST(ta.cod_localizacao_identificacao AS VARCHAR(10)), '''') ' +
          '      else ' +
          '        null ' +
          '      end ' +
          '      as varchar(66)) as NomLugarIdentificacao ', ccNomLugarIdentificacao);
      SQL('  , case when ta.cod_fazenda_identificacao is not null then ' +
          '      case when tfi.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfim.nom_municipio ' +
          '      end ' +
          '    when ta.cod_propriedade_identificacao is not null then ' +
          '      tprim.nom_municipio ' +
          '    else ' +
          '      null ' +
          '    end as NomMunicipioIdentificacao ', ccNomMunicipioIdentificacao);
      SQL('  , case when ta.cod_fazenda_identificacao is not null then ' +
          '      case when tfi.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfimr.nom_micro_regiao ' +
          '      end ' +
          '    when ta.cod_propriedade_identificacao is not null then ' +
          '      tprimr.nom_micro_regiao ' +
          '    else ' +
          '      null ' +
          '    end as NomMicroRegiaoIdentificacao ', ccNomMicroRegiaoIdentificacao);
      SQL('  , case when ta.cod_fazenda_identificacao is not null then ' +
          '      case when tfi.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfie.sgl_estado ' +
          '      end ' +
          '    when ta.cod_propriedade_identificacao is not null then ' +
          '      tprie.sgl_estado ' +
          '    else ' +
          '      null ' +
          '    end as SglEstadoIdentificacao ', ccSglEstadoIdentificacao);
      SQL('  , case when ta.cod_fazenda_identificacao is not null then ' +
          '      case when tfi.cod_propriedade_rural is null then ' +
          '        null ' +
          '      else ' +
          '        tfie.nom_estado ' +
          '      end ' +
          '    when ta.cod_propriedade_identificacao is not null then ' +
          '      tprie.nom_estado ' +
          '    else ' +
          '      null ' +
          '    end as NomEstadoIdentificacao ', ccNomEstadoIdentificacao);
      SQL('  , CAST( ' +
          '      CAST(YEAR(ta.dta_compra) as varchar(4)) + ''.'' + ' +
          '      CAST(MONTH(ta.dta_compra) as varchar(2)) + ''.01'' ' +
          '      as smalldatetime) as MesCompra ', ccMesCompra);
      SQL('  , CAST( ' +
          '      CAST(YEAR(ta.dta_compra) as varchar(4)) + ''.01.01'' ' +
          '      as smalldatetime) as AnoCompra ', ccAnoCompra);
      SQL('  , tpsc.nom_reduzido_pessoa_secundaria as NomReduzidoCriador ', ccNomReduzidoCriador);
      SQL('  , tar.sgl_associacao_raca as SglAssociacaoRaca ', ccSglAssociacaoRaca);
      SQL('  , tgs.sgl_grau_sangue as SglGrauSangue ', ccSglGrauSangue);
      SQL('  , tgs.des_grau_sangue as DesGrauSangue ', ccDesGrauSangue);
      SQL('  , tr.sgl_raca as SglRaca ', ccSglRaca);
      SQL('  , tr.des_raca as DesRaca ', ccDesRaca);
      SQL('  , taa.sgl_aptidao as SglAptidao ', ccSglAptidao);
      SQL('  , taa.des_aptidao as DesAptidao ', ccDesAptidao);
      SQL('  , tca.sgl_categoria_animal as SglCategoria ', ccSglCategoria);
      SQL('  , tca.des_categoria_animal as DesCategoria ', ccDesCategoria);
      SQL('  , ta.ind_sexo as IndSexo ', ccIndSexo);
      SQL('  , tto.sgl_tipo_origem as SglOrigem ', ccSglOrigem);
      SQL('  , tto.des_tipo_origem as DesOrigem ', ccDesOrigem);
      SQL('  , tra.sgl_regime_alimentar as SglRegimeAlimentar ', ccSglRegimeAlimentar);
      SQL('  , tra.des_regime_alimentar as DesRegimeAlimentar ', ccDesRegimeAlimentar);
      SQL('  , ttlc.sgl_tipo_lugar as SglTipoLugar ', ccSglTipoLugar);
      SQL('  , ttlc.des_tipo_lugar as DesTipoLugar ', ccDesTipoLugar);
      SQL('  , case when ta.cod_tipo_lugar = 1 then ' +
          '      CAST( ' +
          '        tflc.nom_fazenda + '' '' + ISNULL(tflcpr.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlslc.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
          '        as varchar(68)) ' +
          '    when ta.cod_tipo_lugar = 2 then ' +
          '      CAST( ' +
          '        case when ta.cod_propriedade_corrente is null then ' +
          '          ta.num_imovel_corrente ' +
          '        else ' +
          '          tprlc.nom_propriedade_rural + '' '' + ISNULL(tprlc.num_imovel_receita_federal, '''') ' +
          '        end + '' '' + ' +
          '        case when ta.cod_propriedade_corrente is null then ' +
          '           ISNULL(CAST(ta.cod_localizacao_corrente AS VARCHAR(10)), '''') ' +
          '        else ' +
          '          ISNULL(CAST(tlslc2.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
          '        end ' +
          '        as varchar(68)) ' +
          '    when ta.cod_tipo_lugar = 3 then ' +
          '      CAST( ' +
          '        case when ta.cod_pessoa_corrente is not null then ' +
          '          RTRIM(LEFT(tplc.nom_pessoa, 49)) + '' '' + ' +
          '          case tplc.cod_natureza_pessoa when ''F'' then ' +
          '            CONVERT(varchar(18), ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 10, 2)) ' +
          '          when ''J'' then ' +
          '            CONVERT(varchar(18), ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
          '            SUBSTRING(tplc.num_cnpj_cpf, 13, 2)) ' +
          '          else ' +
          '            tplc.num_cnpj_cpf ' +
          '          end ' +
          '        when cod_pessoa_secundaria_corrente is not null then ' +
          '          RTRIM(LEFT(tpslc.nom_pessoa_secundaria, 49)) + '' '' + ' +
          '          case tpslc.cod_natureza_pessoa when ''F'' then ' +
          '            CONVERT(varchar(18), ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 10, 2)) ' +
          '          when ''J'' then ' +
          '            CONVERT(varchar(18), ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
          '            SUBSTRING(tpslc.num_cnpj_cpf, 13, 2)) ' +
          '          else ' +
          '            tpslc.num_cnpj_cpf ' +
          '          end ' +
          '        else ' +
          '          case LEN(ta.num_cnpj_cpf_corrente) when 11 then ' +
          '            CONVERT(varchar(18), ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 1, 3) + ''.'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 4, 3) + ''.'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 7, 3) + ''-'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 10, 2)) ' +
          '          when 14 then ' +
          '            CONVERT(varchar(18), ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 1, 2) + ''.'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 3, 3) + ''.'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 6, 3) + ''/'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 9, 4) + ''-'' + ' +
          '            SUBSTRING(ta.num_cnpj_cpf_corrente, 13, 2)) ' +
          '          else ' +
          '            ta.num_cnpj_cpf_corrente ' +
          '          end ' +
          '        end ' +
          '        as varchar(68)) ' +
          '    else ' +
          '      null ' +
          '    end as NomLugarCorrente ', ccNomLugarCorrente);
      SQL('  , tpo.nom_pais as NomPaisOrigem ', ccNomPaisOrigem);
      SQL('  , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ', ccDesComposicaoRacial);
      SQL('  , tas.dta_insercao_sisbov + :num_dias_espera as DtaPrevisaoCertificado ', ccDtaPrevisaoCertificado);
      SQL('  , ta.dta_compra as DtaCompra ', ccDtaCompra);
      SQL('  , ta.dta_nascimento as DtaNascimento ', ccDtaNascimento);
      SQL('  , ta.dta_insercao_sisbov as DtaIdentificacaoSISBOV ', ccDtaIdentificacaoSISBOV);
      SQL('  , tpv.nom_pessoa as NomProdutorAnimalVendido ', ccNomProdutorAnimalVendido);
      SQL('  , tpt.nom_pessoa as NomPessoaTecnico ', ccNomPessoaTecnico);

      SQL('  , CASE ta.cod_pais_sisbov  when null then null  else right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) END + ' +
          '    CASE ta.cod_animal_sisbov  when null then ''''  else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + ' +
          '    CASE ta.cod_micro_regiao_sisbov when -1 then '''' else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) END + ' +
          '    RIGHT(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as NumSISBOV ', ccNumeroSISBOV);
      SQL('  , ta.cod_animal_manejo as CodManejo ', ccCodigoManejo);
      SQL('  , ta.dta_cadastramento AS DtaCadastroHerdom ', ccDataCadastroHerdom);
      SQL('  , dbo.fnt_idade(ta.dta_nascimento, getdate()) as Idade ', ccIdade);

      SQL('  , count(ta.cod_animal) as QtdAnimais ', ccQtdAnimais);
      SQL('from ', ccAdicionar);
      SQL('  tab_animal ta with (nolock) ', ccAdicionar);
      SQL('  inner join tab_produtor tp with (nolock) on ta.cod_pessoa_produtor = tp.cod_pessoa_produtor ', SE(SglProdutor <> '', ccAdicionar, ccSglProdutor));
      SQL('  inner join tab_pessoa tpp with (nolock) on ta.cod_pessoa_produtor = tpp.cod_pessoa ', SE(NomPessoaProdutor <> '', ccAdicionar, ccNomPessoaProdutor));
      SQL('  inner join tab_situacao_sisbov tss with(nolock) on ta.cod_situacao_sisbov = tss.cod_situacao_sisbov ', ccDesSituacaoSISBOV);
      SQL('  left outer join tab_fazenda tfn with (nolock) on ta.cod_pessoa_produtor = tfn.cod_pessoa_produtor and ta.cod_fazenda_nascimento = tfn.cod_fazenda ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> '') or (CodEstadoNascimento > 0) or (NumImovelNascimento <> '') or (CodLocalizacaoNascimento > -1) or CamposAssociados([ccNomLugarNascimento, ccNomMunicipioNascimento, ccNomMicroRegiaoNascimento, ccSglEstadoNascimento, ccNomEstadoNascimento]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_propriedade_rural tfnpr with (nolock) on tfn.cod_propriedade_rural = tfnpr.cod_propriedade_rural ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> '') or (CodEstadoNascimento > 0) or (NumImovelNascimento <> '') or (CodLocalizacaoNascimento > -1) or CamposAssociados([ccNomLugarNascimento, ccNomMunicipioNascimento, ccNomMicroRegiaoNascimento, ccSglEstadoNascimento, ccNomEstadoNascimento]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_localizacao_sisbov tlsln with (nolock) on tfn.cod_propriedade_rural = tlsln.cod_propriedade_rural and tfn.cod_pessoa_produtor = tlsln.cod_pessoa_produtor ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> '') or (CodEstadoNascimento > 0) or (NumImovelNascimento <> '') or (CodLocalizacaoNascimento > -1) or CamposAssociados([ccNomLugarNascimento, ccNomMunicipioNascimento, ccNomMicroRegiaoNascimento, ccSglEstadoNascimento, ccNomEstadoNascimento]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_municipio tfnm with (nolock) on tfnpr.cod_municipio = tfnm.cod_municipio ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> '') or CamposAssociados([ccNomMunicipioNascimento, ccNomMicroRegiaoNascimento]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_micro_regiao tfnmr with (nolock) on tfnm.cod_micro_regiao = tfnmr.cod_micro_regiao ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> ''), ccAdicionar, ccNomMicroRegiaoNascimento));
      SQL('  left outer join tab_estado tfne with (nolock) on tfnpr.cod_estado = tfne.cod_estado ', [ccSglEstadoNascimento, ccNomEstadoNascimento]);
      SQL('  left outer join tab_propriedade_rural tprn with (nolock) on ta.cod_propriedade_nascimento = tprn.cod_propriedade_rural ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> '') or (CodEstadoNascimento > 0) or (NumImovelNascimento <> '') or (CodLocalizacaoNascimento > -1) or CamposAssociados([ccNomLugarNascimento, ccNomMunicipioNascimento, ccNomMicroRegiaoNascimento, ccSglEstadoNascimento, ccNomEstadoNascimento]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_municipio tprnm with (nolock) on tprn.cod_municipio = tprnm.cod_municipio ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> '') or CamposAssociados([ccNomMunicipioNascimento, ccNomMicroRegiaoNascimento]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_micro_regiao tprnmr with (nolock) on tprnm.cod_micro_regiao = tprnmr.cod_micro_regiao ', SE((CodMicroRegiaoSisbovNascimento >= 0) or (NomMicroRegiaoNascimento <> ''), ccAdicionar, ccNomMicroRegiaoNascimento));
      SQL('  left outer join tab_estado tprne with (nolock) on tprn.cod_estado = tprne.cod_estado ', [ccSglEstadoNascimento, ccNomEstadoNascimento]);
      SQL('  left outer join tab_fazenda tfi with (nolock) on ta.cod_pessoa_produtor = tfi.cod_pessoa_produtor and ta.cod_fazenda_identificacao = tfi.cod_fazenda ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> '') or (CodEstadoIdentificacao > 0) or (NumImovelIdentificacao <> '') or (CodLocalizacaoIdentificacao > 1) or CamposAssociados([ccNomLugarIdentificacao, ccNomMunicipioIdentificacao, ccNomMicroRegiaoIdentificacao, ccSglEstadoIdentificacao, ccNomEstadoIdentificacao]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_propriedade_rural tfipr with (nolock) on tfi.cod_propriedade_rural = tfipr.cod_propriedade_rural ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> '') or (CodEstadoIdentificacao > 0) or (NumImovelIdentificacao <> '') or (CodLocalizacaoIdentificacao > 1) or CamposAssociados([ccNomLugarIdentificacao, ccNomMunicipioIdentificacao, ccNomMicroRegiaoIdentificacao, ccSglEstadoIdentificacao, ccNomEstadoIdentificacao]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_localizacao_sisbov tlsli with (nolock) on tfi.cod_propriedade_rural = tlsli.cod_propriedade_rural and tfi.cod_pessoa_produtor = tlsli.cod_pessoa_produtor ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> '') or (CodEstadoIdentificacao > 0) or (NumImovelIdentificacao <> '') or (CodLocalizacaoIdentificacao > 1) or CamposAssociados([ccNomLugarIdentificacao, ccNomMunicipioIdentificacao, ccNomMicroRegiaoIdentificacao, ccSglEstadoIdentificacao, ccNomEstadoIdentificacao]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_municipio tfim with (nolock) on tfipr.cod_municipio = tfim.cod_municipio ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> '') or CamposAssociados([ccNomMunicipioIdentificacao, ccNomMicroRegiaoIdentificacao]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_micro_regiao tfimr with (nolock) on tfim.cod_micro_regiao = tfimr.cod_micro_regiao ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> ''), ccAdicionar, ccNomMicroRegiaoIdentificacao));
      SQL('  left outer join tab_estado tfie with (nolock) on tfipr.cod_estado = tfie.cod_estado ', [ccSglEstadoIdentificacao, ccNomEstadoIdentificacao]);
      SQL('  left outer join tab_propriedade_rural tpri with (nolock) on ta.cod_propriedade_identificacao = tpri.cod_propriedade_rural ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> '') or (CodEstadoIdentificacao > 0) or (NumImovelIdentificacao <> '') or (CodLocalizacaoIdentificacao > 1) or CamposAssociados([ccNomLugarIdentificacao, ccNomMunicipioIdentificacao, ccNomMicroRegiaoIdentificacao, ccSglEstadoIdentificacao, ccNomEstadoIdentificacao]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_municipio tprim with (nolock) on tpri.cod_municipio = tprim.cod_municipio ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> '') or CamposAssociados([ccNomMunicipioIdentificacao, ccNomMicroRegiaoIdentificacao]), ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_micro_regiao tprimr with (nolock) on tprim.cod_micro_regiao = tprimr.cod_micro_regiao ', SE((CodMicroRegiaoSisbovIdentificacao >= 0) or (NomMicroRegiaoIdentificacao <> ''), ccAdicionar, ccNomMicroRegiaoIdentificacao));
      SQL('  left outer join tab_estado tprie with (nolock) on tpri.cod_estado = tprie.cod_estado ', [ccSglEstadoIdentificacao, ccNomEstadoIdentificacao]);
      SQL('  left outer join tab_pessoa_secundaria tpsc with (nolock) on ta.cod_pessoa_produtor = tpsc.cod_pessoa_produtor and ta.cod_pessoa_secundaria_criador = tpsc.cod_pessoa_secundaria ', ccNomReduzidoCriador);
      SQL('  left outer join tab_associacao_raca tar with (nolock) on ta.cod_associacao_raca = tar.cod_associacao_raca ', ccSglAssociacaoRaca);
      SQL('  left outer join tab_grau_sangue tgs with (nolock) on ta.cod_grau_sangue = tgs.cod_grau_sangue ', [ccSglGrauSangue, ccDesGrauSangue]);
      SQL('  inner join tab_raca tr with (nolock) on ta.cod_raca = tr.cod_raca ', [ccSglRaca, ccDesRaca]);
      SQL('  inner join tab_aptidao taa with (nolock) on ta.cod_aptidao = taa.cod_aptidao ', [ccSglAptidao, ccDesAptidao]);
      SQL('  left outer join tab_categoria_animal tca with (nolock) on ta.cod_categoria_animal = tca.cod_categoria_animal ', [ccSglCategoria, ccDesCategoria]);
      SQL('  inner join tab_tipo_origem tto with (nolock) on ta.cod_tipo_origem = tto.cod_tipo_origem ', [ccSglOrigem, ccDesOrigem]);
      SQL('  left outer join tab_regime_alimentar tra with (nolock) on ta.cod_regime_alimentar = tra.cod_regime_alimentar ', [ccSglRegimeAlimentar, ccDesRegimeAlimentar]);
      SQL('  left outer join tab_tipo_lugar ttlc with (nolock) on ta.cod_tipo_lugar = ttlc.cod_tipo_lugar ', [ccSglTipoLugar, ccDesTipoLugar]);
      SQL('  left outer join tab_fazenda tflc with (nolock) on ta.cod_pessoa_produtor = tflc.cod_pessoa_produtor and ta.cod_fazenda_corrente = tflc.cod_fazenda ', SE((NumImovelCorrente <> '') or (CodLocalizacaoCorrente > -1), ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_propriedade_rural tflcpr with (nolock) on tflc.cod_propriedade_rural = tflcpr.cod_propriedade_rural ', SE((NumImovelCorrente <> '') or (CodLocalizacaoCorrente > -1), ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_propriedade_rural tprlc with (nolock) on ta.cod_propriedade_corrente = tprlc.cod_propriedade_rural ', SE((NumImovelCorrente <> '') or (CodLocalizacaoCorrente > -1), ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_localizacao_sisbov tlslc with (nolock) on  tflc.cod_propriedade_rural = tlslc.cod_propriedade_rural and tflc.cod_pessoa_produtor = tlslc.cod_pessoa_produtor ', SE(CodLocalizacaoCorrente > -1, ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_localizacao_sisbov tlslc2 with (nolock) on  ta.cod_propriedade_corrente = tlslc2.cod_propriedade_rural and ta.cod_pessoa_corrente = tlslc2.cod_pessoa_produtor ', SE(CodLocalizacaoCorrente > -1, ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_pessoa tplc with (nolock) on ta.cod_pessoa_corrente = tplc.cod_pessoa ', SE(NumCNPJCPFCorrente <> '', ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_pessoa_secundaria tpslc with (nolock) on ta.cod_pessoa_produtor = tpslc.cod_pessoa_produtor and ta.cod_pessoa_secundaria_corrente = tpslc.cod_pessoa_secundaria ', SE(NumCNPJCPFCorrente <> '', ccAdicionar, ccNomLugarCorrente));
      SQL('  left outer join tab_pais tpo with (nolock) on ta.cod_pais_origem = tpo.cod_pais ', SE(NomPaisOrigem <> '', ccAdicionar, ccNomPaisOrigem));
      SQL('  left outer join tab_arquivo_sisbov tas with (nolock) on ta.cod_arquivo_sisbov = tas.cod_arquivo_sisbov ', SE((DtaInicioCertificado > 0) and (DtaFimCertificado >0), ccAdicionar, ccDtaPrevisaoCertificado));
      SQL('  inner join tab_composicao_racial tcr with (nolock) on and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor and ta.cod_animal = tcr.cod_animal ', SE(IndAgrupRaca1 = 'N', ccAdicionar, ccDesprezar));
      SQL('  inner join tab_composicao_racial tcr2 with (nolock) on and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor and ta.cod_animal = tcr.cod_animal ', SE(IndAgrupRaca2 = 'N', ccAdicionar, ccDesprezar));
      SQL('  inner join tab_composicao_racial tcr3 with (nolock) on and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor and ta.cod_animal = tcr.cod_animal ', SE(IndAgrupRaca3 = 'N', ccAdicionar, ccDesprezar));
      SQL('  inner join tab_composicao_racial tcr4 with (nolock) on and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor and ta.cod_animal = tcr.cod_animal ', SE(IndAgrupRaca4 = 'N', ccAdicionar, ccDesprezar));
      SQL('  left outer join tab_pessoa tpt on ta.cod_pessoa_tecnico = tpt.cod_pessoa ', ccNomPessoaTecnico);
      if (AnsiStrScan(pChar(CodOrigem), '2') <> nil) then
      begin
        if (IndAnimalCompradoComEvento = 'S') then
        begin
          SQL(' inner join tab_animal_vendido as tav with (nolock) on ta.cod_pessoa_produtor = tav.cod_pessoa_produtor and ta.cod_animal = tav.cod_animal ', ccAdicionar);
          SQL(' inner join tab_pessoa as tpv with (nolock) on tav.cod_produtor_evento_venda = tpv.cod_pessoa ', ccNomProdutorAnimalVendido);
        end
        else if (IndAnimalCompradoComEvento <> 'N') then
        begin
          SQL(' left outer join tab_animal_vendido as tav with (nolock) on ta.cod_pessoa_produtor = tav.cod_pessoa_produtor and ta.cod_animal = tav.cod_animal ', ccAdicionar);
          SQL(' left outer join tab_pessoa as tpv with (nolock) on tav.cod_produtor_evento_venda = tpv.cod_pessoa ', ccNomProdutorAnimalVendido);          
        end;
      end;
      SQL('where ', ccAdicionar);
      SQL('      ta.dta_fim_validade is null ', ccAdicionar);

//      SQL('  and ta.dta_desativacao is null ', ccAdicionar); - Daniel 16/08/2005

      { Atribuição de critérios }
      SQL('  and tp.sgl_produtor = :SglProdutor ', SE(SglProdutor <> '', ccAdicionar, ccDesprezar));
      SQL('  and tpp.nom_pessoa like :NomPessoaProdutor ', SE(NomPessoaProdutor <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_situacao_sisbov = :CodSituacaoSisbov ', SE(CodSituacaoSisbov <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.dta_nascimento >= :DtaNascimentoInicio and ta.dta_nascimento < :DtaNascimentoFim ', SE((DtaNascimentoInicio > 0) and  (DtaNascimentoFim > 0), ccAdicionar, ccDesprezar));
      SQL('  and ta.dta_identificacao_sisbov >= :DtaIdentificacaoSisbovInicio and ta.dta_identificacao_sisbov < :DtaIdentificacaoSisbovFim ', SE((DtaIdentificacaoInicio > 0) and (DtaIdentifcacaoFim > 0), ccAdicionar, ccDesprezar));
      SQL('  and ( tfnmr.cod_micro_regiao_sisbov = :CodMicroRegiaoSisbovNascimento ' +
          '        or tprnmr.cod_micro_regiao_sisbov = :CodMicroRegiaoSisbovNascimento ) ', SE(CodMicroRegiaoSisbovNascimento >= 0, ccAdicionar, ccDesprezar));
      SQL('  and ( tfnmr.nom_micro_regiao like :NomMicroRegiaoNascimento ' +
          '        or tprnmr.nom_micro_regiao like :NomMicroRegiaoNascimento ) ', SE(NomMicroRegiaoNascimento <> '', ccAdicionar, ccDesprezar));
      SQL('  and ( tfnpr.cod_estado = :CodEstadoNascimento ' +
          '        or tprn.cod_estado = :CodEstadoNascimento ) ', SE(CodEstadoNascimento > 0, ccAdicionar, ccDesprezar));
      SQL('  and ( ta.num_imovel_nascimento = :NumImovelNascimento ' +
          '        or tfnpr.num_imovel_receita_federal = :NumImovelNascimento ' +
          '        or tprn.num_imovel_receita_federal = :NumImovelNascimento ) ', SE(NumImovelNascimento <> '', ccAdicionar, ccDesprezar));
      SQL('  and ( ta.cod_localizacao_nascimento = :CodLocalizacaoNascimento ' +
          '        or tlsln.cod_localizacao_sisbov = :CodLocalizacaoNascimento ) ', SE(CodLocalizacaoNascimento > -1, ccAdicionar, ccDesprezar));
      SQL('  and ( tfimr.cod_micro_regiao_sisbov = :CodMicroRegiaoSisbovIdentificacao ' +
          '        or tprimr.cod_micro_regiao_sisbov = :CodMicroRegiaoSisbovIdentificacao ) ', SE(CodMicroRegiaoSisbovIdentificacao >= 0, ccAdicionar, ccDesprezar));
      SQL('  and ( tfimr.nom_micro_regiao like :NomMicroRegiaoIdentificacao ' +
          '        or tprimr.nom_micro_regiao like :NomMicroRegiaoIdentificacao ) ', SE(NomMicroRegiaoIdentificacao <> '', ccAdicionar, ccDesprezar));
      SQL('  and ( tfipr.cod_estado = :CodEstadoIdentificacao ' +
          '        or tpri.cod_estado = :CodEstadoIdentificacao ) ', SE(CodEstadoIdentificacao > 0, ccAdicionar, ccDesprezar));
      SQL('  and ( ta.num_imovel_identificacao = :NumImovelIdentificacao ' +
          '        or tfipr.num_imovel_receita_federal = :NumImovelIdentificacao ' +
          '        or tpri.num_imovel_receita_federal = :NumImovelIdentificacao ) ', SE(NumImovelIdentificacao <> '', ccAdicionar, ccDesprezar));
      SQL('  and ( ta.cod_localizacao_identificacao = :CodLocalizacaoIdentificacao ' +
          '        or tlsli.cod_localizacao_sisbov = :CodLocalizacaoIdentificacao ) ', SE(CodLocalizacaoIdentificacao > -1, ccAdicionar, ccDesprezar));
      SQL('  and ta.dta_compra >= :DtaCompraInicio and ta.dta_compra < :DtaCompraFim ', SE((DtaCompraInicio > 0) and (DtaCompraFim > 0), ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_raca in ( ' + CodRaca + ' ) ', SE(CodRaca <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.ind_sexo = :IndSexo ', SE(IndSexo <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_tipo_origem in ( ' + CodOrigem + ' ) ', SE(CodOrigem <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.ind_animal_castrado = :IndAnimalCastrado ', SE(IndAnimalCastrado <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_regime_alimentar = :CodRegimeAlimentar ', SE(CodRegimeAlimentar <> -1, ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_categoria_animal in ( ' + CodCategoria + ' ) ', SE(CodCategoria <> '', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_associacao_raca = :CodAssociacaoRaca ', SE(CodAssociacaoRaca <> -1, ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_grau_sangue = :CodGrauSangue ', SE(CodGrauSangue <> -1, ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_tipo_lugar = :CodTipoLugar ', SE(CodTipoLugar <> -1, ccAdicionar, ccDesprezar));
      SQL('  and ( ta.num_imovel_corrente = :NumImovelCorrente ' +
          '        or tflcpr.num_imovel_receita_federal = :NumImovelCorrente ' +
          '        or tprlc.num_imovel_receita_federal = :NumImovelCorrente ) ', SE(NumImovelCorrente <> '', ccAdicionar, ccDesprezar));
      SQL('  and ( (ta.cod_tipo_lugar = 1 and tlslc.cod_localizacao_sisbov = :CodLocalizacaoCorrente) ' +
          '   or   (ta.cod_tipo_lugar = 2 and tlslc2.cod_localizacao_sisbov = :CodLocalizacaoCorrente) ' +
          '   or    ta.cod_localizacao_corrente = :CodLocalizacaoCorrente) ', SE(CodLocalizacaoCorrente > -1, ccAdicionar, ccDesprezar));
      SQL('  and ( ta.num_cnpj_cpf_corrente = :NumCNPJCPFCorrente ' +
          '        or tplc.num_cnpj_cpf = :NumCNPJCPFCorrente ' +
          '        or tpslc.num_cnpj_cpf = :NumCNPJCPFCorrente ) ', SE(NumCNPJCPFCorrente <> '', ccAdicionar, ccDesprezar));
      SQL('  and tpo.nom_pais like :NomPais ', SE(NomPaisOrigem <> '', ccAdicionar, ccDesprezar));
      SQL('  and tas.dta_insercao_sisbov >= :dta_inicio_certificado ' +
          '  and tas.dta_insercao_sisbov < :dta_fim_certificado ', SE(bDtaPrevisaoCertificado, ccAdicionar, ccDesprezar));
      SQL('  and ta.dta_insercao_sisbov >= :dta_inicio_cadastramento ' +
          '  and ta.dta_insercao_sisbov < :dta_fim_cadastramento ', SE(bDtaCadastramento, ccAdicionar, ccDesprezar));
      SQL('  and ta.dta_cadastramento >= :dta_inicio_cadastramento_herdom ' +
          '  and ta.dta_cadastramento < :dta_fim_cadastramento_herdom ', SE(bDtaCadastramentoHerdom, ccAdicionar, ccDesprezar));
      SQL('  and tcr.cod_raca = :CodRaca1  ' +
          '  and tcr.qtd_composicao_racial between :QtdCompRacialInicio1 and :QtdCompRacialFim1 ', SE(IndAgrupRaca1 = 'N', ccAdicionar, ccDesprezar));
      SQL('  and tcr2.cod_raca = :CodRaca2  ' +
          '  and tcr2.qtd_composicao_racial between :QtdCompRacialInicio2 and :QtdCompRacialFim2 ', SE(IndAgrupRaca2 = 'N', ccAdicionar, ccDesprezar));
      SQL('  and tcr3.cod_raca = :CodRaca3  ' +
          '  and tcr3.qtd_composicao_racial between :QtdCompRacialInicio3 and :QtdCompRacialFim3 ', SE(IndAgrupRaca3 = 'N', ccAdicionar, ccDesprezar));
      SQL('  and tcr4.cod_raca = :CodRaca4  ' +
          '  and tcr4.qtd_composicao_racial between :QtdCompRacialInicio4 and :QtdCompRacialFim4 ', SE(IndAgrupRaca4 = 'N', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_animal in ( select cod_animal ' +
          '    from tab_composicao_racial as tcr with (nolock), ' +
          '    tab_composicao_agrup_racas as tacr with (nolock) ' +
          '    where tacr.cod_agrupamento_racas = :codraca1 ' +
          '    and   tacr.cod_raca = tcr.cod_raca ' +
          '    group by cod_animal ' +
          '    having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1 ) ', SE(IndAgrupRaca1 = 'S', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_animal in ( select cod_animal ' +
          '    from tab_composicao_racial as tcr with (nolock), ' +
          '    tab_composicao_agrup_racas as tacr with (nolock) ' +
          '    where tacr.cod_agrupamento_racas = :codraca2 ' +
          '    and   tacr.cod_raca = tcr.cod_raca ' +
          '    group by cod_animal ' +
          '    having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2 ) ', SE(IndAgrupRaca2 = 'S', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_animal in ( select cod_animal ' +
          '    from tab_composicao_racial as tcr with (nolock), ' +
          '    tab_composicao_agrup_racas as tacr with (nolock) ' +
          '    where tacr.cod_agrupamento_racas = :codraca3 ' +
          '    and   tacr.cod_raca = tcr.cod_raca ' +
          '    group by cod_animal ' +
          '    having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3 ) ', SE(IndAgrupRaca3 = 'S', ccAdicionar, ccDesprezar));
      SQL('  and ta.cod_animal in ( select cod_animal ' +
          '    from tab_composicao_racial as tcr with (nolock), ' +
          '    tab_composicao_agrup_racas as tacr with (nolock) ' +
          '    where tacr.cod_agrupamento_racas = :codraca4 ' +
          '    and   tacr.cod_raca = tcr.cod_raca ' +
          '    group by cod_animal ' +
          '    having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4 ) ', SE(IndAgrupRaca4 = 'S', ccAdicionar, ccDesprezar));
      SQL('  and ta.ind_apto_cobertura = :IndAptoCobertura ', SE(IndAptoCobertura <> '', ccAdicionar, ccDesprezar));
      if (IndAnimalSemTecnico = 'N') then begin
        if CodTecnico > 0 then begin
          SQL('  and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ', ccAdicionar);
        end else begin
          if (Conexao.CodPapelUsuario = 3) then begin
            SQL('  and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico or ta.cod_pessoa_tecnico is null)', ccAdicionar);
          end;
        end;
      end else begin
        SQL('  and ta.cod_pessoa_tecnico is null ', ccAdicionar);
      end;
      if (AnsiStrScan(pChar(CodOrigem), '2') <> nil) then
      begin
        if (IndAnimalCompradoComEvento = 'N') then
        begin
          SQL('and ta.cod_animal not in ( select cod_animal from tab_animal_vendido tav where tav.cod_pessoa_produtor = ta.cod_pessoa_produtor and tav.cod_animal = ta.cod_animal ) ', ccAdicionar);
        end;
      end;

      { Aplica restrições quanto ao tipo de acesso do usuário }
      if (Conexao.CodPapelUsuario = 1) and (Conexao.CodTipoAcesso = 'C') then // Associacao
      begin
        SQL('   and ta.cod_pessoa_produtor in (select cod_pessoa_produtor from tab_associacao_produtor where cod_pessoa_associacao = :cod_pessoa ) ', ccAdicionar);
      end
      else if (Conexao.CodPapelUsuario = 3) and (Conexao.CodTipoAcesso = 'C') then // Tecnico
      begin
        SQL('   and ta.cod_pessoa_produtor in (select cod_pessoa_produtor from tab_tecnico_produtor where cod_pessoa_tecnico = :cod_pessoa and dta_fim_validade is null) ', ccAdicionar);
      end
      else if (Conexao.CodPapelUsuario = 4) and (Conexao.CodTipoAcesso ='P') then // Produtor
      begin
        SQL('   and ta.cod_pessoa_produtor = :cod_pessoa ', ccAdicionar);
      end
      else if (Conexao.CodPapelUsuario = 9) then // Gestor
      begin
        SQL('   and ta.cod_pessoa_produtor in (select ttp.cod_pessoa_produtor from tab_tecnico_produtor ttp, tab_tecnico tt ', ccAdicionar);
        SQL('                                   where ttp.cod_pessoa_tecnico = tt.cod_pessoa_tecnico and ttp.dta_fim_validade is null and tt.dta_fim_validade is null and tt.cod_pessoa_gestor = :cod_pessoa) ', ccAdicionar);
      end
      else if Conexao.CodTipoAcesso = 'N' then // Não tem acesso
      begin
        SQL('   and ta.cod_pessoa_produtor = :cod_pessoa ', ccAdicionar);
      end;


      { Agrupamentos }
      SQL('group by ', SE(bGroupBy, ccAdicionar, ccDesprezar));
      SQLgb('tp.sgl_produtor ', ccSglProdutor);
      SQLgb('tpp.nom_pessoa ', ccNomPessoaProdutor);
      SQLgb('ta.cod_situacao_sisbov ', ccCodSituacaoSISBOV);
      SQLgb('tss.des_situacao_sisbov ', ccDesSituacaoSISBOV);
      SQLgb('CAST( ' +
            '      CAST(YEAR(ta.dta_identificacao_sisbov) as varchar(4)) + ''.'' + ' +
            '      CAST(MONTH(ta.dta_identificacao_sisbov) as varchar(2)) + ''.01'' ' +
            '      as smalldatetime) ', ccMesIdentificacaoSISBOV);
      SQLgb('CAST( ' +
            '      CAST(YEAR(ta.dta_identificacao_sisbov) as varchar(4)) + ''.01.01'' ' +
            '      as smalldatetime) ', ccAnoIdentificacaoSISBOV);
      SQLgb('CAST( ' +
            '      CAST(YEAR(ta.dta_nascimento) as varchar(4)) + ''.'' + ' +
            '      CAST(MONTH(ta.dta_nascimento) as varchar(2)) + ''.01'' ' +
            '      as smalldatetime) ', ccMesNascimento);
      SQLgb('CAST( ' +
            '      CAST(YEAR(ta.dta_nascimento) as varchar(4)) + ''.01.01'' ' +
            '      as smalldatetime) ', ccAnoNascimento);
      SQLgb('CAST( ' +
            '      case when ta.cod_fazenda_nascimento is not null then ' +
            '        case when tfn.cod_propriedade_rural is null then ' +
            '          tfn.nom_fazenda ' +
            '        else ' +
            '          tfnpr.nom_propriedade_rural + '' '' + ISNULL(tfnpr.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsln.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
            '        end ' +
            '      when ta.cod_propriedade_nascimento is not null then ' +
            '        tprn.nom_propriedade_rural + '' '' + ISNULL(tprn.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsln.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
            '      when ta.num_imovel_nascimento is not null then ' +
            '        ta.num_imovel_nascimento + '' '' + ISNULL(CAST(ta.cod_localizacao_nascimento AS VARCHAR(10)), '''') ' +
            '      else ' +
            '        null ' +
            '      end ' +
            '      as varchar(66)) ', ccNomLugarNascimento);
      SQLgb('case when ta.cod_fazenda_nascimento is not null then ' +
            '      case when tfn.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfnm.nom_municipio ' +
            '      end ' +
            '    when ta.cod_propriedade_nascimento is not null then ' +
            '      tprnm.nom_municipio ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomMunicipioNascimento);
      SQLgb('case when ta.cod_fazenda_nascimento is not null then ' +
            '      case when tfn.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfnmr.nom_micro_regiao ' +
            '      end ' +
            '    when ta.cod_propriedade_nascimento is not null then ' +
            '      tprnmr.nom_micro_regiao ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomMicroRegiaoNascimento);
      SQLgb('case when ta.cod_fazenda_nascimento is not null then ' +
            '      case when tfn.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfne.sgl_estado ' +
            '      end ' +
            '    when ta.cod_propriedade_nascimento is not null then ' +
            '      tprne.sgl_estado ' +
            '    else ' +
            '      null ' +
            '    end ', ccSglEstadoNascimento);
      SQLgb('case when ta.cod_fazenda_nascimento is not null then ' +
            '      case when tfn.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfne.nom_estado ' +
            '      end ' +
            '    when ta.cod_propriedade_nascimento is not null then ' +
            '      tprne.nom_estado ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomEstadoNascimento);
      SQLgb('CAST( ' +
            '      case when ta.cod_fazenda_identificacao is not null then ' +
            '        case when tfi.cod_propriedade_rural is null then ' +
            '          tfi.nom_fazenda ' +
            '        else ' +
            '          tfipr.nom_propriedade_rural + '' '' + ISNULL(tfipr.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsli.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
            '        end ' +
            '      when ta.cod_propriedade_identificacao is not null then ' +
            '        tpri.nom_propriedade_rural + '' '' + ISNULL(tpri.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlsli.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
            '      when ta.num_imovel_identificacao is not null then ' +
            '        ta.num_imovel_identificacao + '' '' + ISNULL(CAST(ta.cod_localizacao_identificacao AS VARCHAR(10)), '''') ' +
            '      else ' +
            '        null ' +
            '      end ' +
            '      as varchar(66)) ', ccNomLugarIdentificacao);
      SQLgb('case when ta.cod_fazenda_identificacao is not null then ' +
            '      case when tfi.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfim.nom_municipio ' +
            '      end ' +
            '    when ta.cod_propriedade_identificacao is not null then ' +
            '      tprim.nom_municipio ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomMunicipioIdentificacao);
      SQLgb('case when ta.cod_fazenda_identificacao is not null then ' +
            '      case when tfi.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfimr.nom_micro_regiao ' +
            '      end ' +
            '    when ta.cod_propriedade_identificacao is not null then ' +
            '      tprimr.nom_micro_regiao ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomMicroRegiaoIdentificacao);
      SQLgb('case when ta.cod_fazenda_identificacao is not null then ' +
            '      case when tfi.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfie.sgl_estado ' +
            '      end ' +
            '    when ta.cod_propriedade_identificacao is not null then ' +
            '      tprie.sgl_estado ' +
            '    else ' +
            '      null ' +
            '    end ', ccSglEstadoIdentificacao);
      SQLgb('case when ta.cod_fazenda_identificacao is not null then ' +
            '      case when tfi.cod_propriedade_rural is null then ' +
            '        null ' +
            '      else ' +
            '        tfie.nom_estado ' +
            '      end ' +
            '    when ta.cod_propriedade_identificacao is not null then ' +
            '      tprie.nom_estado ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomEstadoIdentificacao);
      SQLgb('CAST( ' +
            '      CAST(YEAR(ta.dta_compra) as varchar(4)) + ''.'' + ' +
            '      CAST(MONTH(ta.dta_compra) as varchar(2)) + ''.01'' ' +
            '      as smalldatetime) ', ccMesCompra);
      SQLgb('CAST( ' +
            '      CAST(YEAR(ta.dta_compra) as varchar(4)) + ''.01.01'' ' +
            '      as smalldatetime) ', ccAnoCompra);
      SQLgb('tpsc.nom_reduzido_pessoa_secundaria ', ccNomReduzidoCriador);
      SQLgb('tar.sgl_associacao_raca ', ccSglAssociacaoRaca);
      SQLgb('tgs.sgl_grau_sangue ', ccSglGrauSangue);
      SQLgb('tgs.des_grau_sangue ', ccDesGrauSangue);
      SQLgb('tr.sgl_raca ', ccSglRaca);
      SQLgb('tr.des_raca ', ccDesRaca);
      SQLgb('taa.sgl_aptidao ', ccSglAptidao);
      SQLgb('taa.des_aptidao ', ccDesAptidao);
      SQLgb('tca.sgl_categoria_animal ', ccSglCategoria);
      SQLgb('tca.des_categoria_animal ', ccDesCategoria);
      SQLgb('ta.ind_sexo ', ccIndSexo);
      SQLgb('tto.sgl_tipo_origem ', ccSglOrigem);
      SQLgb('tto.des_tipo_origem ', ccDesOrigem);
      SQLgb('tra.sgl_regime_alimentar ', ccSglRegimeAlimentar);
      SQLgb('tra.des_regime_alimentar ', ccDesRegimeAlimentar);
      SQLgb('ttlc.sgl_tipo_lugar ', ccSglTipoLugar);
      SQLgb('ttlc.des_tipo_lugar ', ccDesTipoLugar);
      SQLgb('case when ta.cod_tipo_lugar = 1 then ' +
            '      CAST( ' +
            '        tflc.nom_fazenda + '' '' + ISNULL(tflcpr.num_imovel_receita_federal, '''') + '' '' + ISNULL(CAST(tlslc.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
            '        as varchar(68)) ' +
            '    when ta.cod_tipo_lugar = 2 then ' +
            '      CAST( ' +
            '        case when ta.cod_propriedade_corrente is null then ' +
            '          ta.num_imovel_corrente ' +
            '        else ' +
            '          tprlc.nom_propriedade_rural + '' '' + ISNULL(tprlc.num_imovel_receita_federal, '''') ' +
            '        end + '' '' + ' +
            '        case when ta.cod_propriedade_corrente is null then ' +
            '           ISNULL(CAST(ta.cod_localizacao_corrente AS VARCHAR(10)), '''') ' +
            '        else ' +
            '          ISNULL(CAST(tlslc2.cod_localizacao_sisbov AS VARCHAR(10)), '''') ' +
            '        end ' +
            '        as varchar(68)) ' +
            '    when ta.cod_tipo_lugar = 3 then ' +
            '      CAST( ' +
            '        case when ta.cod_pessoa_corrente is not null then ' +
            '          RTRIM(LEFT(tplc.nom_pessoa, 49)) + '' '' + ' +
            '          case tplc.cod_natureza_pessoa when ''F'' then ' +
            '            CONVERT(varchar(18), ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 10, 2)) ' +
            '          when ''J'' then ' +
            '            CONVERT(varchar(18), ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
            '            SUBSTRING(tplc.num_cnpj_cpf, 13, 2)) ' +
            '          else ' +
            '            tplc.num_cnpj_cpf ' +
            '          end ' +
            '        when cod_pessoa_secundaria_corrente is not null then ' +
            '          RTRIM(LEFT(tpslc.nom_pessoa_secundaria, 49)) + '' '' + ' +
            '          case tpslc.cod_natureza_pessoa when ''F'' then ' +
            '            CONVERT(varchar(18), ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 10, 2)) ' +
            '          when ''J'' then ' +
            '            CONVERT(varchar(18), ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
            '            SUBSTRING(tpslc.num_cnpj_cpf, 13, 2)) ' +
            '          else ' +
            '            tpslc.num_cnpj_cpf ' +
            '          end ' +
            '        else ' +
            '          case LEN(ta.num_cnpj_cpf_corrente) when 11 then ' +
            '            CONVERT(varchar(18), ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 1, 3) + ''.'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 4, 3) + ''.'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 7, 3) + ''-'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 10, 2)) ' +
            '          when 14 then ' +
            '            CONVERT(varchar(18), ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 1, 2) + ''.'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 3, 3) + ''.'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 6, 3) + ''/'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 9, 4) + ''-'' + ' +
            '            SUBSTRING(ta.num_cnpj_cpf_corrente, 13, 2)) ' +
            '          else ' +
            '            ta.num_cnpj_cpf_corrente ' +
            '          end ' +
            '        end ' +
            '        as varchar(68)) ' +
            '    else ' +
            '      null ' +
            '    end ', ccNomLugarCorrente);
      SQLgb('tpo.nom_pais ', ccNomPaisOrigem);
      SQLgb('dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) ', ccDesComposicaoRacial);
      SQLgb('tas.dta_insercao_sisbov ', ccDtaPrevisaoCertificado);
      SQLgb('ta.dta_compra ', ccDtaCompra);
      SQLgb('ta.dta_nascimento ', ccDtaNascimento);
      SQLgb('ta.dta_insercao_sisbov ', ccDtaIdentificacaoSISBOV);
      SQLgb('tpv.nom_pessoa ', ccNomProdutorAnimalVendido);
      SQLgb('tpt.nom_pessoa ', ccNomPessoaTecnico);
      SQLgb('CASE ta.cod_pais_sisbov  when null then null  else right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) END + ' +
            'CASE ta.cod_animal_sisbov  when null then ''''  else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + ' +
            'CASE ta.cod_micro_regiao_sisbov when -1 then '''' else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) END + ' +
            'RIGHT(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end  ', ccNumeroSISBOV);
      SQLgb('ta.cod_animal_manejo ', ccCodigoManejo);
      SQLgb('ta.dta_cadastramento ', ccDataCadastroHerdom);
      SQLgb('dbo.fnt_idade(ta.dta_nascimento, getdate())  ', ccIdade);

      { Ordenação do ResultSet }
      if bGroupBy then begin
        SQL('order by ', ccAdicionar);
        IntRelatorios.IrAoPrimeiro;
        while not IntRelatorios.EOF do begin
          CodCampo := IntRelatorios.ValorCampo('CodCampo');
          if not (CodCampo in [ccQtdAnimais]) then begin
            sAux := SE(bOrderByFirst, '  ', '  , ')+IntRelatorios.ValorCampo('NomField');
            if SQL(sAux, SE(not bPersonalizavel
              or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
              or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'),
              ccAdicionar, ccDesprezar)) and bOrderByFirst then begin
              bOrderByFirst := False;
            end;
          end;
          IntRelatorios.IrAoProximo;
        end;
      end;
{$ENDIF}
      if SglProdutor <> '' then begin
        Query.ParamByName('SglProdutor').AsString := SglProdutor;
      end;
      if NomPessoaProdutor <> '' then begin
        Query.ParamByName('NomPessoaProdutor').AsString := NomPessoaProdutor + '%';
      end;
      if CodSituacaoSisbov <> '' then begin
        Query.ParamByName('CodSituacaoSisbov').AsString := CodSituacaoSisbov;
      end;
      if (DtaNascimentoInicio > 0) and  (DtaNascimentoFim > 0) then begin
        Query.ParamByName('DtaNascimentoInicio').AsDateTime := Trunc(DtaNascimentoInicio);
        Query.ParamByName('DtaNascimentoFim').AsDateTime := Trunc(DtaNascimentoFim)+1;
      end;
      if (DtaIdentificacaoInicio > 0) and (DtaIdentifcacaoFim > 0) then begin
        Query.ParamByName('DtaIdentificacaoSisbovInicio').AsDateTime := Trunc(DtaIdentificacaoInicio);
        Query.ParamByName('DtaIdentificacaoSisbovFim').AsDateTime := Trunc(DtaIdentifcacaoFim)+1;
      end;
      if CodMicroRegiaoSisbovNascimento <> -1 then begin
        Query.ParamByName('CodMicroRegiaoSisbovNascimento').AsInteger := CodMicroRegiaoSisbovNascimento;
      end;
      if NomMicroRegiaoNascimento <> '' then begin
        Query.ParamByName('NomMicroRegiaoNascimento').AsString := NomMicroRegiaoNascimento + '%';
      end;
      if CodEstadoNascimento <> -1 then begin
        Query.ParamByName('CodEstadoNascimento').AsInteger := CodEstadoNascimento;
      end;
      if NumImovelNascimento <> '' then begin
        Query.ParamByName('NumImovelNascimento').AsString := NumImovelNascimento;
      end;
      if CodLocalizacaoNascimento > -1 then begin
        Query.ParamByName('CodLocalizacaoNascimento').AsInteger := CodLocalizacaoNascimento;;
      end;
      if CodMicroRegiaoSisbovIdentificacao <> -1 then begin
        Query.ParamByName('CodMicroRegiaoSisbovIdentificacao').AsInteger := CodMicroRegiaoSisbovIdentificacao;
      end;
      if NomMicroRegiaoIdentificacao <> '' then begin
        Query.ParamByName('NomMicroRegiaoIdentificacao').AsString := NomMicroRegiaoIdentificacao + '%';
      end;
      if CodEstadoIdentificacao <> -1 then begin
        Query.ParamByName('CodEstadoIdentificacao').AsInteger := CodEstadoIdentificacao;
      end;
      if NumImovelIdentificacao <> '' then begin
        Query.ParamByName('NumImovelIdentificacao').AsString := NumImovelIdentificacao;
      end;
      if CodLocalizacaoIdentificacao > -1 then begin
        Query.ParamByName('CodLocalizacaoIdentificacao').AsInteger := CodLocalizacaoIdentificacao;
      end;
      if (DtaCompraInicio > 0) and (DtaCompraFim > 0) then begin
        Query.ParamByName('DtaCompraInicio').AsDateTime := Trunc(DtaCompraInicio);
        Query.ParamByName('DtaCompraFim').AsDateTime := Trunc(DtaCompraFim)+1;
      end;
      if IndSexo <> '' then begin
        Query.ParamByName('IndSexo').AsString := IndSexo;
      end;
      if IndAnimalCastrado <> '' then begin
        Query.ParamByName('IndAnimalCastrado').AsString := IndAnimalCastrado;
      end;
      if CodRegimeAlimentar <> -1 then begin
        Query.ParamByName('CodRegimeAlimentar').AsInteger := CodRegimeAlimentar;
      end;
      if CodAssociacaoRaca <> -1 then begin
        Query.ParamByName('CodAssociacaoRaca').AsInteger := CodAssociacaoRaca;
      end;
      if CodGrauSangue <> -1 then begin
        Query.ParamByName('CodGrauSangue').AsInteger := CodGrauSangue;
      end;
      if CodTipoLugar <> -1 then begin
        Query.ParamByName('CodTipoLugar').AsInteger := CodTipoLugar;
      end;
      if NumImovelCorrente <> '' then begin
        Query.ParamByName('NumImovelCorrente').AsString := NumImovelCorrente;
      end;
      if CodLocalizacaoCorrente > -1 then begin
        Query.ParamByName('CodLocalizacaoCorrente').AsInteger :=
          CodLocalizacaoCorrente;
      end;
      if NumCNPJCPFCorrente <> '' then begin
        Query.ParamByName('NumCNPJCPFCorrente').AsString := NumCNPJCPFCorrente;
      end;
      if NomPaisOrigem <> '' then begin
        Query.ParamByName('NomPais').AsString := NomPaisOrigem + '%';
      end;
      if IndAptoCobertura <> '' then begin
        Query.ParamByName('IndAptoCobertura').AsString := IndAptoCobertura;
      end;
      if bDtaPrevisaoCertificado then
      begin
        NumDiasEspera := StrToIntDef(ValorParametro(66), 40);
        Query.ParamByName('num_dias_espera').AsInteger := NumDiasEspera;
        Query.ParamByName('dta_inicio_certificado').AsDateTime := Trunc(DtaInicioCertificado) - NumDiasEspera;
        Query.ParamByName('dta_fim_certificado').AsDateTime := (Trunc(DtaFimCertificado)+1) - NumDiasEspera;
      end;
      if bDtaCadastramento then
      begin
        Query.ParamByName('dta_inicio_cadastramento').AsDateTime := DtaInicioCadastramento;
        Query.ParamByName('dta_fim_cadastramento').AsDateTime := DtaFimCadastramento + 1;
      end;
      if bDtaCadastramentoHerdom then
      begin
        Query.ParamByName('dta_inicio_cadastramento_herdom').AsDateTime := DtaInicioCadastramentoHerdom;
        Query.ParamByName('dta_fim_cadastramento_herdom').AsDateTime := DtaFimCadastramentoHerdom + 1;
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
        Query.ParamByName('CodRaca1').AsInteger := CodRaca1;
        Query.ParamByName('QtdCompRacialInicio1').AsFloat := QtdCompRacialInicio1;
        Query.ParamByName('QtdCompRacialFim1').AsFloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
        Query.ParamByName('CodRaca2').AsInteger := CodRaca2;
        Query.ParamByName('QtdCompRacialInicio2').AsFloat := QtdCompRacialInicio2;
        Query.ParamByName('QtdCompRacialFim2').AsFloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
        Query.ParamByName('CodRaca3').AsInteger := CodRaca3;
        Query.ParamByName('QtdCompRacialInicio3').AsFloat := QtdCompRacialInicio3;
        Query.ParamByName('QtdCompRacialFim3').AsFloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
        Query.ParamByName('CodRaca4').AsInteger := CodRaca4;
        Query.ParamByName('QtdCompRacialInicio4').AsFloat := QtdCompRacialInicio4;
        Query.ParamByName('QtdCompRacialFim4').AsFloat := QtdCompRacialFim4;
      end;
      if (IndAnimalSemTecnico = 'N') then begin
        if CodTecnico > 0 then begin
          Query.ParamByName('cod_pessoa_tecnico').AsInteger := CodTecnico
        end else begin
          if (Conexao.CodPapelUsuario = 3) then begin
            Query.ParamByName('cod_pessoa_tecnico').AsInteger := Conexao.CodPessoa;
          end;
        end;
      end;
      if ((Conexao.CodPapelUsuario = 1) and (Conexao.CodTipoAcesso = 'C')) // Associacao
      or ((Conexao.CodPapelUsuario = 3) and (Conexao.CodTipoAcesso = 'C')) // Tecnico
      or ((Conexao.CodPapelUsuario = 4) and (Conexao.CodTipoAcesso ='P')) //Produtor
      or ((Conexao.CodPapelUsuario = 9) and (Conexao.CodTipoAcesso = 'C')) // Gestor
      then begin
        Query.ParamByName('cod_pessoa').AsInteger := Conexao.CodPessoa;
      end else if (Conexao.CodTipoAcesso = 'N') then begin
        Query.ParamByName('cod_pessoa').AsInteger := -1;
      end;

      Query.Open;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        iAux := Length(strExceedsTheConfiguredThreshold);
        if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
          Result := idExceedsTheConfiguredThreshold;
        end else begin
          Mensagens.Adicionar(1102, Self.ClassName, NomMetodo, [E.Message]);
          Result := -1102;
        end;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

procedure TIntAnimais.ZerarValoresUltimaPesquisa;
begin
  FPCodFazendaManejo := 0;
  FPCodManejoInicio := '';
  FPCodManejoFim := '';
  FPCodAnimalCertificadora := '';
  FPCodPaisSisBov := 0;
  FPCodEstadoSisBov := 0;
  FPCodMicroRegiaoSisBov := 0;
  FPCodSisBovInicio := 0;
  FPCodSisBovFim := 0;
  FPCodSituacaoSisbov := '';
  FPDtaNascimentoInicio := 0;
  FPDtaNascimentoFim := 0;
  FPCodFazendaNascimento := 0;
  FPDtaCompraInicio := 0;
  FPDtaCompraFim := 0;
  FPCodPessoaSecundariaCriador := 0;
  FPNomAnimal := '';
  FPDesApelido := '';
  FPCodAptidao := 0;
  FPCodRaca := '';
  FPIndSexo := '';
  FPCodOrigem := '';
  FPSglFazendaPai := '';
  FPCodAnimalPai := '';
  FPDesApelidoPai := '';
  FPSglFazendaMae := '';
  FPCodAnimalMae := '';
  FPIndAnimalCastrado := '';
  FPCodRegimeAlimentar := 0;
  FPCodCategoria := '';
  FPIndConsiderarExterno := '';
  FPCodAssociacao := 0;
  FPCodGrauSangue := 0;
  FPNumRGD := '';
  FPCodTipoLugar := 0;
  FPCodLocal := '';
  FPCodLote := '';
  FPCodFazendaCorrente := 0;
  FPNumImovelCorrente := '';
  FPCodLocalizacaoCorrente := -1;
  FPNumCPFCNPJCorrente := '';
  FPIndCadastroEfetivado := '';
  FPCodOrdenacao := '';
  FPCodEvento := 0;
  FPIndEventoAplicado := '';
  FPIndAnimaisEvento := '';
  FPCodReprodutorMultiplo := -1;
  FPIndTrazerComposicaoRacial := '';
  FPIndAgrupRaca1 := '';
  FPCodRaca1 := 0;
  FPQtdCompRacialInicio1 := 0;
  FPQtdCompRacialInicio2 := 0;
  FPIndAgrupRaca2 := '';
  FPCodRaca2 := 0;
  FPQtdCompRacialInicio2 := 0;
  FPQtdCompRacialInicio2 := 0;
  FPTxtObservacao := '';
end;

function TIntAnimais.ConsisteCodSisbovProdutor(CodProdutor,
  CodPropriedadeIdentificacao, CodEstadoSisbov, CodMicroRegiaoSisbov,
  CodAnimalSisbov: Integer): Integer;
var
  QV : THerdomQuery;
begin
  QV := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Monta comando de select na tab_codigo_sisbov
      QV.SQL.Clear;
  {$IFDEF MSSQL}
      QV.SQL.Add(' select 1 from tab_codigo_sisbov ' +
                 ' where cod_estado_sisbov = :cod_estado_sisbov ' +
                 '   and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
                 '   and cod_animal_sisbov = :cod_animal_sisbov ' +
                 '   and cod_pessoa_produtor = :cod_pessoa_produtor ' +
                 '   and cod_propriedade_rural = :cod_propriedade_rural');
  {$ENDIF}

      QV.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      QV.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      QV.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
      QV.ParamByName('cod_pessoa_produtor').AsInteger := CodProdutor;
      QV.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeIdentificacao;

      QV.Open;

      if (not QV.IsEmpty) then
        Result := 0 //Cod. Sisbov não pertence ao produtor
      else
        Result := -1;

    except
      on E: Exception do begin
        Mensagens.Adicionar(768, Self.ClassName, 'ConsisteCodSisbovProdutor', [E.Message]);
        Result := -768;
        Exit;
      end;
    end;
  finally
    QV.Free;
  end;
end;

{*******************************************************************************
* Esta função busca um determinado codigo em uma query 
*
*
* Argumentos:
* ListaAnimais - Query com os animais
* CodAnimal - Codigo do animal procurado
* Encontrou - Variavel de retorno. True caso o codigo seja encontrado
*             na lista e False caso contrario.
*
* Retorno:
*   -1687 se ocorrer algum erro e 0 se tudo der certo.
*******************************************************************************}
function TIntAnimais.BuscaAnimalLista(ListaAnimais: THerdomQuery;
  CodAnimal: Integer; var Encontrou: Boolean): Integer;
const
  NomeMetodo = 'BuscaAnimalLista';
var
  Ind: Variant;
begin
  Result := 0;
  try
    Ind := ListaAnimais.Lookup(
      'cod_animal',
      CodAnimal,
      'cod_animal'
    );
    Encontrou := not VarIsNull(Ind);
  except
    on E: Exception do
    begin
      Mensagens.Adicionar(1689, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1689;
    end;
  end;
end;

function TIntAnimais.Inicializar(EConexaoBD: TConexao;
  EMensagens: TIntMensagens): Integer;
begin
  Result := inherited Inicializar(EConexaoBD, EMensagens);

  // Se não ocorreu nehum erro inicializa os códigos SISBOV 
  if Result >= 0 then
  begin
    Result := FCodigosSisbov.Inicializar(EConexaoBD, EMensagens);
  end;
end;

{ Função que busca o codigo interno do técnico através
  do número do CNPJ/CPF do mesmo.
}
function TIntAnimais.BuscaCodTecnico(NumCNPJCPFTecnico: String): Integer;
var
  QAux : THerdomQuery;
  CodTecnico: Integer;
Const
  NomeMetodo: String = 'BuscaCodTecnico';
begin
  QAux := THerdomQuery.Create(conexao, nil);
  CodTecnico := -1;
  try
   try
    if (Conexao.CodPapelUsuario = 3) then begin
      CodTecnico := Conexao.CodPessoa;
    end else begin
      //Busca o Código do técnico do produtor a partir do CNPJCPF informado
      if (Length(Trim(NumCNPJCPFTecnico)) > 0) then begin
        QAux.SQL.Clear;
        QAux.SQL.Add('  Select cod_pessoa from tab_pessoa    ');
        QAux.SQL.Add('    where num_cnpj_cpf = :num_cnpj_cpf ');
        QAux.SQL.Add('       and dta_fim_validade is null    ');
        QAux.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFTecnico;
        QAux.Open;
        //Verifica se o CNPJCPF informado é uma pessoa cadastrada no sistema, se não estiver lança mensagem informativa e aborta op.
        if QAux.IsEmpty then begin
          Mensagens.Adicionar(1718, Self.ClassName, NomeMetodo, []);
          Result := -1718;
          Exit;
        end
        else begin
          CodTecnico := QAux.FieldByName('cod_pessoa').AsInteger;
        end;
      end;
    end;
    //Verifica se o Técnico atende o produtor corrente, caso contrário lança mensagem informando e aborta op.
    if CodTecnico > 0 then begin
      QAux.SQL.Clear;
      QAux.SQL.Add(' Select 1 from tab_tecnico_produtor ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_pessoa_tecnico  = :cod_pessoa_tecnico ' +
                '   and dta_fim_validade    is null ');
      QAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      QAux.ParamByName('cod_pessoa_tecnico').AsInteger  := CodTecnico;
      QAux.Open;
      if (QAux.IsEmpty) or
         ((Conexao.CodPapelUsuario = 3) and (CodTecnico <> Conexao.CodPessoa)) then begin
        Mensagens.Adicionar(1705, Self.ClassName, NomeMetodo, []);
        Result := -1705;
        Exit;
      end;
    end;
    Result := CodTecnico;
    except
      on E: Exception do begin
        Mensagens.Adicionar(1965, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1965;
        Exit;
      end;
    end;
  finally
    QAux.Free;
  end;  
end;

{ Verifica se existe algum animal ativo cadastrado para outro produtor com o
  mesmo código SISBOV do animal. Caso exista não permite que o evento seja
  cancelado.}
function TIntAnimais.ConsisteRemoverEventoAnimalInativo(DadosAnimal: TDadosAnimal;
  DadosEvento: TDadosEvento; var IndPodeExcluir: Boolean): Integer;
const
  NomeMetodo : String = 'ConsisteRemoverEventoAnimalInativo';
var
  QueryLocal: THerdomQuery;
  CodProdutorCorrente,
  CodAnimalASerRemovido,
  CodProdutorAnimalASerRemovido: Integer;
  NomProdutor: String;
begin
  IndPodeExcluir := False;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      CodProdutorCorrente := Conexao.CodProdutorTrabalho;
      with QueryLocal do
      begin
        SQL.Clear;
        {$IFDEF MSSQL}
        SQL.Add(' select 1 ');
        SQL.Add('   from tab_animal_evento tae ');
        SQL.Add('      , tab_animal_vendido tav ');
        SQL.Add('  where tae.cod_pessoa_produtor            = tav.cod_pessoa_produtor ');
        SQL.Add('    and tae.cod_animal                     = tav.cod_animal ');
        SQL.Add('    and tav.cod_produtor_evento_venda      = :cod_pessoa_produtor_evento ');
        SQL.Add('    and tav.cod_animal_vendido             = :cod_animal_vendido ');
        {$ENDIF}
        ParamByName('cod_pessoa_produtor_evento').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_animal_vendido').AsInteger         := DadosAnimal.CodAnimal;
        Open;

        if not IsEmpty then
        begin
          Mensagens.Adicionar(2256, Self.ClassName, NomeMetodo, [DadosAnimal.SglFazendaManejo + ' ' + DadosAnimal.CodAnimalManejo]);
          Result := 2256;
          Exit;
        end;

        SQL.Clear;
        {$IFDEF MSSQL}            
        SQL.Add(' select tav.cod_animal ');
        SQL.Add('      , tav.cod_pessoa_produtor ');
        SQL.Add('   from tab_animal_vendido tav ');
        SQL.Add('      , tab_animal ta ');
        SQL.Add('  where tav.cod_produtor_evento_venda = :cod_pessoa_produtor_evento ');
        SQL.Add('    and tav.cod_animal_vendido        = :cod_animal_vendido ');
        SQL.Add('    and ta.cod_pessoa_produtor = tav.cod_pessoa_produtor ');
        SQL.Add('    and ta.cod_animal = tav.cod_animal ');
        SQL.Add('    and ta.dta_fim_validade is null ');
        {$ENDIF}
        ParamByName('cod_pessoa_produtor_evento').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_animal_vendido').AsInteger         := DadosAnimal.CodAnimal;
        Open;

        if not IsEmpty then
        begin
          CodAnimalASerRemovido         := FieldByName('cod_animal').AsInteger;
          CodProdutorAnimalASerRemovido := FieldByName('cod_pessoa_produtor').AsInteger;

          Result := Conexao.DefinirProdutorTrabalho(CodProdutorAnimalASerRemovido, NomProdutor);
          if Result < 0 then
          begin
            Exit;
          end;

          BeginTran;
          while not Eof do
          begin
            Result := ExcluirAnimalComprado(CodAnimalASerRemovido);
            if Result < 0 then
            begin
              Result := Conexao.DefinirProdutorTrabalho(CodProdutorCorrente, NomProdutor);
              if Result < 0 then
              begin
                Exit;
              end;

              Rollback;
              Exit;
            end;
            Next;
          end;
          Commit;
        end;
        Result := Conexao.DefinirProdutorTrabalho(CodProdutorCorrente, NomProdutor);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      if DadosAnimal.CodPaisSisbov > 0 then
      begin
        // Verifica se existe outro animal ativo com o mesmo código SISBOV para
        // outro produtor na base
        with QueryLocal do
        begin
          SQL.Clear;
          {$IFDEF MSSQL}
          SQL.Add(' select cod_animal, cod_pessoa_produtor ');
          SQL.Add('   from tab_animal ');
          SQL.Add('  where cod_pais_sisbov = :cod_pais_sisbov ');
          SQL.Add('    and cod_estado_sisbov = :cod_estado_sisbov ');
          SQL.Add('    and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
          SQL.Add('    and cod_animal_sisbov = :cod_animal_sisbov ');
          SQL.Add('    and cod_categoria_animal not in (select cod_categoria_animal ');
          SQL.Add('                                       from tab_categoria_animal ');
          SQL.Add('                                      where ind_animal_ativo = ''N'' ');
          SQL.Add('                                        and dta_fim_validade is null) ');
          SQL.Add('    and dta_fim_validade is null ');
          SQL.Add('    and cod_pessoa_produtor <> :cod_pessoa_produtor ');
          {$ENDIF}
          ParamByName('cod_pais_sisbov').AsInteger         := DadosAnimal.CodPaisSisbov;
          ParamByName('cod_estado_sisbov').AsInteger       := DadosAnimal.CodEstadoSisbov;
          ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
          ParamByName('cod_animal_sisbov').AsInteger       := DadosAnimal.CodAnimalSisbov;
          ParamByName('cod_pessoa_produtor').AsInteger     := Conexao.CodProdutorTrabalho;
          Open;

          if IsEmpty then
          begin
            IndPodeExcluir := True;
          end
          else
          begin
            IndPodeExcluir := False;
            Mensagens.Adicionar(2257, Self.ClassName, NomeMetodo, [PadL(IntToStr(DadosAnimal.CodPaisSisbov), '0', 3) + ' ' +
                                                                   PadL(IntToStr(DadosAnimal.CodEstadoSisbov), '0', 2) + ' ' +
                                                                   SE(DadosAnimal.CodMicroRegiaoSisbov >= 0, PadL(IntToStr(DadosAnimal.CodMicroRegiaoSisbov), '0', 2), '') +
                                                                   PadL(IntToStr(DadosAnimal.CodAnimalSisBov), '0', 9) + ' ' +
                                                                   IntToStr(DadosAnimal.NumDVSisbov), DadosAnimal.CodAnimalManejo]);
            Result := -2257;
            Exit;
          end;
        end;
      end;
      Result := 0;
    finally
      QueryLocal.Free;
    end;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(2018, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2018;
      Exit;
    end;
  end;
end;

function TIntAnimais.AlterarNaoEspecificado(CodAnimal,
  CodFazendaManejo: Integer; CodAnimalManejo,
  CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
  DtaIdentificacaoSisbov: TDateTime; NumImovelIdentificacao: String;
  CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
  DtaNascimento: TDateTime; CodFazendaNascimento, CodTipoIdentificador1,
  CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodRaca, CodPelagem, CodRegimeAlimentar,
  CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente: Integer; TxtObservacao: String;
  CodPessoaTecnico: Integer; IndSexo: String): Integer;
const
  Metodo : Integer = 617;
  NomeMetodo : String = 'AlterarNaoEspecificado';
var
  DadosAnimal: TDadosAnimal;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se o código SISBOV foi informado
  if (CodPaisSisBov = -1)
    or (CodEstadoSisBov = -1)
    or (CodAnimalSisbov = -1) then
  begin
    Mensagens.Adicionar(2092, Self.ClassName, NomeMetodo, []);
    Result := -2092;
    Exit;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then
  begin
    Exit;
  end;

  // O método só pode ser aplicado a animais de origem
  // não especificado e carga inicial
  if DadosAnimal.CodTipoOrigem <> 5 then
  begin
    Mensagens.Adicionar(717, Self.ClassName, NomeMetodo,
      [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
    Result := -717;
    Exit;
  end;

  // Trata fazenda de nascimento (R23)
  if CodFazendaNascimento > 0 then
  begin
    Result := VerificaFazenda(CodFazendaNascimento, True, 'Fazenda de nascimento do animal');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se usuário pretende alterar alguma informação que não
  // pode ser alterada se o animal já possuir evento(s) (R08)
  Result := VerificaRegra08(DadosAnimal, DtaNascimento, 'N', CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    '', CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True,
    'Fazenda de manejo do animal');
  if Result < 0 then
  begin
    Exit;
  end;

  // Gera o código de manejo se não foi informado
  if CodAnimalManejo = '' then
  begin
    CodAnimalManejo := PadL(Copy(IntToStr(CodAnimalSISBOV),
      Length(IntToStr(CodAnimalSISBOV)) - 5, 6), '0', 6);
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  if Trim(CodAnimalManejo) = '' then
  begin
    Mensagens.Adicionar(536, Self.ClassName, NomeMetodo, []);
    Result := -536;
    Exit;
  end;

  Result := VerificaNumLetra(CodAnimalManejo,
    TAM_COD_MANEJO_SISBOV, 'Código de manejo do animal');
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then
  begin
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, CodAnimal);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(1, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then
  begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    if Trim(CodAnimalCertificadora) = '' then
    begin
      Mensagens.Adicionar(536, Self.ClassName, NomeMetodo, []);
      Result := -536;
      Exit;
    end;

    Result := VerificaNumLetraPonto(CodAnimalCertificadora, 20, 'Código do animal na certificadora');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  if (CodPaisSisbov <> DadosAnimal.CodPaisSisbov) or
     (CodEstadoSisbov <> DadosAnimal.CodEstadoSisbov) or
     (CodMicroRegiaoSisbov <> DadosAnimal.CodMicroRegiaoSisbov) or
     (CodAnimalSisbov <> DadosAnimal.CodAnimalSisbov) or
     (NumDVSisbov <> DadosAnimal.NumDVSisbov) then
  begin
    // Se animal já foi exportado não pode ser alterado o código sisbov do mesmo
    if DadosAnimal.CodArquivoSisbov > 0 then
    begin
      Mensagens.Adicionar(1389, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
      Result := -1389;
      Exit;
    end;

    Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodAnimalSisbov, NumDVSisbov, 'A', 1, DadosAnimal.CodSituacaoSisbov, 1);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento, DtaIdentificacaoSisbov, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  if (CodPropriedadeIdentificacao > 0) and (NumImovelIdentificacao <> '') then
  begin
    NumImovelIdentificacao := '';
  end;

  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores('', CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(DadosAnimal.CodEspecie, CodRaca, DadosAnimal.CodAptidao);
  if Result < 0 then
  begin
    Exit;
  end;

  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }

  // Verifica Pelagem (R29)
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  Result := VerificaCategoria(CodCategoriaAnimal, DadosAnimal.IndSexo, 'N', DadosAnimal.CodAptidao, DtaNascimento);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, DadosAnimal.CodAptidao);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then
  begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  MontaQueryUpdate;

  Result := AlterarAnimal(CodAnimal, CodFazendaManejo, CodAnimalManejo,
    CodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, DtaIdentificacaoSisbov,
    NumImovelIdentificacao, CodLocalizacaoIdentificacao,
    CodPropriedadeIdentificacao, CodFazendaIdentificacao, DtaNascimento, '', -1,
    -1, CodFazendaNascimento, 0, -1, '', '', '', CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3,
    CodPosicaoIdentificador3, CodTipoIdentificador4, CodPosicaoIdentificador4,
    CodRaca, CodPelagem, 'N', CodRegimeAlimentar, CodCategoriaAnimal,
    CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, -1, CodPropriedadeCorrente, NumCNPJCPFCorrente,
    CodPessoaCorrente, DadosAnimal.CodPessoaCorrente, -1, '', 0, 0, '', '',
    TxtObservacao, NomeMetodo, '', 0, -1, FUsarSisbov, Metodo, DadosAnimal, 'S',
    CodPessoaTecnico, IndSexo);

  if Result = 0 then
  begin
    ZerarValoresUltimaPesquisa;
  end;
end;

function TIntAnimais.InserirNaoEspecificado(CodFazendaManejo: Integer;
  CodAnimalManejo, CodAnimalCertificadora: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbov,
  NumDVSisbov: Integer; CodSituacaoSisbov: String;
  DtaIdentificacaoSisbov: TDateTime; NumImovelIdentificacao: String;
  CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
  DtaNascimento: TDateTime; CodTipoIdentificador1,
  CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
  CodPelagem: Integer; IndSexo: String; CodFazendaManejoPai: Integer;
  CodAnimalPai: String; CodFazendaManejoMae: Integer; CodAnimalMae: String;
  CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
  CodLocalCorrente, CodFazendaCorrente: Integer;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente: Integer; TxtObservacao: String;
  CodPessoaTecnico: Integer; numCNPJCPFTecnico: String): Integer;
const
  NomeMetodo: String = 'InserirNaoEspecificado';
var
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(615) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se o código SISBOV foi informado
  if (CodPaisSisBov = -1)
    or (CodEstadoSisBov = -1)
    or (CodAnimalSisbov = -1) then
  begin
    Mensagens.Adicionar(2093, Self.ClassName, NomeMetodo, []);
    Result := -2093;
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True,
    'Fazenda de manejo do animal');
  if Result < 0 then
  begin
    Exit;
  end;

  // Gera o código de manejo se não foi informado
  if CodAnimalManejo = '' then
  begin
    CodAnimalManejo := PadL(Copy(IntToStr(CodAnimalSISBOV),
      Length(IntToStr(CodAnimalSISBOV)) - 5, 6), '0', 6);
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  if Trim(CodAnimalManejo) = '' then
  begin
    Mensagens.Adicionar(536, Self.ClassName, NomeMetodo, []);
    Result := -536;
    Exit;
  end;

  Result := VerificaNumLetra(CodAnimalManejo,
    TAM_COD_MANEJO_SISBOV, 'Código de manejo do animal');
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then
  begin
    if CodAnimalCertificadora <> '' then
    begin
      Mensagens.Adicionar(715, Self.ClassName, NomeMetodo, []);
      Result := -715;
      Exit;
    end;

    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora,
      CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(1, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then
  begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);

    if Trim(CodAnimalCertificadora) = '' then
    begin
      Mensagens.Adicionar(536, Self.ClassName, NomeMetodo, []);
      Result := -536;
      Exit;
    end;

    Result := VerificaNumLetraPonto(CodAnimalCertificadora, 20, 'Código do animal na certificadora');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, 'I',
    1, CodSituacaoSisbov, 1);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento,
    DtaIdentificacaoSisbov, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Realiza a troca de posição de identificadores de acordo com seu tipo!
  // (Apenas para animal não especificado)
  Result := ValidaIdentificadoresAnimalNaoEspecificado(CodTipoIdentificador1,
    CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
    CodTipoIdentificador3, CodPosicaoIdentificador3);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores('', CodTipoIdentificador1,
    CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
    CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
    CodPosicaoIdentificador4);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, 'N', CodAptidao,
    DtaNascimento);
  if Result < 0 then
  begin
    Exit;
  end;

  // Não deixa inserir animais com categoria "Vaca Parida" ou "Vaca em Lactação"
  if (CodCategoriaAnimal = 6) or (CodCategoriaAnimal = 8) then
  begin
    Mensagens.Adicionar(927, Self.ClassName, NomeMetodo, []);
    Result := -927;
    Exit;
  end;

  // Verifica animal pai (R18, R19)
  if CodAnimalPai <> '' then
  begin
    Result := VerificaAnimalPai(CodEspecie, CodAptidao, CodRaca,
      CodFazendaManejoPai, CodAnimalPai);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica animal mae (R18, R20)
  if CodAnimalMae <> '' then
  begin
    Result := VerificaAnimalMae(CodEspecie, CodAptidao, CodFazendaManejoMae,
      CodAnimalMae);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51,
  //                                       R52, R53, R54, R55, R56, R57, R58)
  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
    CodFazendaCorrente, NumImovelCorrente, CodPropriedadeCorrente,
    NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar,
    CodFazendaCorrente, CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then
  begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  MontaQueryInsert;

  Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo,
    CodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, CodSituacaoSisbov,
    DtaIdentificacaoSisbov, NumImovelIdentificacao, -1, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, DtaNascimento, '', -1, -1, -1, 0, -1, '', '', -1, -1,
    '', '', CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3,
    CodPosicaoIdentificador3, CodTipoIdentificador4, CodPosicaoIdentificador4,
    CodEspecie, CodAptidao, CodRaca, CodPelagem, IndSexo, 5,
    FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor,
    'N', CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
    CodLocalCorrente, CodFazendaCorrente, NumImovelCorrente,
    CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1, -1, '',
    0, 0, '', '', TxtObservacao, NomeMetodo, '', 0, -1, FUsarSisbov, 163, False,
    -1, -1, -1 ,'N', '', -1, -1, CodPessoaTecnico, numCNPJCPFTecnico,
    MsgTecnicoOS, MsgIdentificadorOS);

  if Result = 0 then
  begin
    ZerarValoresUltimaPesquisa;
  end;
end;

function TIntAnimais.InserirNaoEspecificados(QtdAnimais,
  CodFazendaManejo: Integer; CodInicialAnimalManejo,
  CodInicialAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodInicialAnimalSisbov: Integer;
  CodSituacaoSisbov: String; DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String; CodPropriedadeIdentificacao,
  CodFazendaIdentificacao: Integer; DtaNascimento: TDateTime;
  CodTipoIdentificador1, CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
  CodPelagem: Integer; IndSexo: String; CodRegimeAlimentar, CodCategoriaAnimal,
  CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente: Integer;
  CodPropriedadeCorrente: Integer;
  NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer; TxtObservacao: String;
  CodPessoaTecnico: Integer; numCNPJCPFTecnico: String): Integer;
const
  Metodo : Integer = 616;
  NomeMetodo : String = 'InserirNaoEspecificados';
var
  CodMan,
  CodSisb,
  I,
  CodAni,
  CodReg,
  CodLog: Integer;
  CodAnimalManejo,
  CodAnimalCertificadora: String;
  MsgTecnicoOS,
  MsgIdentificadorOS: Boolean;
  NumDVSisbov: Integer;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  CodLocalizacaoIdentificacao := -1;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se o código SISBOV foi informado
  if (CodPaisSisBov = -1)
    or (CodEstadoSisBov = -1)
    or (CodInicialAnimalSisbov = -1) then
  begin
    Mensagens.Adicionar(2093, Self.ClassName, NomeMetodo, []);
    Result := -2093;
    Exit;
  end;

  // Consiste Quantidade de animais
  if (QtdAnimais < 1) or (QtdAnimais > StrToInt(ValorParametro(9))) then
  begin
    Mensagens.Adicionar(739, Self.ClassName, NomeMetodo, [ValorParametro(9)]);
    Result := -739;
    Rollback;
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True,
    'Fazenda de manejo do animal');
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Gera o código de manejo se não foi informado
  if CodInicialAnimalManejo = '' then
  begin
    CodInicialAnimalManejo :=
      PadL(Copy(IntToStr(CodInicialAnimalSISBOV),
        Length(IntToStr(CodInicialAnimalSISBOV)) - 5, 6), '0', 6);
  end;
  Result := VerificaCodigoVariavel('', CodInicialAnimalManejo, '', QtdAnimais,
    TAM_COD_MANEJO_SISBOV, 'código de manejo');
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Abre transação
  BeginTran;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then
  begin
    if CodInicialAnimalCertificadora <> '' then
    begin
      Mensagens.Adicionar(715, Self.ClassName, NomeMetodo, []);
      Result := -715;
      Exit;
    end;

    CodAnimalManejo := CodInicialAnimalManejo;

    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora,
      CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then
    begin
      Exit;
    end;
    
    CodInicialAnimalCertificadora := CodAnimalCertificadora;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(1, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodInicialAnimalSisbov, -1, 'M', 1, CodSituacaoSisbov,
    QtdAnimais);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  if FUsarSisbov then
  begin
    Result := FCodigosSisbov.ReservaCodigos(CodPaisSisbov, CodEstadoSisbov,
      CodMicroRegiaoSisbov, CodInicialAnimalSisbov, QtdAnimais);
    if Result < 0 then
    begin
      Rollback;
      Exit;
    end;
  end;

  // Reserva Códigos de Animal e de Log
  Result := ReservarCodigos(CodAni, CodLog, CodReg, QtdAnimais);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento,
    DtaIdentificacaoSisbov, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores('', CodTipoIdentificador1,
    CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
    CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
    CodPosicaoIdentificador4);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }

  // Verifica Pelagem (R29)
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, 'N', CodAptidao,
    DtaNascimento);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
    CodFazendaCorrente, NumImovelCorrente, CodPropriedadeCorrente,
    NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar,
    CodFazendaCorrente, CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then
  begin
    Rollback;
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then
  begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then
    begin
      Rollback;
      Exit;
    end;
  end;

  MontaQueryInsert;

  CodMan := StrToInt(CodInicialAnimalManejo);

  if CodPaisSisbov >= 0 then
  begin
    CodSisb := CodInicialAnimalSisbov;
  end
  else
  begin
    CodSisb := -1;
  end;

  for I := 1 to QtdAnimais do
  begin
    CodAnimalManejo := StrZero(CodMan, Length(CodInicialAnimalManejo));

    if CodSisb >= 0 then
    begin
      NumDVSisbov := BuscarDVSisBov(CodPaisSisbov, CodEstadoSisbov,
        CodMicroRegiaoSisbov, CodSisb);
    end
    else
    begin
      NumDVSisbov := -1;
    end;

    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora,
      CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then
    begin
      Rollback;
      Exit;
    end;

    // Consiste montagem do código da certificadora
    if CodAnimalCertificadora = '' then
    begin
      Mensagens.Adicionar(746, Self.ClassName, NomeMetodo, []);
      Result := -746;
      Rollback;
      Exit;
    end;

    Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo,
      CodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
      CodMicroRegiaoSisbov, CodSisb, NumDVSisbov, CodSituacaoSisbov,
      DtaIdentificacaoSisbov, NumImovelIdentificacao, -1,
      CodPropriedadeIdentificacao, CodFazendaIdentificacao, DtaNascimento, '',
      -1, -1, -1, 0, -1, '', '', -1, -1, '', '', CodTipoIdentificador1,
      CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
      CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
      CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca, CodPelagem,
      IndSexo, 5, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae,
      FCodAnimalReceptor, 'N', CodRegimeAlimentar, CodCategoriaAnimal,
      CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
      NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente,
      CodPessoaCorrente, -1, -1, '', 0, 0, '', '', TxtObservacao, NomeMetodo,
      '', 0, -1, False, Metodo, True, CodAni, CodLog, CodReg, 'N', '', -1, -1,
      CodPessoaTecnico, numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

    if Result < 0 then
    begin
      Rollback;
      Exit;
    end;

    Inc(CodAni);
    Inc(CodLog);
    Inc(CodReg);
    Inc(CodMan);

    if CodSisb >= 0 then
    begin
      Inc(CodSisb);
    end;
  end;

  Commit;
  ZerarValoresUltimaPesquisa;
  Result := 0;
end;

{ Retorna o código da pelagem "Não especificada"

Parametros:
  Sem parametros

Retorno:
  Código da pelagem "Não especificada".
  -2081 se não existir uma pelagem não especificada.
  -2082 se ocorrer um erro fatal.}
function TIntAnimais.ObtemPelagemPadrao: Integer;
const
  NomeMetodo: String = 'ObtemPelagemPadrao';
var
  QueryLocal: THerdomQuery;
begin
  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      with QueryLocal do
      begin
        SQL.Add('SELECT cod_pelagem');
        SQL.Add('  FROM tab_pelagem');
        SQL.Add(' WHERE ind_restrito_sistema = ''S''');
        Open;

        if IsEmpty then
        begin
          Mensagens.Adicionar(2081, Self.ClassName, NomeMetodo, []);
          Result := -2081;
          Exit;
        end;

        Result := FieldByName('cod_pelagem').AsInteger;
      end;
    finally
      QueryLocal.Free;
    end;
  except
    on E: Exception do
    begin
      Mensagens.Adicionar(2082, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2082;
    end;
  end;
end;

{ Retorna o código do local principal do da fazenda produtor.

Parametros:
  CodPessoaProdutor: Código do produtor
  CodFazenda: Código da fazenda

Retorno:
  Código da fazenda principal do produtor.
  -2083 se o produtor não possuir uma fazenda principal.
  -2084 se ocorrer algum erro fatal.}
function TIntAnimais.ObtemLocalPrincipal(CodPessoaProdutor,
      CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'ObtemLocalPrincipal';
var
  QueryLocal: THerdomQuery;
begin
  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      with QueryLocal do
      begin
        SQL.Add('SELECT cod_local');
        SQL.Add('  FROM tab_local');
        SQL.Add(' WHERE ind_principal = ''S''');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND cod_fazenda = :cod_fazenda');
        SQL.Add('   AND dta_fim_validade is null');
        ParamByName('cod_pessoa_produtor').AsInteger := CodPessoaProdutor;
        ParamByName('cod_fazenda').AsInteger := CodFazenda;
        Open;

        if IsEmpty then
        begin
          Mensagens.Adicionar(2083, Self.ClassName, NomeMetodo, []);
          Result := -2083;
          Exit;
        end;

        Result := FieldByName('cod_local').AsInteger;
      end;
    finally
      QueryLocal.Free;
    end;
  except
    on E: Exception do
    begin
      Mensagens.Adicionar(2084, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2084;
    end;
  end;
end;


{ Verifica se os atributos obtidos durante a carga inicial são válidos.

Parametros:
  CodAnimalManejo: Código de manejo do animal
  CodIdentificador1: Identificador do animal
  CodIdentificador2: Identificador do animal
  CodIdentificador3: Identificador do animal
  CodIdentificador4: Identificador do animal
  CodAptidao: Aptidão do animal
  CodRaca: Raça do animal
  CodFazendaResponsavel: Fazenda de efetivação do animal
  DataNascimento: Data de nascimento
  IndSexo: Sexo do animal

Retorno:
  0 (zero) se não houver nenhum erro.
  < 0 se ocorrer algum erro}
function TIntAnimais.ValidaAtributosCargaInicial(CodAnimalManejo: String;
  CodFazendaManejo, CodIdentificador1, CodIdentificador2, CodIdentificador3,
  CodIdentificador4, CodLocal, CodAptidao, CodRaca,
  CodFazendaResponsavel: Integer; DataNascimento: TDateTime;
  IndSexo: String): Integer;
const
  NomeMetodo: String = 'ValidaAtributosCargaInicial';
var
  QueryLocal: THerdomQuery;
  NumImovelCorrenteTmp: String;
begin
  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Verifica duplicidade de fazenda/animal manejo (R04)
      Result := VerificaCodAnimalFazendaManejo(CodFazendaManejo,
        CodAnimalManejo, -1);
      if Result < 0 then
      begin
        Exit;
      end;

      // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
      Result := VerificaIdentificadores('', CodIdentificador1, -1,
        CodIdentificador2, -1, CodIdentificador3, -1, CodIdentificador4,
        -1);
      if Result < 0 then
      begin
        Exit;
      end;

      // Consiste aptidão (R29, R50)
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select 1 ');
        SQL.Add('  from tab_aptidao ta, ');
        SQL.Add('       tab_raca_aptidao tra ');
        SQL.Add(' where tra.cod_aptidao = ta.cod_aptidao ');
        SQL.Add('   and ta.cod_aptidao = :cod_aptidao ');
        SQL.Add('   and ta.dta_fim_validade is null ');
        SQL.Add('   and tra.cod_raca = :cod_raca ');
        ParamByName('cod_aptidao').AsInteger := CodAptidao;
        ParamByName('cod_raca').AsInteger := CodRaca;

        Open;
        // Se o relacionamento não existir então o insere
        if IsEmpty then
        begin
          SQL.Clear;
          SQL.Add('insert into tab_raca_aptidao (');
          SQL.Add('  cod_aptidao,');
          SQL.Add('  cod_raca');
          SQL.Add(') values (');
          SQL.Add('  :cod_aptidao,');
          SQL.Add('  :cod_raca');
          SQL.Add(')');
          ParamByName('cod_aptidao').AsInteger := CodAptidao;
          ParamByName('cod_raca').AsInteger := CodRaca;
          ExecSQL;
        end;
      end;

      // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)

      Result := VerificaCategoria(99, IndSexo, 'N', CodAptidao, DataNascimento);
      if Result < 0 then
      begin
        Exit;
      end;

      // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
      Result := VerificaLugar(1, -1, CodLocal, CodFazendaResponsavel,
        NumImovelCorrenteTmp, -1, '', -1);
      if Result < 0 then begin
        Exit;
      end;

      // Verifica regime alimentar do animal (R10, R11, R29, R33)
      Result := VerificaRegimeAlimentar(99, 1, CodFazendaResponsavel,
        CodLocal, 99, CodAptidao);
      if Result < 0 then begin
        Exit;
      end;
    finally
      QueryLocal.Free;
    end;

    Result := 0;
  except
    on E: EHerdomException do
    begin
      E.gerarMensagem(Mensagens);
      Result := -E.CodigoErro;
    end;
    on E: Exception do
    begin
      Mensagens.Adicionar(2085, self.ClassName, NomeMetodo, [E.Message]);
      Result := -2085;
    end;
  end;
end;

{ Insere um animal de acordo com os dados do arquivo gerado pelo SISBOV.
  Após a inserção do animal o cadastro é efetivado e exportado
  para o SISBOV.

Parametros:
  CodArquivoSISBOV: Código do arquivo de exportação do animal.
  Especie: Sigla da espécie - BOV ou BUB
  NumSISBOV: Número sisbov no formato: XX = estado, WW = Micro Região (MR)
                                       YYYYYYYYY = Código, Z = Digito Verificador
    Sem MR - 105XXYYYYYYYYYZ
    Com MR - 0XXWWYYYYYYYYYZ
  DtaIdentificacao: Data de identificação do animal no formato DDMMAAAA. dta_identificacao_sisbov
  TipoIdentificacaoDupla: Sigla da identificação dupla do animal
  CodigoRaca: Código da raça do animal. O código dos animais efetivados
    antes da data 01/11/2004 estão com o código da RAÇA antiga, deve ser feita
    uma conversão para obter o código correto da data.
  DtaNascimento: Data de nascimento do animal. Não obrigatório.
  Sexo: Sexo do animal - MA ou FE
  Aptidao: Aptidão do animal
  NirfIncraNascimento: NIRF/INCRA da propriedade de nascimento do animal.
  CodigoLocalizacaoNascimento: Código de localização SISBOV de nascimento
  NirfIncraResponsavel: NIRF/INCRA da propriedade de efetivação do animal.
  CodigoLocalizacaoResponsavel: Código de localização SISBOV de efetivação
  NrAssociacaoRGD: Número RGD do animal
  NrCertificadora: Codigo do animal na certificadora cod_animal_certificadora
  DtaInclusaoSistema: Data de inclusão do animal no SISBOV. Formato DDMMAAAA. dta_efetivacao_cadastro

Retorno:
  Código do animal inserido.
  < 0 código de erro.}
function TIntAnimais.InserirAnimalCargaInicial(CodArquivoSISBOV: Integer;
  Especie, NrSISBOV, DtaIdentificacao, TipoIdentificacaoDupla, CodigoRaca,
  DtaNascimento, Sexo, Aptidao, NirfIncraNascimento,
  CodigoLocalizacaoNascimento, NrAssociacaoRGD, NrCertificadora,
  DtaInclusaoSistema: String; var CodPessoaProdutor, CodFazenda,
  CodAptidao: Integer): Integer;
const
  NomeMetodo: String = 'InserirAnimalCargaInicial';
  COD_BRINCO: Integer = 1;
  COD_TATUAGEM: Integer = 4;
  COD_MARCA_FOGO_SISBOV: Integer = 5;
  COD_BOTTON: Integer = 9;
  COD_DISP_ELETRONICO: Integer = 14;
  COD_MARCA_FOGO_ASSOCIACAO: Integer = 10;
  COD_RACA_SISBOV_NOVO  : array[0 .. 11] of String = ('NS', 'RW', 'GY', 'GD', 'HI', 'IB', 'JÁ', 'UM', 'NM', 'NO', 'SL', 'TI');
  COD_RACA_SISBOV_ANTIGO: array[0 .. 11] of String = ('BZ', 'DW', 'GI', 'GN', 'SH', 'IN', 'JA', 'MU', 'NO', 'NM', 'SA', 'TU');
  COD_RACA_ANTIGO_ESCLUIDO: array[0 .. 25] of String = ('AB', 'BF', 'BG', 'BU', 'CO', 'CI', 'DJ', 'RW', 'DM', 'DF', 'FB', 'GD', 'HY', 'IV', 'LP', 'MO', 'OC', 'PR', 'RR', 'RO', 'SR', 'IS', 'MS', 'SP', 'SL', 'ST');
  QTD_DIAS_MAXIMO_IDADE: Integer = 10000;
var
  I,
  CodAnimal,
  CodPaisSISBOV,
  CodEstadoSISBOV,
  CodMicroRegiaoSISBOV,
  CodAnimalSISBOV,
  NumDVSISBOV,
  CodEspecie,
  CodIdentificacaoDupla,
  CodIdentificador1,
  CodIdentificador2,
  CodIdentificador3,
  CodIdentificador4,
  CodLocal,
  CodRaca,
  CodFazendaNascimento,
  CodFazendaResponsavel,
  CodRegistroLog,
  CodLocalizacaoNascimento,
  CodLocalizacaoIdentificacao,
  CodPropriedadeResponsavel,
  CodPropriedadeNascimento,
  CodProdutorResponsavel: Integer;
  DataIdentificacao,
  DataReservaCodigoSISBOV,
  DataNascimento,
  DataInsercaoSISBOV: TDateTime;
  IndRacaPura,
  CodAnimalManejo,
  RacaNova,
  NumImovelNascimento,
  NomePessoaProdutor,
  NirfIncraResponsavel,
  IndSexo: String;
  QueryLocal: THerdomQuery;
  IndRacaExcluida: Boolean;
begin
  Result := -1;
  CodAnimal := -1;
  CodPessoaProdutor := -1;
  CodFazenda := -1;
  CodAptidao := -1;
  
  if not Inicializado then
  begin
    RaiseNaoInicializado('InserirNascido');
    Exit;
  end;

  try
    if CodArquivoSISBOV <= 0 then
    begin
      raise Exception.Create('O parametro CodArquivoSISBOV é obrigatório.');
    end;
    if Length(Especie) <> 3 then
    begin
      raise Exception.Create('O parametro Especie é inválido.');
    end;
    if Length(NrSISBOV) <> 15 then
    begin
      raise Exception.Create('O parametro NrSISBOV é inválido.');
    end;
    if Length(DtaIdentificacao) <> 8 then
    begin
      raise Exception.Create('O parametro DtaIdentificacao é inválido.');
    end;
    if Length(TipoIdentificacaoDupla) > 4 then
    begin
      raise Exception.Create('O parametro TipoIdentificacaoDupla é inválido.');
    end;
    if Length(CodigoRaca) <> 2 then
    begin
      raise Exception.Create('O parametro CodigoRaca é inválido.');
    end;
    if Length(DtaNascimento) > 8 then
    begin
      raise Exception.Create('O parametro DtaNascimento é inválido.');
    end;
    if Length(Sexo) <> 2 then
    begin
      raise Exception.Create('O parametro Sexo é inválido.');
    end;
    if Length(Aptidao) > 5 then
    begin
      raise Exception.Create('O parametro Aptidao é inválido.');
    end;
    if Length(NirfIncraNascimento) > 13 then
    begin
      raise Exception.Create('O parametro NirfIncraNascimento é inválido.');
    end;
    if Length(CodigoLocalizacaoNascimento) > 10 then
    begin
      raise Exception.Create('O parametro CodigoLocalizacaoNascimento é inválido.');
    end;
    if Length(NrAssociacaoRGD) > 20 then
    begin
      raise Exception.Create('O parametro NrAssociacaoRGD é inválido.');
    end;
    if Length(NrCertificadora) > 20 then
    begin
      raise Exception.Create('O parametro NrCertificadora é inválido.');
    end;
    if Length(Trim(NrCertificadora)) = 0 then
    begin
      raise Exception.Create('O parametro NrCertificadora é obrigatório.');
    end;
    if Length(DtaInclusaoSistema) <> 8 then
    begin
      raise Exception.Create('O parametro DtaInclusaoSistema é inválido.');
    end;

    // Obtem o código da espécie
    CodEspecie := -1;
    if Trim(Especie) = 'BOV' then
    begin
      CodEspecie := 1;
    end
    else
    if Trim(Especie) = 'BUB' then
    begin
      CodEspecie := 2;
    end;

    if CodEspecie = -1 then
    begin
      raise Exception.Create('A espécie ' + Especie + ' é inválida.');
    end;

    // Obtem o código SISBOV
    CodPaisSISBOV := 105;
    if Copy(NrSISBOV, 1, 1) = '0' then // Com MR
    begin
      CodEstadoSISBOV := StrToInt(Copy(NrSISBOV, 2, 2));
      CodMicroRegiaoSISBOV := StrToInt(Copy(NrSISBOV, 4, 2));
    end
    else
    if Copy(NrSISBOV, 1, 3) = '105' then
    begin // Sem MR
      CodEstadoSISBOV := StrToInt(Copy(NrSISBOV, 4, 2));
      CodMicroRegiaoSISBOV := -1;
    end
    else
    begin
      raise Exception.Create('Código SISBOV "' + NrSISBOV + '" inválido.');
    end;
    CodAnimalSISBOV := StrToInt(Copy(NrSISBOV, 6, 9));
    NumDVSISBOV := StrToInt(Copy(NrSISBOV, 15, 1));

    CodAnimalManejo := PadL(Copy(IntToStr(CodAnimalSISBOV),
      Length(IntToStr(CodAnimalSISBOV)) - 5, 6), '0', 6);

    // Obtem a data de Identificação
    try
      DataIdentificacao := EncodeDate(
        StrToInt(Copy(DtaIdentificacao, 5, 4)),  // Ano
        StrToInt(Copy(DtaIdentificacao, 3, 2)),  // Mes
        StrToInt(Copy(DtaIdentificacao, 1, 2))); // Dia
    except
      on E: Exception do
      begin
        raise Exception.Create('Parametro DtaIdentificacao("' +
          DtaIdentificacao + '" inválido: [' + E.Message + ']');
      end;
    end;

    // Obtem a dasta de nascimento, se esta foi informada
    try
      DataNascimento := 0;
      if Trim(DtaNascimento) <> '' then
      begin
        DataNascimento := EncodeDate(
          StrToInt(Copy(DtaNascimento, 5, 4)),  // Ano
          StrToInt(Copy(DtaNascimento, 3, 2)),  // Mes
          StrToInt(Copy(DtaNascimento, 1, 2))); // Dia
      end;
    except
      on E: Exception do
      begin
        raise Exception.Create('Parametro DtaIdentificacao("' +
          DtaNascimento + '" inválido: [' + E.Message + ']');
      end;
    end;

    // Obtem a data de inserção do registro no SISBOV
    try
      DataInsercaoSISBOV := EncodeDate(
        StrToInt(Copy(DtaInclusaoSistema, 5, 4)),  // Ano
        StrToInt(Copy(DtaInclusaoSistema, 3, 2)),  // Mes
        StrToInt(Copy(DtaInclusaoSistema, 1, 2))); // Dia
    except
      on E: Exception do
      begin
        raise Exception.Create('Parametro DtaInclusaoSistema("' +
          DtaInclusaoSistema + '" inválido: [' + E.Message + ']');
      end;
    end;

    // Obtem o sexo
    IndSexo := '';
    if Sexo <> '' then
    begin
      if Trim(Sexo) = 'MA' then
      begin
        IndSexo := 'M';
      end
      else
      if Trim(Sexo) = 'FE' then
      begin
        IndSexo := 'F';
      end;
    end;
    if IndSexo = '' then
    begin
      raise Exception.Create('Sexo "' + Sexo + '" inválido.');
    end;

    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Obtem a identificacao dupla
      CodIdentificador1 := -1;
      CodIdentificador2 := -1;
      CodIdentificador3 := -1;
      CodIdentificador4 := -1;
      if Trim(TipoIdentificacaoDupla) <> '' then
      begin
        with QueryLocal do
        begin
          SQL.Clear;
          SQL.Add('SELECT cod_identificacao_dupla');
          SQL.Add('  FROM tab_identificacao_dupla');
          SQL.Add(' WHERE cod_identificacao_dupla_sisbov = ' +
            ':cod_identificacao_dupla_sisbov');
          ParamByName('cod_identificacao_dupla_sisbov').AsString :=
            Trim(TipoIdentificacaoDupla);

          Open;
          if IsEmpty then
          begin
            raise Exception.Create('Identificação dupla "' +
              Trim(TipoIdentificacaoDupla) + '" inválida.');
          end;

          CodIdentificacaoDupla :=
            FieldByName('cod_identificacao_dupla').AsInteger;
          Close;
        end;

        // Obtem os identificadores de acordo com a identificação dupla
        case CodIdentificacaoDupla of
          1: begin // BRBO
            CodIdentificador1 := COD_BRINCO;
            CodIdentificador2 := COD_BOTTON;
          end;
          2: begin // BRDE
            CodIdentificador1 := COD_BRINCO;
            CodIdentificador2 := COD_DISP_ELETRONICO;
          end;
          3: begin // BRTA
            CodIdentificador1 := COD_BRINCO;
            CodIdentificador2 := COD_TATUAGEM;
          end;
          4: begin // BRMF
            CodIdentificador1 := COD_BRINCO;
            if Trim(NrAssociacaoRGD) <> '' then
            begin
              CodIdentificador3 := COD_MARCA_FOGO_ASSOCIACAO;
            end
            else
            begin
              CodIdentificador3 := COD_MARCA_FOGO_SISBOV;
            end;
          end;
          5: begin // TAMF
            CodIdentificador1 := COD_TATUAGEM;
            if Trim(NrAssociacaoRGD) <> '' then
            begin
              CodIdentificador3 := COD_MARCA_FOGO_ASSOCIACAO;
            end
            else
            begin
              CodIdentificador3 := COD_MARCA_FOGO_SISBOV;
            end;
          end;
          6: begin // TABO
            CodIdentificador1 := COD_BOTTON;
            CodIdentificador2 := COD_TATUAGEM;
          end;
          7: begin // TATA
            CodIdentificador1 := COD_TATUAGEM;
            CodIdentificador2 := COD_TATUAGEM;
          end;
          8: begin // BOMF
            CodIdentificador1 := COD_BOTTON;
            if Trim(NrAssociacaoRGD) <> '' then
            begin
              CodIdentificador3 := COD_MARCA_FOGO_ASSOCIACAO;
            end
            else
            begin
              CodIdentificador3 := COD_MARCA_FOGO_SISBOV;
            end;
          end;
        end;
      end
      else
      begin
        // Se o animal não estiver associado a nenhuma identificação dupla
        // a identificação BRINCO é definida como padrão
        CodIdentificador1 := COD_BRINCO;
      end;

      // Obtem a raça do animal
      // para isto é necessário obter a data de solicitação do código SISBOV
      with QueryLocal do
      begin
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('SELECT dta_solicitacao_sisbov,');
        SQL.Add('       IsNull(cod_pessoa_produtor, -1) AS cod_pessoa_produtor,');
        SQL.Add('       IsNull(cod_propriedade_rural, -1) AS cod_propriedade_rural');
        SQL.Add('  FROM tab_codigo_sisbov');
        SQL.Add(' WHERE cod_pais_sisbov = :cod_pais_sisbov');
        SQL.Add('   AND cod_estado_sisbov = :cod_estado_sisbov');
        SQL.Add('   AND cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov');
        SQL.Add('   AND cod_animal_sisbov = :cod_animal_sisbov');
        SQL.Add('   AND cod_situacao_codigo_sisbov = :cod_situacao_codigo_sisbov');
{$ENDIF}
        ParamByName('cod_pais_sisbov').AsInteger := CodPaisSISBOV;
        ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSISBOV;
        ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSISBOV;
        ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSISBOV;
        ParamByName('cod_situacao_codigo_sisbov').AsInteger := DISP;
        Open;

        if IsEmpty then
        begin
          raise Exception.Create('Código SISBOV ' + NrSISBOV + ' inválido.');
        end;

        DataReservaCodigoSISBOV :=
          FieldByName('dta_solicitacao_sisbov').AsDateTime;
        CodProdutorResponsavel := FieldByName('cod_pessoa_produtor').AsInteger;
        CodPropriedadeResponsavel :=
          FieldByName('cod_propriedade_rural').AsInteger;
      end;

      // Verifica se a raça é a antiga, se for troca pela raça nova
      CodigoRaca := Trim(CodigoRaca);
      RacaNova := '';
      IndRacaExcluida := False;
      if DataReservaCodigoSISBOV < EncodeDate(2004, 11, 01) then
      begin
        // Verifica se o código da raça animal está na lista
        for I := 0 to Length(COD_RACA_SISBOV_ANTIGO) - 1 do
        begin
          if COD_RACA_SISBOV_ANTIGO[I] = CodigoRaca then
          begin
            // Se estiver troca o código pelo novo
            RacaNova := COD_RACA_SISBOV_NOVO[I];
          end;
        end;
      end;
      if RacaNova <> '' then
      begin
        CodigoRaca := RacaNova;
      end
      else
      begin
        // Verifica se é uma das raças excluídas
        for I := 0 to Length(COD_RACA_ANTIGO_ESCLUIDO) - 1 do
        begin
          if COD_RACA_ANTIGO_ESCLUIDO[I] = CodigoRaca then
          begin
            // Indica que a raça é uma das exclídas
            IndRacaExcluida := True;
          end;
        end;
      end;

      // Obtem a raça do animal
      // para isto é necessário obter a data de solicitação do código SISBOV
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT cod_raca, ind_raca_pura');
        SQL.Add('  FROM tab_raca');
        SQL.Add(' WHERE sgl_raca = :sgl_raca');
        if not IndRacaExcluida then
        begin
          SQL.Add('   AND dta_fim_validade IS NULL');
        end
        else
        begin
          SQL.Add('   AND dta_fim_validade IS NOT NULL');
        end;
        ParamByName('sgl_raca').AsString := CodigoRaca;
        Open;

        if IsEmpty then
        begin
          // Verifica se não é uma das raças antigas excluídas
          SQL.Clear;
          SQL.Add('SELECT cod_raca, ind_raca_pura');
          SQL.Add('  FROM tab_raca');
          SQL.Add(' WHERE sgl_raca = :sgl_raca');
          ParamByName('sgl_raca').AsString := CodigoRaca;
          Open;

          if IsEmpty then
          begin
            raise Exception.Create('Raça "' + CodigoRaca + '" inválida.');
          end;
        end;

        CodRaca := FieldByName('cod_raca').AsInteger;
        IndRacaPura := FieldByName('ind_raca_pura').AsString;
      end;

      // Verifica se a aptidão do animal é a aptidão antiga.
      // Se for troca pela aptidão nova
      if Trim(Aptidao) = 'CORTE' then
      begin
        Aptidao := 'OUTRO';
      end
      else
      if Trim(Aptidao) = 'MISTO' then
      begin
        Aptidao := 'DUAPT';
      end;
      
      // Obtem a aptidão
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT cod_aptidao');
        SQL.Add('  FROM tab_aptidao');
        SQL.Add(' WHERE cod_aptidao_sisbov = :cod_aptidao_sisbov');
        SQL.Add('   AND dta_fim_validade IS NULL');
        SQL.Add('ORDER BY cod_aptidao');
        ParamByName('cod_aptidao_sisbov').AsString := Trim(Aptidao);
        Open;

        if IsEmpty then
        begin
          raise Exception.Create('Aptidão "' + Aptidao + '" inválida.');
        end;

        CodAptidao := FieldByName('cod_aptidao').AsInteger;
      end;

      // Obtem a fazenda, propriedade ou o NIRF/INCRA  de nascimento
      NumImovelNascimento := '';
      CodFazendaNascimento := -1;
      CodPropriedadeNascimento := -1;
      CodLocalizacaoNascimento := -1;
      if Trim(CodigoLocalizacaoNascimento) <> '' then
      begin
        with QueryLocal do
        begin
          SQL.Clear;
          SQL.Add('SELECT cod_fazenda,');
          SQL.Add('       tls.cod_propriedade_rural,');
          SQL.Add('       tls.cod_pessoa_produtor');
          SQL.Add('  FROM tab_localizacao_sisbov tls,');
          SQL.Add('       tab_fazenda tf,');
          SQL.Add('       tab_propriedade_rural tpr');
          SQL.Add(' WHERE cod_localizacao_sisbov = :cod_localizacao_sisbov');
          SQL.Add('   AND tf.cod_pessoa_produtor = tls.cod_pessoa_produtor');
          SQL.Add('   AND tf.cod_propriedade_rural = tls.cod_propriedade_rural');
          SQL.Add('   AND tpr.cod_propriedade_rural = tls.cod_propriedade_rural');
          SQL.Add('   AND tpr.num_imovel_receita_federal = :num_imovel_receita_federal');
          ParamByName('cod_localizacao_sisbov').AsInteger :=
            StrToInt(Trim(CodigoLocalizacaoNascimento));
          ParamByName('num_imovel_receita_federal').AsString :=
            Trim(NumImovelNascimento);

          Open;
          if IsEmpty then
          begin
            raise Exception.Create('Localização SISBOV de nascimento "'
              + CodigoLocalizacaoNascimento + '" inexistente.');
          end;

          CodFazendaNascimento := FieldByName('cod_fazenda').AsInteger;
          CodPropriedadeNascimento := FieldByName('cod_propriedade_rural').AsInteger;
          NumImovelNascimento := Trim(NirfIncraNascimento);
          CodLocalizacaoNascimento := StrToInt(Trim(CodigoLocalizacaoNascimento));

          // Verifica se existe mais de um produtor
          // para a propriedade/cod localização SISBOV
          Next;
          if not EOF then
          begin
            raise Exception.Create('Existe mais de um produtor para a propriedade.');
          end;
        end;
      end
      else
      if Trim(NirfIncraNascimento) <> '' then
      begin
        NumImovelNascimento := Trim(NirfIncraNascimento);
      end;

      // Obtem a fazenda, propriedade ou o NIRF/INCRA  do responsavel
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT tf.cod_fazenda,');
        SQL.Add('       tf.cod_propriedade_rural,');
        SQL.Add('       tf.cod_pessoa_produtor,');
        SQL.Add('       tf.sgl_fazenda,');
        SQL.Add('       tpp.sgl_produtor,');
        SQL.Add('       tp.num_cnpj_cpf,');
        SQL.Add('       tpr.num_imovel_receita_federal,');
        SQL.Add('       tls.cod_localizacao_sisbov');
        SQL.Add('  FROM tab_fazenda tf,');
        SQL.Add('       tab_propriedade_rural tpr,');
        SQL.Add('       tab_produtor tpp,');
        SQL.Add('       tab_pessoa tp,');
        SQL.Add('       tab_localizacao_sisbov tls');
        SQL.Add(' WHERE tf.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND tf.cod_propriedade_rural = :cod_propriedade_rural');
        SQL.Add('   AND tf.cod_propriedade_rural = tpr.cod_propriedade_rural');
        SQL.Add('   AND tf.cod_propriedade_rural = tls.cod_propriedade_rural');
        SQL.Add('   AND tf.cod_pessoa_produtor = tls.cod_pessoa_produtor');
        SQL.Add('   AND tf.cod_pessoa_produtor = tpp.cod_pessoa_produtor');
        SQL.Add('   AND tf.cod_pessoa_produtor = tp.cod_pessoa');
        ParamByName('cod_pessoa_produtor').AsInteger :=
          CodProdutorResponsavel;
        ParamByName('cod_propriedade_rural').AsInteger :=
          CodPropriedadeResponsavel;

        Open;
        if IsEmpty then
        begin
          raise Exception.Create('Erro ao localizar a fazenda.');
        end;

        CodFazendaResponsavel := FieldByName('cod_fazenda').AsInteger;
        NirfIncraResponsavel :=
          FieldByName('num_imovel_receita_federal').AsString;
        CodLocalizacaoIdentificacao :=
          FieldByName('cod_localizacao_sisbov').AsInteger;

        // Verifica a data de nascimento dos animais
        if DaySpan(DateOf(Now), DataNascimento) > QTD_DIAS_MAXIMO_IDADE then
        begin
          Mensagens.Adicionar(2106, Self.ClassName, NomeMetodo,
            [FormatDateTime('dd/mm/yyyy', DataNascimento),
            NrSISBOV, Trim(FieldByName('sgl_produtor').AsString),
            FormataCnpjCpf(FieldByName('num_cnpj_cpf').AsString),
            Trim(FieldByName('sgl_fazenda').AsString),
            Trim(FieldByName('num_imovel_receita_federal').AsString),
            FormatDateTime('dd/mm/yyyy', EncodeDate(2000, 1, 1))]);

          // Define a data padrão de 01/01/2002
          DataNascimento := EncodeDate(2000, 1, 1);
        end;
      end;

      CodLocal := ObtemLocalPrincipal(CodProdutorResponsavel,
        CodFazendaResponsavel);
      if CodLocal < 0 then
      begin
        Exit;
      end;
      if (CodProdutorResponsavel = -1) or (CodFazendaResponsavel = -1) then
      begin
        raise Exception.Create('Erro ao obter o produtor responsavel pelo animal.');
      end;

      Result := Conexao.DefinirProdutorTrabalho(CodProdutorResponsavel,
        NomePessoaProdutor);
      if Result < 0 then
      begin
        Exit;
      end;

      // Obtem o código do animal
      CodAnimal := ProximoCodAnimal;
      if CodAnimal < 0 then
      begin
        Result := CodAnimal;
        Exit;
      end;

      // Pega próximo CodRegistroLog
      CodRegistroLog := ProximoCodRegistroLog;
      if CodRegistroLog < 0 then
      begin
        Result := CodRegistroLog;
        Exit;
      end;

      // Valida para verificar se os valores obtidos do arquivo são validos
      Result := ValidaAtributosCargaInicial(CodAnimalManejo,
        CodFazendaResponsavel, CodIdentificador1, CodIdentificador2,
        CodIdentificador3, CodIdentificador4, CodLocal, CodAptidao, CodRaca,
        CodFazendaResponsavel, DataNascimento, IndSexo);
      if Result < 0 then
      begin
        Exit;
      end;

      // Insere o animal
      with QueryLocal do
      begin
        SQL.Add('INSERT INTO tab_animal (');
        SQL.Add('  cod_pessoa_produtor,');
        SQL.Add('  cod_animal,');
        SQL.Add('  cod_fazenda_manejo,');
        SQL.Add('  cod_animal_manejo,');
        SQL.Add('  cod_animal_certificadora,');
        SQL.Add('  cod_pais_sisbov,');
        SQL.Add('  cod_estado_sisbov,');
        SQL.Add('  cod_micro_regiao_sisbov,');
        SQL.Add('  cod_animal_sisbov,');
        SQL.Add('  num_dv_sisbov,');
        SQL.Add('  cod_situacao_sisbov,');
        SQL.Add('  dta_identificacao_sisbov,');
        SQL.Add('  cod_fazenda_identificacao,');
        SQL.Add('  num_imovel_identificacao,');
        SQL.Add('  cod_localizacao_identificacao,');
        SQL.Add('  cod_propriedade_identificacao,');
        SQL.Add('  dta_nascimento,');
        SQL.Add('  num_imovel_nascimento,');
        SQL.Add('  cod_fazenda_nascimento,');
        SQL.Add('  cod_localizacao_nascimento,');
        SQL.Add('  cod_propriedade_nascimento,');
        SQL.Add('  num_rgd,');
        SQL.Add('  cod_tipo_identificador_1,');
        SQL.Add('  cod_tipo_identificador_2,');
        SQL.Add('  cod_tipo_identificador_3,');
        SQL.Add('  cod_tipo_identificador_4,');
        SQL.Add('  cod_especie,');
        SQL.Add('  cod_aptidao,');
        SQL.Add('  cod_raca,');
        SQL.Add('  cod_pelagem,');
        SQL.Add('  ind_sexo,');
        SQL.Add('  cod_tipo_origem,');
        SQL.Add('  ind_animal_castrado,');
        SQL.Add('  cod_regime_alimentar,');
        SQL.Add('  cod_categoria_animal,');
        SQL.Add('  cod_tipo_lugar,');
        SQL.Add('  cod_local_corrente,');
        SQL.Add('  cod_fazenda_corrente,');
        SQL.Add('  dta_cadastramento,');
        SQL.Add('  dta_efetivacao_cadastro,');
        SQL.Add('  cod_registro_log,');
        SQL.Add('  cod_arquivo_sisbov,');
        SQL.Add('  ind_apto_cobertura,');
        SQL.Add('  ind_cod_sisbov_reservado');
        SQL.Add(' ) VALUES (');
        SQL.Add('  :cod_pessoa_produtor,');
        SQL.Add('  :cod_animal,');
        SQL.Add('  :cod_fazenda_manejo,');
        SQL.Add('  :cod_animal_manejo,');
        SQL.Add('  :cod_animal_certificadora,');
        SQL.Add('  :cod_pais_sisbov,');
        SQL.Add('  :cod_esato_sisbov,');
        SQL.Add('  :cod_micro_regiao_sisbov,');
        SQL.Add('  :cod_animal_sisbov,');
        SQL.Add('  :num_dv_sisbov,');
        SQL.Add('  ''I'',  -- Situação SISBOV');
        SQL.Add('  :dta_identificacao_sisbov,');
        SQL.Add('  :cod_fazenda_identificacao,');
        SQL.Add('  :num_imovel_identificacao,');
        SQL.Add('  :cod_localizacao_identificacao,');
        SQL.Add('  :cod_propriedade_identificacao,');
        SQL.Add('  :dta_nascimento,');
        SQL.Add('  :num_imovel_nascimento,');
        SQL.Add('  :cod_fazenda_nascimento,');
        SQL.Add('  :cod_localizacao_nascimento,');
        SQL.Add('  :cod_propriedade_nascimento,');
        SQL.Add('  :num_rgd,');
        SQL.Add('  :cod_tipo_identificador_1,');
        SQL.Add('  :cod_tipo_identificador_2,');
        SQL.Add('  :cod_tipo_identificador_3,');
        SQL.Add('  :cod_tipo_identificador_4,');
        SQL.Add('  :cod_especie,');
        SQL.Add('  :cod_aptidao,');
        SQL.Add('  :cod_raca,');
        SQL.Add('  :cod_pelagem,');
        SQL.Add('  :ind_sexo,');
        SQL.Add('  6, -- Carga Inicial');
        SQL.Add('  ''N'', -- IndAnimalCastrado');
        SQL.Add('  99, -- Regime Alimentar');
        SQL.Add('  99, -- Categoria Animal');
        SQL.Add('  1, -- Fazenda do produtor');
        SQL.Add('  :cod_local_corrente,');
        SQL.Add('  :cod_fazenda_corrente,');
        SQL.Add('  getDate(), -- Data de efetivação do cadastro');
        SQL.Add('  :dta_efetivacao_cadastro,');
        SQL.Add('  :cod_registro_log,');
        SQL.Add('  :cod_arquivo_sisbov,');
        SQL.Add('  ''N'', -- IndAptoCobertura');
        SQL.Add('  ''N'' -- IndCodigoSISBOVReservado');
        SQL.Add(')');

        ParamByName('cod_pessoa_produtor').AsInteger := CodProdutorResponsavel;
        ParamByName('cod_animal').AsInteger := CodAnimal;
        ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaResponsavel;
        ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
        ParamByName('cod_animal_certificadora').AsString := NrCertificadora;
        ParamByName('cod_pais_sisbov').AsInteger := CodPaisSISBOV;
        ParamByName('cod_esato_sisbov').AsInteger := CodEstadoSISBOV;
        ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSISBOV;
        ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSISBOV;
        ParamByName('num_dv_sisbov').AsInteger := NumDVSISBOV;
        ParamByName('dta_identificacao_sisbov').AsDateTime := DataIdentificacao;
        ParamByName('cod_fazenda_identificacao').AsInteger := CodFazendaResponsavel;
        ParamByName('num_imovel_identificacao').AsString := NirfIncraResponsavel;
        ParamByName('cod_localizacao_identificacao').AsInteger := CodLocalizacaoIdentificacao;
        ParamByName('cod_propriedade_identificacao').AsInteger := CodPropriedadeResponsavel;
        AtribuiParametro(QueryLocal, DataNascimento, 'dta_nascimento', 0);
        AtribuiParametro(QueryLocal, NumImovelNascimento, 'num_imovel_nascimento', '');
        AtribuiParametro(QueryLocal, CodLocalizacaoNascimento, 'cod_localizacao_nascimento', -1);
        AtribuiParametro(QueryLocal, CodFazendaNascimento, 'cod_fazenda_nascimento', -1);
        AtribuiParametro(QueryLocal, CodPropriedadeNascimento, 'cod_propriedade_nascimento', -1);
        AtribuiParametro(QueryLocal, Trim(NrAssociacaoRGD), 'num_rgd', '');
        AtribuiParametro(QueryLocal, CodIdentificador1, 'cod_tipo_identificador_1', -1);
        AtribuiParametro(QueryLocal, CodIdentificador2, 'cod_tipo_identificador_2', -1);
        AtribuiParametro(QueryLocal, CodIdentificador3, 'cod_tipo_identificador_3', -1);
        AtribuiParametro(QueryLocal, CodIdentificador4, 'cod_tipo_identificador_4', -1);
        ParamByName('cod_especie').AsInteger := CodEspecie;
        ParamByName('cod_aptidao').AsInteger := CodAptidao;
        ParamByName('cod_raca').AsInteger := CodRaca;
        ParamByName('cod_pelagem').AsInteger := ObtemPelagemPadrao;
        ParamByName('ind_sexo').AsString := IndSexo;
        ParamByName('cod_local_corrente').AsInteger := CodLocal;
        ParamByName('cod_fazenda_corrente').AsInteger := CodFazendaResponsavel;
        ParamByName('dta_efetivacao_cadastro').AsDateTime := DataInsercaoSISBOV;
        ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
        ParamByName('cod_arquivo_sisbov').AsInteger := CodArquivoSISBOV;

        ExecSQL;
      end;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacaoAnimal('tab_animal', '', 1, CodRegistroLog, 1,
        618);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Atualiza a situação do código sisbov para "EFET"
      Result := FCodigosSisbov.AlterarSituacaoSisbov(CodPaisSisbov, CodEstadoSisbov,
        CodMicroRegiaoSisbov, CodAnimalSisbov, EFET);
      if Result < 0 then
      begin
        Exit;
      end;

      // Grava a composição racial do animal
      if IndRacaPura = 'S' then
      begin
        with QueryLocal do
        begin
          CodRegistroLog := ProximoCodRegistroLog;
          if CodRegistroLog < 0 then
          begin
            Result := CodRegistroLog;
            Exit;
          end;

          SQL.Clear;
          SQL.Add('insert into tab_composicao_racial (');
          SQL.Add('  cod_pessoa_produtor,');
          SQL.Add('  cod_animal,');
          SQL.Add('  cod_raca,');
          SQL.Add('  qtd_composicao_racial,');
          SQL.Add('  cod_registro_log');
          SQL.Add(') values (');
          SQL.Add('  :cod_pessoa_produtor,');
          SQL.Add('  :cod_animal,');
          SQL.Add('  :cod_raca,');
          SQL.Add('  1,');
          SQL.Add('  :cod_registro_log');
          SQL.Add(')');

          ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          ParamByName('cod_animal').AsInteger := CodAnimal;
          ParamByName('cod_raca').AsInteger := CodRaca;
          ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
          ExecSQL;

          // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
          // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
          Result := GravarLogOperacao('tab_composicao_racial', CodRegistroLog,
            1, 618);
          if Result < 0 then
          begin
            Exit;
          end;
        end;
      end;

      CodPessoaProdutor := CodPessoaProdutor;
      CodFazenda := CodFazendaResponsavel;
      CodAptidao := CodAptidao;
    finally
      QueryLocal.Free;
    end;

    Result := CodAnimal;
  except
    on E: EHerdomException do
    begin
      E.gerarMensagem(Mensagens);
      Result := -E.CodigoErro;
    end;
    on E: Exception do
    begin
      Mensagens.Adicionar(2085, self.ClassName, NomeMetodo, [E.Message]);
      Result := -2085;
    end;
  end;
end;

function TIntAnimais.InserirNascido(CodFazendaManejo: Integer; CodAnimalManejo,
  CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
  CodSituacaoSisbov: String;
  DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String;
  CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
  DtaNascimento: TDateTime; CodFazendaNascimento: Integer;
  NomAnimal, DesApelido: String; CodAssociacaoRaca,
  CodGrauSangue: Integer; NumRGD, NumTransponder: String;
  CodTipoIdentificador1, CodPosicaoIdentificador1,
  CodTipoIdentificador2, CodPosicaoIdentificador2,
  CodTipoIdentificador3, CodPosicaoIdentificador3,
  CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
  CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
  CodFazendaManejoPai: Integer; CodAnimalPai: String;
  CodFazendaManejoMae: Integer; CodAnimalMae: String;
  CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
  IndAnimalCastrado: String; CodRegimeAlimentar,
  CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
  NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
  TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
var
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  NumImovelCorrente := '';
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then begin
    RaiseNaoInicializado('InserirNascido');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(163) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'InserirNascido', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, 'InserirNascido', []);
    Result := -307;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  Result := VerificaCodAnimalManejo(CodAnimalManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(-1, CodAnimalManejo, CodFazendaManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    if CodAnimalCertificadora <> '' then begin
      Mensagens.Adicionar(715, Self.ClassName, 'InserirNascido', []);
      Result := -715;
      Exit;
    end;
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(1, CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(-1, CodAnimalCertificadora);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
    CodAnimalSisbov, NumDVSisbov, 'I', 1, CodSituacaoSisbov, 1);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento, DtaIdentificacaoSisbov, CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Trata fazenda de nascimento (R23)
  if CodFazendaNascimento > 0 then
  begin
    Result := VerificaFazenda(CodFazendaNascimento, False, 'Fazenda de nascimento do animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata nome do animal (R06)
  if NomAnimal <> '' then begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaNomAnimal(-1, NomAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaDesApelido(-1, DesApelido);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica associação de raça, grau de sangue e RGD do animal (R24, R25, R29, R31)
  Result := VerificaAssociacaoGrauSangue(CodAssociacaoRaca, CodGrauSangue, NumRGD);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores(NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, IndAnimalCastrado, CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  // Não deixa inserir animais com categoria "Vaca Parida" ou "Vaca em Lactação"
  if (CodCategoriaAnimal = 6) or (CodCategoriaAnimal = 8) then begin
    Mensagens.Adicionar(927, Self.ClassName, 'InserirNascido', []);
    Result := -927;
    Exit;
  end;

  // Verifica animal pai (R18, R19)
  if CodAnimalPai <> '' then begin
    Result := VerificaAnimalPai(CodEspecie, CodAptidao, CodRaca, CodFazendaManejoPai, CodAnimalPai);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica animal mae (R18, R20)
  if CodAnimalMae <> '' then begin
    Result := VerificaAnimalMae(CodEspecie, CodAptidao, CodFazendaManejoMae, CodAnimalMae);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica animal receptor (R18, R21)
  if CodAnimalReceptor <> '' then begin
    Result := VerificaAnimalReceptor(CodEspecie, CodFazendaManejoReceptor, CodAnimalReceptor);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  MontaQueryInsert;

  Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo, CodAnimalCertificadora, CodPaisSisbov,
    CodEstadoSisbov, CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, CodSituacaoSisbov,
    DtaIdentificacaoSisbov, NumImovelIdentificacao, -1, CodPropriedadeIdentificacao, CodFazendaIdentificacao,
    DtaNascimento, '', -1, -1, CodFazendaNascimento, 0, -1, NomAnimal, DesApelido, CodAssociacaoRaca,
    CodGrauSangue, NumRGD, NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca, CodPelagem,
    IndSexo, 1, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor, IndAnimalCastrado, CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1,
    -1, '', 0, 0, '', '', TxtObservacao, 'InserirNascido', '', 0, -1, FUsarSisbov, 163, False, -1, -1, -1 ,IndCodSisBovReservado, '', -1, -1,
    CodPessoaTecnico, numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

  if Result = 0 then ZerarValoresUltimaPesquisa;

end;

function TIntAnimais.InserirComprado(CodFazendaManejo: Integer;
                                     CodAnimalManejo,
                                     CodAnimalCertificadora: String;
                                     CodPaisSisBov,
                                     CodEstadoSisBov,
                                     CodMicroRegiaoSisBov,
                                     CodAnimalSisbov,
                                     NumDVSisbov: Integer;
                                     CodSituacaoSisbov: String;
                                     DtaIdentificacaoSisbov: TDateTime;
                                     NumImovelIdentificacao: String;
                                     CodPropriedadeIdentificacao,
                                     CodFazendaIdentificacao: Integer;
                                     DtaNascimento: TDateTime;
                                     NumImovelNascimento: String;
                                     CodPropriedadeNascimento: Integer;
                                     DtaCompra: TDateTime;
                                     CodPessoaSecundariaCriador: Integer;
                                     NomAnimal,
                                     DesApelido: String;
                                     CodAssociacaoRaca,
                                     CodGrauSangue: Integer;
                                     NumRGD,
                                     NumTransponder: String;
                                     CodTipoIdentificador1,
                                     CodPosicaoIdentificador1,
                                     CodTipoIdentificador2,
                                     CodPosicaoIdentificador2,
                                     CodTipoIdentificador3,
                                     CodPosicaoIdentificador3,
                                     CodTipoIdentificador4,
                                     CodPosicaoIdentificador4,
                                     CodEspecie,
                                     CodAptidao,
                                     CodRaca,
                                     CodPelagem: Integer;
                                     IndSexo: String;
                                     CodFazendaManejoPai: Integer;
                                     CodAnimalPai: String;
                                     CodFazendaManejoMae: Integer;
                                     CodAnimalMae: String;
                                     CodFazendaManejoReceptor: Integer;
                                     CodAnimalReceptor,
                                     IndAnimalCastrado: String;
                                     CodRegimeAlimentar,
                                     CodCategoriaAnimal,
                                     CodTipoLugar,
                                     CodLoteCorrente,
                                     CodLocalCorrente,
                                     CodFazendaCorrente: Integer;
                                     CodPropriedadeCorrente: Integer;
                                     NumCNPJCPFCorrente: String;
                                     CodPessoaCorrente: Integer;
                                     TxtObservacao,
                                     NumGta: String;
                                     DtaEmissaoGta: TDateTime;
                                     NumNotaFiscal: Integer;
                                     IndCodSisBovReservado:String;
                                     CodPessoaTecnico: Integer;
                                     NumCNPJCPFTecnico: String;
                                     CodAnimalOrigemVenda: Integer;
                                     IndChamadaInterna: String = 'N'): Integer;
const
  NomMetodo: String = 'InserirComprado';
var
  Q, Q1 : THerdomQuery;
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  X, CodAnimal, CodRegistroLog : Integer;
  GDtaIdentificacaoSisbov, GDtaNascimento: TDatetime;
  GNumImovelIdentificacao, GNumImovelNascimento, GIndSexo, GIndAnimalCastrado,
  GCodAnimalCertificadora, GCodAutenticacaoSisbov: String;
  GCodPropriedadeIdentificacao, GCodFazendaIdentificacao, GCodPropriedadeNascimento,
  GCodEspecie, GCodAptidao, GCodRaca, GCodPelagem, GCodArquivoSisbov,
  GCodArquivoImportacao, CodLocalizacaoNascimento,
  CodLocalizacaoIdentificacao: Integer;
  NumImovelCorrente: String;
  CodProdutorEventoVenda,
  CodEventoVenda,
  CodAnimalComprado,
  CodAnimalVendido: Integer;
  CodSituacaoAnimalVendido: String;
  FIntCodigosSisbov: TIntCodigosSisbov;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  if not Inicializado then
  begin
    RaiseNaoInicializado('InserirComprado');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(165) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, 'InserirComprado', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, 'InserirComprado', []);
    Result := -307;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  if (Length(Trim(NumImovelIdentificacao)) = 0) and (CodPropriedadeIdentificacao <= 0) and (CodFazendaIdentificacao <= 0) then begin
    Mensagens.Adicionar(2382, Self.ClassName, 'InserirComprado', []);
    Result := -2382;
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
  // So é feita para as chamadas externas
  if IndChamadaInterna <> 'S' then
  begin
    CodAnimalManejo := UpperCase(CodAnimalManejo);
    Result := VerificaCodAnimalManejo(CodAnimalManejo);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(-1, CodAnimalManejo, CodFazendaManejo);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica CodSituacaoSisbov (R41) **--> PRIMEIRO PARÂMETRO = TIPO ORIGEM
  Result := VerificaCodSituacaoSisbov(2, CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
    CodAnimalSisbov, NumDVSisbov, 'I', 2, CodSituacaoSisbov, 1);
  // Ignora o erro 616
  if Result = -616 then
  begin
    Mensagens.Delete(Mensagens.Count - 1);
    Result := 0;
  end;
  if Result < 0 then
  begin
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  Q1 := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Se SituaçãoSisbov = 'I', obtem dados do animal já gravado (R45)
      if CodSituacaoSisbov = 'I' then
      begin
        Q.SQL.Clear;
  {$IFDEF MSSQL}
        Q.SQL.Add('select ta.dta_identificacao_sisbov, ');
        Q.SQL.Add('       ta.cod_animal_certificadora, ');
        Q.SQL.Add('       ta.num_imovel_identificacao, ');
        Q.SQL.Add('       ta.cod_localizacao_identificacao, ');
        Q.SQL.Add('       ta.cod_propriedade_identificacao, ');
        Q.SQL.Add('       ta.cod_fazenda_identificacao, ');
        Q.SQL.Add('       ta.dta_nascimento, ');
        Q.SQL.Add('       ta.num_imovel_nascimento, ');
        Q.SQL.Add('       ta.cod_localizacao_nascimento, ');
        Q.SQL.Add('       ta.cod_propriedade_nascimento, ');
        Q.SQL.Add('       ta.cod_especie, ');
        Q.SQL.Add('       ta.cod_aptidao, ');
        Q.SQL.Add('       ta.cod_raca, ');
        Q.SQL.Add('       ta.cod_pelagem, ');
        Q.SQL.Add('       ta.ind_sexo, ');
        Q.SQL.Add('       ta.ind_animal_castrado, ');
        Q.SQL.Add('       ta.cod_arquivo_sisbov, ');
        Q.SQL.Add('       ta.cod_autenticacao_sisbov, ');
        Q.SQL.Add('       ta.cod_arq_import_sisbov, ');
        Q.SQL.Add('       tce.cod_arquivo_sisbov as cod_arquivo_sisbov_desmarcado ');
        Q.SQL.Add('  from tab_animal ta ');
        Q.SQL.Add('         left join tab_codigo_exportacao tce on ta.cod_pessoa_produtor = tce.cod_pessoa_produtor and ta.cod_animal = tce.cod_animal ');
        Q.SQL.Add(' where ta.cod_pais_sisbov = :cod_pais_sisbov ');
        Q.SQL.Add('   and ta.cod_estado_sisbov = :cod_estado_sisbov ');
        Q.SQL.Add('   and ta.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
        Q.SQL.Add('   and ta.cod_animal_sisbov = :cod_animal_sisbov ');
        Q.SQL.Add('   and ta.num_dv_sisbov = :num_dv_sisbov ');
        Q.SQL.Add('   and ta.cod_categoria_animal = 12 ');
        Q.SQL.Add(' order by ta.dta_ultimo_evento desc ');
  {$ENDIF}
        Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;

        Q.Open;
        if Q.IsEmpty then begin
          // Se algum dos dados abaixo não foi digitado ...
          if (DtaIdentificacaoSisbov <= 0)
          or (DtaNascimento <= 0)
          or (CodEspecie <= 0)
          or (CodAptidao <= 0)
          or (CodRaca <= 0)
          or (CodPelagem <= 0)
          or (IndSexo = '')
          or (IndAnimalCastrado = '') then begin
            { Exibe uma mensagem de erro e aborta a inserção do animal. }
            Mensagens.Adicionar(1651, Self.ClassName, 'InserirComprado', []);
            Result := -1651;
            Exit;
          end;

          GDtaIdentificacaoSisbov := DtaIdentificacaoSisbov;
          GCodAnimalCertificadora := CodAnimalCertificadora;
          GNumImovelIdentificacao := NumImovelIdentificacao;
          GDtaNascimento := DtaNascimento;
          GNumImovelNascimento := NumImovelNascimento;
          GCodEspecie := CodEspecie;
          GCodAptidao := CodAptidao;
          GCodRaca := CodRaca;
          GCodPelagem := CodPelagem;
          GIndSexo := IndSexo;
          GIndAnimalCastrado := IndAnimalCastrado;
          GCodPropriedadeIdentificacao := 0;
          GCodFazendaIdentificacao := 0;
          GCodPropriedadeNascimento := 0;
          GCodArquivoSisbov := 999999999;
          GCodArquivoImportacao := 0;
          GCodAutenticacaoSisbov := '';
          CodLocalizacaoNascimento := -1;
          CodLocalizacaoIdentificacao := -1;
        end else begin { Se o animal existir na base ... }
          // Verifica se foi passado algum dado desnecessáro caso a situação sisbov seja "I" (R45)
          // e o animal está na base
          if (DtaIdentificacaoSisbov > 0)
          or (CodAnimalCertificadora <> '')
          or (NumImovelIdentificacao <> '')
          or (CodPropriedadeIdentificacao > 0)
          or (CodFazendaIdentificacao > 0)
          or (DtaNascimento > 0)
          or (NumImovelNascimento <> '')
          or (CodPropriedadeNascimento > 0)
          or (CodEspecie > 0)
          or (CodAptidao > 0)
          or (CodRaca > 0)
          or (CodPelagem > 0)
          or (IndSexo <> '')
          or (IndAnimalCastrado <> '') then begin
            Mensagens.Adicionar(673, Self.ClassName, 'InserirComprado', []);

            { Nesta situação é exibida uma mensagem mas o animal é inserido na base
            Result := -673;
            Exit;
            }
          end;

          { As informações referentes a CodPropriedadeIdentificacao,
            CodFazendaIdentificacao e CodPropriedadeNascimento não devem ser
            recuperadas, pois correspondem exclusivamente ao produtor que
            vendeu o animal }
          GDtaIdentificacaoSisbov := Q.FieldByName('dta_identificacao_sisbov').AsDateTime;
          GCodAnimalCertificadora := Q.FieldByName('cod_animal_certificadora').AsString;
          GNumImovelIdentificacao := Q.FieldByName('num_imovel_identificacao').AsString;
          GCodPropriedadeIdentificacao := -1; // Q.FieldByName('cod_propriedade_identificacao').AsInteger;
          GCodFazendaIdentificacao := -1; // Q.FieldByName('cod_fazenda_identificacao').AsInteger;
          GDtaNascimento := Q.FieldByName('dta_nascimento').AsDateTime;
          GNumImovelNascimento := Q.FieldByName('num_imovel_nascimento').AsString;
          GCodPropriedadeNascimento := -1; // Q.FieldByName('cod_propriedade_nascimento').AsInteger;
          GCodEspecie := Q.FieldByName('cod_especie').AsInteger;
          GCodAptidao := Q.FieldByName('cod_aptidao').AsInteger;
          GCodRaca := Q.FieldByName('cod_raca').AsInteger;
          GCodPelagem := Q.FieldByName('cod_pelagem').AsInteger;
          GIndSexo := Q.FieldByName('ind_sexo').AsString;
          GIndAnimalCastrado := Q.FieldByName('ind_animal_castrado').AsString;
          if Q.FieldByName('cod_arquivo_sisbov_desmarcado').AsInteger > 0 then
          begin
            GCodArquivoSisbov := Q.FieldByName('cod_arquivo_sisbov_desmarcado').AsInteger;
          end
          else
          begin
            GCodArquivoSisbov := Q.FieldByName('cod_arquivo_sisbov').AsInteger;
          end;
          GCodArquivoImportacao := Q.FieldByName('cod_arq_import_sisbov').AsInteger;
          GCodAutenticacaoSisbov := Q.FieldByName('cod_autenticacao_sisbov').AsString;
          CodLocalizacaoNascimento := Q.FieldByName('cod_localizacao_nascimento').AsInteger;
          CodLocalizacaoIdentificacao := Q.FieldByName('cod_localizacao_identificacao').AsInteger;
        end;
      end
      else
      begin
        GDtaIdentificacaoSisbov := DtaIdentificacaoSisbov;
        GCodAnimalCertificadora := CodAnimalCertificadora;
        GNumImovelIdentificacao := NumImovelIdentificacao;
        GCodPropriedadeIdentificacao := CodPropriedadeIdentificacao;
        GCodFazendaIdentificacao := CodFazendaIdentificacao;
        GDtaNascimento := DtaNascimento;
        GNumImovelNascimento := NumImovelNascimento;
        GCodPropriedadeNascimento := CodPropriedadeNascimento;
        GCodEspecie := CodEspecie;
        GCodAptidao := CodAptidao;
        GCodRaca := CodRaca;
        GCodPelagem := CodPelagem;
        GIndSexo := IndSexo;
        GIndAnimalCastrado := IndAnimalCastrado;
        GCodArquivoSisbov := -1;
        GCodArquivoImportacao := -1;
        GCodAutenticacaoSisbov := '';
        CodLocalizacaoNascimento := -1;
        CodLocalizacaoIdentificacao := -1;
      end;

      if DtaIdentificacaoSisbov > 0 then
      begin
        // Verifica data de identificacao no sisbov
        Result := VerificaDtaIdentificacaoSisbov(DtaNascimento, DtaIdentificacaoSisbov, CodSituacaoSisbov);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Se situação sisbov = "I", só consiste dados que não foram importados
      // do animal vendido
      if CodSituacaoSisbov <> 'I' then
      begin
        // Trata código da certificadora
        if ValorParametro(8) = 'S' then
        begin
          if CodAnimalCertificadora <> '' then
          begin
            Mensagens.Adicionar(715, Self.ClassName, 'InserirComprado', []);
            Result := -715;
            Exit;
          end;
          Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
          if Result < 0 then begin
            Exit;
          end;
          GCodAnimalCertificadora := CodAnimalCertificadora;
        end;

        // Verifica código animal certificadora (R25, R38)
        if CodAnimalCertificadora <> '' then
        begin
          CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
          Result := VerificaCodAnimalCertificadora(-1, CodAnimalCertificadora);
          if Result < 0 then
          begin
            Exit;
          end;
        end;

        // Verifica data de nascimento (R35)
        Result := VerificaDtaNascimento(DtaNascimento);
        if Result < 0 then
        begin
          Exit;
        end;

        
        if DtaCompra > 0 then
        begin
          // Verifica data da compra
          Result := VerificaDtaCompra(DtaCompra);
          if Result < 0 then
          begin
            Exit;
          end;
        end;

        // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
        Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
          CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
          CodFazendaIdentificacao, CodSituacaoSisbov);
        if Result < 0 then
        begin
          Exit;
        end;

        // Verifica Especie, Raca e Aptidao (R22, R29, R50)
        Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
        if Result < 0 then
        begin
          Exit;
        end;

        // Verifica Pelagem (R29)
        { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                         selecionar a padrão}
        if CodPelagem = -1 then
        begin
          CodPelagem := ObtemPelagemPadrao;
          if CodPelagem < 0 then
          begin
            Result := CodPelagem;
            Exit;
          end;
        end;
        { Fim Alteração Fábio - 22/12/2004 }
        Result := VerificaPelagem(CodPelagem);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Verifica data da compra (R42)
      if DtaCompra > 0 then
      begin
        if DtaCompra < GDtaNascimento then
        begin
          Mensagens.Adicionar(675, Self.ClassName, 'InserirComprado', []);
          Result := -675;
          Exit;
        end;
      end;

      // Verifica Criador (R28)
      Result := VerificaPessoaSecundaria(CodPessoaSecundariaCriador, 1, False, 'Criador');
      if Result < 0 then
      begin
        Exit;
      end;

      // Verifica local de Nascimento (R14, R26)
      Result := VerificaLocalNascimento(NumImovelNascimento, CodPropriedadeNascimento);
      if Result < 0 then
      begin
        Exit;
      end;

      // Trata nome do animal (R06)
      if NomAnimal <> '' then
      begin
        Result := TrataString(NomAnimal, 60, 'Nome do animal');
        if Result < 0 then
        begin
          Exit;
        end;
        Result := VerificaNomAnimal(-1, NomAnimal);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Trata apelido do animal (R06)
      if DesApelido <> '' then
      begin
        Result := TrataString(DesApelido, 20, 'Apelido do animal');
        if Result < 0 then
        begin
          Exit;
        end;
        Result := VerificaDesApelido(-1, DesApelido);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Verifica associação de raça, grau de sangue e RGD do animal (R24, R25, R29, R31)
      Result := VerificaAssociacaoGrauSangue(CodAssociacaoRaca, CodGrauSangue, NumRGD);
      if Result < 0 then
      begin
        Exit;
      end;

      // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
      Result := VerificaIdentificadores(NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
        CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
        CodTipoIdentificador4, CodPosicaoIdentificador4);
      if Result < 0 then
      begin
        Exit;
      end;

      // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
      { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                       selecionar a padrão}
      if CodCategoriaAnimal = -1 then
      begin
        CodCategoriaAnimal := 99;
      end;
      { Fim Alteração Fábio - 22/12/2004 }
      Result := VerificaCategoria(CodCategoriaAnimal, GIndSexo, GIndAnimalCastrado, GCodAptidao, GDtaNascimento);
      if Result < 0 then
      begin
        Exit;
      end;

      // Não deixa inserir animais com categoria "Vaca Parida" ou "Vaca em Lactação"
      if (CodCategoriaAnimal = 6) or (CodCategoriaAnimal = 8) then begin
        Mensagens.Adicionar(927, Self.ClassName, 'InserirComprado', []);
        Result := -927;
        Exit;
      end;

      // Verifica animal pai (R18, R19)
      if CodAnimalPai <> '' then
      begin
        Result := VerificaAnimalPai(GCodEspecie, GCodAptidao, GCodRaca, CodFazendaManejoPai, CodAnimalPai);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Verifica animal mae (R18, R20)
      if CodAnimalMae <> '' then
      begin
        Result := VerificaAnimalMae(GCodEspecie, GCodAptidao, CodFazendaManejoMae, CodAnimalMae);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Verifica animal receptor (R18, R21)
      if CodAnimalReceptor <> '' then
      begin
        Result := VerificaAnimalReceptor(GCodEspecie, CodFazendaManejoReceptor, CodAnimalReceptor);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
      { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                              informado então selecionar o principal}
      if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
      begin
        CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
          CodFazendaCorrente);
        if CodLocalCorrente < 0 then
        begin
          Result := CodLocalCorrente;
          Exit;
        end;
      end;
      { Fim Alteração Fábio - 22/12/2004 }
      Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
        NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
      if Result < 0 then begin
        Exit;
      end;

      // Verifica regime alimentar do animal (R10, R11, R29, R33)
      { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                              informado então selecionar o padrão}
      if CodRegimeAlimentar = -1 then
      begin
        CodRegimeAlimentar := 99;
      end;
      { Fim Alteração Fábio - 22/12/2004 }
      Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
        CodLocalCorrente, CodCategoriaAnimal, GCodAptidao);
      if Result < 0 then begin
        Exit;
      end;            

      // Verifica observação
      if TxtObservacao <> '' then begin
        Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
        if Result < 0 then begin
          Exit;
        end;
      end;

      // Verifica número do GTA
      if NumGTA <> '' then begin
        Result := TrataString(NumGTA, 13, 'Número do GTA');
        if Result < 0 then begin
          Exit;
        end;
      end;
//      if NumGTA <> '' then begin
//        if DtaEmissaoGTA <= 0 then begin
//          Mensagens.Adicionar(1096, Self.ClassName, 'InserirComprado', []);
//          Result := -1096;
//          Exit;
//        end;
//      end;

      // Verifica data do Gta
      if DtaEmissaoGta > 0 then begin
        if DtaEmissaoGta < GDtaNascimento then begin
          Mensagens.Adicionar(1094, Self.ClassName, 'InserirComprado', []);
          Result := -1094;
          Exit;
        end;
        if DtaEmissaoGta > DtaSistema then begin
          Mensagens.Adicionar(1283, Self.ClassName, 'InserirComprado', []);
          Result := -1283;
          Exit;
        end;
//        if NumGTA = '' then begin
//          Mensagens.Adicionar(1095, Self.ClassName, 'InserirComprado', []);
//          Result := -1095;
//          Exit;
//        end;
      end;

      MontaQueryInsert;

      BeginTran;

      Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo,
        GCodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
        CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, CodSituacaoSisbov,
        GDtaIdentificacaoSisbov, GNumImovelIdentificacao,
        CodLocalizacaoIdentificacao, GCodPropriedadeIdentificacao,
        GCodFazendaIdentificacao, GDtaNascimento, GNumImovelNascimento,
        CodLocalizacaoNascimento, GCodPropriedadeNascimento, -1, DtaCompra,
        CodPessoaSecundariaCriador, NomAnimal, DesApelido, CodAssociacaoRaca,
        CodGrauSangue, NumRGD, NumTransponder, CodTipoIdentificador1,
        CodPosicaoIdentificador1, CodTipoIdentificador2,
        CodPosicaoIdentificador2, CodTipoIdentificador3,
        CodPosicaoIdentificador3, CodTipoIdentificador4,
        CodPosicaoIdentificador4, GCodEspecie, GCodAptidao, GCodRaca,
        GCodPelagem, GIndSexo, 2, FCodReprodutorMultiplo, FCodAnimalPai,
        FCodAnimalMae, FCodAnimalReceptor, GIndAnimalCastrado,
        CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
        CodLocalCorrente, CodFazendaCorrente,  NumImovelCorrente,
        CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1, -1,
        '', 0, 0, '', '', TxtObservacao, 'InserirComprado', NumGta,
        DtaEmissaoGta, NumNotaFiscal, FUsarSisbov, 165, False, -1, -1, -1,
        IndCodSisBovReservado, GCodAutenticacaoSisbov, GCodArquivoSisbov,
        GCodArquivoImportacao, CodPessoaTecnico, numCNPJCPFTecnico,
        MsgTecnicoOS, MsgIdentificadorOS);

      if Result = 0 then
      begin
        ZerarValoresUltimaPesquisa;
      end;

      CodAnimalComprado := Result;
      // Caso o animal tenha sido inserido com sucesso
      if (Result > 0) then
      begin
        if (CodSituacaoSisbov = 'I') and
           (CodAnimalOrigemVenda > 0) then
        begin
          with Q do
          begin
            SQL.Clear;
            SQL.Add(' select top 1 tae.cod_pessoa_produtor as CodProdutorEventoVenda ');
            SQL.Add('      , tae.cod_evento                as CodEventoVenda ');
            SQL.Add('      , tae.cod_animal                as CodAnimalVendido ');
            SQL.Add('      , ta.cod_situacao_sisbov        as CodSituacaoAnimalVendido ');
            SQL.Add('   from tab_animal ta ');
            SQL.Add('      , tab_animal_evento tae ');
            SQL.Add('      , tab_evento te ');
            SQL.Add('  where ta.dta_fim_validade     is null ');
            SQL.Add('    and (ta.cod_pessoa_produtor  = tae.cod_pessoa_produtor or ');
            SQL.Add('         ta.cod_pessoa_corrente  = tae.cod_pessoa_produtor) ');
            SQL.Add('    and ta.cod_animal           = tae.cod_animal ');
            SQL.Add('    and te.cod_pessoa_produtor  = tae.cod_pessoa_produtor ');
            SQL.Add('    and te.cod_evento           = tae.cod_evento ');
            SQL.Add('    and te.cod_tipo_evento      = 9 ');
            SQL.Add('    and ta.cod_categoria_animal = 12 ');
            if (CodAnimalOrigemVenda > 0) then
            begin
              SQL.Add('  and ta.cod_animal           = :cod_animal ');
              ParamByName('cod_animal').AsInteger    := CodAnimalOrigemVenda;
            end
            else
            begin
              SQL.Add('  and ta.cod_pais_sisbov         = :cod_pais_sisbov ');
              SQL.Add('  and ta.cod_estado_sisbov       = :cod_estado_sisbov ');
              SQL.Add('  and ta.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
              SQL.Add('  and ta.cod_animal_sisbov       = :cod_animal_sisbov ');
              SQL.Add('  and ta.num_dv_sisbov           = :num_dv_sisbov ');
              ParamByName('cod_pais_sisbov').AsInteger         := CodPaisSisBov;
              ParamByName('cod_estado_sisbov').AsInteger       := CodEstadoSisBov;
              ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisBov;
              ParamByName('cod_animal_sisbov').AsInteger       := CodAnimalSisbov;
              ParamByName('num_dv_sisbov').AsInteger           := NumDVSisbov;
            end;
            SQL.Add('  order by te.dta_inicio desc ');
            Open;

            if IsEmpty then
            begin
              Mensagens.Clear;
              Mensagens.Adicionar(2254, Self.ClassName, NomMetodo, []);
              Result := -2254;
              Exit;
            end;

            CodProdutorEventoVenda   := FieldByName('CodProdutorEventoVenda').AsInteger;
            CodEventoVenda           := FieldByName('CodEventoVenda').AsInteger;
            CodAnimalVendido         := FieldByName('CodAnimalVendido').AsInteger;
            CodSituacaoAnimalVendido := FieldByName('CodSituacaoAnimalVendido').AsString;

            SQL.Clear;
            SQL.Add(' insert into tab_animal_vendido ');
            SQL.Add('           ( cod_pessoa_produtor ');
            SQL.Add('           , cod_animal ');
            SQL.Add('           , cod_produtor_evento_venda ');
            SQL.Add('           , cod_evento_venda ');
            SQL.Add('           , cod_animal_vendido ');
            SQL.Add('           , cod_situacao_animal_vendido ) ');
            SQL.Add('    values ( :cod_pessoa_produtor ');
            SQL.Add('           , :cod_animal ');
            SQL.Add('           , :cod_produtor_evento_venda ');
            SQL.Add('           , :cod_evento_venda ');
            SQL.Add('           , :cod_animal_vendido ');
            SQL.Add('           , :cod_situacao_animal_vendido ) ');
            ParamByName('cod_pessoa_produtor').AsInteger        := Conexao.CodProdutorTrabalho;
            ParamByName('cod_animal').AsInteger                 := CodAnimalComprado;
            ParamByName('cod_produtor_evento_venda').AsInteger  := CodProdutorEventoVenda;
            ParamByName('cod_evento_venda').AsInteger           := CodEventoVenda;
            ParamByName('cod_animal_vendido').AsInteger         := CodAnimalVendido;
            ParamByName('cod_situacao_animal_vendido').AsString := CodSituacaoAnimalVendido;
            ExecSQL;
          end;
        end;
      end
      else if (Result < 0) then
      begin
        RollBack;
        Exit;
      end;
      Commit;
      Result := CodAnimalComprado;
    finally
      Q.Free;
      Q1.Free;
    end;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(672, Self.ClassName, 'InserirComprado', [E.Message]);
      Result := -672;
      Exit;
    end;
  end;
end;

function TIntAnimais.InserirImportado(CodFazendaManejo: Integer; CodAnimalManejo,
  CodAnimalCertificadora, CodSituacaoSisbov: String; DtaNascimento,
  DtaCompra: TDateTime; CodPessoaSecundariaCriador: Integer;
  NomAnimal, DesApelido: String; CodAssociacaoRaca,
  CodGrauSangue: Integer; NumRGD, NumTransponder: String;
  CodTipoIdentificador1, CodPosicaoIdentificador1,
  CodTipoIdentificador2, CodPosicaoIdentificador2,
  CodTipoIdentificador3, CodPosicaoIdentificador3,
  CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
  CodAptidao, CodRaca, CodPelagem: Integer; IndSexo: String;
  CodFazendaManejoPai: Integer; CodAnimalPai: String;
  CodFazendaManejoMae: Integer; CodAnimalMae: String;
  CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
  IndAnimalCastrado: String; CodRegimeAlimentar,
  CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
  NumCNPJCPFCorrente: String; CodPessoaCorrente,
  CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
  DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime;
  NumGuiaImportacao, NumLicencaImportacao,
  TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
var
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  NumImovelCorrente: String;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  if not Inicializado then begin
    RaiseNaoInicializado('InserirImportado');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(231) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'InserirImportado', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, 'InserirImportado', []);
    Result := -307;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Criador (R28)
  Result := VerificaPessoaSecundaria(CodPessoaSecundariaCriador, 1, False, 'Criador');
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  Result := VerificaCodAnimalManejo(CodAnimalManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(-1, CodAnimalManejo, CodFazendaManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    if CodAnimalCertificadora <> '' then begin
      Mensagens.Adicionar(715, Self.ClassName, 'InserirImportado', []);
      Result := -715;
      Exit;
    end;
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(3, CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(-1, CodAnimalCertificadora);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, -1, -1, -1, -1, -1, 'I', 3, CodSituacaoSisbov, 1);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  if DtaCompra > 0 then begin
    // Verifica data da compra
    Result := VerificaDtaCompra(DtaCompra);
    if Result < 0 then begin
      Exit;
    end;
  end;
  
  // Trata nome do animal (R06)
  if NomAnimal <> '' then begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaNomAnimal(-1, NomAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaDesApelido(-1, DesApelido);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica associação de raça, grau de sangue e RGD do animal (R24, R25, R29, R31)
  Result := VerificaAssociacaoGrauSangue(CodAssociacaoRaca, CodGrauSangue, NumRGD);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores(NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  // Não deixa inserir animais com categoria "Vaca Parida" ou "Vaca em Lactação"
  if (CodCategoriaAnimal = 6) or (CodCategoriaAnimal = 8) then begin
    Mensagens.Adicionar(927, Self.ClassName, 'InserirImportado', []);
    Result := -927;
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, IndAnimalCastrado, CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica animal pai (R18, R19)
  if CodAnimalPai <> '' then begin
    Result := VerificaAnimalPai(CodEspecie, CodAptidao, CodRaca, CodFazendaManejoPai, CodAnimalPai);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica animal mae (R18, R20)
  if CodAnimalMae <> '' then begin
    Result := VerificaAnimalMae(CodEspecie, CodAptidao, CodFazendaManejoMae, CodAnimalMae);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica animal receptor (R18, R21)
  if CodAnimalReceptor <> '' then begin
    Result := VerificaAnimalReceptor(CodEspecie, CodFazendaManejoReceptor, CodAnimalReceptor);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica dados de importação
  Result := VerificaDadosImportacao(CodPaisOrigem, DesPropriedadeOrigem, DtaNascimento,
    DtaAutorizacaoImportacao, DtaEntradaPais, NumGuiaImportacao, NumLicencaImportacao);
  if Result < 0 then begin
    Exit;
  end;

  MontaQueryInsert;

  Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo, CodAnimalCertificadora, -1,
    -1, -2, -1, -1, CodSituacaoSisbov, 0, '', -1, -1, -1,
    DtaNascimento, '', -1, -1, -1, DtaCompra, CodPessoaSecundariaCriador, NomAnimal, DesApelido, CodAssociacaoRaca,
    CodGrauSangue, NumRGD, NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca, CodPelagem,
    IndSexo, 3, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor, IndAnimalCastrado, CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1,
    CodPaisOrigem, DesPropriedadeOrigem, DtaAutorizacaoImportacao, DtaEntradaPais, NumGuiaImportacao, NumLicencaImportacao,
    TxtObservacao, 'InserirImportado', '', 0, -1, FUsarSisbov, 231, False, -1, -1, -1, IndCodSisBovReservado, '', -1, -1, CodPessoaTecnico,
    numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

  if Result = 0 then ZerarValoresUltimaPesquisa;

end;

function TIntAnimais.InserirExterno(CodAnimalManejo,
  CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
  CodSituacaoSisbov: String; DtaNascimento: TDateTime; NomAnimal,
  DesApelido: String; CodAssociacaoRaca, CodGrauSangue: Integer;
  NumRGD: String; CodEspecie, CodAptidao, CodRaca, CodPelagem: Integer;
  IndSexo: String; CodFazendaManejoPai: Integer; CodAnimalPai: String;
  CodFazendaManejoMae: Integer; CodAnimalMae: String;
  CodFazendaManejoReceptor: Integer; CodAnimalReceptor,
  TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
var
  X : Integer;
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  if not Inicializado then begin
    RaiseNaoInicializado('InserirExterno');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(164) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'InserirExterno', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, 'InserirExterno', []);
    Result := -307;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  if Trim(CodAnimalManejo) = '' then begin
    Mensagens.Adicionar(536, Self.ClassName, 'VerificaCodAnimalManejo', []);
    Result := -536;
    Exit;
  end;

  For X := 1 to Length(CodAnimalManejo) do begin
    if Pos(Copy(CodAnimalManejo, X, 1), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ') = 0 then begin
      Mensagens.Adicionar(538, Self.ClassName, 'VerificaNumLetra', ['O código manejo do animal']);
      Result := -538;
      Exit;
    end;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(-1, CodAnimalManejo, -1);
  if Result < 0 then begin
    Exit;
  end;

  // Trata código da certificadora
//  if ValorParametro(8) = 'S' then begin
//    if CodAnimalCertificadora <> '' then begin
//      Mensagens.Adicionar(715, Self.ClassName, 'InserirExterno', []);
//      Result := -715;
//      Exit;
//    end;
//    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, -1, CodAnimalManejo, -1);
//    if Result < 0 then begin
//      Exit;
//    end;
//  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(4, CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(-1, CodAnimalCertificadora);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
    CodAnimalSisbov, NumDVSisbov, 'I', 4, CodSituacaoSisbov, 1);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  // Trata nome do animal (R06)
  if NomAnimal <> '' then begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaNomAnimal(-1, NomAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaDesApelido(-1, DesApelido);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica associação de raça, grau de sangue e RGD do animal (R24, R25, R29, R31)
  Result := VerificaAssociacaoGrauSangue(CodAssociacaoRaca, CodGrauSangue, NumRGD);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica animal pai (R18, R19)
  if CodAnimalPai <> '' then begin
    Result := VerificaAnimalPai(CodEspecie, CodAptidao, CodRaca, CodFazendaManejoPai, CodAnimalPai);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica animal mae (R18, R20)
  if CodAnimalMae <> '' then begin
    Result := VerificaAnimalMae(CodEspecie, CodAptidao, CodFazendaManejoMae, CodAnimalMae);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica animal receptor (R18, R21)
  if CodAnimalReceptor <> '' then begin
    Result := VerificaAnimalReceptor(CodEspecie, CodFazendaManejoReceptor, CodAnimalReceptor);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica Sexo
  if (UpperCase(IndSexo) <> 'M') and (UpperCase(IndSexo) <> 'F') then begin
    Mensagens.Adicionar(690, Self.ClassName, 'InserirExterno', []);
    Result := -690;
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  MontaQueryInsert;

  Result := InserirAnimal(-1, CodAnimalManejo, CodAnimalCertificadora, CodPaisSisbov,
    CodEstadoSisbov, CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, CodSituacaoSisbov,
    0, '', -1, -1, -1, DtaNascimento, '', -1, -1, -1, 0, -1, NomAnimal, DesApelido, CodAssociacaoRaca,
    CodGrauSangue, NumRGD, '', -1, -1, -1, -1, -1, -1, -1, -1, CodEspecie, CodAptidao,
    CodRaca, CodPelagem, IndSexo, 4, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor, '', -1,
    -1, -1, -1, -1, -1, '', -1, '', -1, -1, -1, '', 0, 0, '', '',
    TxtObservacao, 'InserirExterno', '', 0, -1, FUsarSisbov, 164, False, -1, -1, -1, IndCodSisBovReservado, '', -1, -1,
    CodPessoaTecnico, numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

  if Result = 0 then ZerarValoresUltimaPesquisa;

end;

function TIntAnimais.AlterarNascido(CodAnimal, CodFazendaManejo: Integer;
  CodAnimalManejo, CodAnimalCertificadora: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbov,
  NumDVSisbov: Integer; DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String; CodPropriedadeIdentificacao,
  CodFazendaIdentificacao: Integer; DtaNascimento: TDateTime;
  CodFazendaNascimento: Integer; NomAnimal, DesApelido,
  NumTransponder: String; CodTipoIdentificador1, CodPosicaoIdentificador1,
  CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodRaca, CodPelagem: Integer;
  IndAnimalCastrado: String; CodRegimeAlimentar, CodCategoriaAnimal,
  CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente: Integer; TxtObservacao: String;IndCodSisBovReservado:String;
  CodPessoaTecnico: Integer; IndSexo: String): Integer;
const
  Metodo : Integer = 166;
  NomeMetodo : String = 'AlterarNascido';
var
  DadosAnimal: TDadosAnimal;
  NumImovelNascimento,
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao,
  CodLocalizacaoNascimento,
  CodPropriedadeNascimento: Integer;
begin
  Result := -1;
  CodLocalizacaoIdentificacao := DadosAnimal.CodLocalizacaoIdentificacao;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica se método pode ser aplicado ao animal informado
  if (DadosAnimal.CodTipoOrigem <> 1) and (DadosAnimal.CodTipoOrigem <> 6) then
  begin
    Mensagens.Adicionar(717, Self.ClassName, NomeMetodo,
      [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
    Result := -717;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se usuário pretende alterar alguma informação que não
  // pode ser alterada se o animal já possuir evento(s) (R08)
  Result := VerificaRegra08(DadosAnimal, DtaNascimento, IndAnimalCastrado,
    CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
    CodLocalCorrente, CodFazendaCorrente, '', CodPropriedadeCorrente,
    NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True,
    'Fazenda de manejo do animal');
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  Result := VerificaCodAnimalManejo(CodAnimalManejo);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(CodAnimal, CodAnimalManejo,
    CodFazendaManejo);
  if Result < 0 then
  begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then
  begin
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora,
      CodFazendaManejo, CodAnimalManejo, CodAnimal);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(1, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then
  begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(CodAnimal, CodAnimalCertificadora);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  if (CodPaisSisbov <> DadosAnimal.CodPaisSisbov) or
     (CodEstadoSisbov <> DadosAnimal.CodEstadoSisbov) or
     (CodMicroRegiaoSisbov <> DadosAnimal.CodMicroRegiaoSisbov) or
     (CodAnimalSisbov <> DadosAnimal.CodAnimalSisbov) or
     (NumDVSisbov <> DadosAnimal.NumDVSisbov) then
  begin
    // Se animal já foi exportado não pode ser alterado o código sisbov do mesmo
    if DadosAnimal.CodArquivoSisbov > 0 then
    begin
      Mensagens.Adicionar(1389, Self.ClassName, NomeMetodo,
        [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
      Result := -1389;
      Exit;
    end;

    Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov,
      CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, 'A', 1,
      DadosAnimal.CodSituacaoSisbov, 1);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento,
    DtaIdentificacaoSisbov, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  if (CodPropriedadeIdentificacao > 0) and (NumImovelIdentificacao <> '') then
  begin
    NumImovelIdentificacao := '';
  end;
  if NumImovelIdentificacao = '' then
  begin
    CodLocalizacaoIdentificacao := -1;
  end;

  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then
  begin
    Exit;
  end;


  if DadosAnimal.CodFazendaNascimento <= 0 then
  begin
    DadosAnimal.CodFazendaNascimento := -1;
  end;
  NumImovelNascimento := DadosAnimal.NumImovelNascimento;
  CodLocalizacaoNascimento := DadosAnimal.CodLocalizacaoNascimento;
  CodPropriedadeNascimento := DadosAnimal.CodPropriedadeNascimento;

  // Trata fazenda de nascimento (R23)
  if (CodFazendaNascimento > 0) and (DadosAnimal.CodSituacaoSisbov <> 'I') then
  begin
    Result := VerificaFazenda(CodFazendaNascimento, True,
      'Fazenda de nascimento do animal');
    if Result < 0 then
    begin
      Exit;
    end;

    if CodFazendaNascimento <> DadosAnimal.CodFazendaNascimento then
    begin
      NumImovelNascimento := '';
      CodLocalizacaoNascimento := -1;
      CodPropriedadeNascimento := -1;
    end;
  end;

  // Trata nome do animal (R06)
  if NomAnimal <> '' then
  begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then
    begin
      Exit;
    end;

    Result := VerificaNomAnimal(CodAnimal, NomAnimal);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then
  begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then
    begin
      Exit;
    end;

    Result := VerificaDesApelido(CodAnimal, DesApelido);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores(NumTransponder, CodTipoIdentificador1,
    CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
    CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
    CodPosicaoIdentificador4);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(DadosAnimal.CodEspecie, CodRaca,
    DadosAnimal.CodAptidao);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  Result := VerificaCategoria(CodCategoriaAnimal, DadosAnimal.IndSexo,
    IndAnimalCastrado, DadosAnimal.CodAptidao, DtaNascimento);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
    CodFazendaCorrente, NumImovelCorrente, CodPropriedadeCorrente,
    NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar,
    CodFazendaCorrente, CodLocalCorrente, CodCategoriaAnimal,
    DadosAnimal.CodAptidao);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then
  begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  MontaQueryUpdate;

  Result := AlterarAnimal(CodAnimal, CodFazendaManejo, CodAnimalManejo,
    CodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, DtaIdentificacaoSisbov,
    NumImovelIdentificacao, CodLocalizacaoIdentificacao,
    CodPropriedadeIdentificacao, CodFazendaIdentificacao, DtaNascimento,
    NumImovelNascimento, CodLocalizacaoNascimento,
    CodPropriedadeNascimento, CodFazendaNascimento, 0, -1,
    NomAnimal, DesApelido, NumTransponder, CodTipoIdentificador1,
    CodPosicaoIdentificador1, CodTipoIdentificador2, CodPosicaoIdentificador2,
    CodTipoIdentificador3, CodPosicaoIdentificador3, CodTipoIdentificador4,
    CodPosicaoIdentificador4, CodRaca, CodPelagem, IndAnimalCastrado,
    CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
    CodLocalCorrente, CodFazendaCorrente, NumImovelCorrente, -1,
    CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente,
    DadosAnimal.CodPessoaCorrente, -1, '', 0, 0, '', '', TxtObservacao,
    NomeMetodo, '', 0, -1, FUsarSisbov, Metodo, DadosAnimal,
    IndCodSisBovReservado, CodPessoaTecnico, IndSexo);

  if Result = 0 then ZerarValoresUltimaPesquisa;

end;

function TIntAnimais.AlterarComprado(CodAnimal, CodFazendaManejo: Integer;
  CodAnimalManejo, CodAnimalCertificadora: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbov,
  NumDVSisbov: Integer; DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String; CodPropriedadeIdentificacao,
  CodFazendaIdentificacao: Integer; DtaNascimento: TDateTime;
  NumImovelNascimento: String; CodPropriedadeNascimento: Integer;
  DtaCompra: TDateTime; CodPessoaSecundariaCriador: Integer; NomAnimal,
  DesApelido, NumTransponder: String; CodTipoIdentificador1,
  CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodRaca, CodPelagem: Integer;
  IndAnimalCastrado: String; CodRegimeAlimentar, CodCategoriaAnimal,
  CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
  NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer; TxtObservacao,
  NumGta: String; DtaEmissaoGta: TDateTime; NumNotaFiscal: Integer;
  IndCodSisBovReservado:String; CodPessoaTecnico: Integer; IndSexo: String): Integer;
const
  Metodo : Integer = 168;
  NomeMetodo : String = 'AlterarComprado';
var
  DadosAnimal: TDadosAnimal;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao,
  CodLocalizacaoNascimento: Integer;
begin
  Result := -1;
  CodLocalizacaoIdentificacao := DadosAnimal.CodLocalizacaoIdentificacao;
  NumImovelIdentificacao := Trim(NumImovelIdentificacao);
  NumImovelNascimento := Trim(NumImovelNascimento);
  NumImovelCorrente := Trim(NumImovelCorrente);
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica se método pode ser aplicado ao animal informado
  if DadosAnimal.CodTipoOrigem <> 2 then begin
    Mensagens.Adicionar(717, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
    Result := -717;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se usuário pretende alterar alguma informação que não
  // pode ser alterada se o animal já possuir evento(s) (R08)
  Result := VerificaRegra08(DadosAnimal, DtaNascimento, IndAnimalCastrado, CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    '', CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  Result := VerificaCodAnimalManejo(CodAnimalManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(CodAnimal, CodAnimalManejo, CodFazendaManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, CodAnimal);
    if Result < 0 then begin
      Exit;
    end;  
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(2, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(CodAnimal, CodAnimalCertificadora);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  if (CodPaisSisbov <> DadosAnimal.CodPaisSisbov) or
     (CodEstadoSisbov <> DadosAnimal.CodEstadoSisbov) or
     (CodMicroRegiaoSisbov <> DadosAnimal.CodMicroRegiaoSisbov) or
     (CodAnimalSisbov <> DadosAnimal.CodAnimalSisbov) or
     (NumDVSisbov <> DadosAnimal.NumDVSisbov) then begin

    // Se animal já foi exportado não pode ser alterado o código sisbov do mesmo
    if DadosAnimal.CodArquivoSisbov > 0 then begin
      Mensagens.Adicionar(1389, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
      Result := -1389;
      Exit;
    end;

    Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodAnimalSisbov, NumDVSisbov, 'A', 2, DadosAnimal.CodSituacaoSisbov, 1);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  if DtaCompra > 0 then begin
   // Verifica data da compra
   Result := VerificaDtaCompra(DtaCompra);
   if Result < 0 then begin
     Exit;
   end;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento, DtaIdentificacaoSisbov, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  if (CodPropriedadeIdentificacao > 0) and (NumImovelIdentificacao <> '') then begin
    NumImovelIdentificacao := '';
  end;
  if NumImovelIdentificacao = '' then
  begin
    CodLocalizacaoIdentificacao := -1;
  end;
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica local de Nascimento (R14, R26)
  Result := VerificaLocalNascimento(NumImovelNascimento, CodPropriedadeNascimento);
  if Result < 0 then begin
    Exit;
  end;

  CodLocalizacaoNascimento := DadosAnimal.CodLocalizacaoNascimento;
  // Verifica se o NIRF/INCRA ou a propriedade de nascimento foram alteradas
  // se uma delas foi alterada então a outra deve ser limpada.
  if (NumImovelNascimento <> DadosAnimal.NumImovelNascimento)
    or (CodPropriedadeNascimento <> DadosAnimal.CodPropriedadeNascimento) then
  begin
    if (CodPropriedadeNascimento <> DadosAnimal.CodPropriedadeNascimento)
      and (CodPropriedadeNascimento > 0) then
    begin
      NumImovelNascimento := '';
      CodLocalizacaoNascimento := -1;
    end
    else
    if NumImovelNascimento <> DadosAnimal.NumImovelNascimento then
    begin
      CodPropriedadeNascimento := -1;
      CodLocalizacaoNascimento := -1;
    end;
  end;

  // Verifica data da compra (R42)
  if DtaCompra > 0 then begin
    if DtaCompra < DtaNascimento then begin
      Mensagens.Adicionar(675, Self.ClassName, NomeMetodo, []);
      Result := -675;
      Exit;
    end;
  end;

  // Verifica Criador (R28)
  Result := VerificaPessoaSecundaria(CodPessoaSecundariaCriador, 1, False, 'Criador');
  if Result < 0 then begin
    Exit;
  end;

  // Trata nome do animal (R06)
  if NomAnimal <> '' then begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaNomAnimal(CodAnimal, NomAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaDesApelido(CodAnimal, DesApelido);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores(NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(DadosAnimal.CodEspecie, CodRaca, DadosAnimal.CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  Result := VerificaCategoria(CodCategoriaAnimal, DadosAnimal.IndSexo, IndAnimalCastrado, DadosAnimal.CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, DadosAnimal.CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica número do GTA
  if NumGTA <> '' then begin
    Result := TrataString(NumGTA, 13, 'Número do GTA');
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica data do Gta
  if DtaEmissaoGta > 0 then begin
    if DtaEmissaoGta < DtaNascimento then begin
      Mensagens.Adicionar(1094, Self.ClassName, NomeMetodo, []);
      Result := -1094;
      Exit;
    end;
    if DtaEmissaoGta > DtaSistema then begin
      { TODO : Criar mensagem Data do GTA não pode ser maior que a data atual }
      Mensagens.Adicionar(1283, Self.ClassName, 'InserirComprado', []);
      Result := -1283;
      Exit;
    end;
  end;

  MontaQueryUpdate;

  Result := AlterarAnimal(CodAnimal, CodFazendaManejo, CodAnimalManejo,
    CodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, DtaIdentificacaoSisbov,
    NumImovelIdentificacao, CodLocalizacaoIdentificacao,
    CodPropriedadeIdentificacao, CodFazendaIdentificacao, DtaNascimento,
    NumImovelNascimento, CodLocalizacaoNascimento, CodPropriedadeNascimento, -1,
    DtaCompra, CodPessoaSecundariaCriador, NomAnimal, DesApelido,
    NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3,
    CodPosicaoIdentificador3, CodTipoIdentificador4, CodPosicaoIdentificador4,
    CodRaca, CodPelagem, IndAnimalCastrado, CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
    CodFazendaCorrente, NumImovelCorrente, -1, CodPropriedadeCorrente,
    NumCNPJCPFCorrente, CodPessoaCorrente, DadosAnimal.CodPessoaCorrente, -1,
    '', 0, 0, '', '', TxtObservacao, NomeMetodo, NumGta, DtaEmissaoGta,
    NumNotaFiscal, FUsarSisbov, Metodo, DadosAnimal, IndCodSisBovReservado,
    CodPessoaTecnico, IndSexo);

  if Result = 0 then ZerarValoresUltimaPesquisa;

end;

function TIntAnimais.AlterarImportado(CodAnimal, CodFazendaManejo: Integer;
  CodAnimalManejo, CodAnimalCertificadora: String; DtaNascimento,
  DtaCompra: TDateTime; CodPessoaSecundariaCriador: Integer; NomAnimal,
  DesApelido, NumTransponder: String; CodTipoIdentificador1,
  CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodRaca, CodPelagem: Integer;
  IndAnimalCastrado: String; CodRegimeAlimentar, CodCategoriaAnimal,
  CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente, CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
  DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime; NumGuiaImportacao,
  NumLicencaImportacao, TxtObservacao: String;IndCodSisBovReservado:String;
  CodPessoaTecnico: Integer; IndSexo: String): Integer;
const
  Metodo : Integer = 232;
  NomeMetodo : String = 'AlterarImportado';
var
  DadosAnimal: TDadosAnimal;
  NumImovelCorrente: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

// Foi retirado a consistencia de cadastro efetivado, pois,
// o usuario poderá alterar alguns dados do animal

  // Verifica se o cadastro já foi efetivado
//  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
//  if Result < 0 then begin
//    Exit;
//  end;
//  if Result = 1 then begin
//    Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
//    Result := -712;
//    Exit;
//  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica se método pode ser aplicado ao animal informado
  if DadosAnimal.CodTipoOrigem <> 3 then begin
    Mensagens.Adicionar(717, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
    Result := -717;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se usuário pretende alterar alguma informação que não
  // pode ser alterada se o animal já possuir evento(s) (R08)
  Result := VerificaRegra08(DadosAnimal, DtaNascimento, IndAnimalCastrado, CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    '', CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  Result := VerificaCodAnimalManejo(CodAnimalManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(CodAnimal, CodAnimalManejo, CodFazendaManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, CodAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(3, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(CodAnimal, CodAnimalCertificadora);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(CodAnimal, -1, -1, -1, -1, -1, 'A', 3, DadosAnimal.CodSituacaoSisbov, 1);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  if DtaCompra > 0 then begin
   // Verifica data da compra
   Result := VerificaDtaCompra(DtaCompra);
   if Result < 0 then begin
     Exit;
   end;
  end;

  // Verifica data da compra (R42)
  if DtaCompra > 0 then begin
    if DtaCompra < DtaNascimento then begin
      Mensagens.Adicionar(675, Self.ClassName, NomeMetodo, []);
      Result := -675;
      Exit;
    end;
  end;

  // Verifica Criador (R28)
  Result := VerificaPessoaSecundaria(CodPessoaSecundariaCriador, 1, False, 'Criador');
  if Result < 0 then begin
    Exit;
  end;

  // Trata nome do animal (R06)
  if NomAnimal <> '' then begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaNomAnimal(CodAnimal, NomAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaDesApelido(CodAnimal, DesApelido);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores(NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(DadosAnimal.CodEspecie, CodRaca, DadosAnimal.CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  Result := VerificaCategoria(CodCategoriaAnimal, DadosAnimal.IndSexo, IndAnimalCastrado, DadosAnimal.CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, DadosAnimal.CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica dados de importação
  Result := VerificaDadosImportacao(CodPaisOrigem, DesPropriedadeOrigem, DtaNascimento,
    DtaAutorizacaoImportacao, DtaEntradaPais, NumGuiaImportacao, NumLicencaImportacao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  MontaQueryUpdate;

  Result := AlterarAnimal(CodAnimal, CodFazendaManejo, CodAnimalManejo, CodAnimalCertificadora, -1,
    -1, -2, -1, -1, 0, '', -1, -1, -1,  DtaNascimento, '', -1, -1, -1, DtaCompra, CodPessoaSecundariaCriador,
    NomAnimal, DesApelido, NumTransponder, CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4, CodRaca, CodPelagem,
    IndAnimalCastrado, CodRegimeAlimentar,
    CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, -1, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, DadosAnimal.CodPessoaCorrente,
    CodPaisOrigem, DesPropriedadeOrigem, DtaAutorizacaoImportacao, DtaEntradaPais, NumGuiaImportacao,
    NumLicencaImportacao, TxtObservacao, NomeMetodo, '', 0, -1, FUsarSisbov, Metodo, DadosAnimal, IndCodSisBovReservado, CodPessoaTecnico, IndSexo);

  if Result = 0 then ZerarValoresUltimaPesquisa;
end;

function TIntAnimais.AlterarExterno(CodAnimal: Integer; CodAnimalManejo,
  CodAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodAnimalSisbov, NumDVSisbov: Integer;
  DtaNascimento: TDateTime; NomAnimal, DesApelido: String; CodRaca,
  CodPelagem: Integer; TxtObservacao: String;IndCodSisBovReservado:String;
  CodPessoaTecnico: Integer; IndSexo: String): Integer;
const
  Metodo : Integer = 167;
  NomeMetodo : String = 'AlterarExterno';
var
  DadosAnimal: TDadosAnimal;
  X : Integer; 
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

// Foi retirado a consistencia de cadastro efetivado, pois,
// o usuario poderá alterar alguns dados do animal

  // Verifica se o cadastro já foi efetivado
//  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
//  if Result < 0 then begin
//    Exit;
//  end;
//  if Result = 1 then begin
//    Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
//    Result := -712;
//    Exit;
//  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica se método pode ser aplicado ao animal informado
  if DadosAnimal.CodTipoOrigem <> 4 then begin
    Mensagens.Adicionar(717, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
    Result := -717;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica se usuário pretende alterar alguma informação que não
  // pode ser alterada se o animal já possuir evento(s) (R08)
  Result := VerificaRegra08(DadosAnimal, DtaNascimento, '', -1,
    -1, -1, -1, -1, -1, '', -1, '', -1);
  if Result < 0 then begin
    Exit;
  end;

  // Trata cod_animal_manejo (R25)
    // Trata cod_animal_manejo (R25)
  CodAnimalManejo := UpperCase(CodAnimalManejo);
  if Trim(CodAnimalManejo) = '' then begin
    Mensagens.Adicionar(536, Self.ClassName, 'AlterarExterno', []);
    Result := -536;
    Exit;
  end;

  For X := 1 to Length(CodAnimalManejo) do begin
    if Pos(Copy(CodAnimalManejo, X, 1), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ') = 0 then begin
      Mensagens.Adicionar(538, Self.ClassName, 'AlterarExterno', ['O código manejo do animal']);
      Result := -538;
      Exit;
    end;
  end;

//  Result := VerificaCodAnimalManejo(CodAnimalManejo);
//  if Result < 0 then begin
//    Exit;
//  end;

  // Verifica duplicidade de fazenda/animal manejo (R04)
  Result := VerificaCodAnimalFazendaManejo(CodAnimal, CodAnimalManejo, -1);
  if Result < 0 then begin
    Exit;
  end;

  // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, -1, CodAnimalManejo, CodAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(4, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica código animal certificadora (R25, R38)
  if CodAnimalCertificadora <> '' then begin
    CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
    Result := VerificaCodAnimalCertificadora(CodAnimal, CodAnimalCertificadora);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  if (CodPaisSisbov <> DadosAnimal.CodPaisSisbov) or
     (CodEstadoSisbov <> DadosAnimal.CodEstadoSisbov) or
     (CodMicroRegiaoSisbov <> DadosAnimal.CodMicroRegiaoSisbov) or
     (CodAnimalSisbov <> DadosAnimal.CodAnimalSisbov) or
     (NumDVSisbov <> DadosAnimal.NumDVSisbov) then begin

    // Se animal já foi exportado não pode ser alterado o código sisbov do mesmo
    if DadosAnimal.CodArquivoSisbov > 0 then begin
      Mensagens.Adicionar(1389, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
      Result := -1389;
      Exit;
    end;

    Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodAnimalSisbov, NumDVSisbov, 'A', 4, DadosAnimal.CodSituacaoSisbov, 1);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica data de nascimento (R35)
  if DtaNascimento > 0 then begin
    Result := VerificaDtaNascimento(DtaNascimento);
    if Result < 0 then begin
      Exit;
    end;
  end;  

  // Trata nome do animal (R06)
  if NomAnimal <> '' then begin
    Result := TrataString(NomAnimal, 60, 'Nome do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaNomAnimal(CodAnimal, NomAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Trata apelido do animal (R06)
  if DesApelido <> '' then begin
    Result := TrataString(DesApelido, 20, 'Apelido do animal');
    if Result < 0 then begin
      Exit;
    end;
    Result := VerificaDesApelido(CodAnimal, DesApelido);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(DadosAnimal.CodEspecie, CodRaca, DadosAnimal.CodAptidao);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica Pelagem (R29)
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Exit;
    end;
  end;

  MontaQueryUpdate;

  Result := AlterarAnimal(CodAnimal, -1, CodAnimalManejo,
    CodAnimalCertificadora, CodPaisSisbov, CodEstadoSisbov,
    CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov, 0, '', -1, -1, -1,
    DtaNascimento, '', -1, -1, -1, 0, -1, NomAnimal, DesApelido, '', -1, -1, -1,
    -1, -1, -1, -1, -1, CodRaca, CodPelagem, '', -1, -1, -1, -1, -1, -1, '', -1,
    -1, '', -1, -1, -1, '', 0, 0, '', '', TxtObservacao, NomeMetodo, '', 0, -1,
    FUsarSisbov, Metodo, DadosAnimal, IndCodSisBovReservado, CodPessoaTecnico, IndSexo);

  if Result = 0 then ZerarValoresUltimaPesquisa;
end;

function TIntAnimais.Buscar(CodAnimal: Integer; CodAnimalSisbov,IndAnimalDoProprioProdutor,IndAnimalVendido : String): Integer;
var
  Q : THerdomQuery;
  CodTecnico: Integer;
const
  NomMetodo : String = 'Buscar';
  CodMetodo : Integer = 169;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;
  //------------------------------------------
  // Verifica se usuário pode executar método
  //------------------------------------------
  if not Conexao.PodeExecutarMetodo(CodMetodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;
  //-----------------------------------------------
  // Verifica se produtor de trabalho foi definido
  //-----------------------------------------------
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomMetodo, []);
    Result := -307;
    Exit;
  end;

  if (CodAnimal <> -1) and (trim(CodAnimalSisBov) <> '') then begin
    Mensagens.Adicionar(700, Self.ClassName, NomMetodo, []);
    Result := -700;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      //-----------------------
      // Tenta Buscar Registro
      //-----------------------
      Q.Close;

      // Prepara temporárias a serem usadas no processo
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add (' exec spt_buscar_animal :CodPessoaProdutor ' +
                                       ', :CodAnimal ' +
                                       ', :CodAnimalSisBov ' +
                                       ', :IndAnimalDoProprioProdutor ' +
                                       ', :IndAnimalVendido ');
      {$ENDIF}
      Q.ParamByName('CodPessoaProdutor').asInteger := conexao.CodProdutorTrabalho;
      Q.ParamByName('CodAnimal').asInteger := CodAnimal;
      Q.ParamByName('CodAnimalSisBov').asString := CodAnimalSisBov;
      Q.ParamByName('IndAnimalDoProprioProdutor').asString := IndAnimalDoProprioProdutor;
      Q.ParamByName('IndAnimalVendido').asString := IndAnimalVendido;

      Q.open;
      //---------------------------------------
      // Verifica se existe registro para busca
      //---------------------------------------
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1696, Self.ClassName, NomMetodo, []);
        Result := -1696;
      end;

      //------------------------------
      // Obtem informações do registro
      //------------------------------
      IntAnimal.CodPessoaProdutor := Q.FieldByName('cod_pessoa_produtor').AsInteger;
//      IntAnimal.NomPessoaProdutor := Q.FieldByName('nom_pessoa_produtor').AsString;
      IntAnimal.CodAnimal  := Q.FieldByName('cod_animal').AsInteger;
      IntAnimal.CodFazendaManejo  := Q.FieldByName('Cod_Fazenda_Manejo').AsInteger;
      IntAnimal.SglFazendaManejo  := Q.FieldByName('Sgl_Fazenda_Manejo').AsString;
      IntAnimal.CodAnimalManejo   := Q.FieldByName('Cod_Animal_Manejo').AsString;
      IntAnimal.CodAnimalCertificadora := Q.FieldByName('Cod_Animal_Certificadora').AsString;
      IntAnimal.CodPaisSisbov          := Q.FieldByName('Cod_Pais_Sisbov').AsInteger;
      IntAnimal.CodEstadoSisbov  := Q.FieldByName('Cod_Estado_Sisbov').AsInteger;
      IntAnimal.CodMicroRegiaoSisbov  := Q.FieldByName('Cod_Micro_Regiao_Sisbov').AsInteger;
      IntAnimal.CodAnimalSisbov := Q.FieldByName('Cod_Animal_Sisbov').AsInteger;
      IntAnimal.NumDVSisbov  := Q.FieldByName('Num_DV_Sisbov').AsInteger;
      IntAnimal.CodSituacaoSisbov := Q.FieldByName('Cod_Situacao_Sisbov').AsString;
      IntAnimal.DesSituacaoSisbov := Q.FieldByName('Des_Situacao_Sisbov').AsString;
      IntAnimal.TxtSituacaoSisbov := Q.FieldByName('Txt_Situacao_Sisbov').AsString;
      IntAnimal.DtaIdentificacaoSisbov := Q.FieldByName('Dta_Identificacao_Sisbov').AsDateTime;
      IntAnimal.NumImovelIdentificacao := Q.FieldByName('Num_Imovel_Identificacao').AsString;
      IntAnimal.CodLocalizacaoIdentificacao  := Q.FieldByName('cod_localizacao_identificacao').AsInteger;
      IntAnimal.CodPropriedadeIdentificacao  := Q.FieldByName('Cod_Propriedade_Identificacao').AsInteger;
      IntAnimal.NomPropriedadeIdentificacao  := Q.FieldByName('Nom_Propriedade_Identificacao').AsString;
      IntAnimal.CodFazendaIdentificacao := Q.FieldByName('Cod_Fazenda_Identificacao').AsInteger;
      IntAnimal.SglFazendaIdentificacao := Q.FieldByName('Sgl_Fazenda_Identificacao').AsString;
      IntAnimal.NomFazendaIdentificacao := Q.FieldByName('Nom_Fazenda_Identificacao').AsString;
      IntAnimal.DtaNascimento := Q.FieldByName('Dta_Nascimento').AsDateTime;
      IntAnimal.NumImovelNascimento := Q.FieldByName('Num_Imovel_Nascimento').AsString;
      IntAnimal.CodLocalizacaoNascimento := Q.FieldByName('cod_localizacao_nascimento').AsInteger;
      IntAnimal.CodPropriedadeNascimento := Q.FieldByName('Cod_Propriedade_Nascimento').AsInteger;
      IntAnimal.NomPropriedadeNascimento := Q.FieldByName('Nom_Propriedade_Nascimento').AsString;
      IntAnimal.CodFazendaNascimento := Q.FieldByName('Cod_Fazenda_Nascimento').AsInteger;
      IntAnimal.SglFazendaNascimento  := Q.FieldByName('Sgl_Fazenda_Nascimento').AsString;
      IntAnimal.NomFazendaNascimento  := Q.FieldByName('Nom_Fazenda_Nascimento').AsString;
      IntAnimal.CodPessoaSecundariaCriador := Q.FieldByName('Cod_Pessoa_Secundaria_Criador').AsInteger;
      IntAnimal.DtaCompra := Q.FieldByName('Dta_Compra').AsDateTime;
      IntAnimal.NomPessoaSecundariaCriador := Q.FieldByName('Nom_Pessoa_Secundaria_Criador').AsString;
      IntAnimal.NomAnimal  := Q.FieldByName('Nom_Animal').AsString;
      IntAnimal.DesApelido := Q.FieldByName('Des_Apelido').AsString;
      IntAnimal.CodEspecie := Q.FieldByName('Cod_Especie').AsInteger;
      IntAnimal.SglEspecie := Q.FieldByName('sgl_Especie').AsString;
      IntAnimal.DesEspecie := Q.FieldByName('Des_Especie').AsString;
      IntAnimal.CodAptidao := Q.FieldByName('Cod_Aptidao').AsInteger;
      IntAnimal.SglAptidao := Q.FieldByName('sgl_Aptidao').AsString;
      IntAnimal.DesAptidao := Q.FieldByName('Des_Aptidao').AsString;
      IntAnimal.CodRaca := Q.FieldByName('Cod_Raca').AsInteger;
      IntAnimal.SglRaca := Q.FieldByName('sgl_Raca').AsString;
      IntAnimal.DesRaca := Q.FieldByName('Des_Raca').AsString;
      IntAnimal.CodPelagem := Q.FieldByName('Cod_Pelagem').AsInteger;
      IntAnimal.SglPelagem := Q.FieldByName('sgl_Pelagem').AsString;
      IntAnimal.DesPelagem := Q.FieldByName('Des_Pelagem').AsString;
      IntAnimal.IndSexo := Q.FieldByName('Ind_Sexo').AsString;
      IntAnimal.CodTipoOrigem := Q.FieldByName('Cod_Tipo_Origem').AsInteger;
      IntAnimal.SglTipoOrigem := Q.FieldByName('sgl_Tipo_Origem').AsString;
      IntAnimal.DesTipoOrigem := Q.FieldByName('Des_Tipo_Origem').AsString;
      IntAnimal.CodAnimalPai  := Q.FieldByName('Cod_Animal_Pai').AsInteger;
//      FazPai := Q.FieldByName('cod_fazenda_manejo_pai').AsInteger;
      IntAnimal.CodManejoAnimalPai := Q.FieldByName('Cod_Manejo_Animal_Pai').AsString;
      IntAnimal.CodAnimalMae  := Q.FieldByName('Cod_Animal_Mae').AsInteger;
//      FazMae := Q.FieldByName('cod_fazenda_manejo_mae').AsInteger;
      IntAnimal.CodManejoAnimalMae := Q.FieldByName('Cod_Manejo_Animal_Mae').AsString;
      IntAnimal.CodAnimalReceptor  := Q.FieldByName('Cod_Animal_Receptor').AsInteger;
//      FazRec := Q.FieldByName('cod_fazenda_manejo_receptor').AsInteger;
      IntAnimal.CodManejoAnimalReceptor   := Q.FieldByName('Cod_Manejo_Animal_Receptor').AsString;
      IntAnimal.IndAnimalCastrado := Q.FieldByName('Ind_Animal_Castrado').AsString;
      IntAnimal.CodRegimeAlimentar := Q.FieldByName('Cod_Regime_Alimentar').AsInteger;
      IntAnimal.SglRegimeAlimentar := Q.FieldByName('sgl_Regime_Alimentar').AsString;
      IntAnimal.DesRegimeAlimentar := Q.FieldByName('Des_Regime_Alimentar').AsString;
      IntAnimal.CodCategoriaAnimal := Q.FieldByName('Cod_Categoria_Animal').AsInteger;
      IntAnimal.SglCategoriaAnimal := Q.FieldByName('sgl_Categoria_Animal').AsString;
      IntAnimal.DesCategoriaAnimal := Q.FieldByName('Des_Categoria_Animal').AsString;
      IntAnimal.CodTipoLugar := Q.FieldByName('Cod_Tipo_Lugar').AsInteger;
      IntAnimal.SglTipoLugar := Q.FieldByName('sgl_Tipo_Lugar').AsString;
      IntAnimal.DesTipoLugar := Q.FieldByName('Des_Tipo_Lugar').AsString;
      IntAnimal.NumImovelCorrente  := Q.FieldByName('Num_Imovel_Corrente').AsString;
      IntAnimal.CodLocalizacaoCorrente := Q.FieldByName('cod_localizacao_corrente').AsInteger;
      IntAnimal.CodPropriedadeCorrente := Q.FieldByName('Cod_Propriedade_Corrente').AsInteger;
      IntAnimal.NomPropriedadeCorrente := Q.FieldByName('Nom_propriedade_corrente').AsString;
      IntAnimal.CodFazendaCorrente := Q.FieldByName('Cod_Fazenda_Corrente').AsInteger;
      IntAnimal.SglFazendaCorrente := Q.FieldByName('sgl_Fazenda_Corrente').AsString;
      IntAnimal.NomFazendaCorrente := Q.FieldByName('Nom_Fazenda_Corrente').AsString;
      IntAnimal.NumGta := Q.FieldByName('num_gta').AsString;
      IntAnimal.DtaEmissaoGta := Q.FieldByName('dta_emissao_gta').AsDateTime;
      IntAnimal.NumNotaFiscal := Q.FieldByName('num_nota_fiscal').AsInteger;

      if Q.FieldByName('cod_pessoa_secundaria_corrente').AsInteger > 0 then begin
        IntAnimal.codPessoaCorrente := Q.FieldByName('cod_pessoa_secundaria_corrente').AsInteger;
        IntAnimal.NomPessoaCorrente := Q.FieldByName('nom_pessoa_secundaria_corrente').AsString;
        IntAnimal.NumCNPJCPFCorrente := Q.FieldByName('num_cnpj_cpf_corrente').AsString;
        IntAnimal.NumCNPJCPFCorrenteFormatado  := Q.FieldByName('num_CNPJCPF_secundario_corrente_formatado').AsString;
        IntAnimal.IndPessoaSecundaria   := 'S';
      end;

      if Q.FieldByName('Cod_Pessoa_Corrente').AsInteger > 0 then begin
        IntAnimal.codPessoaCorrente := Q.FieldByName('Cod_Pessoa_Corrente').AsInteger;
        IntAnimal.NomPessoaCorrente := Q.FieldByName('Nom_Pessoa_Corrente').AsString;
        IntAnimal.NumCNPJCPFCorrente := Q.FieldByName('num_cnpj_cpf_corrente').AsString;
        IntAnimal.NumCNPJCPFCorrenteFormatado  := Q.FieldByName('Num_CNPJCPF_Corrente_Formatado').AsString;
        IntAnimal.IndPessoaSecundaria   := 'N';
      end;

      IntAnimal.CodLocalCorrente := Q.FieldByName('Cod_Local_Corrente').AsInteger;
      IntAnimal.SglLocalCorrente := Q.FieldByName('sgl_Local_Corrente').AsString;
      IntAnimal.DesLocalCorrente := Q.FieldByName('des_Local_Corrente').AsString;
      IntAnimal.CodLoteCorrente  := Q.FieldByName('Cod_Lote_Corrente').AsInteger;
      IntAnimal.SglLoteCorrente  := Q.FieldByName('sgl_Lote_Corrente').AsString;
      IntAnimal.DesLoteCorrente  := Q.FieldByName('des_Lote_Corrente').AsString;
      IntAnimal.TxtObservacao    := Q.FieldByName('Txt_Observacao').AsString;
      IntAnimal.CodPaisOrigem := Q.FieldByName('Cod_Pais_Origem').AsInteger;
      IntAnimal.NomPaisOrigem := Q.FieldByName('Nom_Pais_Origem').AsString;
      IntAnimal.DesPropriedadeOrigem  := Q.FieldByName('des_propriedade_origem').AsString;
      IntAnimal.DtaAutorizacaoImportacao  := Q.FieldByName('Dta_Autorizacao_Importacao').AsDateTime;
      IntAnimal.DtaEntradaPais   := Q.FieldByName('Dta_Entrada_Pais').AsDateTime;
      IntAnimal.NumGuiaImportacao := Q.FieldByName('Num_Guia_Importacao').AsString;
      IntAnimal.NumLicencaImportacao  := Q.FieldByName('Num_Licenca_Importacao').AsString;
      IntAnimal.DtaCadastramento  := Q.FieldByName('Dta_Cadastramento').AsDateTime;
      IntAnimal.DtaEfetivacaoCadastro := Q.FieldByName('Dta_Efetivacao_Cadastro').AsDateTime;

      IntAnimal.CodArquivoSisbov := Q.FieldByName('Cod_Arquivo_Sisbov').AsInteger;
      IntAnimal.DtaGravacaoSisbov := Q.FieldByName('Dta_Gravacao_Sisbov').AsDateTime;
      IntAnimal.NomArquivoSisbov := Q.FieldByName('Nom_Arquivo_Sisbov').AsString;

      IntAnimal.DtaUltimoEvento  := Q.FieldByName('Dta_Ultimo_Evento').asDateTime;
      IntAnimal.CodAssociacaoRaca := Q.FieldByName('Cod_Associacao_Raca').AsInteger;
      IntAnimal.SglAssociacaoRaca := Q.FieldByName('sgl_Associacao_Raca').AsString;
      IntAnimal.NomAssociacaoRaca := Q.FieldByName('nom_Associacao_Raca').AsString;
      IntAnimal.CodGrauSangue := Q.FieldByName('Cod_grau_sangue').AsInteger;
      IntAnimal.SglGrauSangue := Q.FieldByName('sgl_grau_sangue').AsString;
      IntAnimal.DesGrauSangue := Q.FieldByName('des_grau_sangue').AsString;
      IntAnimal.NumRGD := Q.FieldByName('Num_RGD').AsString;
      IntAnimal.NumTransponder := Q.FieldByName('Num_Transponder').AsString;
      IntAnimal.CodTipoIdentificador1  := Q.FieldByName('Cod_Tipo_Identificador_1').AsInteger;
      IntAnimal.SglTipoIdentificador1  := Q.FieldByName('sgl_Tipo_Identificador_1').AsString;
      IntAnimal.DesTipoIdentificador1  := Q.FieldByName('des_Tipo_Identificador_1').AsString;
      IntAnimal.CodPosicaoIdentificador1  := Q.FieldByName('Cod_Posicao_Identificador_1').AsInteger;
      IntAnimal.SglPosicaoIdentificador1  := Q.FieldByName('sgl_Posicao_Identificador_1').AsString;
      IntAnimal.DesPosicaoIdentificador1  := Q.FieldByName('des_Posicao_Identificador_1').AsString;

      IntAnimal.CodTipoIdentificador2  := Q.FieldByName('Cod_Tipo_Identificador_2').AsInteger;
      IntAnimal.SglTipoIdentificador2  := Q.FieldByName('sgl_Tipo_Identificador_2').AsString;
      IntAnimal.DesTipoIdentificador2  := Q.FieldByName('des_Tipo_Identificador_2').AsString;
      IntAnimal.CodPosicaoIdentificador2  := Q.FieldByName('Cod_Posicao_Identificador_2').AsInteger;
      IntAnimal.SglPosicaoIdentificador2  := Q.FieldByName('sgl_Posicao_Identificador_2').AsString;
      IntAnimal.DesPosicaoIdentificador2  := Q.FieldByName('des_Posicao_Identificador_2').AsString;

      IntAnimal.CodTipoIdentificador3  := Q.FieldByName('Cod_Tipo_Identificador_3').AsInteger;
      IntAnimal.SglTipoIdentificador3  := Q.FieldByName('sgl_Tipo_Identificador_3').AsString;
      IntAnimal.DesTipoIdentificador3  := Q.FieldByName('des_Tipo_Identificador_3').AsString;
      IntAnimal.CodPosicaoIdentificador3  := Q.FieldByName('Cod_Posicao_Identificador_3').AsInteger;
      IntAnimal.SglPosicaoIdentificador3  := Q.FieldByName('sgl_Posicao_Identificador_3').AsString;
      IntAnimal.DesPosicaoIdentificador3  := Q.FieldByName('des_Posicao_Identificador_3').AsString;

      IntAnimal.CodTipoIdentificador4  := Q.FieldByName('Cod_Tipo_Identificador_4').AsInteger;
      IntAnimal.SglTipoIdentificador4  := Q.FieldByName('sgl_Tipo_Identificador_4').AsString;
      IntAnimal.DesTipoIdentificador4  := Q.FieldByName('des_Tipo_Identificador_4').AsString;
      IntAnimal.CodPosicaoIdentificador4  := Q.FieldByName('Cod_Posicao_Identificador_4').AsInteger;
      IntAnimal.SglPosicaoIdentificador4  := Q.FieldByName('sgl_Posicao_Identificador_4').AsString;
      IntAnimal.DesPosicaoIdentificador4  := Q.FieldByName('des_Posicao_Identificador_4').AsString;
      IntAnimal.SglFazendaAnimalPai := Q.FieldByName('sgl_fazenda_animal_pai').AsString;
      IntAnimal.SglFazendaAnimalMae := Q.FieldByName('sgl_fazenda_animal_mae').AsString;
      IntAnimal.SglFazendaAnimalReceptor := Q.FieldByName('sgl_fazenda_animal_Receptor').AsString;

      IntAnimal.NomMunicipioIdentificacao := Q.FieldByName('nom_municipio_identificacao').AsString;
      IntAnimal.SglEstadoIdentificacao := Q.FieldByName('Sgl_Estado_identificacao').AsString;
      IntAnimal.NomMunicipioNascimento := Q.FieldByName('nom_municipio_nascimento').AsString;
      IntAnimal.SglEstadoNascimento    := Q.FieldByName('Sgl_Estado_nascimento').AsString;

      IntAnimal.DesComposicaoRacial    := Q.FieldByName('DesComposicaoRacial').AsString;

      IntAnimal.IndAptoCobertura       := Q.FieldByName('ind_apto_cobertura').AsString;
      IntAnimal.IndCodSisBovReservado  := Q.FieldByName('ind_cod_sisbov_reservado').AsString;
      IntAnimal.CodPessoaTecnico       := Q.FieldByName('cod_pessoa_tecnico').AsInteger;
      IntAnimal.NomPessoaVendedor      := Q.FieldByName('nom_pessoa_vendedor').AsString;

      CodTecnico := Q.FieldByName('cod_pessoa_tecnico').AsInteger;
      //Retorna nome do técnico
      if CodTecnico > 0 then begin
         Q.Close;
         Q.SQL.Clear;
         Q.SQL.Add('Select tp.nom_reduzido_pessoa ' +
                ' from '+
                '    tab_tecnico tt ' +
                '  , tab_pessoa  tp ' +
                'Where '+
                '      tt.cod_pessoa_tecnico = tp.cod_pessoa ' +
                '  and tp.cod_pessoa = :cod_pessoa_tecnico ');
          Q.ParamByName('cod_pessoa_tecnico').AsInteger := CodTecnico;
          Q.Open;
          if Q.IsEmpty then
             IntAnimal.NomPessoaTecnico := ''
          else
             IntAnimal.NomPessoaTecnico := Q.FieldByName('nom_reduzido_pessoa').AsString;
      end
      else begin
         IntAnimal.NomPessoaTecnico := '';
      end;
      //Verifica se o animal foi gerado através de um evento de parto
      Q.Close;
      Q.SQL.Clear;
      Q.SQL.Add(' select 1 from tab_animal_cria ' +
                ' where cod_animal = :cod_animal '+
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.ParamByName('cod_animal').asinteger := IntAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if (IntAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
         (IntAnimal.CodPessoaTecnico <> 0) then begin
         Mensagens.Adicionar(1698, Self.ClassName, NomMetodo, [IntAnimal.CodAnimalManejo]);
         Result := -1698;
         Exit;
      end;

      if not Q.IsEmpty
         then IntAnimal.IndCadastroParto := 'S'
         else IntAnimal.IndCadastroParto := 'N';

      //Verifica se o arquivo gerado não possui log's de erro
      if IntAnimal.CodArquivoSisbov > 0 then begin
         Q.Close;
         Q.SQL.Clear;
         Q.SQL.Add(' select ind_possui_log_erro from tab_arquivo_sisbov ' +
                   ' where cod_arquivo_sisbov = :cod_arquivo_sisbov ');
         Q.ParamByName('cod_arquivo_sisbov').asinteger := IntAnimal.CodArquivoSisbov;
         Q.Open;
         if Q.FieldByName('ind_possui_log_erro').asstring = 'S' then begin
            IntAnimal.CodArquivoSisbov := 0;
            IntAnimal.DtaGravacaoSisbov := 0;
            IntAnimal.NomArquivoSisbov := '';
         end;
      end;
      // Retorna status "ok" do método
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(678, Self.ClassName, NomMetodo, [E.Message]);
        Result := -678;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.BuscarResumido(CodAnimal: Integer;
  CodAnimalSisBov: String): Integer;
const
  Metodo: Integer = 235;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado('BuscarResumido');
    Exit;
  end;
  //-----------------------------------------
  // Verifica se usuário pode executar método
  //-----------------------------------------
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'BuscarResumido', []);
    Result := -188;
    Exit;
  end;

  try
    Result := IntAnimalResumido.CarregaPropriedadesResumidas(CodAnimal,CodAnimalSisBov, Conexao, Mensagens);
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(686, Self.ClassName, 'BuscarResumido', [E.Message]);
      Result := -686;
      Exit;
    end;
  end;
end;


function TIntAnimais.VerificaTipoPai(SglFazenda, CodManejo: String;
  var IndTipo: String): Integer;
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se é touro
      Q.SQL.Clear;
      {$IFDEF MSSQL}
// Para o pai tipo externo, não é passado a sigla da fazenda manejo
// por isso é feita essa consistencia.
      if SglFazenda = '' then begin
        IndTipo := 'E';
        Q.SQL.Add('select 1 ' +
                 '  from tab_animal ta  ' +
                 ' where ta.cod_animal_manejo = :cod_manejo ' +
                 '   and ta.cod_tipo_origem = 4 ' +
                 '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
      end
      else begin
        IndTipo := 'T';
        Q.SQL.Add('select 1 ' +
                '  from tab_animal ta, ' +
                '       tab_fazenda tf ' +
                ' where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                '   and ta.cod_fazenda_manejo = tf.cod_fazenda ' +
                '   and ta.cod_animal_manejo = :cod_manejo ');
      if SglFazenda <> '' then begin
        Q.SQL.Add('   and tf.sgl_fazenda = :sgl_fazenda ');
      end;
      Q.SQL.Add('   and tf.cod_pessoa_produtor = :cod_pessoa_produtor ');
      end;
      {$ENDIF}
      if SglFazenda = '' then begin
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_manejo').AsString := CodManejo;
      end
      else begin
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_manejo').AsString := CodManejo;
        Q.ParamByName('sgl_fazenda').AsString := SglFazenda;
      end;
      Q.Open;
      if not Q.IsEmpty then begin
        Exit;
      end;

      // Verifica se é RM
      Q.Close;
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select 1 ' +
                '  from tab_reprodutor_multiplo trm, ' +
                '       tab_fazenda tf ' +
                ' where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor ' +
                '   and trm.cod_fazenda_manejo = tf.cod_fazenda ' +
                '   and trm.cod_reprodutor_multiplo_manejo = :cod_manejo ');
      if SglFazenda <> '' then begin
        Q.SQL.Add('   and tf.sgl_fazenda = :sgl_fazenda ');
      end;
      Q.SQL.Add('   and tf.cod_pessoa_produtor = :cod_pessoa_produtor ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_manejo').AsString := CodManejo;
      if SglFazenda <> '' then begin
         Q.ParamByName('sgl_fazenda').AsString := SglFazenda;
      end;
      Q.Open;
      if not Q.IsEmpty then begin
        IndTipo := 'R';
        Exit;
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1163, Self.ClassName, 'VerificaTipoPai', [E.Message]);
        Result := -1163;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.Pesquisar(CodFazendaManejo: Integer; CodManejoInicio,
  CodManejoFim, CodAnimalCertificadora: String;
  CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov, CodSisBovInicio,
  CodSisBovFim: Integer; CodSituacaoSisbov: String;
  DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
  CodFazendaNascimento: Integer; DtaCompraInicio, DtaCompraFim: TDateTime;
  CodPessoaSecundariaCriador: Integer; NomAnimal,
  DesApelido: String; CodAptidao: Integer; CodRaca, IndSexo,
  CodOrigem, SglFazendaPai: String; CodAnimalPai,
  DesApelidoPai, SglFazendaMae: String; CodAnimalMae,
  IndAnimalCastrado: String; CodRegimeAlimentar: Integer;
  CodCategoria: String; IndConsiderarExterno:String; CodAssociacao, CodGrauSangue: Integer;
  NumRGD: String; CodTipoLugar: Integer; CodLocal,
  CodLote: String; CodFazendaCorrente: Integer;
  NumImovelCorrente: String; CodLocalizacaoCorrente: Integer;
  NumCPFCNPJCorrente, IndCadastroEfetivado, CodOrdenacao: String;
  CodEvento: Integer; IndEventoAplicado, IndAnimaisEvento: String;
  CodReprodutorMultiplo: Integer; IndTrazerComposicaoRacial, IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialIncio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialIncio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialIncio4, QtdCompRacialFim4: Double;
  IndAptoCobertura, IndAutenticacao: String; CodEstacaoMonta: Integer;
  IndAnimalSemTecnico: String; CodPessoaTecnico: Integer; IndRestringeTecnico: String): Integer;
var
  X, Max : Integer;
  IndTipo: String;
  Restringe_animais :String; //no caso de evento de estação de monta não
                             //traz os animais que receberam este tipo de
                             //evento no mesmo período.
  CodTipoEvento : Integer;
  DtaEvento, DtaFimEventoNascimento: TDateTime;
  VerificaCobertura: String;
  QtdIdadeMinimaDesmame, QtdIdadeMaximaDesmame, QtdDiasDiagnosticoGestacao: Integer;
  dta_inicio_evento, dta_fim_evento, DtaProvavelMonta :TDateTime;
  CodEstacaoMontaT: Integer;
  CodTecnico: Integer;
  EfetivaAnimais: Boolean;
begin
Result := -1;
  Restringe_animais := 'N';
  CodTipoEvento := 0;
  VerificaCobertura := 'N';

  if not Inicializado then
  begin
    RaiseNaoInicializado('Pesquisar');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(233) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, 'Pesquisar', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, 'Pesquisar', []);
    Result := -307;
    Exit;
  end;

  //Verifica se o CodEvento e CodReprodutorMultiplo foram informados
  if (CodEvento > 0) and (CodReprodutorMultiplo > 0) then
  begin
    Mensagens.Adicionar(1374, Self.ClassName, 'Pesquisar', []);
    Result := -1374;
    Exit;
  end;

  EfetivaAnimais := (LeftStr(IntToStr(CodTipoLugar), 1) = '9');

  if CodTipoLugar > 0 then
  begin
    CodTipoLugar   := StrToIntDef(RightStr(IntToStr(CodTipoLugar), 1), -1);
  end;

  // Guarda valores da última pesquisa
  if (CodFazendaManejo <> FPCodFazendaManejo) or
     (CodManejoInicio <> FPCodManejoInicio) or
     (CodManejoFim <> FPCodManejoFim) or
     (CodAnimalCertificadora <> FPCodAnimalCertificadora) or
     (CodPaisSisBov <> FPCodPaisSisBov) or
     (CodEstadoSisBov <> FPCodEstadoSisBov) or
     (CodMicroRegiaoSisBov <> FPCodMicroRegiaoSisBov) or
     (CodSisBovInicio <> FPCodSisBovInicio) or
     (CodSisBovFim <> FPCodSisBovFim) or
     (CodSituacaoSisbov <> FPCodSituacaoSisbov) or
     (DtaNascimentoInicio <> FPDtaNascimentoInicio) or
     (DtaNascimentoFim <> FPDtaNascimentoFim) or
     (CodFazendaNascimento <> FPCodFazendaNascimento) or
     (DtaCompraInicio <> FPDtaCompraInicio) or
     (DtaCompraFim <> FPDtaCompraFim) or
     (CodPessoaSecundariaCriador <> FPCodPessoaSecundariaCriador) or
     (NomAnimal <> FPNomAnimal) or
     (DesApelido <> FPDesApelido) or
     (CodAptidao <> FPCodAptidao) or
     (CodRaca <> FPCodRaca) or
     (IndSexo <> FPIndSexo) or
     (CodOrigem <> FPCodOrigem) or
     (SglFazendaPai <> FPSglFazendaPai) or
     (CodAnimalPai <> FPCodAnimalPai) or
     (DesApelidoPai <> FPDesApelidoPai) or
     (SglFazendaMae <> FPSglFazendaMae) or
     (CodAnimalMae <> FPCodAnimalMae) or
     (IndAnimalCastrado <> FPIndAnimalCastrado) or
     (CodRegimeAlimentar <> FPCodRegimeAlimentar) or
     (CodCategoria <> FPCodCategoria) or
     (IndConsiderarExterno <> FPIndConsiderarExterno) or
     (CodAssociacao <> FPCodAssociacao) or
     (CodGrauSangue <> FPCodGrauSangue) or
     (NumRGD <> FPNumRGD) or
     (CodTipoLugar <> FPCodTipoLugar) or
     (CodLocal <> FPCodLocal) or
     (CodLote <> FPCodLote) or
     (CodFazendaCorrente <> FPCodFazendaCorrente) or
     (NumImovelCorrente <> FPNumImovelCorrente) or
     (CodLocalizacaoCorrente <> FPCodLocalizacaoCorrente) or
     (NumCPFCNPJCorrente <> FPNumCPFCNPJCorrente) or
     (IndCadastroEfetivado <> FPIndCadastroEfetivado) or
     (CodOrdenacao <> FPCodOrdenacao) or
     (CodEvento <> FPCodEvento) or
     (IndEventoAplicado <> FPIndEventoAplicado) or
     (IndAnimaisEvento <> FPIndAnimaisEvento) or
     (CodReprodutorMultiplo <> FPCodReprodutorMultiplo) or
     (IndTrazerComposicaoRacial <> FPIndTrazerComposicaoRacial) or
     (IndAgrupRaca1 <> FPIndAgrupRaca1) or
     (CodRaca1 <> FPCodRaca1) or
     (QtdCompRacialIncio1 <> FPQtdCompRacialInicio1) or
     (QtdCompRacialFim1 <> FPQtdCompRacialFim1) or
     (IndAgrupRaca2 <> FPIndAgrupRaca2) or
     (CodRaca2 <> FPCodRaca2) or
     (QtdCompRacialInicio2 <> FPQtdCompRacialInicio2) or
     (QtdCompRacialFim2 <> FPQtdCompRacialFim2) or
     (IndAgrupRaca3 <> FPIndAgrupRaca3) or
     (CodRaca3 <> FPCodRaca3) or
     (QtdCompRacialIncio3 <> FPQtdCompRacialInicio3) or
     (QtdCompRacialFim3 <> FPQtdCompRacialFim3) or
     (IndAgrupRaca4 <> FPIndAgrupRaca4) or
     (CodRaca4 <> FPCodRaca4) or
     (QtdCompRacialIncio4 <> FPQtdCompRacialInicio4) or
     (QtdCompRacialFim4 <> FPQtdCompRacialFim4) or
     (IndAptoCobertura <> FPIndAptoCobertura) or
     (IndAutenticacao <> FPIndAutenticacao) or
     (CodEstacaoMonta <> FPCodEstacaoMonta) or
     (CodPessoaTecnico <> FPCodPessoaTecnico)  then
  begin
    FPCodFazendaManejo := CodFazendaManejo;
    FPCodManejoInicio := CodManejoInicio;
    FPCodManejoFim := CodManejoFim;
    FPCodAnimalCertificadora := CodAnimalCertificadora;
    FPCodPaisSisBov := CodPaisSisBov;
    FPCodEstadoSisBov := CodEstadoSisBov;
    FPCodMicroRegiaoSisBov := CodMicroRegiaoSisBov;
    FPCodSisBovInicio := CodSisBovInicio;
    FPCodSisBovFim := CodSisBovFim;
    FPCodSituacaoSisbov := CodSituacaoSisbov;
    FPDtaNascimentoInicio := DtaNascimentoInicio;
    FPDtaNascimentoFim := DtaNascimentoFim;
    FPCodFazendaNascimento := CodFazendaNascimento;
    FPDtaCompraInicio := DtaCompraInicio;
    FPDtaCompraFim := DtaCompraFim;
    FPCodPessoaSecundariaCriador := CodPessoaSecundariaCriador;
    FPNomAnimal := NomAnimal;
    FPDesApelido := DesApelido;
    FPCodAptidao := CodAptidao;
    FPCodRaca := CodRaca;
    FPIndSexo := IndSexo;
    FPCodOrigem := CodOrigem;
    FPSglFazendaPai := SglFazendaPai;
    FPCodAnimalPai := CodAnimalPai;
    FPDesApelidoPai := DesApelidoPai;
    FPSglFazendaMae := SglFazendaMae;
    FPCodAnimalMae := CodAnimalMae;
    FPIndAnimalCastrado := IndAnimalCastrado;
    FPCodRegimeAlimentar := CodRegimeAlimentar;
    FPCodCategoria := CodCategoria;
    FPIndConsiderarExterno := IndConsiderarExterno;
    FPCodAssociacao := CodAssociacao;
    FPCodGrauSangue := CodGrauSangue;
    FPNumRGD := NumRGD;
    FPCodTipoLugar := FPCodTipoLugar;
    FPCodLocal := CodLocal;
    FPCodLote := CodLote;
    FPCodFazendaCorrente := CodFazendaCorrente;
    FPNumImovelCorrente := NumImovelCorrente;
    FPCodLocalizacaoCorrente := CodLocalizacaoCorrente;
    FPNumCPFCNPJCorrente := NumCPFCNPJCorrente;
    FPIndCadastroEfetivado := IndCadastroEfetivado;
    FPCodOrdenacao := CodOrdenacao;
    FPCodEvento := CodEvento;
    FPIndEventoAplicado := IndEventoAplicado;
    FPIndAnimaisEvento := IndAnimaisEvento;
    FPCodReprodutorMultiplo := CodReprodutorMultiplo;
    FPIndTrazerComposicaoRacial := IndTrazerComposicaoRacial;
    FPIndAgrupRaca1 := IndAgrupRaca1;
    FPCodRaca1 := CodRaca1;
    FPQtdCompRacialInicio1 := QtdCompRacialIncio1;
    FPQtdCompRacialFim1 := QtdCompRacialFim1;
    FPIndAgrupRaca2 := IndAgrupRaca2;
    FPCodRaca2 := CodRaca2;
    FPQtdCompRacialInicio2 := QtdCompRacialInicio2;
    FPQtdCompRacialFim2 := QtdCompRacialFim2;
    FPIndAgrupRaca3 := IndAgrupRaca3;
    FPCodRaca3 := CodRaca3;
    FPQtdCompRacialInicio3 := QtdCompRacialIncio3;
    FPQtdCompRacialFim3 := QtdCompRacialFim3;
    FPIndAgrupRaca4 := IndAgrupRaca4;
    FPCodRaca4 := CodRaca4;
    FPQtdCompRacialInicio4 := QtdCompRacialIncio4;
    FPQtdCompRacialFim4 := QtdCompRacialFim4;
    FPIndAptoCobertura := IndAptoCobertura;
    FPIndAutenticacao := IndAutenticacao;
    FPCodEstacaoMonta := CodEstacaoMonta;
    FPCodPessoaTecnico := CodPessoaTecnico;
  end
  else
  begin
    if Query.Active then
    begin
      Result := 0;
      Exit;
    end;
  end;

  if (CodEvento <= 0) and (CodReprodutorMultiplo <= 0) then
  begin
    IndEventoAplicado := '';
    IndAnimaisEvento := '';
  end;

  if not((IndEventoAplicado = 'A') or (IndEventoAplicado = 'S')) then
  begin
    IndAnimaisEvento := '';
  end;

  if CodTipoLugar = 1 then
  begin
    NumCPFCNPJCorrente     := '';
    NumImovelCorrente      := '';
    CodLocalizacaoCorrente := -1;
  end
  else if CodTipoLugar = 2 then
  begin
    NumCPFCNPJCorrente := '';
    CodLocal           := '';
    CodLote            := '';
    CodFazendaCorrente := -1;
  end
  else if CodTipoLugar = 3 then
  begin
    NumImovelCorrente      := '';
    CodLocalizacaoCorrente := -1;
    CodLocal               := '';
    CodLote                := '';
    CodFazendaCorrente     := -1;
  end
  else if CodTipoLugar = 23 then
  begin
    CodLocal           := '';
    CodLote            := '';
    CodFazendaCorrente := -1;
  end
  else
  begin
    NumCPFCNPJCorrente     := '';
    NumImovelCorrente      := '';
    CodLocalizacaoCorrente := -1;
    CodLocal               := '';
    CodLote                := '';
    CodFazendaCorrente     := -1;
  end;

  if (CodLocal <> '') or (CodLote <> '') then
  begin
    CodFazendaCorrente := -1;
  end;

  // Obtem parâmetro com o máximo número de animais para pesquisa
  try
    Max := StrToInt(ValorParametro(24));
  except
    Result := -1;
    Exit;
  end;

  DtaEvento := date;
  CodEstacaoMontaT := 0;
  if CodEvento > 0 then
  begin
    Query.Close;
    {$IFDEF MSSQL}
    Query.SQL.Clear;
    Query.SQL.Add(' select cod_tipo_evento, dta_inicio, dta_fim, cod_evento_associado, cod_tipo_evento ');
    Query.SQL.Add(' from tab_evento ');
    Query.SQL.Add(' where cod_evento = :cod_evento ');
    Query.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
    {$ENDIF}
    Query.ParamByName('cod_evento').asinteger := CodEvento;
    Query.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
    Query.open;

    if not Query.IsEmpty then
    begin
      DtaEvento := Query.FieldbyName('dta_inicio').asdatetime;
      DtaFimEventoNascimento := Trunc(Query.FieldByName('dta_fim').AsDateTime) + 1;
    end;
    case Query.FieldByName('cod_tipo_evento').asinteger of
      1:
      begin
        CodTipoEvento := 1;
      end;
      3:
      begin
        CodTipoEvento := 3;
      end;
      4:
      begin
        CodTipoEvento := 4;
      end;
      5:
      begin
        CodTipoEvento := 5;
      end;
      6:
      begin
        CodTipoEvento := 6;
      end;
      7:
      begin
        CodTipoEvento := 7;
      end;
      8:
      begin
        CodTipoEvento := 8;
      end;
      9:
      begin
        CodTipoEvento := 9;
      end;
      10:
      begin
        CodTipoEvento := 10;
      end;
      11:
      begin
        CodTipoEvento := 11;
      end;
      12:
      begin
        CodTipoEvento := 12;
      end;
      15:
      begin
        CodTipoEvento := 15;
      end;
      17:
      begin
        CodTipoEvento := 17;
      end;
      18:
      begin
        CodTipoEvento := 18;
      end;
      19:
      begin
        CodTipoEvento := 19;
      end;
      20:
      begin
        CodTipoEvento := 20;
      end;
      21:
      begin
        CodTipoEvento := 21;
      end;
      22:
      begin
        CodTipoEvento := 22;
      end;
      25:
      begin
        CodTipoEvento := 25;
      end;
      29:
      begin
        CodTipoEvento := 29;
      end;
      30:
      begin
        CodTipoEvento := 30;
      end;
      31:
      begin
        CodTipoEvento := 31;
      end;
      32:
      begin
        CodTipoEvento := 32;
      end;
      33:
      begin
        CodTipoEvento := 33;
      end;
      2:
      begin
        restringe_animais := 'S';
        CodTipoEvento := 2;
        Query.SQL.Clear;
        Query.SQL.Add(' select qtd_idade_minima_desmame, qtd_idade_maxima_desmame ');
        Query.SQL.Add(' from tab_produtor where cod_pessoa_produtor =:cod_pessoa_produtor ');
        Query.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
        Query.Open;
        QtdIdadeMinimaDesmame := Query.FieldByName('qtd_idade_minima_desmame').asinteger;
        QtdIdadeMaximaDesmame := Query.FieldByName('qtd_idade_maxima_desmame').asinteger;
      end;
      16:
      begin
        CodTipoEvento := 16;
      end;

      24:
      begin
        dta_inicio_evento := Query.FieldByName('dta_inicio').asdatetime;
        dta_fim_evento := Query.FieldByName('dta_fim').asdatetime;
        restringe_animais := 'S';
        CodTipoEvento := 24;
      end;

      23,26,27:
      begin
        CodTipoEvento := Query.Fieldbyname('cod_tipo_evento').asinteger;
        VerificaCobertura := 'S';
        restringe_animais := 'S';
        CodEstacaoMontaT := Query.Fieldbyname('cod_evento_associado').asinteger;
      end;

      28:
      begin
        CodTipoEvento := 28;
        Query.SQL.Clear;
        Query.SQL.Add(' select ind_estacao_monta, qtd_dias_diagnostico_gestacao ');
        Query.SQL.Add(' from tab_produtor where cod_pessoa_produtor =:cod_pessoa_produtor ');
        Query.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
        Query.Open;
        if Query.FieldByName('ind_estacao_monta').asString = 'S' then
        begin
           restringe_animais := 'S';
           QtdDiasDiagnosticoGestacao := Query.Fieldbyname('qtd_dias_diagnostico_gestacao').asinteger;
           DtaProvavelMonta := DtaEvento - QtdDiasDiagnosticoGestacao;
           // define a estação de monta
           {$IFDEF MSSQL}
           Query.SQL.Clear;
           Query.SQL.Add(' select min(dta_inicio) dta_inicio, max(dta_fim) dta_fim');
           Query.SQL.Add(' from tab_evento ');
           Query.SQL.Add(' where ((dta_inicio <= :dta_provavel_monta ');
           Query.SQL.Add(' and   dta_inicio >= :dta_limite) ');
           Query.SQL.Add(' or    (dta_fim <= :dta_provavel_monta ');
           Query.SQL.Add(' and   dta_fim >= :dta_limite)) ');
           Query.SQL.Add(' and   cod_tipo_evento = 24 ');
           Query.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
           {$ENDIF}
           Query.ParamByName('dta_provavel_monta').asdatetime := DtaProvavelMonta;
           Query.ParamByName('dta_limite').asdatetime := DtaProvavelMonta - Strtoint(ValorParametro(60));
           Query.ParamByName('cod_pessoa_produtor').asInteger := Conexao.CodProdutorTrabalho;
           Query.Open;
           if Query.IsEmpty then
           begin
             Exit;
           end
           else
           begin
             dta_inicio_evento := Query.Fieldbyname('dta_inicio').asdatetime;
             dta_fim_evento := Query.Fieldbyname('dta_fim').asdatetime;
           end;
         end;
      end;
    end;
  end;

  Query.Close;
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select top ' + IntToStr(Max) + ' ta.cod_pessoa_produtor as CodPessoaProdutor '+
                '     , ta.cod_animal as CodAnimal '+
                '     , tf.sgl_fazenda as SglFazendaManejo '+
                '     , ta.cod_animal_manejo as CodAnimalManejo '+
                '     , ta.cod_animal_certificadora as CodCertificadora '+
                '     , case ta.cod_pais_sisbov ' +
                '       when null then null ' +
                '       else right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) end as CodPaisSisBov '+
                '     , case ta.cod_animal_sisbov '+
                '       when null then '''' ' +
                '       else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '+
                '       case ta.cod_micro_regiao_sisbov when -1 then '''' ' +
                '            else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end + ' +
                '       right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '+
                '       right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov '+
                '     , ta.cod_situacao_sisBov as CodSituacaoSisBov ' +
                '     , ta.des_apelido as DesApelido ' +
                '     , ta.cod_arquivo_sisbov as CodArquivoSisbov ' +
                '     , ta.cod_pessoa_tecnico as CodPessoaTecnico ' +
                '     , tp.nom_reduzido_pessoa as NomReduzidoPessoa ' +
                '     , tr.sgl_raca as SglRaca ' +
//                '     , ta.cod_raca as CodRaca '+
                '     , ta.ind_sexo as IndSexo ' +
//                '     , ta.cod_tipo_origem as CodOrigem '+
                '     , tto.sgl_tipo_origem as SglOrigem ' +
//                '     , ta.cod_categoria_animal as CodCategoria '+
                '     , tc.sgl_categoria_animal as SglCategoria '+
//                '     , ta.cod_local_corrente as CodLocal '+
                '     , tl.sgl_local as SglLocal '+
//                '     , ta.cod_lote_corrente as CodLote '+
                '     , tlt.sgl_lote as SglLote '+
                '     , case isnull(ta.dta_efetivacao_cadastro, 0) '+
                '      when 0 then ''N''  '+
                '      else ''S'' '+
                '      end as IndCadastroEfetivado '+
                '     , tfc.sgl_fazenda as SglFazendaCorrente '+
//                '     , ta.cod_tipo_lugar as CodTipoLugar '+
                '     , tlu.sgl_tipo_lugar as SglTipoLugar ');
  if CodEvento > 0 then
  begin
    if IndEventoAplicado = 'S' then
    begin
      Query.SQL.Add('     , ''S'' as IndEventoAplicado ');
    end
    else
    begin
      if IndEventoAplicado = 'N' then
      begin
        Query.SQL.Add('     , ''N'' as IndEventoAplicado ')
      end
      else
      begin
        Query.SQL.Add('     , case isnull(tev.dta_aplicacao_evento, 0) '+
                      '        when 0 then ''N''  '+
                      '       else ''S'' '+
                      '       end as IndEventoAplicado ');
      end;
    end;
  end
  else if CodReprodutorMultiplo <= 0 then
  begin
    Query.SQL.Add('     ,''N'' as IndEventoAplicado ');
  end;

  if CodReprodutorMultiplo > 0 then
  begin
    if IndEventoAplicado = 'S' then
    begin
      Query.SQL.Add('     , ''S'' as IndEventoAplicado ');
    end
    else
    begin
      if IndEventoAplicado = 'N' then
      begin
        Query.SQL.Add('     , ''N'' as IndEventoAplicado ')
      end
      else
      begin
        Query.SQL.Add('     , case isnull(trm.cod_reprodutor_multiplo, 0) '+
                      '         when 0 then ''N''  '+
                      '       else ''S'' '+
                      '       end as IndEventoAplicado ');
      end;
    end;
  end
  else if CodEvento <= 0 then
  begin
    Query.SQL.Add('     ,''N'' as IndEventoAplicado ');
  end;

  if (CodEvento > 0) and (IndEventoAplicado <> 'N') then
  begin
    Query.SQL.Add('    ,tev.qtd_peso_animal as QtdPesoAnimal ');
  end;

  if (uppercase(IndTrazerComposicaoRacial)='S') then
  begin
    Query.SQL.Add('    ,dbo.fnt_composicao_racial(ta.cod_animal,ta.cod_pessoa_produtor) as DesComposicaoRacial ');
  end;

  Query.SQL.Add(' , ta.ind_apto_cobertura as IndAptoCobertura ');

  if (CodEvento > 0) and (IndEventoAplicado <> 'N') then
  begin
    Query.SQL.Add('    ,tev.ind_vaca_prenha as IndVacaPrenha ');
    Query.SQL.Add('    ,tev.ind_touro_apto as IndTouroApto ');
  end
  else
  begin
    Query.SQL.Add('    ,null as IndVacaPrenha ');
    Query.SQL.Add('    ,null as IndTouroApto ');
  end;

  Query.SQL.Add('  , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, :data_referencia)) as IdadeAnimal ');
  if CodTipoEvento = 28 then
  begin
    Query.SQL.Add('  ,dbo.fnt_dias_ultima_monta(ta.cod_animal, ta.cod_pessoa_produtor,:dta_evento_monta) DiasUltimaMonta ')
  end
  else
  begin
    Query.SQL.Add('  ,null DiasUltimaMonta ');
  end;

  Query.SQL.Add('  from tab_animal as ta with (nolock) '+
                '     , tab_fazenda as tf with (nolock) '+
                '     , tab_fazenda as tfc with (nolock) '+
                '     , tab_especie as te with (nolock)'+
                '     , tab_raca as tr with (nolock)'+
                '     , tab_tipo_origem as tto with (nolock)'+
                '     , tab_fazenda as tf2 with (nolock) '+
                '     , tab_categoria_animal as tc with (nolock)'+
                '     , tab_local as tl with (nolock) '+
                '     , tab_lote as tlt with (nolock) '+
                '     , tab_pessoa as tp with (nolock) '+
                '     , tab_tipo_lugar as tlu with (nolock)');
  if (CodReprodutorMultiplo > 0) and (IndEventoAplicado <> 'N') then
  begin
    Query.SQL.Add('   , tab_animal_reprodutor_multiplo as trm with (nolock) ');
  end;

  if IndAgrupRaca1 = 'N' then
  begin
    Query.SQL.Add('   , tab_composicao_racial as tcr with (nolock) ');
  end;

  if IndAgrupRaca2 = 'N' then
  begin
    Query.SQL.Add('   , tab_composicao_racial as tcr2 with (nolock) ');
  end;

  if IndAgrupRaca3 = 'N' then
  begin
    Query.SQL.Add('   , tab_composicao_racial as tcr3 with (nolock) ');
  end;

  if IndAgrupRaca4 = 'N' then
  begin
    Query.SQL.Add('   , tab_composicao_racial as tcr4 with (nolock) ');
  end;

  if ((CodEvento > 0) and (IndEventoAplicado <> 'N')) or (CodEstacaoMonta > 0)  then
  begin
    Query.SQL.Add('    , tab_animal_evento as tev with (nolock) ');
    if(IndEventoAplicado = 'S')  then
    begin
      Query.SQL.Add('  , tab_evento as tevt with (nolock) ');
    end;
  end;

  Query.SQL.Add(' where ta.dta_fim_validade is null ' + 
                '          and ta.cod_pessoa_produtor = :CodPessoaProdutor ' +
                '          and ta.cod_pessoa_tecnico *= tp.cod_pessoa '+
                '          and ta.cod_fazenda_manejo *= tf.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor '+
                '          and ta.cod_fazenda_corrente *= tfc.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tfc.cod_pessoa_produtor '+
                '          and ta.cod_especie = te.cod_especie '+
                '          and ta.cod_raca = tr.cod_raca '+
                '          and ta.cod_tipo_origem = tto.cod_tipo_origem '+
                '          and ta.cod_fazenda_nascimento *= tf2.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tf2.cod_pessoa_produtor '+
                '          and ta.cod_categoria_animal *= tc.cod_categoria_animal ');

  CodTecnico := CodPessoaTecnico;

  if (Conexao.CodPapelUsuario = 3) and (CodPessoaTecnico > 0) then
  begin
    CodTecnico := Conexao.CodPessoa;
  end;

  if (Conexao.CodPapelUsuario = 9) then
  begin
    Query.SQL.Add('        and ( ta.cod_pessoa_tecnico in ( select top ' + IntToStr(Max) + ' ttp.cod_pessoa_tecnico ');
    Query.SQL.Add('                                           from tab_tecnico_produtor ttp ');
    Query.SQL.Add('                                              , tab_tecnico tt');
    Query.SQL.Add('                                          where tt.cod_pessoa_tecnico = ttp.cod_pessoa_tecnico');
    Query.SQL.Add('                                            and tt.cod_pessoa_gestor  = :cod_pessoa_gestor ');
    Query.SQL.Add('                                            and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
    Query.SQL.Add('                                            and tt.dta_fim_validade is null ');
    Query.SQL.Add('                                            and ttp.dta_fim_validade is null )');
    Query.SQL.Add('             or ta.cod_pessoa_tecnico is null ) ');
    Query.ParamByName('cod_pessoa_gestor').AsInteger := Conexao.CodPessoa;
    Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
  end;

  if IndRestringeTecnico = 'S' then
  begin
    if (IndAnimalSemTecnico = 'N') then
    begin
       if CodPessoaTecnico > 0 then
       begin
          Query.SQL.Add('      and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ');
       end
       else
       begin
         if (Conexao.CodPapelUsuario = 3) then
         begin
           Query.SQL.Add('      and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                         '       or  ta.cod_pessoa_tecnico is null)');
         end;
       end;
    end
    else
    begin
       Query.SQL.Add('      and ta.cod_pessoa_tecnico is null');
    end;
  end;

//  if (CodLocal <> '') then
//  begin
//    Query.SQL.Add('          and ta.cod_local_corrente = tl.cod_local ');
//    Query.SQL.Add('          and ta.cod_pessoa_produtor = tl.cod_pessoa_produtor ');
//    Query.SQL.Add('          and ta.cod_fazenda_corrente = tl.cod_fazenda ');
//  end
//  else
//  begin
    Query.SQL.Add('          and ta.cod_local_corrente *= tl.cod_local ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor ');
    Query.SQL.Add('          and ta.cod_fazenda_corrente *= tl.cod_fazenda ');
//  end;

  if (CodLote <> '') then
  begin
    Query.SQL.Add('          and ta.cod_lote_corrente = tlt.cod_lote ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor = tlt.cod_pessoa_produtor ');
    Query.SQL.Add('          and ta.cod_fazenda_corrente = tlt.cod_fazenda ');
  end
  else
  begin
    Query.SQL.Add('          and ta.cod_lote_corrente *= tlt.cod_lote ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor ');
    Query.SQL.Add('          and ta.cod_fazenda_corrente *= tlt.cod_fazenda ');
  end;

  if (CodEvento > 0) then
  begin
    Query.SQL.Add('          and ta.dta_nascimento < :dta_fim_evento_nascimento ');
    if IndEventoAplicado = 'S' then
    begin
      Query.SQL.Add('          and tev.cod_evento  = tevt.cod_evento ');
      Query.SQL.Add('          and tevt.cod_evento = :CodEvento ');
      Query.SQL.Add('          and ta.cod_animal = tev.cod_animal ');
      Query.SQL.Add('          and exists (select distinct tev.cod_animal from  tab_evento tet ');
      Query.SQL.Add('          where tev.cod_pessoa_produtor = :CodPessoaProdutor ');
      Query.SQL.Add('          and   tev.cod_evento = tet.cod_evento ');
      Query.SQL.Add('          and tet.cod_tipo_evento = :Cod_Tipo_Evento ) ');
    end
    else
    begin
      if IndEventoAplicado = 'N' then
      begin
        Query.SQL.Add('          and ta.cod_animal not in ( ');
        Query.SQL.Add('                   select distinct tae1.cod_animal ');
        Query.SQL.Add('                  	from tab_evento te1, tab_animal_evento tae1 ');
        Query.SQL.Add('          		where te1.cod_pessoa_produtor = :CodPessoaProdutor ');
        Query.SQL.Add('          		and   te1.cod_tipo_evento = :Cod_Tipo_Evento ');
        Query.SQL.Add('          		and   te1.cod_evento = tae1.cod_evento ');
        Query.SQL.Add('          		and   tae1.cod_pessoa_produtor = :CodPessoaProdutor ) ');
      end
      else
      begin
        Query.SQL.Add('          and ta.cod_pessoa_produtor *= tev.cod_pessoa_produtor ');
        Query.SQL.Add('          and ta.cod_animal *= tev.cod_animal ');
        Query.SQL.Add('          and tev.cod_evento = :CodEvento ');
      end;
    end;
  end;

  if (CodReprodutorMultiplo > 0) then
  begin
    if IndEventoAplicado = 'S' then
    begin
       Query.SQL.Add('          and ta.cod_pessoa_produtor = trm.cod_pessoa_produtor ');
       Query.SQL.Add('          and ta.cod_animal = trm.cod_animal ');
       Query.SQL.Add('          and trm.cod_reprodutor_multiplo = :CodReprodutorMultiplo ');
    end
    else
    begin
      if IndEventoAplicado = 'N' then
      begin
        Query.SQL.Add('          and ta.cod_animal not in ( ');
        Query.SQL.Add('          select cod_animal from tab_animal_reprodutor_multiplo ');
        Query.SQL.Add('          where cod_reprodutor_multiplo =:CodReprodutorMultiplo ');
        Query.SQL.Add('          and cod_pessoa_produtor =:CodPessoaProdutor) ');
      end
      else
      begin
        Query.SQL.Add('          and ta.cod_pessoa_produtor *= trm.cod_pessoa_produtor ');
        Query.SQL.Add('          and ta.cod_animal *= trm.cod_animal ');
        Query.SQL.Add('          and trm.cod_reprodutor_multiplo = :CodReprodutorMultiplo ');
      end;
    end;
  end;

  if (CodTipoLugar <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_tipo_lugar = tlu.cod_tipo_lugar ');
  end
  else
  begin
    Query.SQL.Add('          and ta.cod_tipo_lugar *= tlu.cod_tipo_lugar ');
  end;

  if IndConsiderarExterno = 'N' then
  begin
    if (CodOrigem <> '') then
    begin
      Query.SQL.Add('          and (ta.cod_tipo_origem in (' + CodOrigem + ') and ta.cod_tipo_origem <> 4) ');
    end
    else
    begin
      Query.SQL.Add('          and ta.cod_tipo_origem <> 4');
    end;
  end
  else
  begin
    if (CodOrigem <> '') then
    begin
      Query.SQL.Add('          and (ta.cod_tipo_origem in (' + CodOrigem + ') or ta.cod_tipo_origem = 4) ');
    end;
  end;

//  if (CodReprodutorMultiplo > 0) then begin
//    Query.SQL.Add('          and ta.cod_reprodutor_multiplo <> ' + IntToStr(CodReprodutorMultiplo));
//  end;

  if CodFazendaManejo <> -1 then
  begin
    Query.SQL.Add('          and ta.cod_fazenda_manejo = :CodFazendaManejo');
  end;

  if (CodManejoInicio <> '') and (CodManejoFim <> '') then
  begin
    Query.SQL.Add('          and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim');
  end;

  if (CodManejoInicio <> '') and (CodManejoFim = '') then
  begin
    Query.SQL.Add('          and ta.cod_animal_manejo >= :CodManejoInicio ');
  end;

  if (CodManejoInicio = '') and (CodManejoFim <> '') then
  begin
    Query.SQL.Add('          and ta.cod_animal_manejo <= :CodManejoFim ');
  end;

  if (CodAnimalCertificadora <> '') then
  begin
    Query.SQL.Add('          and ta.cod_animal_certificadora =:CodAnimalCertificadora');
  end;

  if (CodPaisSisBov <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_pais_sisbov = :CodPaisSisBov');
  end;

  if (CodEstadoSisBov <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_estado_sisbov = :CodEstadoSisBov');
  end;

  if (CodMicroRegiaoSisBov <> -1) then
  begin
    if (CodMicroRegiaoSisBov = 88) then //Parametro passado pelo ASP, indicando que o 'filtro deverá ser por micro regiao -1
    begin
      Query.SQL.Add('          and ta.cod_micro_regiao_sisbov = -1');
    end
    else
    begin
      Query.SQL.Add('          and ta.cod_micro_regiao_sisbov = :CodMicroRegiaoSisBov');
    end;
  end;

  if (CodSisBovInicio <> -1) and (CodSisBovFim <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_animal_sisbov between :CodSisBovInicio and :CodSisBovFim');
  end;

  if (CodSisBovInicio <> -1) and (CodSisBovFim < 0) then
  begin
    Query.SQL.Add('          and ta.cod_animal_sisbov >= :CodSisBovInicio ');
  end;

  if (CodSisBovInicio < 0) and (CodSisBovFim <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_animal_sisbov <= :CodSisBovFim ');
  end;

  if (CodSituacaoSisBov <> '') then
  begin
    Query.SQL.Add('          and ta.cod_situacao_sisbov = :CodSituacaoSisBov');
  end;

  if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
  begin
    Query.SQL.Add('          and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim');
  end;

  if (CodFazendaNascimento <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_fazenda_nascimento = :CodFazendaNascimento');
  end;

  if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then
  begin
    Query.SQL.Add('          and ta.dta_compra between :DtaCompraInicio and :DtaCompraFim');
  end;

  if (CodPessoaSecundariaCriador <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_pessoa_secundaria_criador = :CodPessoaSecundariaCriador');
  end;

  if (NomAnimal <> '') then
  begin
    Query.SQL.Add('          and ta.nom_animal like :NomAnimal');
  end;

  if (DesApelido <> '') then
  begin
    Query.SQL.Add('          and ta.des_apelido like :DesApelido');
  end;

  if (CodAptidao <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_aptidao = :CodAptidao');
  end;

  if (CodRaca <> '') then
  begin
    Query.SQL.Add('          and ta.cod_raca in (' + CodRaca + ')');
  end;

  if (IndSexo = 'M') or (IndSexo = 'F') then
  begin
    Query.SQL.Add('          and ta.ind_sexo =:IndSexo');
  end;

  // Se foram informados dados de manejo do pai, verifica se trata-se de um touro ou de um RM
  // para posteriormente montar a condição correta no SQL. Se foi informado o apelido, assume-se
  // que o pai é um touro
  if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then
  begin
//    if DesApelidoPai = '' then begin
    Result := VerificaTipoPai(SglFazendaPai, CodAnimalPai, IndTipo);
    if Result < 0 then
    begin
      Exit;
    end;
//    end else begin
//      IndTipo := 'T';
//  end;

    if IndTipo = 'T' then
    begin
      Query.SQL.Add('          and ta.cod_animal_pai in');
      Query.SQL.Add('              (select cod_animal ');
      Query.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      Query.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Query.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
      Query.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');

      if (SglFazendaPai <> '') then
      begin
        Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;

      if (CodAnimalPai <> '') then
      begin
        Query.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
      end;

      if (DesApelidoPai <> '') then
      begin
        Query.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
      end;

      Query.SQL.Add(') ');

    end
    else if IndTipo = 'E' then
    begin
      Query.SQL.Add('          and ta.cod_animal_pai in');
      Query.SQL.Add('              (select cod_animal ');

      if (SglFazendaPai <> '') then
      begin
        Query.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      end
      else
      begin
        Query.SQL.Add('              from tab_animal as ta ');
      end;

      Query.SQL.Add('              where ta.cod_tipo_origem = 4 ');
      Query.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');

      if (SglFazendaPai <> '') then
      begin
        Query.SQL.Add('                and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
        Query.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
        Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;

      if (CodAnimalPai <> '') then
      begin
        Query.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
      end;

      if (DesApelidoPai <> '') then
      begin
        Query.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
      end;
      Query.SQL.Add(') ');

    end
    else
    begin
      Query.SQL.Add('          and ta.cod_reprodutor_multiplo in');
      Query.SQL.Add('              (select cod_reprodutor_multiplo ');
      Query.SQL.Add('              from tab_reprodutor_multiplo as trm, tab_fazenda as tf ');
      Query.SQL.Add('              where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Query.SQL.Add('                and trm.cod_fazenda_manejo = tf.cod_fazenda ');
      Query.SQL.Add('                and trm.cod_pessoa_produtor = :CodPessoaProdutor1 ');

      if (SglFazendaPai <> '') then
      begin
        Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;

      if (CodAnimalPai <> '') then
      begin
        Query.SQL.Add('                and trm.cod_reprodutor_multiplo_manejo =:CodAnimalPai ');
      end;

      Query.SQL.Add(') ');
    end;
  end;

  if (SglFazendaMae <> '') or (CodAnimalMae <> '') then
  begin
    Query.SQL.Add('          and ta.cod_animal_mae in');
    Query.SQL.Add('              (select cod_animal ');
    Query.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
    Query.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
    Query.SQL.Add('                and ta.cod_fazenda_manejo *= tf.cod_fazenda ');
    Query.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor2 ');

    if (SglFazendaMae <> '') then
    begin
      Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaMae ');
    end;

    if (CodAnimalMae <> '') then
    begin
      Query.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalMae ');
    end;

    Query.SQL.Add(') ');
  end;

  if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then
  begin
    Query.SQL.Add('          and ta.ind_animal_castrado =:IndAnimalCastrado');
  end;

  if (CodRegimeAlimentar <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_regime_alimentar = :CodRegimeAlimentar');
  end;

  if (CodCategoria <> '') then
  begin
    if IndConsiderarExterno = 'S' then
    begin
      Query.SQL.Add('          and (ta.cod_categoria_animal in (' + CodCategoria + ') or ta.cod_tipo_origem = 4) ')
    end
    else
    begin
      Query.SQL.Add('          and ta.cod_categoria_animal in (' + CodCategoria + ')');
    end;
  end;

  if (CodAssociacao <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_associacao_raca = :CodAssociacaoRaca');
  end;

  if (CodGrauSangue <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_grau_sangue = :CodGrauSangue');
  end;

  if (NumRgd <> '') then
  begin
    Query.SQL.Add('          and ta.num_rgd like :NumRgd');
  end;

  if (CodTipoLugar <> -1) then
  begin
    if CodTipoLugar = 23 then
    begin
      Query.SQL.Add('          and ta.cod_tipo_lugar in (2, 3)');
    end
    else
    begin
      Query.SQL.Add('          and ta.cod_tipo_lugar = :CodTipoLugar');
    end;
  end;

  if (CodLocal <> '') then
  begin
    Query.SQL.Add('          and ta.cod_fazenda_corrente in (' + CodLocal + ')');
  end;

  if (CodLote <> '') then
  begin
    Query.SQL.Add('          and ta.cod_lote_corrente in (' + CodLote + ')');
  end;

  if (IndCadastroEfetivado <> 'A') then
  begin
    if IndCadastroEfetivado = 'S' then
    begin
      Query.SQL.Add('          and ta.dta_efetivacao_cadastro is not null');
    end;

    if IndCadastroEfetivado = 'N' then
    begin
      Query.SQL.Add('          and ta.dta_efetivacao_cadastro is null');
    end;
  end;

  if (CodFazendaCorrente <> -1) then
  begin
    Query.SQL.Add('          and ta.cod_fazenda_corrente = :CodFazendaCorrente ');
  end;

  if (NumImovelCorrente <> '') then
  begin
    Query.SQL.Add('          and ta.num_imovel_corrente = :NumImovelCorrente ');
  end;

  if (CodLocalizacaoCorrente > -1) then
  begin
    Query.SQL.Add('          and ta.cod_localizacao_corrente = :CodLocalizacaoCorrente ');
  end;

  if (NumCPFCNPJCorrente <> '') then
  begin
    Query.SQL.Add('          and ta.num_cnpj_cpf_corrente =:NumCPFCNPJCorrente ');
  end;

  if IndAgrupRaca1 = 'N' then
  begin
    Query.SQL.Add('          and ta.cod_animal = tcr.cod_animal  ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ');
    Query.SQL.Add('          and tcr.cod_raca = :codraca1  ');
    Query.SQL.Add('          and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ');
  end;

  if IndAgrupRaca2 = 'N' then
  begin
    Query.SQL.Add('          and ta.cod_animal = tcr2.cod_animal  ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ');
    Query.SQL.Add('          and tcr2.cod_raca = :codraca2  ');
    Query.SQL.Add('          and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ');
  end;

  if IndAgrupRaca3 = 'N' then
  begin
    Query.SQL.Add('          and ta.cod_animal = tcr3.cod_animal  ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ');
    Query.SQL.Add('          and tcr3.cod_raca = :codraca3  ');
    Query.SQL.Add('          and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ');
  end;

  if IndAgrupRaca4 = 'N' then
  begin
    Query.SQL.Add('          and ta.cod_animal = tcr4.cod_animal  ');
    Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ');
    Query.SQL.Add('          and tcr4.cod_raca = :codraca4  ');
    Query.SQL.Add('          and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ');
  end;

  if IndAgrupRaca1 = 'S' then
  begin
    Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                  ' from tab_composicao_racial as tcr, ' +
                  ' tab_composicao_agrup_racas as tacr ' +
                  ' where tacr.cod_agrupamento_racas = :codraca1 ' +
                  ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                  ' and   tacr.cod_raca = tcr.cod_raca ' +
                  ' group by cod_animal ' +
                  ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ');
  end;

  if IndAgrupRaca2 = 'S' then
  begin
    Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                  ' from tab_composicao_racial as tcr, ' +
                  ' tab_composicao_agrup_racas as tacr ' +
                  ' where tacr.cod_agrupamento_racas = :codraca2 ' +
                  ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                  ' and   tacr.cod_raca = tcr.cod_raca ' +
                  ' group by cod_animal ' +
                  ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ');
  end;

  if IndAgrupRaca3 = 'S' then
  begin
    Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                  ' from tab_composicao_racial as tcr, ' +
                  ' tab_composicao_agrup_racas as tacr ' +
                  ' where tacr.cod_agrupamento_racas = :codraca3 ' +
                  ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                  ' and   tacr.cod_raca = tcr.cod_raca ' +
                  ' group by cod_animal ' +
                  ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ');
  end;

  if IndAgrupRaca4 = 'S' then
  begin
    Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                  ' from tab_composicao_racial as tcr, ' +
                  ' tab_composicao_agrup_racas as tacr ' +
                  ' where tacr.cod_agrupamento_racas = :codraca4 ' +
                  ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                  ' and   tacr.cod_raca = tcr.cod_raca ' +
                  ' group by cod_animal ' +
                  ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ');
  end;

  if restringe_animais = 'S' then
  begin
     case CodTipoEvento of
     2:
     begin
       Query.SQL.Add(' and dbo.fnt_idade_dias(ta.dta_nascimento,:dta_evento) between :qtd_idade_minima_desmame and :qtd_idade_maxima_desmame ');
     end;

     24:
     begin
       Query.SQL.Add(' and ta.cod_animal not in (select distinct tae.cod_animal ' +
                     '                            from tab_animal_evento as tae, tab_evento as te ' +
                     '                            where tae.cod_evento = te.cod_evento ' +
                     '                            and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                     '                            and   te.cod_pessoa_produtor = :CodPessoaProdutor ' +
                     '                            and   te.dta_inicio <= :dta_fim_evento ' +
                     '                            and   te.dta_fim >= :dta_inicio_evento ' +
                     '                            and   te.cod_tipo_evento = 24) ');
//         Query.SQL.Add(' and ta.ind_apto_cobertura = ''S'' ');
     end;

     23,26,27:
     begin
       Query.SQL.Add(' and ta.cod_animal in (select cod_animal from tab_animal_evento '+
                     '                       where cod_evento = :cod_estacao_monta '+
                     '                       and   cod_pessoa_produtor =:CodPessoaProdutor) ');
     end;

     28:
     begin
       Query.SQL.Add(' and ta.cod_animal in (select distinct tae.cod_animal ' +
                     '                       from tab_animal_evento as tae, tab_evento as te ' +
                     '                       where tae.cod_evento = te.cod_evento ' +
                     '                       and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                     '                       and   te.cod_pessoa_produtor = :CodPessoaProdutor ');
       if dta_inicio_evento > 0 then
       begin
         Query.SQL.Add('                     and   te.dta_inicio >= :dta_inicio_evento ');
       end;
       if dta_fim_evento > 0 then
       begin
         Query.SQL.Add('                     and   te.dta_fim < :dta_fim_evento ');
       end;
       if DtaProvavelMonta > 0 then
       begin
         Query.SQL.Add('                     and   te.dta_inicio <= :dta_provavel_monta ');
       end;
       Query.SQL.Add('                       and   te.cod_tipo_evento in (23,26,27)) ');
     end;
   end;
  end;

  if IndAptoCobertura = 'S' then
  begin
     Query.SQL.Add(' and ta.ind_apto_cobertura = ''S'' ' +

//                   SE(IndConsiderarExterno = 'S', ' or  (ta.cod_tipo_origem = 4) ', '') +
//                   ' or  (ta.ind_apto_cobertura = ''N'' ' +

                   ' and (ta.cod_animal in (select cod_animal '+
                   '                        from   tab_evento te, tab_animal_evento tae '+
                   '                        where  te.cod_evento = tae.cod_evento '+
                   '                        and    te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                   '                        and    te.cod_pessoa_produtor = :CodPessoaProdutor '+
                   '                        and    te.dta_inicio <= :dta_diagnostico '+
                   '                        and    te.cod_tipo_evento = 28 '+
                   '                        and    tae.ind_vaca_prenha = ''S'' ))');
  end;

  if IndAptoCobertura = 'N' then
  begin
      Query.SQL.Add(' and ( ta.ind_apto_cobertura = ''N'' )');
//     + SE(IndConsiderarExterno = 'S', ' or ta.cod_tipo_origem = 4 ) ', ' ) '));
  end;

  if IndAutenticacao = 'S' then
  begin
    Query.SQL.Add('          and cod_autenticacao_sisbov is not null  ');
  end;

  // Para o evento de parto, trazer apenas as vacas da estação de monta selecionado.
  if CodEstacaoMonta > 0 then
  begin
    Query.SQL.Add('          and ta.cod_animal = tev.cod_animal  ');
    Query.SQL.Add('          and tev.cod_evento = :CodEstacaoMonta  ');
  end;


  if (CodTipoLugar <> 2) and (CodTipoLugar <> 3) and (not EfetivaAnimais) then
  begin
    Query.SQL.Add(' union select ta.cod_pessoa_produtor as CodPessoaProdutor '+
                  '     , ta.cod_animal as CodAnimal '+
                  '     , tf.sgl_fazenda as SglFazendaManejo '+
                  '     , ta.cod_animal_manejo as CodAnimalManejo '+
                  '     , ta.cod_animal_certificadora as CodCertificadora '+
                  '     , case ta.cod_pais_sisbov ' +
                  '       when null then null ' +
                  '       else right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) end as CodPaisSisBov '+
                  '     , case ta.cod_animal_sisbov '+
                  '       when null then '''' ' +
                  '       else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '+
                  '       case ta.cod_micro_regiao_sisbov when -1 then '''' ' +
                  '            else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end + ' +
                  '       right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '+
                  '       right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov '+
                  '     , ta.cod_situacao_sisBov as CodSituacaoSisBov ' +
                  '     , ta.des_apelido as DesApelido ' +
                  '     , ta.cod_arquivo_sisbov as CodArquivoSisbov ' +
                  '     , ta.cod_pessoa_tecnico as CodPessoaTecnico ' +
                  '     , tp.nom_reduzido_pessoa as NomReduzidoPessoa ' +
                  '     , tr.sgl_raca as SglRaca ' +
  //                '     , ta.cod_raca as CodRaca '+
                  '     , ta.ind_sexo as IndSexo ' +
  //                '     , ta.cod_tipo_origem as CodOrigem '+
                  '     , tto.sgl_tipo_origem as SglOrigem ' +
  //                '     , ta.cod_categoria_animal as CodCategoria '+
                  '     , tc.sgl_categoria_animal as SglCategoria '+
  //                '     , ta.cod_local_corrente as CodLocal '+
                  '     , tl.sgl_local as SglLocal '+
  //                '     , ta.cod_lote_corrente as CodLote '+
                  '     , tlt.sgl_lote as SglLote '+
                  '     , case isnull(ta.dta_efetivacao_cadastro, 0) '+
                  '      when 0 then ''N''  '+
                  '      else ''S'' '+
                  '      end as IndCadastroEfetivado '+
                  '     , tfc.sgl_fazenda as SglFazendaCorrente '+
  //                '     , ta.cod_tipo_lugar as CodTipoLugar '+
                  '     , tlu.sgl_tipo_lugar as SglTipoLugar ');
    if CodEvento > 0 then
    begin
      if IndEventoAplicado = 'S' then
      begin
        Query.SQL.Add('     , ''S'' as IndEventoAplicado ');
      end
      else
      begin
        if IndEventoAplicado = 'N' then
        begin
          Query.SQL.Add('     , ''N'' as IndEventoAplicado ')
        end
        else
        begin
          Query.SQL.Add('     , case tev.cod_pessoa_produtor '+
                        '        when :CodPessoaProdutor then ''S''  '+
                        '       else ''N'' '+
                        '       end as IndEventoAplicado ');
        end;
      end;
    end
    else if CodReprodutorMultiplo <= 0 then
    begin
      Query.SQL.Add('     ,''N'' as IndEventoAplicado ');
    end;

    if CodReprodutorMultiplo > 0 then
    begin
      if IndEventoAplicado = 'S' then
      begin
        Query.SQL.Add('     , ''S'' as IndEventoAplicado ');
      end
      else
      begin
        if IndEventoAplicado = 'N' then
        begin
          Query.SQL.Add('     , ''N'' as IndEventoAplicado ')
        end
        else
        begin
          Query.SQL.Add('     , case isnull(trm.cod_reprodutor_multiplo, 0) '+
                        '         when 0 then ''N''  '+
                        '       else ''S'' '+
                        '       end as IndEventoAplicado ');
        end;
      end;
    end
    else if CodEvento <= 0 then
    begin
      Query.SQL.Add('     ,''N'' as IndEventoAplicado ');
    end;

    if (CodEvento > 0) and (IndEventoAplicado <> 'N') then
    begin
      Query.SQL.Add('    ,tev.qtd_peso_animal as QtdPesoAnimal ');
    end;

    if (uppercase(IndTrazerComposicaoRacial)='S') then
    begin
      Query.SQL.Add('    ,dbo.fnt_composicao_racial(ta.cod_animal,ta.cod_pessoa_produtor) as DesComposicaoRacial ');
    end;

    Query.SQL.Add(' , ta.ind_apto_cobertura as IndAptoCobertura ');

    if (CodEvento > 0) and (IndEventoAplicado <> 'N') then
    begin
      Query.SQL.Add('    ,tev.ind_vaca_prenha as IndVacaPrenha ');
      Query.SQL.Add('    ,tev.ind_touro_apto as IndTouroApto ');
    end
    else
    begin
      Query.SQL.Add('    ,null as IndVacaPrenha ');
      Query.SQL.Add('    ,null as IndTouroApto ');
    end;

    Query.SQL.Add('  , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, :data_referencia)) as IdadeAnimal ');
    if CodTipoEvento = 28 then
    begin
      Query.SQL.Add('  ,dbo.fnt_dias_ultima_monta(ta.cod_animal, ta.cod_pessoa_produtor,:dta_evento_monta) DiasUltimaMonta ')
    end
    else
    begin
      Query.SQL.Add('  ,null DiasUltimaMonta ');
    end;

    Query.SQL.Add('  from tab_animal as ta with (nolock) '+
                  '     , tab_fazenda as tf with (nolock) '+
                  '     , tab_fazenda as tfc with (nolock) '+
                  '     , tab_especie as te with (nolock)'+
                  '     , tab_raca as tr with (nolock)'+
                  '     , tab_tipo_origem as tto with (nolock)'+
                  '     , tab_fazenda as tf2 with (nolock) '+
                  '     , tab_categoria_animal as tc with (nolock)'+
                  '     , tab_local as tl with (nolock) '+
                  '     , tab_lote as tlt with (nolock) '+
                  '     , tab_pessoa as tp with (nolock) '+
                  '     , tab_tipo_lugar as tlu with (nolock)');
    if (CodReprodutorMultiplo > 0) and (IndEventoAplicado <> 'N') then
    begin
      Query.SQL.Add('   , tab_animal_reprodutor_multiplo as trm with (nolock) ');
    end;

    if IndAgrupRaca1 = 'N' then
    begin
      Query.SQL.Add('   , tab_composicao_racial as tcr with (nolock) ');
    end;

    if IndAgrupRaca2 = 'N' then
    begin
      Query.SQL.Add('   , tab_composicao_racial as tcr2 with (nolock) ');
    end;

    if IndAgrupRaca3 = 'N' then
    begin
      Query.SQL.Add('   , tab_composicao_racial as tcr3 with (nolock) ');
    end;

    if IndAgrupRaca4 = 'N' then
    begin
      Query.SQL.Add('   , tab_composicao_racial as tcr4 with (nolock) ');
    end;

    if ((CodEvento > 0) and (IndEventoAplicado <> 'N')) or (CodEstacaoMonta > 0)  then
    begin
      Query.SQL.Add('    , tab_animal_evento as tev with (nolock) ');
      if(IndEventoAplicado = 'S')  then
      begin
        Query.SQL.Add('  , tab_evento as tevt with (nolock) ');
      end;
    end;

    Query.SQL.Add(' where ta.dta_fim_validade is null ' + 
                  '          and ta.cod_pessoa_corrente = :CodPessoaProdutor ' +
                  '          and ta.cod_pessoa_tecnico *= tp.cod_pessoa '+
                  '          and ta.cod_fazenda_manejo *= tf.cod_fazenda '+
                  '          and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor '+
                  '          and ta.cod_fazenda_corrente *= tfc.cod_fazenda '+
                  '          and ta.cod_pessoa_produtor *= tfc.cod_pessoa_produtor '+
                  '          and ta.cod_especie = te.cod_especie '+
                  '          and ta.cod_raca = tr.cod_raca '+
                  '          and ta.cod_tipo_origem = tto.cod_tipo_origem '+
                  '          and ta.cod_fazenda_nascimento *= tf2.cod_fazenda '+
                  '          and ta.cod_pessoa_produtor *= tf2.cod_pessoa_produtor '+
                  '          and ta.cod_categoria_animal *= tc.cod_categoria_animal ');

    CodTecnico := CodPessoaTecnico;

    if (Conexao.CodPapelUsuario = 3) and (CodPessoaTecnico > 0) then
    begin
      CodTecnico := Conexao.CodPessoa;
    end;

    if (Conexao.CodPapelUsuario = 9) then
    begin
      Query.SQL.Add('        and ( ta.cod_pessoa_tecnico in ( select top ' + IntToStr(Max) + ' ttp.cod_pessoa_tecnico ');
      Query.SQL.Add('                                           from tab_tecnico_produtor ttp ');
      Query.SQL.Add('                                              , tab_tecnico tt');
      Query.SQL.Add('                                          where tt.cod_pessoa_tecnico = ttp.cod_pessoa_tecnico');
      Query.SQL.Add('                                            and tt.cod_pessoa_gestor  = :cod_pessoa_gestor ');
      Query.SQL.Add('                                            and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Query.SQL.Add('                                            and tt.dta_fim_validade is null ');
      Query.SQL.Add('                                            and ttp.dta_fim_validade is null )');
      Query.SQL.Add('             or ta.cod_pessoa_tecnico is null ) ');
      Query.ParamByName('cod_pessoa_gestor').AsInteger := Conexao.CodPessoa;
      Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    end;

    if IndRestringeTecnico = 'S' then
    begin
      if (IndAnimalSemTecnico = 'N') then
      begin
         if CodPessoaTecnico > 0 then
         begin
            Query.SQL.Add('      and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ');
         end
         else
         begin
           if (Conexao.CodPapelUsuario = 3) then
           begin
             Query.SQL.Add('      and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                           '       or  ta.cod_pessoa_tecnico is null)');
           end;
         end;
      end
      else
      begin
         Query.SQL.Add('      and ta.cod_pessoa_tecnico is null');
      end;
    end;

//    if (CodLocal <> '') then
//    begin
//      Query.SQL.Add('          and ta.cod_local_corrente *= tl.cod_local ');
//      Query.SQL.Add('          and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor ');
//      Query.SQL.Add('          and ta.cod_fazenda_corrente *= tl.cod_fazenda ');
//    end
//    else
//    begin
      Query.SQL.Add('          and ta.cod_local_corrente *= tl.cod_local ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor ');
      Query.SQL.Add('          and ta.cod_fazenda_corrente *= tl.cod_fazenda ');
//    end;

    if (CodLocal <> '') then
    begin
      Query.SQL.Add('          and ta.cod_fazenda_corrente in (' + CodLocal + ')');
    end;

    if (CodLote <> '') then
    begin
      Query.SQL.Add('          and ta.cod_lote_corrente *= tlt.cod_lote ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor ');
      Query.SQL.Add('          and ta.cod_fazenda_corrente *= tlt.cod_fazenda ');
    end
    else
    begin
      Query.SQL.Add('          and ta.cod_lote_corrente *= tlt.cod_lote ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor ');
      Query.SQL.Add('          and ta.cod_fazenda_corrente *= tlt.cod_fazenda ');
    end;

    if (CodEvento > 0) then
    begin
      Query.SQL.Add('          and ta.dta_nascimento < :dta_fim_evento_nascimento ');
      if IndEventoAplicado = 'S' then
      begin
        Query.SQL.Add('          and tev.cod_evento  = tevt.cod_evento ');
        Query.SQL.Add('          and tevt.cod_evento = :CodEvento ');
        Query.SQL.Add('          and ta.cod_animal = tev.cod_animal ');
        Query.SQL.Add('          and exists (select distinct tev.cod_animal from  tab_evento tet ');
        Query.SQL.Add('          where tev.cod_pessoa_produtor = :CodPessoaProdutor ');
        Query.SQL.Add('          and   tev.cod_evento = tet.cod_evento ');
        Query.SQL.Add('          and tet.cod_tipo_evento = :Cod_Tipo_Evento ) ');
      end
      else
      begin
        if IndEventoAplicado = 'N' then
        begin
          Query.SQL.Add('          and ta.cod_animal not in ( ');
          Query.SQL.Add('                   select distinct tae1.cod_animal ');
          Query.SQL.Add('                  	from tab_evento te1, tab_animal_evento tae1 ');
          Query.SQL.Add('          		where te1.cod_pessoa_produtor = :CodPessoaProdutor ');
          Query.SQL.Add('          		and   te1.cod_tipo_evento = :Cod_Tipo_Evento ');
          Query.SQL.Add('          		and   te1.cod_evento = tae1.cod_evento ');
          Query.SQL.Add('          		and   tae1.cod_pessoa_produtor = :CodPessoaProdutor ) ');
        end
        else
        begin
          Query.SQL.Add('          and (ta.cod_pessoa_produtor *= tev.cod_pessoa_produtor or ta.cod_pessoa_produtor *= tev.cod_pessoa_corrente) ');
          Query.SQL.Add('          and ta.cod_animal *= tev.cod_animal ');
          Query.SQL.Add('          and tev.cod_evento = :CodEvento ');
        end;
      end;
    end;

    if (CodReprodutorMultiplo > 0) then
    begin
      if IndEventoAplicado = 'S' then
      begin
         Query.SQL.Add('          and ta.cod_pessoa_produtor = trm.cod_pessoa_produtor ');
         Query.SQL.Add('          and ta.cod_animal = trm.cod_animal ');
         Query.SQL.Add('          and trm.cod_reprodutor_multiplo = :CodReprodutorMultiplo ');
      end
      else
      begin
        if IndEventoAplicado = 'N' then
        begin
          Query.SQL.Add('          and ta.cod_animal not in ( ');
          Query.SQL.Add('          select cod_animal from tab_animal_reprodutor_multiplo ');
          Query.SQL.Add('          where cod_reprodutor_multiplo =:CodReprodutorMultiplo ');
          Query.SQL.Add('          and cod_pessoa_produtor =:CodPessoaProdutor) ');
        end
        else
        begin
          Query.SQL.Add('          and ta.cod_pessoa_produtor *= trm.cod_pessoa_produtor ');
          Query.SQL.Add('          and ta.cod_animal *= trm.cod_animal ');
          Query.SQL.Add('          and trm.cod_reprodutor_multiplo = :CodReprodutorMultiplo ');
        end;
      end;
    end;

    if CodTipoLugar > 0 then
    begin
      Query.SQL.Add('          and ta.cod_tipo_lugar = tlu.cod_tipo_lugar ');
    end
    else
    begin
      Query.SQL.Add('          and ta.cod_tipo_lugar *= tlu.cod_tipo_lugar ');
    end;

    if IndConsiderarExterno = 'N' then
    begin
      if (CodOrigem <> '') then
      begin
        Query.SQL.Add('          and (ta.cod_tipo_origem in (' + CodOrigem + ') and ta.cod_tipo_origem <> 4) ');
      end
      else
      begin
        Query.SQL.Add('          and ta.cod_tipo_origem <> 4');
      end;
    end
    else
    begin
      if (CodOrigem <> '') then
      begin
        Query.SQL.Add('          and (ta.cod_tipo_origem in (' + CodOrigem + ') or ta.cod_tipo_origem = 4) ');
      end;
    end;

    if CodFazendaManejo <> -1 then
    begin
      Query.SQL.Add('          and ta.cod_fazenda_manejo = :CodFazendaManejo');
    end;

    if (CodManejoInicio <> '') and (CodManejoFim <> '') then
    begin
      Query.SQL.Add('          and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim');
    end;

    if (CodManejoInicio <> '') and (CodManejoFim = '') then
    begin
      Query.SQL.Add('          and ta.cod_animal_manejo >= :CodManejoInicio ');
    end;

    if (CodManejoInicio = '') and (CodManejoFim <> '') then
    begin
      Query.SQL.Add('          and ta.cod_animal_manejo <= :CodManejoFim ');
    end;

    if (CodAnimalCertificadora <> '') then
    begin
      Query.SQL.Add('          and ta.cod_animal_certificadora =:CodAnimalCertificadora');
    end;

    if (CodPaisSisBov <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_pais_sisbov = :CodPaisSisBov');
    end;

    if (CodEstadoSisBov <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_estado_sisbov = :CodEstadoSisBov');
    end;

    if (CodMicroRegiaoSisBov <> -1) then
    begin
      if (CodMicroRegiaoSisBov = 88) then //Parametro passado pelo ASP, indicando que o filtro deverá ser por micro regiao -1
      begin
        Query.SQL.Add('          and ta.cod_micro_regiao_sisbov = -1');
      end
      else
      begin
        Query.SQL.Add('          and ta.cod_micro_regiao_sisbov = :CodMicroRegiaoSisBov');
      end;
    end;

    if (CodSisBovInicio <> -1) and (CodSisBovFim <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_animal_sisbov between :CodSisBovInicio and :CodSisBovFim');
    end;

    if (CodSisBovInicio <> -1) and (CodSisBovFim < 0) then
    begin
      Query.SQL.Add('          and ta.cod_animal_sisbov >= :CodSisBovInicio ');
    end;

    if (CodSisBovInicio < 0) and (CodSisBovFim <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_animal_sisbov <= :CodSisBovFim ');
    end;

    if (CodSituacaoSisBov <> '') then
    begin
      Query.SQL.Add('          and ta.cod_situacao_sisbov = :CodSituacaoSisBov');
    end;

    if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
    begin
      Query.SQL.Add('          and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim');
    end;

    if (CodFazendaNascimento <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_fazenda_nascimento = :CodFazendaNascimento');
    end;

    if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then
    begin
      Query.SQL.Add('          and ta.dta_compra between :DtaCompraInicio and :DtaCompraFim');
    end;

    if (CodPessoaSecundariaCriador <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_pessoa_secundaria_criador = :CodPessoaSecundariaCriador');
    end;

    if (NomAnimal <> '') then
    begin
      Query.SQL.Add('          and ta.nom_animal like :NomAnimal');
    end;

    if (DesApelido <> '') then
    begin
      Query.SQL.Add('          and ta.des_apelido like :DesApelido');
    end;

    if (CodAptidao <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_aptidao = :CodAptidao');
    end;

    if (CodRaca <> '') then
    begin
      Query.SQL.Add('          and ta.cod_raca in (' + CodRaca + ')');
    end;

    if (IndSexo = 'M') or (IndSexo = 'F') then
    begin
      Query.SQL.Add('          and ta.ind_sexo =:IndSexo');
    end;

    // Se foram informados dados de manejo do pai, verifica se trata-se de um touro ou de um RM
    // para posteriormente montar a condição correta no SQL. Se foi informado o apelido, assume-se
    // que o pai é um touro
    if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then
    begin
  //    if DesApelidoPai = '' then begin
      Result := VerificaTipoPai(SglFazendaPai, CodAnimalPai, IndTipo);
      if Result < 0 then
      begin
        Exit;
      end;
  //    end else begin
  //      IndTipo := 'T';
  //  end;

      if IndTipo = 'T' then
      begin
        Query.SQL.Add('          and ta.cod_animal_pai in');
        Query.SQL.Add('              (select cod_animal ');
        Query.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
        Query.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
        Query.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
        Query.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');

        if (SglFazendaPai <> '') then
        begin
          Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
        end;

        if (CodAnimalPai <> '') then
        begin
          Query.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
        end;

        if (DesApelidoPai <> '') then
        begin
          Query.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
        end;

        Query.SQL.Add(') ');

      end
      else if IndTipo = 'E' then
      begin
        Query.SQL.Add('          and ta.cod_animal_pai in');
        Query.SQL.Add('              (select cod_animal ');

        if (SglFazendaPai <> '') then
        begin
          Query.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
        end
        else
        begin
          Query.SQL.Add('              from tab_animal as ta ');
        end;

        Query.SQL.Add('              where ta.cod_tipo_origem = 4 ');
        Query.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');

        if (SglFazendaPai <> '') then
        begin
          Query.SQL.Add('                and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
          Query.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
          Query.SQL.Add('                and tf.sgl_fazenda = :SglFazendaPai ');
        end;

        if (CodAnimalPai <> '') then
        begin
          Query.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
        end;

        if (DesApelidoPai <> '') then
        begin
          Query.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
        end;
        Query.SQL.Add(') ');

      end
      else
      begin
        Query.SQL.Add('          and ta.cod_reprodutor_multiplo in');
        Query.SQL.Add('              (select cod_reprodutor_multiplo ');
        Query.SQL.Add('              from tab_reprodutor_multiplo as trm, tab_fazenda as tf ');
        Query.SQL.Add('              where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor');
        Query.SQL.Add('                and trm.cod_fazenda_manejo = tf.cod_fazenda ');
        Query.SQL.Add('                and trm.cod_pessoa_produtor = :CodPessoaProdutor1 ');

        if (SglFazendaPai <> '') then
        begin
          Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
        end;

        if (CodAnimalPai <> '') then
        begin
          Query.SQL.Add('                and trm.cod_reprodutor_multiplo_manejo =:CodAnimalPai ');
        end;

        Query.SQL.Add(') ');
      end;
    end;

    if (SglFazendaMae <> '') or (CodAnimalMae <> '') then
    begin
      Query.SQL.Add('          and ta.cod_animal_mae in');
      Query.SQL.Add('              (select cod_animal ');
      Query.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      Query.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Query.SQL.Add('                and ta.cod_fazenda_manejo *= tf.cod_fazenda ');
      Query.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor2 ');

      if (SglFazendaMae <> '') then
      begin
        Query.SQL.Add('                and tf.sgl_fazenda =:SglFazendaMae ');
      end;

      if (CodAnimalMae <> '') then
      begin
        Query.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalMae ');
      end;

      Query.SQL.Add(') ');
    end;

    if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then
    begin
      Query.SQL.Add('          and ta.ind_animal_castrado = :IndAnimalCastrado');
    end;

    if (CodRegimeAlimentar <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_regime_alimentar = :CodRegimeAlimentar');
    end;

    if (CodCategoria <> '') then
    begin
      if IndConsiderarExterno = 'S' then
      begin
        Query.SQL.Add('          and (ta.cod_categoria_animal in (' + CodCategoria + ') or ta.cod_tipo_origem = 4) ')
      end
      else
      begin
        Query.SQL.Add('          and ta.cod_categoria_animal in (' + CodCategoria + ')');
      end;
    end;

    if (CodAssociacao <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_associacao_raca = :CodAssociacaoRaca');
    end;

    if (CodGrauSangue <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_grau_sangue = :CodGrauSangue');
    end;

    if (NumRgd <> '') then
    begin
      Query.SQL.Add('          and ta.num_rgd like :NumRgd');
    end;

    if (CodTipoLugar <> -1) then
    begin
      Query.SQL.Add('          and ta.cod_tipo_lugar in (2, 3)');
    end;

    if (IndCadastroEfetivado <> 'A') then
    begin
      if IndCadastroEfetivado = 'S' then
      begin
        Query.SQL.Add('          and ta.dta_efetivacao_cadastro is not null');
      end;

      if IndCadastroEfetivado = 'N' then
      begin
        Query.SQL.Add('          and ta.dta_efetivacao_cadastro is null');
      end;
    end;

    if (NumImovelCorrente <> '') then
    begin
      Query.SQL.Add('          and ta.num_imovel_corrente = :NumImovelCorrente ');
    end;

    if (CodLocalizacaoCorrente > -1) then
    begin
      Query.SQL.Add('          and ta.cod_localizacao_corrente = :CodLocalizacaoCorrente ');
    end;

    if (NumCPFCNPJCorrente <> '') then
    begin
      Query.SQL.Add('          and ta.num_cnpj_cpf_corrente =:NumCPFCNPJCorrente ');
    end;

    if IndAgrupRaca1 = 'N' then
    begin
      Query.SQL.Add('          and ta.cod_animal = tcr.cod_animal  ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ');
      Query.SQL.Add('          and tcr.cod_raca = :codraca1  ');
      Query.SQL.Add('          and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ');
    end;

    if IndAgrupRaca2 = 'N' then
    begin
      Query.SQL.Add('          and ta.cod_animal = tcr2.cod_animal  ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ');
      Query.SQL.Add('          and tcr2.cod_raca = :codraca2  ');
      Query.SQL.Add('          and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ');
    end;

    if IndAgrupRaca3 = 'N' then
    begin
      Query.SQL.Add('          and ta.cod_animal = tcr3.cod_animal  ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ');
      Query.SQL.Add('          and tcr3.cod_raca = :codraca3  ');
      Query.SQL.Add('          and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ');
    end;

    if IndAgrupRaca4 = 'N' then
    begin
      Query.SQL.Add('          and ta.cod_animal = tcr4.cod_animal  ');
      Query.SQL.Add('          and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ');
      Query.SQL.Add('          and tcr4.cod_raca = :codraca4  ');
      Query.SQL.Add('          and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ');
    end;

    if IndAgrupRaca1 = 'S' then
    begin
      Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                    ' from tab_composicao_racial as tcr, ' +
                    ' tab_composicao_agrup_racas as tacr ' +
                    ' where tacr.cod_agrupamento_racas = :codraca1 ' +
                    ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                    ' and   tacr.cod_raca = tcr.cod_raca ' +
                    ' group by cod_animal ' +
                    ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ');
    end;

    if IndAgrupRaca2 = 'S' then
    begin
      Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                    ' from tab_composicao_racial as tcr, ' +
                    ' tab_composicao_agrup_racas as tacr ' +
                    ' where tacr.cod_agrupamento_racas = :codraca2 ' +
                    ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                    ' and   tacr.cod_raca = tcr.cod_raca ' +
                    ' group by cod_animal ' +
                    ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ');
    end;

    if IndAgrupRaca3 = 'S' then
    begin
      Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                    ' from tab_composicao_racial as tcr, ' +
                    ' tab_composicao_agrup_racas as tacr ' +
                    ' where tacr.cod_agrupamento_racas = :codraca3 ' +
                    ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                    ' and   tacr.cod_raca = tcr.cod_raca ' +
                    ' group by cod_animal ' +
                    ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ');
    end;

    if IndAgrupRaca4 = 'S' then
    begin
      Query.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                    ' from tab_composicao_racial as tcr, ' +
                    ' tab_composicao_agrup_racas as tacr ' +
                    ' where tacr.cod_agrupamento_racas = :codraca4 ' +
                    ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                    ' and   tacr.cod_raca = tcr.cod_raca ' +
                    ' group by cod_animal ' +
                    ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ');
    end;

    if restringe_animais = 'S' then
    begin
       case CodTipoEvento of
       2:
       begin
         Query.SQL.Add(' and dbo.fnt_idade_dias(ta.dta_nascimento,:dta_evento) between :qtd_idade_minima_desmame and :qtd_idade_maxima_desmame ');
       end;

       24:
       begin
         Query.SQL.Add(' and ta.cod_animal not in (select distinct tae.cod_animal ' +
                       '                            from tab_animal_evento as tae, tab_evento as te ' +
                       '                            where tae.cod_evento = te.cod_evento ' +
                       '                            and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                       '                            and   te.cod_pessoa_produtor = :CodPessoaProdutor ' +
                       '                            and   te.dta_inicio <= :dta_fim_evento ' +
                       '                            and   te.dta_fim >= :dta_inicio_evento ' +
                       '                            and   te.cod_tipo_evento = 24) ');
  //         Query.SQL.Add(' and ta.ind_apto_cobertura = ''S'' ');
       end;

       23,26,27:
       begin
         Query.SQL.Add(' and ta.cod_animal in (select cod_animal from tab_animal_evento '+
                       '                       where cod_evento = :cod_estacao_monta '+
                       '                       and   cod_pessoa_produtor =:CodPessoaProdutor) ');
       end;

       28:
       begin
         Query.SQL.Add(' and ta.cod_animal in (select distinct tae.cod_animal ' +
                       '                       from tab_animal_evento as tae, tab_evento as te ' +
                       '                       where tae.cod_evento = te.cod_evento ' +
                       '                       and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                       '                       and   te.cod_pessoa_produtor = :CodPessoaProdutor ');
         if dta_inicio_evento > 0 then
         begin
           Query.SQL.Add('                     and   te.dta_inicio >= :dta_inicio_evento ');
         end;
         if dta_fim_evento > 0 then
         begin
           Query.SQL.Add('                     and   te.dta_fim < :dta_fim_evento ');
         end;
         if DtaProvavelMonta > 0 then
         begin
           Query.SQL.Add('                     and   te.dta_inicio <= :dta_provavel_monta ');
         end;
         Query.SQL.Add('                       and   te.cod_tipo_evento in (23,26,27)) ');
       end;
     end;
    end;

    if IndAptoCobertura = 'S' then
    begin
       Query.SQL.Add(' and ta.ind_apto_cobertura = ''S'' ' +

  //                   SE(IndConsiderarExterno = 'S', ' or  (ta.cod_tipo_origem = 4) ', '') +
  //                   ' or  (ta.ind_apto_cobertura = ''N'' ' +

                     ' and (ta.cod_animal in (select cod_animal '+
                     '                        from   tab_evento te, tab_animal_evento tae '+
                     '                        where  te.cod_evento = tae.cod_evento '+
                     '                        and    te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                     '                        and    te.cod_pessoa_produtor = :CodPessoaProdutor '+
                     '                        and    te.dta_inicio <= :dta_diagnostico '+
                     '                        and    te.cod_tipo_evento = 28 '+
                     '                        and    tae.ind_vaca_prenha = ''S'' ))');
    end;

    if IndAptoCobertura = 'N' then
    begin
        Query.SQL.Add(' and ( ta.ind_apto_cobertura = ''N'' )');
  //     + SE(IndConsiderarExterno = 'S', ' or ta.cod_tipo_origem = 4 ) ', ' ) '));
    end;

    if IndAutenticacao = 'S' then
    begin
      Query.SQL.Add('          and cod_autenticacao_sisbov is not null  ');
    end;

    // Para o evento de parto, trazer apenas as vacas da estação de monta selecionado.
    if CodEstacaoMonta > 0 then
    begin
      Query.SQL.Add('          and ta.cod_animal = tev.cod_animal  ');
      Query.SQL.Add('          and tev.cod_evento = :CodEstacaoMonta  ');
    end;
  end;


  if IndAnimaisEvento = 'S' then
  begin
    Query.SQL.Add(' union select top ' + IntToStr(Max) + ' ta.cod_pessoa_produtor as CodPessoaProdutor '+
                '     , ta.cod_animal as CodAnimal '+
                '     , tf.sgl_fazenda as SglFazendaManejo '+
                '     , ta.cod_animal_manejo as CodAnimalManejo '+
                '     , ta.cod_animal_certificadora as CodCertificadora '+
                '     , case ta.cod_pais_sisbov ' +
                '       when null then null ' +
                '       else right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) end as CodPaisSisBov '+
                '     , case ta.cod_animal_sisbov '+
                '       when null then null ' +
                '       else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '+
                '       case ta.cod_micro_regiao_sisbov when -1 then '''' ' +
                '            else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end +' +
                '       right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '+
                '       right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov '+
                '     , ta.cod_situacao_sisBov as CodSituacaoSisBov '+
                '     , ta.des_apelido as DesApelido '+
                '     , ta.cod_arquivo_sisbov as CodArquivoSisbov '+
                '     , ta.cod_pessoa_tecnico as CodPessoaTecnico ' +
                '     , tp.nom_reduzido_pessoa as NomReduzidoPessoa ' +
                '     , tr.sgl_raca as SglRaca '+
//                '     , ta.cod_raca as CodRaca '+
                '     , ta.ind_sexo as IndSexo '+
//                '     , ta.cod_tipo_origem as CodOrigem '+
                '     , tto.sgl_tipo_origem as SglOrigem '+
//                '     , ta.cod_categoria_animal as CodCategoria '+
                '     , tc.sgl_categoria_animal as SglCategoria '+
//                '     , ta.cod_local_corrente as CodLocal '+
                '     , tl.sgl_local as SglLocal '+
//                '     , ta.cod_lote_corrente as CodLote '+
                '     , tlt.sgl_lote as SglLote '+
                '     , case isnull(ta.dta_efetivacao_cadastro, 0) '+
                '      when 0 then ''N''  '+
                '      else ''S'' '+
                '      end as IndCadastroEfetivado '+
                '     , tfc.sgl_fazenda as SglFazendaCorrente '+
//                '     , ta.cod_tipo_lugar as CodTipoLugar '+
                '     , tlu.sgl_tipo_lugar as SglTipoLugar ');
     Query.SQL.Add('     , case isnull(tev.dta_aplicacao_evento, 0) '+
                   '         when 0 then ''N''  '+
                   '       else ''S'' '+
                   '       end as IndEventoAplicado '+
                   '       ,tev.qtd_peso_animal as QtdPesoAnimal ');
     if (uppercase(IndTrazerComposicaoRacial)='S') then
     begin
         Query.SQL.Add('    ,dbo.fnt_composicao_racial(ta.cod_animal,ta.cod_pessoa_produtor) as DesComposicaoRacial ');
     end;

     Query.SQL.Add('  ,ta.ind_apto_cobertura as IndAptoCobertura ');
     Query.SQL.Add('  ,tev.ind_vaca_prenha as IndVacaPrenha ');
     Query.SQL.Add('  ,tev.ind_touro_apto as IndTouroApto ');
     Query.SQL.Add('  ,dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, :data_referencia)) as IdadeAnimal ');

     if CodTipoEvento = 28 then
     begin
       Query.SQL.Add('  ,dbo.fnt_dias_ultima_monta(ta.cod_animal, ta.cod_pessoa_produtor,:dta_evento_monta) DiasUltimaMonta ');
     end
     else
     begin
       Query.SQL.Add('  ,null DiasUltimaMonta ');
     end;

     Query.SQL.Add('  from tab_animal as ta with (nolock) '+
                '        , tab_fazenda as tf with (nolock) '+
                '        , tab_fazenda as tfc with (nolock) '+
                '        , tab_especie as te with (nolock)'+
                '        , tab_raca as tr with (nolock)'+
                '        , tab_tipo_origem as tto with (nolock)'+
                '        , tab_fazenda as tf2 with (nolock) '+
                '        , tab_pessoa_secundaria as ts with (nolock) '+
                '        , tab_categoria_animal as tc with (nolock)'+
                '        , tab_local as tl with (nolock) '+
                '        , tab_lote as tlt with (nolock) '+
                '        , tab_pessoa as tp with (nolock) '+
                '        , tab_tipo_lugar as tlu ');
     Query.SQL.Add('     , tab_animal_evento as tev with (nolock) ');
     Query.SQL.Add(' where ta.dta_fim_validade is null ' +
                '          and tev.cod_pessoa_produtor = :CodPessoaProdutor ' +
                '          and ta.cod_fazenda_manejo *= tf.cod_fazenda '+
                '          and ta.cod_pessoa_tecnico *= tp.cod_pessoa '+
                '          and ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor '+
                '          and ta.cod_fazenda_corrente *= tfc.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tfc.cod_pessoa_produtor '+
                '          and ta.cod_especie = te.cod_especie '+
                '          and ta.cod_raca = tr.cod_raca '+
                '          and ta.cod_tipo_origem = tto.cod_tipo_origem '+
                '          and ta.cod_fazenda_nascimento *= tf2.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tf2.cod_pessoa_produtor '+
                '          and ta.cod_pessoa_secundaria_criador *= ts.cod_pessoa_produtor ' +
                '          and ta.cod_categoria_animal *= tc.cod_categoria_animal ');
     Query.SQL.Add('       and ta.cod_local_corrente *= tl.cod_local ');
     Query.SQL.Add('       and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor ');
     Query.SQL.Add('       and ta.cod_fazenda_corrente *= tl.cod_fazenda ');
     Query.SQL.Add('       and ta.cod_lote_corrente *= tlt.cod_lote ');
     Query.SQL.Add('       and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor ');
     Query.SQL.Add('       and ta.cod_fazenda_corrente *= tlt.cod_fazenda ');
     Query.SQL.Add('       and ta.cod_tipo_lugar *= tlu.cod_tipo_lugar ');
     Query.SQL.Add('       and (ta.cod_pessoa_produtor = tev.cod_pessoa_produtor or ta.cod_pessoa_produtor = tev.cod_pessoa_corrente) ');
     Query.SQL.Add('       and ta.cod_animal = tev.cod_animal ');

     if (CodMicroRegiaoSisBov <> -1) then
     begin
       if (CodMicroRegiaoSisBov = 88) then //Parametro passado pelo ASP, indicando que o filtro deverá ser por micro regiao -1
       begin
         Query.SQL.Add('          and ta.cod_micro_regiao_sisbov = -1');
       end
       else
       begin
         Query.SQL.Add('          and ta.cod_micro_regiao_sisbov = :CodMicroRegiaoSisBov');
       end;
     end;

    if (Conexao.CodPapelUsuario = 9) then
    begin
      Query.SQL.Add('        and ( ta.cod_pessoa_tecnico in ( select top ' + IntToStr(Max) + ' ttp.cod_pessoa_tecnico ');
      Query.SQL.Add('                                           from tab_tecnico_produtor ttp ');
      Query.SQL.Add('                                              , tab_tecnico tt');
      Query.SQL.Add('                                          where tt.cod_pessoa_tecnico = ttp.cod_pessoa_tecnico');
      Query.SQL.Add('                                            and tt.cod_pessoa_gestor  = :cod_pessoa_gestor ');
      Query.SQL.Add('                                            and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Query.SQL.Add('                                            and tt.dta_fim_validade is null ');
      Query.SQL.Add('                                            and ttp.dta_fim_validade is null )');
      Query.SQL.Add('             or ta.cod_pessoa_tecnico is null ) ');
    end;


     if (IndRestringeTecnico = 'S') then
     begin
       if (IndAnimalSemTecnico = 'N') then
       begin
         if CodPessoaTecnico > 0 then
         begin
           Query.SQL.Add('      and ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ');
         end
         else
         begin
           if (Conexao.CodPapelUsuario = 3) then
           begin
              Query.SQL.Add('      and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                            '       or  ta.cod_pessoa_tecnico is null)');
           end;
         end;
       end
       else
       begin
          Query.SQL.Add('      and ta.cod_pessoa_tecnico is null');
       end;
     end;

     if CodEvento > 0 then
     begin
       Query.SQL.Add('       and ta.dta_nascimento < :dta_fim_evento_nascimento ');
     end;

     Query.SQL.Add('       and tev.cod_evento = :CodEvento ');

     if IndAutenticacao = 'S' then
     begin
       Query.SQL.Add('       and cod_autenticacao_sisbov is not null  ');
     end;
  end;

  if (IndSexo = 'M') or (IndSexo = 'F') then
  begin
    Query.SQL.Add('       and ta.ind_sexo =:IndSexo');
  end;
//  if (CodReprodutorMultiplo > 0) then begin
//    Query.SQL.Add('          and ta.cod_reprodutor_multiplo <> ' + IntToStr(CodReprodutorMultiplo));
//  end;

  if CodOrdenacao = 'M' then
  begin
    Query.SQL.Add(' order by tf.sgl_fazenda, ta.cod_animal_manejo ');
  end;

  if CodOrdenacao = 'C' then
  begin
    Query.SQL.Add(' order by ta.cod_animal_certificadora ');
  end;

  if CodOrdenacao = 'S' then
  begin
    Query.SQL.Add(' order by CodAnimalSisBov ');
  end;

  if CodOrdenacao = 'A' then
  begin
    Query.SQL.Add(' order by ta.des_apelido ');
  end;
  {$ENDIF}

  Query.ParamByName('data_referencia').AsDateTime := DtaEvento;
  Query.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;

  if CodFazendaManejo <> -1 then
  begin
    Query.ParamByName('CodFazendaManejo').AsInteger := CodFazendaManejo;
  end;

  if (CodManejoInicio <> '') then
  begin
    Query.ParamByName('CodManejoInicio').AsString := CodManejoInicio;
  end;

  if (CodManejoFim <> '') then
  begin
    Query.ParamByName('CodManejoFim').AsString := CodManejoFim;
  end;

  if (CodAnimalCertificadora <> '') then
    Query.ParamByName('CodAnimalCertificadora').AsString := CodAnimalCertificadora;

  if (CodPaisSisBov <> -1) then
    Query.ParamByName('CodPaisSisBov').AsInteger := CodPaisSisBov;

  if (CodEstadoSisBov <> -1) then
    Query.ParamByName('CodEstadoSisBov').AsInteger := CodEstadoSisBov;

  if (CodMicroRegiaoSisBov <> -1) then
  begin
    if (CodMicroRegiaoSisBov <> 88) then
    begin
      Query.ParamByName('CodMicroRegiaoSisBov').AsInteger := CodMicroRegiaoSisBov;
    end;
  end;

  if (CodSisBovInicio <> -1) then
  begin
    Query.ParamByName('CodSisBovInicio').AsInteger := CodSisBovInicio;
  end;

  if (CodSisBovFim <> -1) then
  begin
    Query.ParamByName('CodSisBovFim').AsInteger := CodSisBovFim;
  end;

  if (CodSituacaoSisBov <> '') then
  begin
    Query.ParamByName('CodSituacaoSisBov').AsString := CodSituacaoSisBov;
  end;

  if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
  begin
    Query.ParamByName('DtaNascimentoInicio').AsDateTime := DtaNascimentoInicio;
    Query.ParamByName('DtaNascimentoFim').AsDateTime := DtaNascimentoFim;
  end;

  if (CodFazendaNascimento <> -1) then
  begin
    Query.ParamByName('CodFazendaNascimento').AsInteger := CodFazendaNascimento;
  end;

  if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then
  begin
    Query.ParamByName('DtaCompraInicio').AsDateTime := DtaCompraInicio;
    Query.ParamByName('DtaCompraFim').AsDateTime := DtaCompraFim;
  end;

  if (CodPessoaSecundariaCriador <> -1) then
  begin
    Query.ParamByName('CodPessoaSecundariaCriador').AsInteger := CodPessoaSecundariaCriador;
  end;

  if (NomAnimal <> '') then
  begin
    Query.ParamByName('NomAnimal').AsString := '%' + NomAnimal + '%';
  end;

  if (DesApelido <> '') then
  begin
    Query.ParamByName('DesApelido').AsString := '%' + DesApelido + '%';
  end;

  if (CodAptidao <> -1) then
  begin
    Query.ParamByName('CodAptidao').AsInteger := CodAptidao;
  end;

  if (IndSexo = 'F') or (IndSexo = 'M') then
  begin
    Query.ParamByName('IndSexo').AsString := IndSexo;
  end;

  if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then
  begin
    Query.ParamByName('CodPessoaProdutor1').AsInteger := Conexao.CodProdutorTrabalho;
  end;

  if (SglFazendaPai <> '') then
  begin
    Query.ParamByName('SglFazendaPai').AsString := SglFazendaPai;
  end;

  if (CodAnimalPai <> '') then
  begin
    Query.ParamByName('CodAnimalPai').AsString := CodAnimalPai;
  end;

  if (DesApelidoPai <> '') then
  begin
    Query.ParamByName('DesApelidoPai').AsString := DesApelidoPai;
  end;

  if (SglFazendaMae <> '') or (CodAnimalMae <> '') then
  begin
    Query.ParamByName('CodPessoaProdutor2').AsInteger := Conexao.CodProdutorTrabalho;
  end;

  if (SglFazendaMae <> '') then
  begin
    Query.ParamByName('SglFazendaMae').AsString := SglFazendaMae;
  end;

  if (CodAnimalMae <> '') then
  begin
    Query.ParamByName('CodAnimalMae').AsString := CodAnimalMae;
  end;

  if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then
  begin
    Query.ParamByName('IndAnimalCastrado').AsString := IndAnimalCastrado;
  end;

  if (CodRegimeAlimentar <> -1) then
  begin
    Query.ParamByName('CodRegimeAlimentar').AsInteger := CodRegimeAlimentar;
  end;

  if (CodAssociacao <> -1) then
  begin
    Query.ParamByName('CodAssociacaoRaca').AsInteger := CodAssociacao;
  end;

  if (CodGrauSangue <> -1) then
  begin
    Query.ParamByName('CodGrauSangue').AsInteger := CodGrauSangue;
  end;

  if (NumRgd <> '') then
  begin
    Query.ParamByName('NumRgd').AsString := NumRgd + '%';
  end;

  if (CodTipoLugar <> -1) then
  begin
    if CodTipoLugar <> 23 then
    begin
      Query.ParamByName('CodTipoLugar').AsInteger := CodTipoLugar;
    end;
  end;

  if (CodFazendaCorrente <> -1) then
  begin
    Query.ParamByName('CodFazendaCorrente').AsInteger := CodFazendaCorrente;
  end;
  if (NumImovelCorrente <> '') then
  begin
    Query.ParamByName('NumImovelCorrente').AsString := NumImovelCorrente;
  end;
  if (CodLocalizacaoCorrente > -1) then
  begin
    Query.ParamByName('CodLocalizacaoCorrente').AsInteger := CodLocalizacaoCorrente;
  end;
  if (NumCPFCNPJCorrente <> '') then
  begin
    Query.ParamByName('NumCPFCNPJCorrente').AsString := NumCPFCNPJCorrente;
  end;
  if (CodEvento > 0) then
  begin
    Query.ParamByName('dta_fim_evento_nascimento').AsDateTime := DtaFimEventoNascimento;
    if (IndEventoAplicado <> 'N') then
    begin
      Query.ParamByName('CodEvento').AsInteger := CodEvento;
    end;
    if (IndEventoAplicado = 'N') or (IndEventoAplicado = 'S') then
    begin
      Query.ParamByName('Cod_Tipo_Evento').AsInteger := CodTipoEvento;
    end;
  end;

  if (IndAnimalSemTecnico = 'N') and (IndRestringeTecnico = 'S') then begin
    if (CodTecnico > 0) then
    begin
      Query.ParamByName('cod_pessoa_tecnico').AsInteger := CodTecnico;
    end;
    if (CodTecnico < 0) and (Conexao.CodPapelUsuario = 3) then
    begin
      Query.ParamByName('cod_pessoa_tecnico').AsInteger := Conexao.CodPessoa;
    end;
  end;

  if (CodReprodutorMultiplo > 0) then
    Query.ParamByName('CodReprodutorMultiplo').AsInteger := CodReprodutorMultiplo;
  if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then
  begin
    Query.ParamByName('codraca1').AsInteger := CodRaca1;
    Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialIncio1;
    Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
  end;
  if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then
  begin
    Query.ParamByName('codraca2').AsInteger := CodRaca2;
    Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
    Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
  end;
  if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then
  begin
    Query.ParamByName('codraca3').AsInteger := CodRaca3;
    Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialIncio3;
    Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
  end;
  if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then
  begin
    Query.ParamByName('codraca4').AsInteger := CodRaca4;
    Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialIncio4;
    Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
  end;

  if restringe_animais = 'S' then
  begin
    case CodTipoEvento of
      2:
      begin
        Query.Parambyname('qtd_idade_minima_desmame').asinteger := QtdIdadeMinimaDesmame;
        Query.Parambyname('qtd_idade_maxima_desmame').asinteger := QtdIdadeMaximaDesmame;
        Query.Parambyname('dta_evento').asdatetime := DtaEvento;
      end;
      23,26,27:
      begin
        Query.ParamByName('cod_estacao_monta').asinteger := CodEstacaoMontaT;
      end;
      24:
      begin
        Query.Parambyname('dta_inicio_evento').asdatetime := dta_inicio_evento;
        Query.Parambyname('dta_fim_evento').asdatetime := dta_fim_evento;
      end;
      28:
      begin
        if dta_inicio_evento > 0 then
        begin
          Query.Parambyname('dta_inicio_evento').asdatetime := dta_inicio_evento;
        end;
        if dta_fim_evento > 0 then
        begin
          Query.Parambyname('dta_fim_evento').asdatetime := dta_fim_evento + 1;
        end;
        if DtaProvavelMonta > 0 then
        begin
          Query.Parambyname('dta_provavel_monta').asdatetime := DtaProvavelMonta;
        end;
      end;
    end;
  end;

  if IndAptoCobertura = 'S' then
  begin
    if (VerificaCobertura = 'S') then
      Query.Parambyname('dta_diagnostico').asdatetime := DtaEvento - StrtoInt(valorParametro(60))
    else
      Query.Parambyname('dta_diagnostico').asdatetime := Date - StrtoInt(valorParametro(60));
  end;

  // Para o evento de parto, trazer apenas as vacas da estação de monta selecionado.
  if CodEstacaoMonta > 0 then
  begin
    Query.Parambyname('CodEstacaoMonta').asinteger := CodEstacaoMonta;
  end;

  if CodTipoEvento = 28 then
  begin
    Query.ParambyName('dta_evento_monta').asdatetime := DtaEvento;
  end;

  try
//    query.SQL.SaveToFile('c:\query.sql');
    Query.Open;
    if Query.RecordCount = Max then
    begin
      Mensagens.Adicionar(1152, Self.ClassName, 'Pesquisar', [IntToStr(Max), IntToStr(Max)]);
      Result := 1152;
      Exit;
    end;

    Result := 0;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(691, Self.ClassName, 'Pesquisar', [E.Message]);
      Result := -691;
      Exit;
    end;
  end;
end;

function TIntAnimais.AlterarFiliacao(CodAnimalFilho, CodAnimal,
  CodFazendaManejo: Integer; CodAnimalManejo, CodAnimalCertificadora,
  CodTipoFiliacao: String): Integer;
const
  Metodo : Integer = 240;
  NomeMetodo: String = 'AlterarFiliacao';
var
  Q : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  CodFaz : Integer;
  NomFiliacao, CodAni : String;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado('AlterarFiliacao');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'AlterarFiliacao', []);
    Result := -188;
    Exit;
  end;

// Foi retirado a consistencia de cadastro efetivado, pois,
// o usuario poderá alterar alguns dados do animal

  // Verifica se o cadastro já foi efetivado
//  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimalFilho, True);
//  if Result < 0 then begin
//    Exit;
//  end;
//  if Result = 1 then begin
//    Mensagens.Adicionar(712, Self.ClassName, 'AlterarFiliacao', []);
//    Result := -712;
//    Exit;
//  end;

  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica tipo de filiação
  if (UpperCase(CodTipoFiliacao) <> 'P') and (UpperCase(CodTipoFiliacao) <> 'M') and
     (UpperCase(CodTipoFiliacao) <> 'R') and (UpperCase(CodTipoFiliacao) <> 'G') then begin
    Mensagens.Adicionar(702, Self.ClassName, 'AlterarFiliacao', []);
    Result := -702;
    Exit;
  end;

  if UpperCase(CodTipoFiliacao) = 'P' then begin
    NomFiliacao := 'Pai';
  end else begin
    if UpperCase(CodTipoFiliacao) = 'G' then begin
      NomFiliacao := 'Reprodutor Múltiplo';
    end else begin
      if UpperCase(CodTipoFiliacao) = 'M' then begin
        NomFiliacao := 'Mãe';
      end else begin
        NomFiliacao := 'Receptor';
      end;
    end;
  end;

  // Verifica coerência dos parâmetros
  if CodAnimal > 0 then begin
    if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or (CodAnimalCertificadora <> '') then begin
      Mensagens.Adicionar(701, Self.ClassName, 'AlterarFiliacao', [NomFiliacao]);
      Result := -701;
      Exit;
    end;
  end;
  if CodAnimalManejo <> '' then begin
    if (CodAnimal > 0) or (CodAnimalCertificadora <> '') then begin
      Mensagens.Adicionar(703, Self.ClassName, 'AlterarFiliacao', [NomFiliacao]);
      Result := -703;
      Exit;
    end;
  end;
  if CodAnimalCertificadora <> '' then begin
    if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or (CodAnimal > 0) then begin
      Mensagens.Adicionar(704, Self.ClassName, 'AlterarFiliacao', [NomFiliacao]);
      Result := -704;
      Exit;
    end;
  end;

  // Verifica animal filho
  Result := ObtemDadosAnimal(CodAnimalFilho, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
     (DadosAnimal.CodPessoaTecnico <> 0) then begin
      Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
      Result := -1698;
      Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      if (UpperCase(CodTipoFiliacao) <> 'P') and (UpperCase(CodTipoFiliacao) <> 'G') then begin
        // verifica se o animal foi cadastrado através de um evento de parto
        Q.SQL.Clear;
        Q.SQL.Add(' select 1 from tab_animal_cria '+
                  ' where cod_animal = :cod_animal '+
                  ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.ParamByName('cod_animal').asinteger := CodAnimalFilho;
        Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Q.Open;
        if not Q.IsEmpty then begin
          Mensagens.Adicionar(1571, Self.ClassName, 'AlterarFiliacao', []);
          Result := -1571;
          Exit;
        end;
      end;

      if (CodAnimal > 0) or (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or
         (CodAnimalCertificadora <> '') then begin
        // Obtem animal pai, mãe ou receptor
        Q.SQL.Clear;
        if UpperCase(CodTipoFiliacao) <> 'G' then begin
         {$IFDEF MSSQL}
          Q.SQL.Add('select cod_animal, cod_fazenda_manejo, cod_animal_manejo from tab_animal ' +
                    ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
          if CodAnimal > 0 then begin
            Q.SQL.Add('   and cod_animal = :cod_animal ');
          end;
          if CodAnimalManejo <> '' then begin
            if CodFazendaManejo > 0 then begin
              Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
            end;  
            Q.SQL.Add('   and cod_animal_manejo = :cod_animal_manejo ');
          end;
          if CodAnimalCertificadora <> '' then begin
            Q.SQL.Add('   and cod_animal_certificadora = :cod_animal_certificadora ');
          end;
          Q.SQL.Add('   and dta_fim_validade is null ');
         {$ENDIF}
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          if CodAnimal > 0 then begin
            Q.ParamByName('cod_animal').AsInteger := CodAnimal;
          end;
          if CodAnimalManejo <> '' then begin
            if CodFazendaManejo > 0 then begin
              Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
            end;
            Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
          end;
          if CodAnimalCertificadora <> '' then begin
            Q.ParamByName('cod_animal_certificadora').AsString := CodAnimalCertificadora;
          end;
        end else begin
         {$IFDEF MSSQL}
          Q.SQL.Add('select cod_reprodutor_multiplo, cod_fazenda_manejo, cod_reprodutor_multiplo_manejo from tab_reprodutor_multiplo ' +
                    ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
          if CodAnimal > 0 then begin
            Q.SQL.Add('   and cod_reprodutor_multiplo = :cod_reprodutor_multiplo ');
          end;
          if CodAnimalManejo <> '' then begin
            if CodFazendaManejo > 0 then begin
              Q.SQL.Add('   and cod_fazenda_manejo = :cod_fazenda_manejo ');
            end;
            Q.SQL.Add('   and cod_reprodutor_multiplo_manejo = :cod_reprodutor_multiplo_manejo ');
          end;
         {$ENDIF}
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          if CodAnimal > 0 then begin
            Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodAnimal;
          end;
          if CodAnimalManejo <> '' then begin
            if CodFazendaManejo > 0 then begin
              Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
            end;
            Q.ParamByName('cod_reprodutor_multiplo_manejo').AsString := CodAnimalManejo;
          end;
        end;

        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(705, Self.ClassName, 'AlterarFiliacao', [NomFiliacao]);
          Result := -705;
          Exit;
        end;

        if UpperCase(CodTipoFiliacao) <> 'G' then begin
          if Q.FieldByName('cod_animal').AsInteger = CodAnimalFilho then begin
            Mensagens.Adicionar(718, Self.ClassName, 'AlterarFiliacao', [NomFiliacao]);
            Result := -718;
            Exit;
          end;
        end;

        CodFaz := Q.FieldByName('cod_fazenda_manejo').AsInteger;
        if UpperCase(CodTipoFiliacao) <> 'G' then begin
          CodAni := Q.FieldByName('cod_animal_manejo').AsString;
        end else begin
          CodAni := Q.FieldByName('cod_reprodutor_multiplo_manejo').AsString;
        end;
        Q.Close;
      end else begin
        CodFaz := -1;
        CodAni := '';
      end;

      if (UpperCase(CodTipoFiliacao) = 'P') or (UpperCase(CodTipoFiliacao) = 'G') then begin
        if CodAni <> '' then begin
          Result := VerificaAnimalPai(DadosAnimal.CodEspecie, DadosAnimal.CodAptidao, DadosAnimal.CodRaca, CodFaz, CodAni);
          if Result < 0 then begin
            Exit;
          end;
        end;
      end;

      // Verifica animal mae (R18, R20)
      if UpperCase(CodTipoFiliacao) = 'M' then begin
        if CodAni <> '' then begin
          Result := VerificaAnimalMae(DadosAnimal.CodEspecie, DadosAnimal.CodAptidao, CodFaz, CodAni);
          if Result < 0 then begin
            Exit;
          end;
        end;
      end;

      // Verifica animal receptor (R18, R21)
      if UpperCase(CodTipoFiliacao) = 'R' then begin
        if CodAni <> '' then begin
          Result := VerificaAnimalReceptor(DadosAnimal.CodEspecie, CodFaz, CodAni);
          if Result < 0 then begin
            Exit;
          end;
        end;
      end;

      // Abre Transação
      BeginTran;

      // Altera a filiação
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal ');
      if UpperCase(CodTipoFiliacao) = 'G' then begin
        Q.SQL.Add('set cod_reprodutor_multiplo = :cod_reprodutor_multiplo, ' +
                  '    cod_animal_pai = null');
      end;
      if UpperCase(CodTipoFiliacao) = 'P' then begin
        Q.SQL.Add('set cod_animal_pai = :cod_animal_pai, ' +
                  '    cod_reprodutor_multiplo = null');
      end;
      if UpperCase(CodTipoFiliacao) = 'M' then begin
        Q.SQL.Add('set cod_animal_mae = :cod_animal_mae');
      end;
      if UpperCase(CodTipoFiliacao) = 'R' then begin
        Q.SQL.Add('set cod_animal_receptor = :cod_animal_receptor');
      end;
      Q.SQL.Add('where cod_pessoa_produtor = :cod_pessoa_produtor' +
                '   and cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalFilho;

      if UpperCase(CodTipoFiliacao) = 'G' then begin
        if FCodReprodutorMultiplo > 0 then begin
          Q.ParamByName('cod_reprodutor_multiplo').AsInteger := FCodReprodutorMultiplo;
        end else begin
          Q.ParamByName('cod_reprodutor_multiplo').DataType := ftInteger;
          Q.ParamByName('cod_reprodutor_multiplo').Clear;
        end;
      end;
      if UpperCase(CodTipoFiliacao) = 'P' then begin
        if FCodAnimalPai > 0 then begin
          Q.ParamByName('cod_animal_pai').AsInteger := FCodAnimalPai;
        end else begin
          Q.ParamByName('cod_animal_pai').DataType := ftInteger;
          Q.ParamByName('cod_animal_pai').Clear;
        end;
      end;
      if UpperCase(CodTipoFiliacao) = 'M' then begin
        if FCodAnimalMae > 0 then begin
          Q.ParamByName('cod_animal_mae').AsInteger := FCodAnimalMae;
        end else begin
          Q.ParamByName('cod_animal_mae').DataType := ftInteger;
          Q.ParamByName('cod_animal_mae').Clear;
        end;
      end;
      if UpperCase(CodTipoFiliacao) = 'R' then begin
        if FCodAnimalReceptor > 0 then begin
          Q.ParamByName('cod_animal_receptor').AsInteger := FCodAnimalReceptor;
        end else begin
          Q.ParamByName('cod_animal_receptor').DataType := ftInteger;
          Q.ParamByName('cod_animal_receptor').Clear;
        end;
      end;
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Se animal alterado estiver mamando, muda categoria da mãe
      if DadosAnimal.CodCategoriaAnimal = 1 then begin
        if (UpperCase(CodTipoFiliacao) = 'M') or (UpperCase(CodTipoFiliacao) = 'R') then begin
          Q.SQL.Clear;
          {$IFDEF MSSQL}
          Q.SQL.Add('update tab_animal ' +
                    '   set cod_categoria_animal = :cod_categoria_animal ' +
                    ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                    '   and cod_animal = :cod_animal ');
          {$ENDIF}
          // Se aptidão da mãe for "Leite", passa categoria para "Vaca em Lactação"
          // senão passa categoria para "Vaca Parida"
          if FCodAptidaoMae = 2 then begin
            Q.ParamByName('cod_categoria_animal').AsInteger := 8;
          end else begin
            Q.ParamByName('cod_categoria_animal').AsInteger := 6;
          end;
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          if UpperCase(CodTipoFiliacao) = 'M' then begin
            Q.ParamByName('cod_animal').AsInteger := FCodAnimalMae;
          end else begin
            Q.ParamByName('cod_animal').AsInteger := FCodAnimalReceptor;
          end;
          Q.ExecSQL;
        end;
      end;
      FCodAptidaoMae := 0;

      // Chama proc de composição racial caso não seja inserção múltipla e
      // caso o animal possua pai ou mãe
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('exec spt_calcula_comp_racial :cod_animal, ' +
                '                             :cod_pessoa_produtor, ');
      if FCodAnimalPai > 0 then
         Q.SQL.Add('                             :cod_animal_pai, ')
      else
         Q.SQL.Add('                             null, ');
      if FCodAnimalMae > 0 then
         Q.SQL.Add('                             :cod_animal_mae, ')
      else
         Q.SQL.Add('                             null, ');
      Q.SQL.Add('                             :ind_tipo ');
    {$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := CodAnimalFilho;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if FCodAnimalPai> 0 then
         Q.ParamByName('cod_animal_pai').AsInteger := FCodAnimalPai;
      if FCodAnimalMae> 0 then
         Q.ParamByName('cod_animal_mae').AsInteger := FCodAnimalMae;
      // Tipo 2 inibe o retorno de erro pela proc caso não encontre composição para pai e/ou mãe
      Q.ParamByName('ind_tipo').AsInteger := 2;
      Q.ExecSQL;

      // Confirma transação
      Commit;

      ZerarValoresUltimaPesquisa;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(707, Self.ClassName, 'AlterarFiliacao', [E.Message]);
        Result := -707;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AlterarRegistro(CodAnimal, CodAssociacaoRaca,
  CodGrauSangue: Integer; NumRGD: String): Integer;
const
  Metodo : Integer = 241;
  NomeMetodo: String = 'AlterarRegistro';
var
  Q : THerdomQuery;
  DadosAnimal : TDadosAnimal;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado('AlterarRegistro');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'AlterarRegistro', []);
    Result := -188;
    Exit;
  end;

// Foi retirado a consistencia de cadastro efetivado, pois,
// o usuario poderá alterar alguns dados do animal

  // Verifica se o cadastro já foi efetivado
//  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
//  if Result < 0 then begin
//    Exit;
//  end;
//  if Result = 1 then begin
//    Mensagens.Adicionar(712, Self.ClassName, 'AlterarRegistro', []);
//    Result := -712;
//    Exit;
//  end;

  // Verifica animal
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
     (DadosAnimal.CodPessoaTecnico <> 0) then begin
      Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
      Result := -1698;
      Exit;
  end;

  // Verifica associação de raça, grau de sangue e RGD do animal (R24, R25, R29, R31)
  Result := VerificaAssociacaoGrauSangue(CodAssociacaoRaca, CodGrauSangue, NumRGD);
  if Result < 0 then begin
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação
      BeginTran;


      Result := AlterarAnimalSISBOV(DadosAnimal, DadosAnimal.DtaIdentificacaoSisbov, DadosAnimal.DtaNascimento,
        NumRGD, DadosAnimal.CodPropriedadeNascimento, DadosAnimal.CodFazendaNascimento, DadosAnimal.CodPaisSISBOV,
        DadosAnimal.CodEstadoSISBOV, DadosAnimal.CodMicroRegiaoSISBOV, DadosAnimal.CodAnimalSISBOV, DadosAnimal.NumDVSISBOV,
        DadosAnimal.CodRaca, DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodTipoIdentificador3,
        DadosAnimal.CodTipoIdentificador4, DadosAnimal.IndSexo, False);
      if Result < 0 then
      begin
        Rollback;
        Exit;
      end;

      // Altera o registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal ' +
                '   set cod_associacao_raca = :cod_associacao_raca, ' +
                '       cod_grau_sangue = :cod_grau_sangue, ' +
                '       num_rgd = :num_rgd ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;

      if CodAssociacaoRaca > 0 then begin
        Q.ParamByName('cod_associacao_raca').AsInteger := CodAssociacaoRaca;
      end else begin
        Q.ParamByName('cod_associacao_raca').DataType := ftInteger;
        Q.ParamByName('cod_associacao_raca').Clear;
      end;
      if CodGrauSangue > 0 then begin
        Q.ParamByName('cod_grau_sangue').AsInteger := CodGrauSangue;
      end else begin
        Q.ParamByName('cod_grau_sangue').DataType := ftInteger;
        Q.ParamByName('cod_grau_sangue').Clear;
      end;
      if NumRGD <> '' then begin
        Q.ParamByName('num_rgd').AsString := NumRGD;
      end else begin
        Q.ParamByName('num_rgd').DataType := ftString;
        Q.ParamByName('num_rgd').Clear;
      end;
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Confirma transação
      Commit;

      ZerarValoresUltimaPesquisa;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(708, Self.ClassName, 'AlterarRegistro', [E.Message]);
        Result := -708;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.BuscarFiliacao(CodAnimal: Integer): Integer;
const
  NomMetodo: String = 'BuscarFiliacao';
  Metodo: Integer = 242;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado('BuscarFiliacao');
    Exit;
  end;

  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'BuscarFiliacao', []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Seleciona animal
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_pessoa_produtor,  ' +
                '       cod_animal, ' +
                '       cod_animal_pai, ' +
                '       cod_animal_mae, ' +
                '       cod_animal_receptor, ' +
                '       cod_animal_manejo, ' +
                '       cod_pessoa_tecnico ' +
                '  from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.Open;
      if Q.IsEmpty then
      begin
        Mensagens.Adicionar(692, Self.ClassName, 'BuscarFiliacao', []);
        Result := -692;
        Exit;
      end;

      if (Conexao.CodPapelUsuario = 3)
        and (Q.FieldByName('cod_pessoa_tecnico').AsInteger <> Conexao.CodUsuario)
        and (not Q.FieldByName('cod_pessoa_tecnico').IsNull) then
      begin
         Mensagens.Adicionar(1698, Self.ClassName, NomMetodo, [Q.FieldByName('cod_animal_manejo').AsString]);
         Result := -1698;
         Exit;
      end;

      IntFiliacao.CodPessoaProdutor := Q.FieldByName('cod_pessoa_produtor').AsInteger;
      IntFiliacao.CodAnimal := Q.FieldByName('cod_animal').AsInteger;
      if Q.FieldByName('cod_animal_pai').AsInteger > 0 then begin
        Result := IntFiliacao.AnimalPai.CarregaPropriedadesResumidas(Q.FieldByName('cod_animal_pai').AsInteger, '', Conexao, Mensagens);
        if Result < 0 then begin
          Exit;
        end;
      end;
      if Q.FieldByName('cod_animal_mae').AsInteger > 0 then begin
        Result := IntFiliacao.AnimalMae.CarregaPropriedadesResumidas(Q.FieldByName('cod_animal_mae').AsInteger, '', Conexao, Mensagens);
        if Result < 0 then begin
          Exit;
        end;
      end;
      if Q.FieldByName('cod_animal_receptor').AsInteger > 0 then begin
        Result := IntFiliacao.AnimalReceptor.CarregaPropriedadesResumidas(Q.FieldByName('cod_animal_receptor').AsInteger, '', Conexao, Mensagens);
        if Result < 0 then begin
          Exit;
        end;
      end;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(709, Self.ClassName, 'BuscarFiliacao', [E.Message]);
        Result := -709;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.BuscarRegistro(CodAnimal: Integer): Integer;
const
  Metodo: Integer = 243;
  NomMetodo : String = 'BuscarRegistro';
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Seleciona animal
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select ta.cod_pessoa_produtor, ' +
                '       ta.cod_animal, ' +
                '       ta.cod_associacao_raca, ' +
                '       tar.sgl_associacao_raca, ' +
                '       tar.nom_associacao_raca, ' +
                '       ta.cod_grau_sangue, ' +
                '       tgs.sgl_grau_sangue, ' +
                '       tgs.des_grau_sangue, ' +
                '       ta.num_rgd, ' +
                '       cod_animal_manejo, ' +
                '       cod_pessoa_tecnico ' +
                '  from tab_animal ta, ' +
                '       tab_associacao_raca tar, ' +
                '       tab_grau_sangue tgs ' +
                ' where tar.cod_associacao_raca =* ta.cod_associacao_raca ' +
                '   and tgs.cod_grau_sangue =* ta.cod_grau_sangue ' +
                '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and ta.cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(692, Self.ClassName, NomMetodo, []);
        Result := -692;
        Exit;
      end;

      if (Conexao.CodPapelUsuario = 3)
        and (Q.FieldByName('cod_pessoa_tecnico').AsInteger <> Conexao.CodUsuario)
        and (Q.FieldByName('cod_pessoa_tecnico').AsInteger <> 0) then
      begin
         Mensagens.Adicionar(1698, Self.ClassName, NomMetodo, [Q.FieldByName('cod_animal_manejo').AsString]);
         Result := -1698;
         Exit;
      end;
      
      IntRegistro.CodPessoaProdutor := Q.FieldByName('cod_pessoa_produtor').AsInteger;
      IntRegistro.CodAnimal := Q.FieldByName('cod_animal').AsInteger;
      IntRegistro.CodAssociacaoRaca := Q.FieldByName('cod_associacao_raca').AsInteger;
      IntRegistro.SglAssociacaoRaca := Q.FieldByName('sgl_associacao_raca').AsString;
      IntRegistro.NomAssociacaoRaca := Q.FieldByName('nom_associacao_raca').AsString;
      IntRegistro.CodGrauSangue := Q.FieldByName('cod_grau_sangue').AsInteger;
      IntRegistro.SglGrauSangue := Q.FieldByName('sgl_grau_sangue').AsString;
      IntRegistro.DesGrauSangue := Q.FieldByName('des_grau_sangue').AsString;
      IntRegistro.NumRGD := Q.FieldByName('num_rgd').AsString;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(710, Self.ClassName, NomMetodo, [E.Message]);
        Result := -710;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.CancelarEfetivacao(CodAnimal: Integer): Integer;
const
  Metodo : Integer = 171;
  NomeMetodo : String = 'CancelarEfetivacao';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  Result := CancelarEfetivacoes(-1, '', '', IntToStr(CodAnimal));
end;

function TIntAnimais.EfetivarCadastro(CodAnimal: Integer): Integer;
const
  Metodo : Integer = 170;
  NomeMetodo : String = 'EfetivarCadastro';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  Result := EfetivarCadastros(-1, '', '', IntToStr(CodAnimal));
end;

function TIntAnimais.EfetivarCadastro(CodAnimal: Integer; IndLogMensagem: Boolean): Integer;
const
  Metodo : Integer = 170;
  NomeMetodo : String = 'EfetivarCadastro';
begin
  Result := -1;
  FIndLogMensagem := IndLogMensagem;
  try
    if not Inicializado then begin
      RaiseNaoInicializado(NomeMetodo);
      Exit;
    end;

    // Verifica se usuário pode executar método
    if not Conexao.PodeExecutarMetodo(Metodo) then begin
      Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
      Result := -188;
      Exit;
    end;

    Result := EfetivarCadastros(-1, '', '', IntToStr(CodAnimal));
  finally
    FIndLogMensagem := False;
  end;
end;

function TIntAnimais.InserirNascidos(QtdAnimais, CodFazendaManejo: Integer;
  TxtPrefixoAnimalManejo, CodInicialAnimalManejo, TxtSufixoAnimalManejo,
  TxtPrefixoAnimalCertificadora, CodInicialAnimalCertificadora,
  TxtSufixoAnimalCertificadora: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov,
  CodInicialAnimalSisbov: Integer; CodSituacaoSisbov: String;
  DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String;
  CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer;
  DtaNascimento: TDateTime; CodFazendaNascimento,
  CodTipoIdentificador1, CodPosicaoIdentificador1,
  CodTipoIdentificador2, CodPosicaoIdentificador2,
  CodTipoIdentificador3, CodPosicaoIdentificador3,
  CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie,
  CodAptidao, CodRaca, CodPelagem: Integer; IndSexo,
  IndAnimalCastrado: String; CodRegimeAlimentar,
  CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente: Integer; CodPropriedadeCorrente: Integer;
  NumCNPJCPFCorrente: String; CodPessoaCorrente: Integer;
  TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
const
  Metodo : Integer = 246;
  NomeMetodo : String = 'InserirNascidos';
var
  CodMan, CodCert, CodSisb, I, CodAni, CodReg, CodLog : Integer;
  CodAnimalManejo, CodAnimalCertificadora : String;
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  NumDVSisbov : Integer;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Consiste Quantidade de animais
  if (QtdAnimais < 1) or (QtdAnimais > StrToInt(ValorParametro(9))) then begin
    Mensagens.Adicionar(739, Self.ClassName, NomeMetodo, [ValorParametro(9)]);
    Result := -739;
    Rollback;
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Consiste montagem do código de manejo
  if CodInicialAnimalManejo = '' then begin
    Mensagens.Adicionar(745, Self.ClassName, NomeMetodo, []);
    Result := -745;
    Rollback;
    Exit;
  end;
  TxtPrefixoAnimalManejo := Trim(TxtPrefixoAnimalManejo);
  TxtSufixoAnimalManejo := Trim(TxtSufixoAnimalManejo);
  Result := VerificaCodigoVariavel(TxtPrefixoAnimalManejo,
                                   CodInicialAnimalManejo,
                                   TxtSufixoAnimalManejo,
                                   QtdAnimais,
                                   Conexao.QtdCaracteresManejoProdutor,
                                   'código de manejo');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Abre transação
  BeginTran;

  // Trata Códigos Animal Manejo
  Result := VerificaUtilizacaoCodAnimalManejo(CodFazendaManejo,
                                              TxtPrefixoAnimalManejo,
                                              CodInicialAnimalManejo,
                                              TxtSufixoAnimalManejo,
                                              QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

    // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    if (TxtPrefixoAnimalCertificadora <> '') or (CodInicialAnimalCertificadora <> '') or
       (TxtSufixoAnimalCertificadora <> '') then begin
      Mensagens.Adicionar(715, Self.ClassName, NomeMetodo, []);
      Result := -715;
      Exit;
    end;

    CodAnimalManejo := TxtPrefixoAnimalManejo +
                       CodInicialAnimalManejo +
                       TxtSufixoAnimalManejo;

    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then begin
      Exit;
    end;

    TxtPrefixoAnimalCertificadora := Copy(CodAnimalCertificadora, 1, Pos(CodAnimalManejo, CodAnimalCertificadora) + Length(TxtPrefixoAnimalManejo) - 1);
    CodInicialAnimalCertificadora := CodInicialAnimalManejo;
    TxtSufixoAnimalCertificadora := TxtSufixoAnimalManejo;
  end;

  // Consiste montagem do código da certificadora
  if CodInicialAnimalCertificadora = '' then begin
    Mensagens.Adicionar(746, Self.ClassName, NomeMetodo, []);
    Result := -746;
    Rollback;
    Exit;
  end;
  TxtPrefixoAnimalCertificadora := Trim(TxtPrefixoAnimalCertificadora);
  TxtSufixoAnimalCertificadora := Trim(TxtSufixoAnimalCertificadora);
  Result := VerificaCodigoVariavel(TxtPrefixoAnimalCertificadora,
                                   CodInicialAnimalCertificadora,
                                   TxtSufixoAnimalCertificadora,
                                   QtdAnimais,
                                   20,
                                   'código da certificadora');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Trata Códigos Animal Certificadora
  Result := VerificaUtilizacaoCodAnimalCertificadora(TxtPrefixoAnimalCertificadora,
                                                     CodInicialAnimalCertificadora,
                                                     TxtSufixoAnimalCertificadora,
                                                     QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(1, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
    CodInicialAnimalSisbov, -1, 'M', 1, CodSituacaoSisbov, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;
  if FUsarSisbov then begin
    Result := FCodigosSisbov.ReservaCodigos(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodInicialAnimalSisbov, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;

  // Reserva Códigos de Animal e de Log
  Result := ReservarCodigos(CodAni, CodLog, CodReg, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento, DtaIdentificacaoSisbov, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Trata fazenda de nascimento (R23)
  if CodFazendaNascimento > -1 then
  begin
    Result := VerificaFazenda(CodFazendaNascimento, True, 'Fazenda de nascimento do animal');
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores('', CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, IndAnimalCastrado, CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;

  MontaQueryInsert;

  CodMan := StrToInt(CodInicialAnimalManejo);

  if CodInicialAnimalCertificadora <> '' then begin
    CodCert := StrToInt(CodInicialAnimalCertificadora);
  end else begin
    CodCert := -1;
  end;

  if CodPaisSisbov >= 0 then begin
    CodSisb := CodInicialAnimalSisbov;
  end else begin
    CodSisb := -1;
  end;

(*
  A partir de 19/10/2004 o procedimento de atualização de grandezas será
  realizado a partir da execução de processo batch por intervalos configuráveis
  e não mais a partir da execução de cada operação como anteriormente.
  // Atualiza Grandezas
  Result := AtualizaGrandeza(1, Conexao.CodProdutorTrabalho, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;
  // Atualiza grandeza para animais identificados
  if CodSituacaoSisbov = 'I' then begin
    Result := AtualizaGrandeza(2, Conexao.CodProdutorTrabalho, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;
  // Atualiza grandeza para animais ainda não identificados
  if CodSituacaoSisbov = 'P' then begin
    Result := AtualizaGrandeza(3, Conexao.CodProdutorTrabalho, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;
  // Atualiza grandeza para animais não controlados pela certificadora
  if CodSituacaoSisbov = 'N' then begin
    Result := AtualizaGrandeza(4, Conexao.CodProdutorTrabalho, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;
*)

  For I := 1 to QtdAnimais do begin
    CodAnimalManejo := TxtPrefixoAnimalManejo +
                       StrZero(CodMan, Length(CodInicialAnimalManejo)) +
                       TxtSufixoAnimalManejo;

    if CodCert > 0 then begin
      CodAnimalCertificadora := TxtPrefixoAnimalCertificadora +
                                StrZero(CodCert, Length(CodInicialAnimalCertificadora)) +
                                TxtSufixoAnimalCertificadora;
    end else begin
      CodAnimalCertificadora := '';
    end;

    if CodSisb >= 0 then begin
      NumDVSisbov := BuscarDVSisBov(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodSisb);
    end else begin
      NumDVSisbov := -1;
    end;

    Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo, CodAnimalCertificadora, CodPaisSisbov,
      CodEstadoSisbov, CodMicroRegiaoSisbov, CodSisb, NumDVSisbov, CodSituacaoSisbov,
      DtaIdentificacaoSisbov, NumImovelIdentificacao, -1, CodPropriedadeIdentificacao, CodFazendaIdentificacao,
      DtaNascimento, '', -1, -1, CodFazendaNascimento, 0, -1, '', '', -1,
      -1, '', '', CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca, CodPelagem,
      IndSexo, 1, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor, IndAnimalCastrado, CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
      NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1,
      -1, '', 0, 0, '', '', TxtObservacao, NomeMetodo, '', 0, -1, False, Metodo, True, CodAni, CodLog, CodReg, IndCodSisBovReservado, '', -1, -1,
      CodPessoaTecnico, numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

{ Fábio - 05/09/2004
  Caso o código não esteja reservad opara o produtor será retornado um erro.

    // Ignorar o erro em caso de erro por reserva de codigo sisbov
    if (Result = -1583) or (Result = -1589) then
      Result := 0;
}
    if Result < 0 then begin
      Rollback;
      Exit;
    end;

    Inc(CodAni);
    Inc(CodLog);
    Inc(CodReg);

    Inc(CodMan);
    if CodCert > 0 then begin
      Inc(CodCert);
    end;
    if CodSisb >= 0 then begin
      Inc(CodSisb);
    end;
  end;

  Commit;
  ZerarValoresUltimaPesquisa;
  Result := 0;
end;

function TIntAnimais.InserirComprados(QtdAnimais,
  CodFazendaManejo: Integer; TxtPrefixoAnimalManejo,
  CodInicialAnimalManejo, TxtSufixoAnimalManejo,
  TxtPrefixoAnimalCertificadora, CodInicialAnimalCertificadora,
  TxtSufixoAnimalCertificadora: String; CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodInicialAnimalSisbov: Integer;
  CodSituacaoSisbov: String; DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String; CodPropriedadeIdentificacao,
  CodFazendaIdentificacao: Integer; DtaNascimento: TDateTime;
  NumImovelNascimento: String; CodPropriedadeNascimento: Integer;
  DtaCompra: TDateTime; CodPessoaSecundariaCriador, CodTipoIdentificador1,
  CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
  CodPelagem: Integer; IndSexo, IndAnimalCastrado: String;
  CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
  CodLocalCorrente, CodFazendaCorrente: Integer;
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente: Integer; TxtObservacao, NumGta: String; DtaEmissaoGta: TDateTime;
  NumNotaFiscal: Integer;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
const
  Metodo : Integer = 247;
  NomeMetodo : String = 'InserirComprados';
var
  CodMan, CodCert, CodSisb, I, CodAni, CodReg, CodLog : Integer;
  CodAnimalManejo, CodAnimalCertificadora : String;
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  NumDVSisbov : Integer;
  NumImovelCorrente: String;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Consiste Quantidade de animais
  if (QtdAnimais < 1) or (QtdAnimais > StrToInt(ValorParametro(9))) then begin
    Mensagens.Adicionar(739, Self.ClassName, NomeMetodo, [ValorParametro(9)]);
    Result := -739;
    Rollback;
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Consiste montagem do código de manejo
  if CodInicialAnimalManejo = '' then begin
    Mensagens.Adicionar(745, Self.ClassName, NomeMetodo, []);
    Result := -745;
    Rollback;
    Exit;
  end;
  TxtPrefixoAnimalManejo := Trim(TxtPrefixoAnimalManejo);
  TxtSufixoAnimalManejo := Trim(TxtSufixoAnimalManejo);
  Result := VerificaCodigoVariavel(TxtPrefixoAnimalManejo,
                                   CodInicialAnimalManejo,
                                   TxtSufixoAnimalManejo,
                                   QtdAnimais,
                                   Conexao.QtdCaracteresManejoProdutor,
                                   'código de manejo');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Abre transação
  BeginTran;

  // Trata Códigos Animal Manejo
  Result := VerificaUtilizacaoCodAnimalManejo(CodFazendaManejo,
                                              TxtPrefixoAnimalManejo,
                                              CodInicialAnimalManejo,
                                              TxtSufixoAnimalManejo,
                                              QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

    // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    if (TxtPrefixoAnimalCertificadora <> '') or (CodInicialAnimalCertificadora <> '') or
       (TxtSufixoAnimalCertificadora <> '') then begin
      Mensagens.Adicionar(715, Self.ClassName, NomeMetodo, []);
      Result := -715;
      Exit;
    end;

    CodAnimalManejo := TxtPrefixoAnimalManejo +
                       CodInicialAnimalManejo +
                       TxtSufixoAnimalManejo;

    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then begin
      Exit;
    end;

    TxtPrefixoAnimalCertificadora := Copy(CodAnimalCertificadora, 1, Pos(CodAnimalManejo, CodAnimalCertificadora) + Length(TxtPrefixoAnimalManejo) - 1);
    CodInicialAnimalCertificadora := CodInicialAnimalManejo;
    TxtSufixoAnimalCertificadora := TxtSufixoAnimalManejo;
  end;

  // Consiste montagem do código da certificadora
  if CodInicialAnimalCertificadora = '' then begin
    Mensagens.Adicionar(746, Self.ClassName, NomeMetodo, []);
    Result := -746;
    Rollback;
    Exit;
  end;
  TxtPrefixoAnimalCertificadora := Trim(TxtPrefixoAnimalCertificadora);
  TxtSufixoAnimalCertificadora := Trim(TxtSufixoAnimalCertificadora);
  Result := VerificaCodigoVariavel(TxtPrefixoAnimalCertificadora,
                                   CodInicialAnimalCertificadora,
                                   TxtSufixoAnimalCertificadora,
                                   QtdAnimais,
                                   20,
                                   'código da certificadora');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Trata Códigos Animal Certificadora
  Result := VerificaUtilizacaoCodAnimalCertificadora(TxtPrefixoAnimalCertificadora,
                                                     CodInicialAnimalCertificadora,
                                                     TxtSufixoAnimalCertificadora,
                                                     QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  if CodSituacaoSisbov = 'I' then begin
    Mensagens.Adicionar(766, Self.ClassName, NomeMetodo, []);
    Result := -766;
    Rollback;
    Exit;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(2, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
    CodInicialAnimalSisbov, -1, 'M', 2, CodSituacaoSisbov, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;
  if FUsarSisbov then begin
    Result := FCodigosSisbov.ReservaCodigos(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodInicialAnimalSisbov, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;

  // Reserva Códigos de Animal e de Log
  Result := ReservarCodigos(CodAni, CodLog, CodReg, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  if DtaCompra > 0 then begin
    // Verifica data da compra
    Result := VerificaDtaCompra(DtaCompra);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DtaNascimento, DtaIdentificacaoSisbov, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica local de Nascimento (R14, R26)
  Result := VerificaLocalNascimento(NumImovelNascimento, CodPropriedadeNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica data da compra (R42)
  if DtaCompra > 0 then begin
    if DtaCompra < DtaNascimento then begin
      Mensagens.Adicionar(675, Self.ClassName, NomeMetodo, []);
      Result := -675;
      Rollback;
      Exit;
    end;
  end;

  // Verifica Criador (R28)
  Result := VerificaPessoaSecundaria(CodPessoaSecundariaCriador, 1, False, 'Criador');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores('', CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, IndAnimalCastrado, CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;

  // Verifica número do GTA
  if NumGTA <> '' then begin
    Result := TrataString(NumGTA, 13, 'Número do GTA');
    if Result < 0 then begin
      Exit;
    end;
  end;

//  if NumGTA <> '' then begin
//    if DtaEmissaoGTA <= 0 then begin
//      Mensagens.Adicionar(1096, Self.ClassName, 'InserirComprados', []);
//      Result := -1096;
//      Exit;
//    end;
 // end;

  // Verifica data do Gta
  if DtaEmissaoGta > 0 then begin
    if DtaEmissaoGta < DtaNascimento then begin
      Mensagens.Adicionar(1094, Self.ClassName, 'InserirComprados', []);
      Result := -1094;
      Exit;
    end;
    if DtaEmissaoGta > DtaSistema then begin
      Mensagens.Adicionar(1283, Self.ClassName, 'InserirComprado', []);
      Result := -1283;
      Exit;
    end;
//    if NumGTA = '' then begin
//      Mensagens.Adicionar(1095, Self.ClassName, 'InserirComprados', []);
//      Result := -1095;
//      Exit;
//    end;
  end;

  MontaQueryInsert;

  CodMan := StrToInt(CodInicialAnimalManejo);

  if CodInicialAnimalCertificadora <> '' then begin
    CodCert := StrToInt(CodInicialAnimalCertificadora);
  end else begin
    CodCert := -1;
  end;

  if CodPaisSisbov >= 0 then begin
    CodSisb := CodInicialAnimalSisbov;
  end else begin
    CodSisb := -1;
  end;

  For I := 1 to QtdAnimais do begin
    CodAnimalManejo := TxtPrefixoAnimalManejo +
                       StrZero(CodMan, Length(CodInicialAnimalManejo)) +
                       TxtSufixoAnimalManejo;

    if CodCert > 0 then begin
      CodAnimalCertificadora := TxtPrefixoAnimalCertificadora +
                                StrZero(CodCert, Length(CodInicialAnimalCertificadora)) +
                                TxtSufixoAnimalCertificadora;
    end else begin
      CodAnimalCertificadora := '';
    end;

    if CodSisb >= 0 then begin
      NumDVSisbov := BuscarDVSisBov(CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodSisb);
    end else begin
      NumDVSisbov := -1;
    end;

    Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo, CodAnimalCertificadora, CodPaisSisbov,
      CodEstadoSisbov, CodMicroRegiaoSisbov, CodSisb, NumDVSisbov, CodSituacaoSisbov,
      DtaIdentificacaoSisbov, NumImovelIdentificacao, -1, CodPropriedadeIdentificacao, CodFazendaIdentificacao,
      DtaNascimento, NumImovelNascimento, -1, CodPropriedadeNascimento, -1, DtaCompra, CodPessoaSecundariaCriador,
      '', '', -1, -1, '', '', CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca, CodPelagem,
      IndSexo, 2, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor, IndAnimalCastrado, CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
      NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1,
      -1, '', 0, 0, '', '', TxtObservacao, NomeMetodo, NumGta, DtaEmissaoGta, NumNotaFiscal,
      False, Metodo, True, CodAni, CodLog, CodReg, IndCodSisBovReservado, '', -1, -1, CodPessoaTecnico,
      numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

    if Result < 0 then begin
      Rollback;
      Exit;
    end;

    Inc(CodAni);
    Inc(CodLog);
    Inc(CodReg);

    Inc(CodMan);
    if CodCert > 0 then begin
      Inc(CodCert);
    end;
    if CodSisb >= 0 then begin
      Inc(CodSisb);
    end;
  end;

  Commit;
  ZerarValoresUltimaPesquisa;
  Result := 0;
end;

function TIntAnimais.InserirImportados(QtdAnimais,
  CodFazendaManejo: Integer; TxtPrefixoAnimalManejo,
  CodInicialAnimalManejo, TxtSufixoAnimalManejo,
  TxtPrefixoAnimalCertificadora, CodInicialAnimalCertificadora,
  TxtSufixoAnimalCertificadora, CodSituacaoSisbov: String; DtaNascimento,
  DtaCompra: TDateTime; CodPessoaSecundariaCriador, CodTipoIdentificador1,
  CodPosicaoIdentificador1, CodTipoIdentificador2,
  CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3, CodTipoIdentificador4,
  CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca,
  CodPelagem: Integer; IndSexo, IndAnimalCastrado: String;
  CodRegimeAlimentar, CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente,
  CodLocalCorrente, CodFazendaCorrente: Integer; 
  CodPropriedadeCorrente: Integer; NumCNPJCPFCorrente: String;
  CodPessoaCorrente, CodPaisOrigem: Integer; DesPropriedadeOrigem: String;
  DtaAutorizacaoImportacao, DtaEntradaPais: TDateTime; NumGuiaImportacao,
  NumLicencaImportacao, TxtObservacao: String;IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
const
  Metodo : Integer = 248;
  NomeMetodo : String = 'InserirImportados';
var
  CodMan, CodCert, CodSisb, I, CodAni, CodReg, CodLog : Integer;
  CodAnimalManejo, CodAnimalCertificadora : String;
  MsgTecnicoOS, MsgIdentificadorOS: Boolean;
  NumDVSisbov : Integer;
  NumImovelCorrente: String;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  NumImovelCorrente := '';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Consiste Quantidade de animais
  if (QtdAnimais < 1) or (QtdAnimais > StrToInt(ValorParametro(9))) then begin
    Mensagens.Adicionar(739, Self.ClassName, NomeMetodo, [ValorParametro(9)]);
    Result := -739;
    Rollback;
    Exit;
  end;

  // Trata cod_fazenda_manejo (R23)
  Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Consiste montagem do código de manejo
  if CodInicialAnimalManejo = '' then begin
    Mensagens.Adicionar(745, Self.ClassName, NomeMetodo, []);
    Result := -745;
    Rollback;
    Exit;
  end;
  TxtPrefixoAnimalManejo := Trim(TxtPrefixoAnimalManejo);
  TxtSufixoAnimalManejo := Trim(TxtSufixoAnimalManejo);
  Result := VerificaCodigoVariavel(TxtPrefixoAnimalManejo,
                                   CodInicialAnimalManejo,
                                   TxtSufixoAnimalManejo,
                                   QtdAnimais,
                                   Conexao.QtdCaracteresManejoProdutor,
                                   'código de manejo');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Abre transação
  BeginTran;

  // Trata Códigos Animal Manejo
  Result := VerificaUtilizacaoCodAnimalManejo(CodFazendaManejo,
                                              TxtPrefixoAnimalManejo,
                                              CodInicialAnimalManejo,
                                              TxtSufixoAnimalManejo,
                                              QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

    // Trata código da certificadora
  if ValorParametro(8) = 'S' then begin
    if (TxtPrefixoAnimalCertificadora <> '') or (CodInicialAnimalCertificadora <> '') or
       (TxtSufixoAnimalCertificadora <> '') then begin
      Mensagens.Adicionar(715, Self.ClassName, NomeMetodo, []);
      Result := -715;
      Exit;
    end;

    CodAnimalManejo := TxtPrefixoAnimalManejo +
                       CodInicialAnimalManejo +
                       TxtSufixoAnimalManejo;

    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
    if Result < 0 then begin
      Exit;
    end;

    TxtPrefixoAnimalCertificadora := Copy(CodAnimalCertificadora, 1, Pos(CodAnimalManejo, CodAnimalCertificadora) + Length(TxtPrefixoAnimalManejo) - 1);
    CodInicialAnimalCertificadora := CodInicialAnimalManejo;
    TxtSufixoAnimalCertificadora := TxtSufixoAnimalManejo;
  end;

  // Consiste montagem do código da certificadora
  if CodInicialAnimalCertificadora = '' then begin
    Mensagens.Adicionar(746, Self.ClassName, NomeMetodo, []);
    Result := -746;
    Rollback;
    Exit;
  end;
  TxtPrefixoAnimalCertificadora := Trim(TxtPrefixoAnimalCertificadora);
  TxtSufixoAnimalCertificadora := Trim(TxtSufixoAnimalCertificadora);
  Result := VerificaCodigoVariavel(TxtPrefixoAnimalCertificadora,
                                   CodInicialAnimalCertificadora,
                                   TxtSufixoAnimalCertificadora,
                                   QtdAnimais,
                                   20,
                                   'código da certificadora');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Trata Códigos Animal Certificadora
  Result := VerificaUtilizacaoCodAnimalCertificadora(TxtPrefixoAnimalCertificadora,
                                                     CodInicialAnimalCertificadora,
                                                     TxtSufixoAnimalCertificadora,
                                                     QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica CodSituacaoSisbov (R41)
  Result := VerificaCodSituacaoSisbov(3, CodSituacaoSisbov);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(-1, -1, -1, -1,
    -1, -1, 'M', 3, CodSituacaoSisbov, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Reserva Códigos de Animal e de Log
  Result := ReservarCodigos(CodAni, CodLog, CodReg, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica data de nascimento (R35)
  Result := VerificaDtaNascimento(DtaNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  if DtaCompra > 0 then begin
    // Verifica data da compra
    Result := VerificaDtaCompra(DtaCompra);
    if Result < 0 then begin
      Exit;
    end;
  end;


  // Verifica data da compra (R42)
  if DtaCompra > 0 then begin
    if DtaCompra < DtaNascimento then begin
      Mensagens.Adicionar(675, Self.ClassName, NomeMetodo, []);
      Result := -675;
      Rollback;
      Exit;
    end;
  end;

  // Verifica Criador (R28)
  Result := VerificaPessoaSecundaria(CodPessoaSecundariaCriador, 1, False, 'Criador');
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
  Result := VerificaIdentificadores('', CodTipoIdentificador1, CodPosicaoIdentificador1,
    CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
    CodTipoIdentificador4, CodPosicaoIdentificador4);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica Especie, Raca e Aptidao (R22, R29, R50)
  Result := VerificaEspecieRacaAptidao(CodEspecie, CodRaca, CodAptidao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica Pelagem (R29)
  { Inicio Alteração Fábio - 22/12/2004 - Se a pelagem não for informada então
                                   selecionar a padrão}
  if CodPelagem = -1 then
  begin
    CodPelagem := ObtemPelagemPadrao;
    if CodPelagem < 0 then
    begin
      Result := CodPelagem;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
  { Inicio Alteração Fábio - 22/12/2004 - Se a categoria não for informada então
                                   selecionar a padrão}
  if CodCategoriaAnimal = -1 then
  begin
    CodCategoriaAnimal := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaCategoria(CodCategoriaAnimal, IndSexo, IndAnimalCastrado, CodAptidao, DtaNascimento);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica localização atual do animal (R23, R29, R27, R30, R51, R52, R53, R54, R55, R56, R57, R58)
  { Inicio Alteração Fábio - 22/12/2004 - Se o local não for
                                          informado então selecionar o principal}
  if (CodTipoLugar = 1) and (CodLoteCorrente = -1) then
  begin
    CodLocalCorrente := ObtemLocalPrincipal(Conexao.CodProdutorTrabalho,
      CodFazendaCorrente);
    if CodLocalCorrente < 0 then
    begin
      Result := CodLocalCorrente;
      Exit;
    end;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaLugar(CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
    NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica regime alimentar do animal (R10, R11, R29, R33)
  { Inicio Alteração Fábio - 22/12/2004 - Se o regime alimentar não for
                                          informado então selecionar o padrão}
  if CodRegimeAlimentar = -1 then
  begin
    CodRegimeAlimentar := 99;
  end;
  { Fim Alteração Fábio - 22/12/2004 }
  Result := VerificaRegimeAlimentar(CodRegimeAlimentar, CodTipoLugar, CodFazendaCorrente,
    CodLocalCorrente, CodCategoriaAnimal, CodAptidao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  // Verifica observação
  if TxtObservacao <> '' then begin
    Result := TrataString(TxtObservacao, 255, 'Observação sobre o animal');
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;

  // Verifica dados de importação
  Result := VerificaDadosImportacao(CodPaisOrigem, DesPropriedadeOrigem, DtaNascimento,
    DtaAutorizacaoImportacao, DtaEntradaPais, NumGuiaImportacao, NumLicencaImportacao);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;

  MontaQueryInsert;

  CodMan := StrToInt(CodInicialAnimalManejo);

  if CodInicialAnimalCertificadora <> '' then begin
    CodCert := StrToInt(CodInicialAnimalCertificadora);
  end else begin
    CodCert := -1;
  end;

(*
  A partir de 19/10/2004 o procedimento de atualização de grandezas será
  realizado a partir da execução de processo batch por intervalos configuráveis
  e não mais a partir da execução de cada operação como anteriormente.
  // Atualiza Grandezas
  Result := AtualizaGrandeza(1, Conexao.CodProdutorTrabalho, QtdAnimais);
  if Result < 0 then begin
    Rollback;
    Exit;
  end;
  // Atualiza grandeza para animais identificados
  if CodSituacaoSisbov = 'I' then begin
    Result := AtualizaGrandeza(2, Conexao.CodProdutorTrabalho, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;
  // Atualiza grandeza para animais ainda não identificados
  if CodSituacaoSisbov = 'P' then begin
    Result := AtualizaGrandeza(3, Conexao.CodProdutorTrabalho, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;
  // Atualiza grandeza para animais não controlados pela certificadora
  if CodSituacaoSisbov = 'N' then begin
    Result := AtualizaGrandeza(4, Conexao.CodProdutorTrabalho, QtdAnimais);
    if Result < 0 then begin
      Rollback;
      Exit;
    end;
  end;
*)

  For I := 1 to QtdAnimais do begin
    CodAnimalManejo := TxtPrefixoAnimalManejo +
                       StrZero(CodMan, Length(CodInicialAnimalManejo)) +
                       TxtSufixoAnimalManejo;

    if CodCert > 0 then begin
      CodAnimalCertificadora := TxtPrefixoAnimalCertificadora +
                                StrZero(CodCert, Length(CodInicialAnimalCertificadora)) +
                                TxtSufixoAnimalCertificadora;
    end else begin
      CodAnimalCertificadora := '';
    end;

    Result := InserirAnimal(CodFazendaManejo, CodAnimalManejo, CodAnimalCertificadora, -1,
      -1, -2, -1, -1, CodSituacaoSisbov,
      0, '', -1, -1, -1,
      DtaNascimento, '', -1, -1, -1, DtaCompra, CodPessoaSecundariaCriador,
      '', '', -1, -1, '', '', CodTipoIdentificador1, CodPosicaoIdentificador1,
      CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3, CodPosicaoIdentificador3,
      CodTipoIdentificador4, CodPosicaoIdentificador4, CodEspecie, CodAptidao, CodRaca, CodPelagem,
      IndSexo, 3, FCodReprodutorMultiplo, FCodAnimalPai, FCodAnimalMae, FCodAnimalReceptor, IndAnimalCastrado, CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
      NumImovelCorrente, CodPropriedadeCorrente, NumCNPJCPFCorrente, CodPessoaCorrente, -1,
      CodPaisOrigem, DesPropriedadeOrigem, DtaAutorizacaoImportacao, DtaEntradaPais,
      NumGuiaImportacao, NumLicencaImportacao, TxtObservacao, NomeMetodo, '', 0, -1,
      False, Metodo, True, CodAni, CodLog, CodReg, IndCodSisBovReservado, '', -1, -1, CodPessoaTecnico,
      numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

{ Fábio - 05/09/2004
  Caso o código não esteja reservad opara o produtor será retornado um erro.

    // Ignorar o erro em caso de erro por reserva de codigo sisbov
    if (Result = -1583) or (Result = -1589) then
      Result := 0;
}
    if Result < 0 then begin
      Rollback;
      Exit;
    end;

    Inc(CodAni);
    Inc(CodLog);
    Inc(CodReg);
    Inc(CodMan);
    if CodCert > 0 then begin
      Inc(CodCert);
    end;
  end;

  Commit;
  ZerarValoresUltimaPesquisa;
  Result := 0;
end;

function TIntAnimais.PesquisarConsolidado(CodFazenda,
  CodAgrupamento: Integer): Integer;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado('Pesquisar');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(250) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'PesquisarConsolidado', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, 'PesquisarConsolidado', []);
    Result := -307;
    Exit;
  end;

  ZerarValoresUltimaPesquisa;

  Query.Close;
  if CodAgrupamento = 0 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  '''' as DesAgrupamento ' +
                ',0 as CodAtributo ' +
                ','''' as SglAtributo ' +
                ','''' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.dta_fim_validade is null '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  {$ENDIF}
  end;
  if CodAgrupamento = 1 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  '''' as DesAgrupamento ' +
                ',0 as CodAtributo ' +
                ','''' as SglAtributo ' +
                ','''' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.dta_fim_validade is null '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  {$ENDIF}
  end;
  if CodAgrupamento = 1 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',tc.cod_categoria_animal as CodAtributo ' +
                ',tc.sgl_categoria_animal as SglAtributo ' +
                ',tc.des_categoria_animal as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by tc.cod_categoria_animal ' +
                ',tc.sgl_categoria_animal ' +
                ',tc.des_categoria_animal ');
  Query.SQL.Add('union ');
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',1 as CodAtributo ' +
                ',''M'' as SglAtributo ' +
                ',''Macho'' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where  ta.ind_sexo = ''M'' ' +
		'and ta.cod_categoria_animal = 1 ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo' );
  Query.SQL.Add('union ');
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',1 as CodAtributo ' +
                ',''F'' as SglAtributo ' +
                ',''Fêmea'' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where  ta.ind_sexo = ''F'' ' +
		'and ta.cod_categoria_animal = 1 ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo ' );
  Query.SQL.Add('union ');
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',2 as CodAtributo ' +
                ',''M'' as SglAtributo ' +
                ',''Macho'' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where  ta.ind_sexo = ''M'' ' +
		'and ta.cod_categoria_animal = 2 ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo ' );
  Query.SQL.Add('union ');
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',2 as CodAtributo ' +
                ',''F'' as SglAtributo ' +
                ',''Fêmea'' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where  ta.ind_sexo = ''F'' ' +
		'and ta.cod_categoria_animal = 2 ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo ' );
  Query.SQL.Add('union ');
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',3 as CodAtributo ' +
                ',''M'' as SglAtributo ' +
                ',''Macho'' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where  ta.ind_sexo = ''M'' ' +
		'and ta.cod_categoria_animal = 3 ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo ' );
  Query.SQL.Add('union ');
  Query.SQL.Add('select ''Por categoria'' as DesAgrupamento ' +
                ',3 as CodAtributo ' +
                ',''F'' as SglAtributo ' +
                ',''Fêmea'' as DesAtributo ' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where  ta.ind_sexo = ''F'' ' +
		'and ta.cod_categoria_animal = 3 ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo' );
  Query.SQL.Add('order by 2, 3, 4');
  {$ENDIF}
  end;
  if CodAgrupamento = 2 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  ''Por tipo de origem'' as DesAgrupamento' +
                ',tor.cod_tipo_origem as CodAtributo' +
                ',tor.sgl_tipo_origem as SglAtributo' +
                ',tor.des_tipo_origem as DesAtributo' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                ',tab_tipo_origem as tor ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and ta.cod_tipo_origem = tor.cod_tipo_origem ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by tor.cod_tipo_origem ' +
                ',tor.sgl_tipo_origem ' +
                ',tor.des_tipo_origem ' +
                'order by tor.sgl_tipo_origem');
  {$ENDIF}
  end;
  if CodAgrupamento = 3 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  ''Por raça'' as DesAgrupamento' +
                ',tr.cod_raca as CodAtributo' +
                ',tr.sgl_raca as SglAtributo' +
                ',tr.des_raca as DesAtributo' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                ',tab_raca as tr ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and ta.cod_raca = tr.cod_raca ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by tr.cod_raca ' +
                ',tr.sgl_raca ' +
                ',tr.des_raca ' +
                'order by tr.sgl_raca');
  {$ENDIF}
  end;
  if CodAgrupamento = 4 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  ''Por regime alimentar'' as DesAgrupamento' +
                ',tr.cod_regime_alimentar as CodAtributo' +
                ',tr.sgl_regime_alimentar as SglAtributo' +
                ',tr.des_regime_alimentar as DesAtributo' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                ',tab_regime_alimentar as tr ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and ta.cod_regime_alimentar = tr.cod_regime_alimentar ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by tr.cod_regime_alimentar ' +
                ',tr.sgl_regime_alimentar ' +
                ',tr.des_regime_alimentar ' +
                'order by tr.sgl_regime_alimentar');
  {$ENDIF}
  end;
  if CodAgrupamento = 5 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  ''Por aptidão'' as DesAgrupamento' +
                ',tr.cod_aptidao as CodAtributo' +
                ',tr.sgl_aptidao as SglAtributo' +
                ',tr.des_aptidao as DesAtributo' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                ',tab_categoria_animal as tc ' +
                ',tab_aptidao as tr ' +
                'where ta.cod_categoria_animal = tc.cod_categoria_animal ' +
                'and ta.cod_aptidao = tr.cod_aptidao ' +
                'and tc.ind_animal_ativo = ''S'' '+
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by tr.cod_aptidao ' +
                ',tr.sgl_aptidao ' +
                ',tr.des_aptidao ' +
                'order by sgl_aptidao');
  {$ENDIF}
  end;
  if CodAgrupamento = 6 then begin
  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select  ''Por sexo'' as DesAgrupamento' +
                ',ta.ind_sexo as CodAtributo' +
                ',''M'' as SglAtributo' +
                ',''Macho'' as DesAtributo' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where ta.ind_sexo = ''M'' ' +
                'and  ta.cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo ' );
  Query.SQL.Add(' union ');
  Query.SQL.Add('select  ''Por sexo'' as DesAgrupamento' +
                ',ta.ind_sexo as CodAtributo' +
                ',''F'' as SglAtributo' +
                ',''Fêmea'' as DesAtributo' +
                ',count(ta.cod_animal) as QtdAnimais ' +
                'from tab_animal as ta with (nolock) ' +
                'where ta.ind_sexo = ''F'' ' +
                'and  ta.cod_categoria_animal not in (select cod_categoria_animal from tab_categoria_animal where ind_animal_ativo = ''N'') ' +
                'and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodFazenda = 0 then
     Query.SQL.Add(' and ta.cod_tipo_lugar != 1 ');
  if CodFazenda > 0 then
     Query.SQL.Add(' and ta.cod_fazenda_corrente = :cod_fazenda ');
  Query.SQL.Add('and ta.dta_fim_validade is null '+
                'group by ta.ind_sexo ' );

  {$ENDIF}
  end;

  Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
  if CodFazenda > 0 then
     Query.ParamByName('cod_fazenda').AsInteger := CodFazenda;

  try
    Query.Open;
    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(769, Self.ClassName, 'PesquisarConsolidado', [E.Message]);
      Result := -769;
      Exit;
    end;
  end;
end;

function TIntAnimais.AlterarSisbov(CodAnimal, CodFazendaManejo: Integer;
  CodAnimalManejo: String; CodPaisSisbov, CodEstadoSisbov,
  CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov: Integer;
  DtaIdentificacaoSisbov: TDateTime; NumImovelIdentificacao: String;
  CodPropriedadeIdentificacao, CodFazendaIdentificacao: Integer): Integer;
const
  Metodo : Integer = 253;
  NomeMetodo : String = 'AlterarSisbov';
var
  Q : THerdomQuery;
  DadosAnimal: TDadosAnimal;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se o cadastro já foi efetivado
  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
  if Result < 0 then begin
    Exit;
  end;
  if Result = 1 then begin
    Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
    Result := -712;
    Exit;
  end;

  // Verifica parâmetro para busca do animal
  if (CodAnimal > 0) And ((CodFazendaManejo > 0) or (CodAnimalManejo <> '')) then begin
    Mensagens.Adicionar(773, Self.ClassName, NomeMetodo, []);
    Result := -773;
    Exit;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  if CodAnimal > 0 then begin
    Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end else begin
    Result := ObtemDadosAnimalManejo(CodFazendaManejo, CodAnimalManejo, DadosAnimal);
    if Result < 0 then begin
      Exit;
    end;
  end;

  CodAnimal := DadosAnimal.CodAnimal;

  if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
     (DadosAnimal.CodPessoaTecnico <> 0) then begin
      Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
      Result := -1698;
      Exit;
  end;

  // Verifica se método pode ser aplicado ao animal informado
  if DadosAnimal.CodTipoOrigem = 3 then begin
    Mensagens.Adicionar(717, Self.ClassName, NomeMetodo, [NomeMetodo, IntToStr(DadosAnimal.CodTipoOrigem)]);
    Result := -717;
    Exit;
  end;

  // Verifica se o animal já possui código sisbov
  if (DadosAnimal.CodPaisSisbov > 0) or
     (DadosAnimal.CodEstadoSisbov > 0) or
     (DadosAnimal.CodMicroRegiaoSisbov >= -1) or
     (DadosAnimal.CodAnimalSisbov > 0) or
     (DadosAnimal.NumDVSisbov > 0) then begin
    Mensagens.Adicionar(774, Self.ClassName, NomeMetodo, []);
    Result := -774;
    Exit;
  end;

  // Verifica situação sisbov do animal
  if DadosAnimal.CodSituacaoSisbov <> 'P' then begin
    Mensagens.Adicionar(775, Self.ClassName, NomeMetodo, []);
    Result := -775;
    Exit;
  end;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
    CodAnimalSisbov, NumDVSisbov, 'A', DadosAnimal.CodTipoOrigem, DadosAnimal.CodSituacaoSisbov, 1);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DadosAnimal.DtaNascimento, DtaIdentificacaoSisbov, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  if (CodPropriedadeIdentificacao > 0) and (NumImovelIdentificacao <> '') then begin
    NumImovelIdentificacao := '';
  end;
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, DadosAnimal.CodSituacaoSisbov);
  if Result < 0 then begin
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação
      BeginTran;

      // Altera o registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal ' +
                '       cod_pais_sisbov = :cod_pais_sisbov, ' +
                '       cod_estado_sisbov = :cod_estado_sisbov, ' +
                '       cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov, ' +
                '       cod_animal_sisbov = :cod_animal_sisbov, ' +
                '       num_dv_sisbov = :num_dv_sisbov, ' +
                '       dta_identificacao_sisbov = :dta_identificacao_sisbov, ' +
                '       cod_fazenda_identificacao = :cod_fazenda_identificacao, ' +
                '       num_imovel_identificacao = :num_imovel_identificacao, ' +
                '       cod_localizacao_identificacao = NULL, ' +
                '       cod_propriedade_identificacao = :cod_propriedade_identificacao ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
      Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
      Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;

      if CodFazendaIdentificacao > 0 then begin
        Q.ParamByName('cod_fazenda_identificacao').AsInteger := CodFazendaIdentificacao;
      end else begin
        Q.ParamByName('cod_fazenda_identificacao').DataType := ftInteger;
        Q.ParamByName('cod_fazenda_identificacao').Clear;
      end;
      if NumImovelIdentificacao <> '' then begin
        Q.ParamByName('num_imovel_identificacao').AsString := NumImovelIdentificacao;
      end else begin
        Q.ParamByName('num_imovel_identificacao').DataType := ftString;
        Q.ParamByName('num_imovel_identificacao').Clear;
      end;
      if CodPropriedadeIdentificacao > 0 then begin
        Q.ParamByName('cod_propriedade_identificacao').AsInteger := CodPropriedadeIdentificacao;
      end else begin
        Q.ParamByName('cod_propriedade_identificacao').DataType := ftInteger;
        Q.ParamByName('cod_propriedade_identificacao').Clear;
      end;
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Atualiza a situação do código SISBOV do animal para 2 'CAD'
      // se o animal não for externo ou importado 
      if DadosAnimal.CodTipoOrigem in [1, 2, 5, 6] then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(CodPaisSisbov, CodEstadoSisbov,
          CodMicroRegiaoSisbov, CodAnimalSisbov, 2);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Confirma transação
      Commit;

      ZerarValoresUltimaPesquisa;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(776, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -776;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AlterarSisbovParaN(CodAnimal: Integer): Integer;
const
  Metodo : Integer = 281;
  NomeMetodo : String = 'AlterarSisbovParaN';
var
  Q : THerdomQuery;
  DadosAnimal: TDadosAnimal;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se o cadastro já foi efetivado
  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
  if Result < 0 then begin
    Exit;
  end;
  if Result = 1 then begin
    Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
    Result := -712;
    Exit;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
     (DadosAnimal.CodPessoaTecnico <> 0) then begin
      Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
      Result := -1698;
      Exit;
  end;

  // Verifica situação sisbov do animal
  if DadosAnimal.CodSituacaoSisbov <> 'P' then begin
    Mensagens.Adicionar(835, Self.ClassName, NomeMetodo, []);
    Result := -835;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação
      BeginTran;

      // Atualiza a situação do código sisbov para "DISP" (1)
      // Se o código não estiver sendo utilizado por outro animal
      if (DadosAnimal.CodPaisSisbov > 0)
        and (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        with DadosAnimal do
        begin
          Result := FCodigosSisbov.AlterarSituacaoSisbov(CodPaisSisbov, CodEstadoSisbov,
            CodMicroRegiaoSisbov, CodAnimalSisbov, 1);
          if Result < 0 then
          begin
            Exit;
          end;
        end;
      end;

      // Altera o registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal ' +
                '   set cod_pais_sisbov = null, ' +
                '       cod_estado_sisbov = null, ' +
                '       cod_micro_regiao_sisbov = null, ' +
                '       cod_animal_sisbov = null, ' +
                '       num_dv_sisbov = null, ' +
                '       cod_animal_certificadora = null, '+
                '       dta_identificacao_sisbov = null, ' +
                '       cod_fazenda_identificacao = null, ' +
                '       num_imovel_identificacao = null, ' +
                '       cod_localizacao_identificacao = null, ' +
                '       cod_propriedade_identificacao = null, ' +
                '       dta_efetivacao_cadastro = null, ' +
                '       cod_arquivo_sisbov = null, ' +
                '       cod_arquivo_sisbov_log = null, ' +
                '       cod_autenticacao_sisbov = null, ' +
                '       cod_arq_import_sisbov = null, ' +
                '       cod_situacao_sisbov = ''N''  ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Confirma transação
      Commit;

      ZerarValoresUltimaPesquisa;
      
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(836, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -836;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AlterarSisbovParaP(CodAnimal, CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbov,
  NumDVSisbov: Integer; DtaIdentificacaoSisbov: TDateTime;
  NumImovelIdentificacao: String; CodPropriedadeIdentificacao,
  CodFazendaIdentificacao: Integer; NumImovelNascimento: String;
  CodPropriedadeNascimento: Integer): Integer;
const
  Metodo : Integer = 282;
  NomeMetodo : String = 'AlterarSisbovParaP';
var
  Q : THerdomQuery;
  DadosAnimal: TDadosAnimal;
  CodLocalizacaoIdentificacao: Integer;
begin
  Result := -1;
  CodLocalizacaoIdentificacao := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se o cadastro já foi efetivado
  Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
  if Result < 0 then begin
    Exit;
  end;
  if Result = 1 then begin
    Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
    Result := -712;
    Exit;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
     (DadosAnimal.CodPessoaTecnico <> 0) then begin
      Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
      Result := -1698;
      Exit;
  end;  

  // Verifica se método pode ser aplicado ao animal informado
  if (DadosAnimal.CodTipoOrigem <> 1) and (DadosAnimal.CodTipoOrigem <> 2) then begin
    Mensagens.Adicionar(848, Self.ClassName, NomeMetodo, []);
    Result := -848;
    Exit;
  end;

  // Verifica situação sisbov do animal
  if DadosAnimal.CodSituacaoSisbov <> 'N' then begin
    Mensagens.Adicionar(847, Self.ClassName, NomeMetodo, []);
    Result := -847;
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
  if (CodPaisSisbov > 0) then begin
    Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodAnimalSisbov, NumDVSisbov, 'A', DadosAnimal.CodTipoOrigem, 'P', 1);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica data de identificacao no sisbov (R42, R44)
  Result := VerificaDtaIdentificacaoSisbov(DadosAnimal.DtaNascimento, DtaIdentificacaoSisbov, 'P');
  if Result < 0 then begin
    Exit;
  end;

  // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
  if (CodPropriedadeIdentificacao > 0) and (NumImovelIdentificacao <> '') then begin
    NumImovelIdentificacao := '';
  end;
  Result := VerificaLocalIdentificacao(NumImovelIdentificacao,
    CodLocalizacaoIdentificacao, CodPropriedadeIdentificacao,
    CodFazendaIdentificacao, 'P');
  if Result < 0 then begin
    Exit;
  end;

  if DadosAnimal.CodTipoOrigem = 2 then begin
    // Verifica local de Nascimento (R14, R26)
    Result := VerificaLocalNascimento(NumImovelNascimento, CodPropriedadeNascimento);
    if Result < 0 then begin
      Exit;
    end;
  end else begin
    if (NumImovelNascimento <> '') or (CodPropriedadeNascimento > 0) then begin
      Mensagens.Adicionar(849, Self.ClassName, NomeMetodo, []);
      Result := -849;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação
      BeginTran;

      // Altera o registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_animal ' +
                '   set cod_situacao_sisbov = ''P'',  ');
      if CodPaisSisbov > 0 then begin
        Q.SQL.Add('       cod_pais_sisbov = :cod_pais_sisbov, ' +
                  '       cod_estado_sisbov = :cod_estado_sisbov, ' +
                  '       cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov, ' +
                  '       cod_animal_sisbov = :cod_animal_sisbov, ' +
                  '       num_dv_sisbov = :num_dv_sisbov, ');
      end;
      Q.SQL.Add('       dta_identificacao_sisbov = :dta_identificacao_sisbov, ' +
                '       cod_fazenda_identificacao = :cod_fazenda_identificacao, ' +
                '       num_imovel_identificacao = :num_imovel_identificacao, ' +
                '       cod_localizacao_identificacao = NULL, ' +
                '       cod_propriedade_identificacao = :cod_propriedade_identificacao, ' +
                '       num_imovel_nascimento = :num_imovel_nascimento, ' +
                '       cod_localizacao_nascimento = NULL, ' +
                '       cod_propriedade_nascimento = :cod_propriedade_nascimento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_animal = :cod_animal ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;

      if CodPaisSisbov > 0 then begin
        Q.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;
      end;

      if DtaIdentificacaoSisbov > 0 then begin
        Q.ParamByName('dta_identificacao_sisbov').AsDateTime := DtaIdentificacaoSisbov;
      end else begin
        Q.ParamByName('dta_identificacao_sisbov').DataType := ftInteger;
        Q.ParamByName('dta_identificacao_sisbov').Clear;
      end;
      if CodFazendaIdentificacao > 0 then begin
        Q.ParamByName('cod_fazenda_identificacao').AsInteger := CodFazendaIdentificacao;
      end else begin
        Q.ParamByName('cod_fazenda_identificacao').DataType := ftInteger;
        Q.ParamByName('cod_fazenda_identificacao').Clear;
      end;
      if NumImovelIdentificacao <> '' then begin
        Q.ParamByName('num_imovel_identificacao').AsString := NumImovelIdentificacao;
      end else begin
        Q.ParamByName('num_imovel_identificacao').DataType := ftString;
        Q.ParamByName('num_imovel_identificacao').Clear;
      end;
      if CodPropriedadeIdentificacao > 0 then begin
        Q.ParamByName('cod_propriedade_identificacao').AsInteger := CodPropriedadeIdentificacao;
      end else begin
        Q.ParamByName('cod_propriedade_identificacao').DataType := ftInteger;
        Q.ParamByName('cod_propriedade_identificacao').Clear;
      end;
      if NumImovelNascimento <> '' then begin
        Q.ParamByName('num_imovel_nascimento').AsString := NumImovelNascimento;
      end else begin
        Q.ParamByName('num_imovel_nascimento').DataType := ftString;
        Q.ParamByName('num_imovel_nascimento').Clear;
      end;
      if CodPropriedadeNascimento > 0 then begin
        Q.ParamByName('cod_propriedade_nascimento').AsInteger := CodPropriedadeNascimento;
      end else begin
        Q.ParamByName('cod_propriedade_nascimento').DataType := ftInteger;
        Q.ParamByName('cod_propriedade_nascimento').Clear;
      end;
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Atualiza a situação do código sisbov para "CAD" (2)
      // exceto para animais externos ou importados
      if (CodPaisSisbov > 0) and (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then
      begin
        Result := FCodigosSisbov.AlterarSituacaoSisbov(CodPaisSisbov, CodEstadoSisbov,
          CodMicroRegiaoSisbov, CodAnimalSisbov, 2);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Confirma transação
      Commit;

      ZerarValoresUltimaPesquisa;

      Buscar(CodAnimal, '', 'S', 'N');

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(836, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -836;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.CancelarEfetivacoes(CodFazendaManejo: Integer;
  CodInicialAnimalManejo, CodFinalAnimalManejo,
  CodAnimais: String): Integer;
const
  Metodo : Integer = 174;
  NomeMetodo : String = 'CancelarEfetivacoes';
var
//  QS: THerdomQuery;
  Q: THerdomQuery;
  DadosAnimal : TDadosAnimal;
  QtdAnimalComprado, QtdProcessados, QtdErros, QtdNaoEfetivados, QtdJaExportadosSibov: Integer;
  DtaSist : TDateTime;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Seleciona os animais candidatos à operação
  Result := SelecionaAnimaisMultiplos(CodFazendaManejo, CodInicialAnimalManejo,
    CodFinalAnimalManejo, CodAnimais);
  if Result < 0 then
  begin
    Exit;
  end;

  // Variaveis para totalização
  QtdProcessados := 0;
  QtdNaoEfetivados := 0;
  QtdAnimalComprado := 0;
  QtdJaExportadosSibov := 0;
  DtaSist := DtaSistema;

  Q := THerdomQuery.Create(Conexao, nil);
//  QS := THerdomQuery.Create(Conexao, nil);
  try
    // Monta comando de update da tab_animal
    Q.SQL.Clear;
{$IFDEF MSSQL}
    Q.SQL.Add('update tab_animal ' +
              '   set dta_efetivacao_cadastro = null, ' +
              '       cod_situacao_sisbov = ''P'' ' +
              ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
              '   and cod_animal = :cod_animal ');
{$ENDIF}

    // Monta comando de update da tab_codigo_sisbov
{
    QS.SQL.Clear;
    QS.SQL.Add('update tab_codigo_sisbov ' +
              '   set dta_utilizacao_codigo = null ' +
              ' where cod_pais_sisbov = :cod_pais_sisbov ' +
              '   and cod_estado_sisbov =  :cod_estado_sisbov ' +
              '   and cod_micro_regiao_sisbov =  :cod_micro_regiao_sisbov ' +
              '   and cod_animal_sisbov =  :cod_animal_sisbov ' +
              '   and num_dv_sisbov =  :num_dv_sisbov ');
}
    try
      // Processa os animais
      while not FQueryAux.Eof do begin
         // Abre Transação
        BeginTran;

        // Obtem dados do animal atual
        ObtemAnimalSelecionado(DadosAnimal);

        // Verifica se o animal não foi exportado para o sisbovb
//        if DadosAnimal.CodArquivoSisbov > 0 then begin
//          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O cadastro do animal já foi exportado para o sisbov', 2, 1);
//          if Result < 0 then begin
//            Rollback;
//            Exit;
//          end;
//          Inc(QtdJaExportadosSibov);
//          FQueryAux.Next;
//          Continue;
//        end;

        if (DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho) then
        begin
          Mensagens.Adicionar(2264, Self.ClassName, NomeMetodo, []);
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
            'Somente o produtor do animal pode realizar o cancelamento da efetivação do cadastro do animal.', 2, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          Result := -2264;
          Inc(QtdNaoEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        //Verifica se usuario for tecnico, se o animal em questão está associado a ele.
        if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and
           (Conexao.CodPapelUsuario = 3) and
           (DadosAnimal.CodPessoaTecnico > 0) then
        begin
          Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal não está associado ao usuário (técnico).', 2, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          Result := -1698;
          Inc(QtdNaoEfetivados);
          Commit;
          FQueryAux.Next;
          Continue;
        end;

        // Verifica se o cadastro já foi efetivado
        if DadosAnimal.DtaEfetivacaoCadastro = 0 then
        begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O cadastro do animal ainda não foi efetivado', 2, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          Inc(QtdNaoEfetivados);
          Commit;
          FQueryAux.Next;
          Continue;
        end;

        if (DadosAnimal.CodAnimalVendido > 0) and
           (DadosAnimal.CodSituacaoAnimalVendido <> 'N') then
        begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                                              'O animal não pode ter a efetivação cancelada, por ser um animal já ' +
                                              'identificado no SISBOV antes de seu evento de COMPRA.', 2, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          Inc(QtdAnimalComprado);
          Commit;
          FQueryAux.Next;
          Continue;
        end;

        // Limpa possível mensagem de erro pré existente para o animal
        Result := LimparErrosOperacao(DadosAnimal.CodAnimal, 2);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

        // Altera o registro na tab_animal
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.ExecSQL;
{
        QS.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
        QS.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
        QS.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
        QS.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
        QS.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
        QS.ExecSQL;
}
        // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
        // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
        Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

        // Atualiza a situação do código sisbov para "CAD" (2)
        FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov, 2);
        if Result < 0 then
        begin
          Exit;
        end;

        // Confirma transação
        Commit;
        Inc(QtdProcessados);
        FQueryAux.Next;
      end;

(*
      A partir de 19/10/2004 o procedimento de atualização de grandezas será
      realizado a partir da execução de processo batch por intervalos configuráveis
      e não mais a partir da execução de cada operação como anteriormente.
      // Atualiza grandeza para animais identificados
      Result := AtualizaGrandeza(2, Conexao.CodProdutorTrabalho, QtdProcessados * -1);
      if Result < 0 then begin
        // Inicio da Solicitação Herdom001019.doc
        //Rollback;
        // Fim da Solicitação Herdom001019.doc
        Exit;
      end;
      // Atualiza grandeza para animais ainda não identificados
      Result := AtualizaGrandeza(3, Conexao.CodProdutorTrabalho, QtdProcessados);
      if Result < 0 then begin
        // Inicio da Solicitação Herdom001019.doc
        //Rollback;
        // Fim da Solicitação Herdom001019.doc
        Exit;
      end;
*)


      ZerarValoresUltimaPesquisa;

      // Atualiza coleção de mensagens
      Mensagens.Clear;

      QtdErros := (QtdJaExportadosSibov + QtdNaoEfetivados + QtdAnimalComprado);

      if QtdErros > 0 then begin
        Mensagens.Adicionar(854, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados), IntToStr(QtdErros)]);
        Result := -1;
      end else begin
        Mensagens.Adicionar(853, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados)]);
        Result := 0;
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(855, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -855;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.BuscaIdentificacaoDuplaSisbov(
  Query: THerdomQuery; DadosAnimal: TDadosAnimal; DtaSis: TDatetime;
  var IdentificacaoDuplaSisbov: String; IndLogMensagem: Boolean): Integer;
const
  NumMaxPossibilidades = 10;
  NumMaxIdentificadores = 4;
  NomeMetodo = 'BuscaIdentificacaoDuplaSisbov';
  NomPadraoCampoIdentificador = 'cod_tipo_identificador_';
  SqlDtaSolicitacaoSisbov =
    'select ' +
    '  dta_solicitacao_sisbov ' +
    'from ' +
    '  tab_codigo_sisbov ' +
    'where ' +
    '  cod_pais_sisbov = :cod_pais_sisbov ' +
    '  and cod_estado_sisbov = :cod_estado_sisbov ' +
    '  and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
    '  and cod_animal_sisbov = :cod_animal_sisbov ' +
    '  and num_dv_sisbov = :num_dv_sisbov ';
  SqlIdentificacaoDupla =
    'select '+
    '    tid.cod_identificacao_dupla '+
    '  , tid.des_identificacao_dupla '+
    '  , tid.cod_identificacao_dupla_sisbov '+
    '  , tid.ind_requer_rgd '+
    '  , tid.dta_validade_solicitacao '+
    'from '+
    '  tab_identificacao_dupla tid '+
    '  , tab_ident_dupla_tipo_ident tidti '+
    'where '+
    '  tid.cod_identificacao_dupla = tidti.cod_identificacao_dupla '+
    '  and isnull(tidti.cod_tipo_identificador_1, 0) = :cod_tipo_identificador_1 '+
    '  and isnull(tidti.cod_tipo_identificador_2, 0) = :cod_tipo_identificador_2 '+
    '  and tid.dta_fim_validade is null ';
var
  Q: THerdomQuery;
  IndRequerRgd: Boolean;
  iAux, jAux, kAux: Integer;
  DtaSolicitacao: TDateTime;
  CodIdentificacaoDupla: Integer;
  DtaValidadeIdentificacao: TDateTime;
  NomCampoIdentificador, CodIdentificacaoDuplaSISBOV: String;
  Possibilidades: Array [1..NumMaxPossibilidades] Of TIdentificacaoDupla;
begin
  Result := 0;
  IdentificacaoDuplaSisbov := '';
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.Close;
      Q.SQL.Text := SqlDtaSolicitacaoSisbov;
      Q.ParamByName('cod_pais_sisbov').AsInteger         := Query.FieldByName('cod_pais_sisbov').AsInteger;
      Q.ParamByName('cod_estado_sisbov').AsInteger       := Query.FieldByName('cod_estado_sisbov').AsInteger;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := Query.FieldByName('cod_micro_regiao_sisbov').AsInteger;
      Q.ParamByName('cod_animal_sisbov').AsInteger       := Query.FieldByName('cod_animal_sisbov').AsInteger;
      Q.ParamByName('num_dv_sisbov').AsInteger           := Query.FieldByName('num_dv_sisbov').AsInteger;
      Q.Open;
      if Q.IsEmpty or Q.FieldByName('dta_solicitacao_sisbov').IsNull then begin
        DtaSolicitacao := 0;
      end else begin
        DtaSolicitacao := Q.FieldByName('dta_solicitacao_sisbov').AsDateTime;
      end;

      kAux := 1;
      For iAux := 1 to NumMaxIdentificadores Do begin
        // Primeiro identificador da dupla
        NomCampoIdentificador                       := NomPadraoCampoIdentificador + IntToStr(iAux);
        Possibilidades[kAux].CodTipoIdentificador_1 := Query.FieldByName(NomCampoIdentificador).AsInteger;

        // Segundo identificador da dupla
        Possibilidades[kAux].CodTipoIdentificador_2 := 0;

        // Próximas possibilidades
        Inc(kAux);
        For jAux := iAux + 1 to NumMaxIdentificadores Do begin
          // Primeiro identificador da dupla
          NomCampoIdentificador                       := NomPadraoCampoIdentificador + IntToStr(iAux);
          Possibilidades[kAux].CodTipoIdentificador_1 := Query.FieldByName(NomCampoIdentificador).AsInteger;

          // Segundo identificador da dupla
          NomCampoIdentificador                       := NomPadraoCampoIdentificador + IntToStr(jAux);
          Possibilidades[kAux].CodTipoIdentificador_2 := Query.FieldByName(NomCampoIdentificador).AsInteger;

          // Próxima possibilidade
          Inc(kAux);
        end;
      end;

      // Verifica se uma das possibilidades corresponde a uma idenficação dupla
      // válida para o SISBOV
      CodIdentificacaoDupla       := 0;
      CodIdentificacaoDuplaSISBOV := '';
      IndRequerRgd                := False;
      DtaValidadeIdentificacao    := 0;
      Q.SQL.Text                  := SqlIdentificacaoDupla;

      For kAux := 1 to NumMaxPossibilidades Do begin
        if (Possibilidades[kAux].CodTipoIdentificador_1 <> 0) or (Possibilidades[kAux].CodTipoIdentificador_2 <> 0) then begin
          Q.Close;
//          Q.ParamByName('cod_tipo_identificador_1').AsInteger := Possibilidades[kAux].CodTipoIdentificador_1;
//          Q.ParamByName('cod_tipo_identificador_2').AsInteger := Possibilidades[kAux].CodTipoIdentificador_2;

          // Pega os códigos de identificadores e pesquisa na base os tipos de dupla identificação
          // Pega os códigos de identificadores e pesquisa na base os tipos de dupla identificação
          if (not Query.FieldByName('cod_tipo_identificador_1').Isnull and not Query.FieldByName('cod_tipo_identificador_2').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_1').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := Query.FieldByName('cod_tipo_identificador_2').AsInteger;
          end else if (not Query.FieldByName('cod_tipo_identificador_1').Isnull and not Query.FieldByName('cod_tipo_identificador_3').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_1').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := Query.FieldByName('cod_tipo_identificador_3').AsInteger;
          end else if (not Query.FieldByName('cod_tipo_identificador_1').Isnull and not Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_1').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := Query.FieldByName('cod_tipo_identificador_4').AsInteger;
          end else if (not Query.FieldByName('cod_tipo_identificador_2').Isnull and not Query.FieldByName('cod_tipo_identificador_3').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_2').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := Query.FieldByName('cod_tipo_identificador_3').AsInteger;
          end else if (not Query.FieldByName('cod_tipo_identificador_2').Isnull and not Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_2').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := Query.FieldByName('cod_tipo_identificador_4').AsInteger;
          end else if (not Query.FieldByName('cod_tipo_identificador_3').Isnull and not Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_3').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := Query.FieldByName('cod_tipo_identificador_4').AsInteger;
          end else if (not Query.FieldByName('cod_tipo_identificador_1').Isnull) and (Query.FieldByName('cod_tipo_identificador_2').Isnull) and (Query.FieldByName('cod_tipo_identificador_3').Isnull) and (Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_1').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := 0;
          end else if (Query.FieldByName('cod_tipo_identificador_1').Isnull) and (not Query.FieldByName('cod_tipo_identificador_2').Isnull) and (Query.FieldByName('cod_tipo_identificador_3').Isnull) and (Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_2').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := 0;
          end else if (Query.FieldByName('cod_tipo_identificador_1').Isnull) and (Query.FieldByName('cod_tipo_identificador_2').Isnull) and (not Query.FieldByName('cod_tipo_identificador_3').Isnull) and (Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_3').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := 0;
          end else if (Query.FieldByName('cod_tipo_identificador_1').Isnull) and (Query.FieldByName('cod_tipo_identificador_2').Isnull) and (Query.FieldByName('cod_tipo_identificador_3').Isnull) and (not Query.FieldByName('cod_tipo_identificador_4').Isnull) then begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := Query.FieldByName('cod_tipo_identificador_4').AsInteger;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := 0;
          end else begin
            Q.ParamByName('cod_tipo_identificador_1').AsInteger := 0;
            Q.ParamByName('cod_tipo_identificador_2').AsInteger := 0;
          end;
          Q.Open;

          if not Q.IsEmpty then begin
            CodIdentificacaoDupla       := Q.FieldByName('cod_identificacao_dupla').AsInteger;
            CodIdentificacaoDuplaSISBOV := Q.FieldByName('cod_identificacao_dupla_sisbov').AsString;
            IndRequerRgd                := (Q.FieldByName('ind_requer_rgd').AsString = 'S');
            if Q.FieldByName('dta_validade_solicitacao').IsNull then begin
              DtaValidadeIdentificacao := 0;
            end else begin
              DtaValidadeIdentificacao := Trunc(Q.FieldByName('dta_validade_solicitacao').AsDateTime) + 1;
            end;
            if not (IndRequerRgd and (Trim(Query.FieldByName('num_rgd').AsString) = ''))
              and not ((DtaValidadeIdentificacao <> 0) and ((DtaSolicitacao = 0) or not (DtaSolicitacao < DtaValidadeIdentificacao))) then begin
              Break;
            end;
          end;
        end;
      end;

      // Verifica se os identificadores SISBOV foram identificados
      if (CodIdentificacaoDupla = 0) then begin
        // Insere log de erro para o registro
        if not IndLogMensagem then begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSis, 'Não foi possível determinar o tipo da dupla identificação do animal segundo os critérios do SISBOV', 1, 1);
        end else begin
          Mensagens.Adicionar('Não foi possível determinar o tipo da dupla identificação do animal segundo os critérios do SISBOV', 1, Self.ClassName, NomeMetodo, []);
        end;

        // Finaliza procedimento
        Exit;
      end;

      // Verifica se existe data de validade para tipo de identificação
      if DtaValidadeIdentificacao <> 0 then begin
        // Verifica se foi identificada a data de solicitação SISBOV
        if DtaSolicitacao = 0 then begin
          // Insere log de erro para o registro
          if not IndLogMensagem then begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSis, 'O tipo de identificação "' + CodIdentificacaoDuplaSISBOV + '" correspondente ao animal, exige que a data de solicitação do código SISBOV relacionado tenha sido informada', 1, 1);
          end else begin
            Mensagens.Adicionar('O tipo de identificação "' + CodIdentificacaoDuplaSISBOV +'" correspondente ao animal exige, que a data de solicitação do código SISBOV relacionado tenha sido informada', 1, Self.ClassName, NomeMetodo, []);
          end;

          // Finaliza procedimento
          Exit;
        end;

        if not (DtaSolicitacao < DtaValidadeIdentificacao) then begin
          // Insere log de erro para o registro
          if not IndLogMensagem then begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSis,'O tipo de identificação "' + CodIdentificacaoDuplaSISBOV + '" correspondente ao animal, exige data de solicitação do código SISBOV inferior a data de validade: ' + FormatDateTime('dd/mm/yyyy', DtaValidadeIdentificacao-1), 1, 1);
          end else begin
            Mensagens.Adicionar('O tipo de identificação "' + CodIdentificacaoDuplaSISBOV + '" correspondente ao animal, exige data de solicitação do código SISBOV inferior a data de validade: ' + FormatDateTime('dd/mm/yyyy', DtaValidadeIdentificacao-1), 1, Self.ClassName, NomeMetodo, []);
          end;

          // Finaliza procedimento
          Exit;
        end;
      end;

      // Verifica se a identificação dupla válida segundo o SISBOV exige que o
      // animal possua número de registro em associação
      if IndRequerRgd and (Trim(Query.FieldByName('num_rgd').AsString) = '') then begin
        // Insere log de erro para o registro
        if not IndLogMensagem then begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSis, 'O tipo de identificação "' + CodIdentificacaoDuplaSISBOV + '" exige que número de registro em associação correspondente ao animal seja informado', 1, 1);
        end else begin
          Mensagens.Adicionar('O tipo de identificação "' + CodIdentificacaoDuplaSISBOV + '" exige que número de registro em associação correspondente ao animal seja informado', 1, Self.ClassName, NomeMetodo, []);
        end;

        // Finaliza procedimento
        Exit;
      end;
      IdentificacaoDuplaSisbov := CodIdentificacaoDuplaSISBOV;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1686, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1686;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.EfetivarCadastros(CodFazendaManejo: Integer;
  CodInicialAnimalManejo, CodFinalAnimalManejo,
  CodAnimais: String): Integer;
const
  Metodo : Integer = 254;
  NomeMetodo : String = 'EfetivarCadastros';
  CodLogOperacao: Integer = 6;  
var
  Q, // QS,
  QCodSisbov,
  QAux,
  QDataInsercaoCodigo : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  CodEstadoSisbov,
  CodMicroRegiaoSisbov : Integer;
  DtaInicioCertificacao,
  DtaSist : TDateTime;
  QtdProcessados,
  QtdErros,
  QtdJaEfetivados,
  QtdSituacaoImpropria,
  QtdSemCodigoCertificadora,
  QtdFazendaIdentNaoEfetivada,
  QtdPropriedadeIdentNaoEfetivada,
  QtdPropriedadeNascNaoEfetivada,
  QtdPropriedadeSemMicroRegiao,
  QtdMicroRegiaoSisbovDiferente,
  QtdFazendaNascNaoEfetivada,
  QtdDtaIdentificacaoInvalida,
  QtdIndisponibilidadeSisbov,
  QtdIdentificacaoDuplaInvalida: Integer;
  QtdCodSisBovNaoInformado,
  QtdAnimalComprado,
  QtdCodSisBovNaoPertenceProdutor: Integer;
  IdentificacaoDuplaSisbov: String;
  CPM: Integer;
  MicroRegiaoFixa: Integer;
  NIM: String;
  DTM,
  DtaInsercaoRegistro,
  DtaReservaCodigos: TDateTime;
  sLog,
  StrData: String;
  i, j,
  CodPropriedadeRural,
  CodLocalicacao: Integer;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Seleciona os animais candidatos à operação
  Result := SelecionaAnimaisMultiplos(CodFazendaManejo, CodInicialAnimalManejo,
    CodFinalAnimalManejo, CodAnimais);
  if Result < 0 then
  begin
    Exit;
  end;

  // Variaveis para totalização
  QtdProcessados := 0;
  QtdJaEfetivados := 0;
  QtdSituacaoImpropria := 0;
  QtdSemCodigoCertificadora := 0;
  QtdFazendaIdentNaoEfetivada := 0;
  QtdPropriedadeIdentNaoEfetivada := 0;
  QtdPropriedadeSemMicroRegiao := 0;
  QtdMicroRegiaoSisbovDiferente := 0;
  QtdFazendaNascNaoEfetivada := 0;
  QtdPropriedadeNascNaoEfetivada := 0;
  QtdDtaIdentificacaoInvalida := 0;
  QtdIndisponibilidadeSisbov := 0;
  DtaSist := DtaSistema;
  QtdCodSisBovNaoInformado := 0;
  QtdIdentificacaoDuplaInvalida := 0;
  QtdCodSisBovNaoPertenceProdutor := 0;
  QtdAnimalComprado := 0;

  QCodSisbov := THerdomQuery.Create(Conexao, nil);
  Q := THerdomQuery.Create(Conexao, nil);
  QAux := THerdomQuery.Create(Conexao, nil);
  QDataInsercaoCodigo := THerdomQuery.Create(Conexao, nil);
  try
    // Monta comando de update da tab_animal
    Q.SQL.Clear;
{$IFDEF MSSQL}
    Q.SQL.Add('update tab_animal ' +
              '   set cod_animal_certificadora = :cod_animal_certificadora, ' +
              '       cod_pais_sisbov = :cod_pais_sisbov, ' +
              '       cod_estado_sisbov = :cod_estado_sisbov, ' +
              '       cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov, ' +
              '       cod_animal_sisbov = :cod_animal_sisbov, ' +
              '       num_dv_sisbov = :num_dv_sisbov, ' +
              '       dta_identificacao_sisbov = :dta_identificacao_sisbov, ' +
              '       cod_situacao_sisbov = ''I'', ' +
              '       cod_fazenda_nascimento = :cod_fazenda_nascimento, ' +
              '       num_imovel_nascimento = :num_imovel_nascimento, ' +
              '       cod_localizacao_nascimento = :cod_localizacao_nascimento, ' +
              '       cod_propriedade_nascimento = :cod_propriedade_nascimento, ' +
              '       cod_fazenda_identificacao = :cod_fazenda_identificacao, ' +
              '       num_imovel_identificacao = :num_imovel_identificacao, ' +
              '       cod_localizacao_identificacao = :cod_localizacao_identificacao, ' +
              '       cod_propriedade_identificacao = :cod_propriedade_identificacao, ' +
              '       dta_efetivacao_cadastro = :dta_efetivacao_cadastro ' +
              ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
              '   and cod_animal = :cod_animal ');
    QDataInsercaoCodigo.SQL.Add(
              'select ' +
              '  dta_insercao_registro ' +
              'from ' +
              '  tab_codigo_sisbov ' +
              'where ' +
              '  cod_pais_sisbov = :cod_pais_sisbov ' +
              '  and cod_estado_sisbov = :cod_estado_sisbov ' +
              '  and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
              '  and cod_animal_sisbov = :cod_animal_sisbov ');

{$ENDIF}
    try
      // Obtem oparametro da data da obrigatóriedade de reserva dos códigos SISBOV
      try
        StrData := Conexao.ValorParametro(98, Mensagens);
      except
        on E: Exception do
        begin
          Rollback;
          Result := -1;
          Exit;
        end;
      end;

      // Decodifica a data
      DtaReservaCodigos := EncodeDate(
        StrToInt(Copy(StrData, 7, 4)),
        StrToInt(Copy(StrData, 4, 2)),
        StrToInt(Copy(StrData, 1, 2)));

      // Processa os animais
      while not FQueryAux.Eof do
      begin
        // Abre Transação
        BeginTran;

        // Obtem dados do animal atual
        ObtemAnimalSelecionado(DadosAnimal);

        if (DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho) then
        begin
          if not FIndLogMensagem then
          begin
             Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
               'Somente o produtor do animal pode realizar a efetivação do cadastro do animal.', 1, 1);
             if Result < 0 then
             begin
                Rollback;
                Exit;
             end;
          end
          else
          begin
            Mensagens.Adicionar(2263, Self.ClassName, NomeMetodo, []);
          end;

          Result := -2263;
          Inc(QtdJaEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Verifica se o técnico logado é o técnico que atende o animal
        // se o perfil do usuário for técnico
        if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa)
          and (Conexao.CodPapelUsuario = 3)
          and (DadosAnimal.CodPessoaTecnico > 0) then
        begin
          if not FIndLogMensagem then
          begin
             Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
               'O animal não está associado ao usuário (técnico).', 1, 1);
             if Result < 0 then
             begin
                Rollback;
                Exit;
             end;
          end
          else
          begin
            Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo,
              [DadosAnimal.CodAnimalManejo]);
          end;

          Result := -1698;
          Inc(QtdJaEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Caso o usuário logado seja um gestor, ao excluir o animal dever-se-á validar se o animal
        // pertence ao círculo de produtores relacionados a técnicos do gestor.
        if (Conexao.CodPapelUsuario = 9) and (DadosAnimal.CodPessoaTecnico > 0) then
        begin
          QAux.SQL.Clear;
          QAux.SQL.Add(' select 1 ');
          QAux.SQL.Add('   from tab_tecnico tt ');
          QAux.SQL.Add('      , tab_tecnico_produtor ttp ');
          QAux.SQL.Add('  where tt.cod_pessoa_tecnico   = ttp.cod_pessoa_tecnico ');
          QAux.SQL.Add('    and tt.cod_pessoa_tecnico   = :cod_pessoa_tecnico ');
          QAux.SQL.Add('    and tt.cod_pessoa_gestor    = :cod_pessoa_gestor ');
          QAux.SQL.Add('    and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
          QAux.SQL.Add('    and tt.dta_fim_validade     is null ');
          QAux.SQL.Add('    and ttp.dta_fim_validade    is null ');
          QAux.ParamByName('cod_pessoa_gestor').AsInteger   := Conexao.CodPessoa;
          QAux.ParamByName('cod_pessoa_tecnico').AsInteger  := DadosAnimal.CodPessoaTecnico;
          QAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          QAux.Open;

          if QAux.IsEmpty then
          begin
            Mensagens.Adicionar(2191, Self.ClassName, NomeMetodo, []);
            Result := -2191;
            Exit;
          end;
        end;

        // Verifica se o cadastro já foi efetivado
        if DadosAnimal.DtaEfetivacaoCadastro > 0 then
        begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'O cadastro do animal já está efetivado', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('O cadastro do animal já está efetivado', 1,
              Self.ClassName, NomeMetodo, []);
          end;

          Inc(QtdJaEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Verifica situação do animal (R60)
        if DadosAnimal.CodSituacaoSisbov <> 'P' then
        begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'O animal não está em situação "Pendente" e não pode ter o ' +
              'cadastro efetivado', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('O animal não está em situação "Pendente" e '
            + 'não pode ter o cadastro efetivado',1,Self.ClassName, NomeMetodo,
            []);
          end;

          Inc(QtdSituacaoImpropria);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        if (DadosAnimal.CodAnimalVendido > 0) and
           (DadosAnimal.CodSituacaoAnimalVendido <> 'N') then
        begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                                                'O animal não pode ser identificado, por ser um animal já ' +
                                                'identificado no SISBOV antes de seu evento de COMPRA.', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('O animal não pode ser identificado, por ser um animal já ' +
                                'identificado no SISBOV antes de seu evento de COMPRA.', 1,
                                Self.ClassName, NomeMetodo, []);
          end;
          Inc(QtdAnimalComprado);
          FQueryAux.Next;
          Commit;
          Continue;          
        end;        

        // Verifica código certificadora (R61)
        if ValorParametro(8) = 'S' then
        begin
          Result := GeraCodAnimalCertificadora(
            DadosAnimal.CodAnimalCertificadora, DadosAnimal.CodFazendaManejo,
            DadosAnimal.CodAnimalManejo, -1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          DadosAnimal.CodAnimalCertificadora := UpperCase(DadosAnimal.CodAnimalCertificadora);

//          Result := VerificaCodAnimalCertificadora(DadosAnimal.CodAnimal, DadosAnimal.CodAnimalCertificadora);
//          if Result < 0 then
//          begin
//            Rollback;
//            Exit;
//          end;
        end
        else
        begin
          if DadosAnimal.CodAnimalCertificadora = '' then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'O animal não possui código de certificadora', 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('O animal não possui código de certificadora',
                1, Self.ClassName, NomeMetodo, []);
            end;

            Inc(QtdSemCodigoCertificadora);
            FQueryAux.Next;
            Commit;
            Continue;
          end;
        end;

        //Se o animal tiver origem "Nascido" ou "Não Especificado" validar o NIRF de Nascimento e buscar a fazenda de nascimento
        if ((DadosAnimal.CodTipoOrigem = 1) or (DadosAnimal.CodTipoOrigem = 5)) and
           ((not(DadosAnimal.CodFazendaIdentificacao > 0)) and (Trim(DadosAnimal.NumImovelNascimento) <> '')) then
        begin
          j := Mensagens.Count;
          CodPropriedadeRural := -1;
          Result := ValidarNIRFNascimento(Conexao, Mensagens, DadosAnimal.NumImovelNascimento,
                                          CodPropriedadeRural, -1, Conexao.CodProdutorTrabalho, False);
          if Result < 0 then
          begin
            if not FIndLogMensagem then
            begin
              for i := j to Mensagens.Count - 1 do
              begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, Mensagens.Items[i].Texto, 1, 1);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;
            end;

            Inc(QtdPropriedadeNascNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end
          else
          begin
            CodPropriedadeRural := Result;
          end;

          QAux.SQL.Clear;
          QAux.SQL.Add('select cod_fazenda as CodFazendaNascimento from tab_fazenda');
          QAux.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
          QAux.SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
          QAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          QAux.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
          QAux.Open;

          if QAux.IsEmpty then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'Não foi encontrada uma fazenda de nascimento para o produtor com o NIRF ' +
                                                  DadosAnimal.NumImovelNascimento, 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('Não foi encontrada uma fazenda de nascimento para o produtor com o NIRF ' +
                                  DadosAnimal.NumImovelNascimento, 1, Self.ClassName, NomeMetodo, []);
            end;
            Inc(QtdPropriedadeNascNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end;

          DadosAnimal.CodFazendaNascimento := QAux.FieldByName('CodFazendaNascimento').AsInteger;
        end;

        // Verifica fazenda e propriedade de nascimento efetivada (R62, R63, R64)
        if DadosAnimal.CodFazendaNascimento > 0 then
        begin
          Result := TIntFazendas.VerificaFazendaEfetivada(Conexao, Mensagens,
            DadosAnimal.CodFazendaNascimento,
            DadosAnimal.CodPropriedadeNascimento,
            DadosAnimal.NumImovelNascimento,
            DadosAnimal.CodLocalizacaoNascimento, DtaInicioCertificacao,
            'Fazenda de nascimento');
          if Result < 0 then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'A fazenda de nascimento do animal não possui o cadastro ' +
                'efetivado', 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('A fazenda de nascimento do animal não ' +
                'possui o cadastro efetivado',1,Self.ClassName, NomeMetodo, []);
            end;

            Inc(QtdFazendaIdentNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end;
        end;

        { a propriedade de nascimento do animal não é importante pois não se pode
          ter certeza que a propriedade é do produtor corrente e portanto só a
          fazenda deve ser verificada. Não sabendo que é o produtor associado
          à propriedade não é possível buscar o código de localização SISBOV
          correto.
          
        else
        if DadosAnimal.CodPropriedadeNascimento > 0 then
        begin
          Result := VerificaPropriedadeEfetivada(
            DadosAnimal.CodPropriedadeNascimento,
            DadosAnimal.NumImovelNascimento, DtaInicioCertificacao,
            'Propriedade de nascimento');
          if Result < 0 then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'A propriedade de nascimento do animal não possui o cadastro ' +
                'efetivado', 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('A propriedade de nascimento do animal não ' +
              'possui o cadastro efetivado',1,Self.ClassName, NomeMetodo, []);
            end;

            Inc(QtdPropriedadeIdentNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end;
        end; }

        if DadosAnimal.CodFazendaNascimento <= 0 then
        begin
          DadosAnimal.CodFazendaNascimento := -1;
        end;
        if DadosAnimal.CodLocalizacaoNascimento  <= 0 then
        begin
          DadosAnimal.CodLocalizacaoNascimento := -1;
        end;
        if DadosAnimal.CodPropriedadeNascimento  <= 0 then
        begin
          DadosAnimal.CodPropriedadeNascimento := -1;
        end;

        //Se o animal tiver origem "Nascido" ou "Não Especificado" validar o NIRF de Identificação e buscar a fazenda de identificação
        if ((DadosAnimal.CodTipoOrigem = 1) or (DadosAnimal.CodTipoOrigem = 5)) and
           ((not(DadosAnimal.CodFazendaIdentificacao > 0)) and (Trim(DadosAnimal.NumImovelIdentificacao) <> '')) then
        begin
          j := Mensagens.Count;
          CodPropriedadeRural := -1;
          Result := ValidarNIRFIdentificacao(Conexao, Mensagens, DadosAnimal.NumImovelIdentificacao,
                                             CodPropriedadeRural, -1, Conexao.CodProdutorTrabalho, False);
          if Result < 0 then
          begin
            if not FIndLogMensagem then
            begin
              for i := j to Mensagens.Count - 1 do
              begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, Mensagens.Items[i].Texto, 1, 1);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;
            end;

            Inc(QtdPropriedadeIdentNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end
          else
          begin
            CodPropriedadeRural := Result;
          end;

          QAux.SQL.Clear;
          QAux.SQL.Add('select cod_fazenda as CodFazendaIdentificacao from tab_fazenda');
          QAux.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
          QAux.SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
          QAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          QAux.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
          QAux.Open;

          if QAux.IsEmpty then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'Não foi encontrada uma fazenda de nascimento para o produtor com o NIRF ' +
                                                  DadosAnimal.NumImovelIdentificacao, 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('Não foi encontrada uma fazenda de nascimento para o produtor com o NIRF ' +
                                  DadosAnimal.NumImovelIdentificacao, 1, Self.ClassName, NomeMetodo, []);
            end;
          end;

          DadosAnimal.CodFazendaIdentificacao := QAux.FieldByName('CodFazendaIdentificacao').AsInteger;
        end;

        // Verifica fazenda e propriedade de identificação efetivada (R62, R63, R64)
        if DadosAnimal.CodFazendaIdentificacao > 0 then
        begin
          Result := TIntFazendas.VerificaFazendaEfetivada(Conexao, Mensagens,
            DadosAnimal.CodFazendaIdentificacao,
            DadosAnimal.CodPropriedadeIdentificacao,
            DadosAnimal.NumImovelIdentificacao,
            DadosAnimal.CodLocalizacaoIdentificacao, DtaInicioCertificacao,
            'Fazenda de identificação');
          if Result < 0 then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'A fazenda de identificação do animal não possui o cadastro ' +
                'efetivado', 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('A fazenda de identificação do animal não '
              + 'possui o cadastro efetivado',1,Self.ClassName, NomeMetodo, []);
            end;

            Inc(QtdFazendaIdentNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end;
        end
        else
        begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'A fazenda de identificação do animal não foi informada', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('A fazenda de identificação do animal não foi' +
              ' informada', 1, Self.ClassName, NomeMetodo, []);
          end;

          Inc(QtdPropriedadeIdentNaoEfetivada);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        {
        else
        begin
          if DadosAnimal.CodPropriedadeIdentificacao > 0 then
          begin
            Result := VerificaPropriedadeEfetivada(
              DadosAnimal.CodPropriedadeIdentificacao,
              DadosAnimal.NumImovelIdentificacao, DtaInicioCertificacao,
              'Propriedade de identificação');
            if Result < 0 then
            begin
              if not FIndLogMensagem then
              begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                  'A propriedade de identificação do animal não possui o ' +
                  'cadastro efetivado', 1, 1);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end
              else
              begin
                Mensagens.Adicionar('A propriedade de identificação do animal' +
                  ' não possui o cadastro efetivado',1,Self.ClassName,
                  NomeMetodo, []);
              end;

              Inc(QtdPropriedadeIdentNaoEfetivada);
              FQueryAux.Next;
              Commit;
              Continue;
            end;
          end
          else
          begin
            if DadosAnimal.NumImovelIdentificacao <> '' then
            begin
              Result := VerificaPropriedadeEfetivada(
                DadosAnimal.CodPropriedadeIdentificacao,
                DadosAnimal.NumImovelIdentificacao, DtaInicioCertificacao,
                'Propriedade de identificação');
              if Result < 0 then
              begin
                if not FIndLogMensagem then
                begin
                  Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                    'A propriedade de identificação do animal não possui o ' +
                    'cadastro efetivado', 1, 1);
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;
                end
                else
                begin
                  Mensagens.Adicionar('A propriedade de identificação do ' +
                    'animal não possui o cadastro efetivado',1,Self.ClassName,
                    NomeMetodo, []);
                end;
                Inc(QtdPropriedadeIdentNaoEfetivada);
                FQueryAux.Next;
                Commit;
                Continue;
              end;
            end
            else
            begin
              if not FIndLogMensagem then
              begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                  'A fazenda de identificação ou a propriedade de ' +
                  'identificação do animal não foi informada', 1, 1);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end
              else
              begin
                Mensagens.Adicionar('A fazenda de identificação ou a ' +
                  'propriedade de identificação do animal não foi informada', 1,
                  Self.ClassName, NomeMetodo, []);
              end;

              Inc(QtdPropriedadeIdentNaoEfetivada);
              FQueryAux.Next;
              Commit;
              Continue;
            end;
          end;
        end; }

        // Verifica se a fazenda de manejo está efetivada
        if DadosAnimal.CodFazendaManejo > 0 then
        begin
          Result := TIntFazendas.VerificaFazendaEfetivada(Conexao, Mensagens,
            DadosAnimal.CodFazendaManejo, CPM, NIM, CodLocalicacao, DTM,
            'Fazenda de manejo');
          if Result < 0 then
          begin
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'A fazenda de manejo do animal não possui o cadastro ' +
                'efetivado', 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
            end
            else
            begin
              Mensagens.Adicionar('A fazenda de manejo do animal não possui o' +
                ' cadastro efetivado',1,Self.ClassName, NomeMetodo, []);
            end;
            
            Inc(QtdFazendaIdentNaoEfetivada);
            FQueryAux.Next;
            Commit;
            Continue;
          end;
        end;

        // Verifica código SISBOV do animal (R65)
        Result := ObtemMicroRegiaoPropriedade(
          DadosAnimal.CodPropriedadeIdentificacao, CodEstadoSisbov,
          CodMicroRegiaoSisbov, 'Micro região da propriedade');
        if Result < 0 then begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'A propriedade de identificação do animal não está relacionada ' +
              'a nenhuma micro região', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('A propriedade de identificação do animal não' +
              ' está relacionada a nenhuma micro região',1,Self.ClassName,
              NomeMetodo, []);
          end;

          Inc(QtdPropriedadeSemMicroRegiao);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Obtem a data de inserção do código SISBOV
        with QDataInsercaoCodigo do
        begin
          Close;
          ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
          ParamByName('cod_estado_sisbov').AsInteger :=
            DadosAnimal.CodEstadoSisbov;
          ParamByName('cod_micro_regiao_sisbov').AsInteger :=
            DadosAnimal.CodMicroRegiaoSisbov;
          ParamByName('cod_animal_sisbov').AsInteger :=
            DadosAnimal.CodAnimalSisbov;
          Open;
          DtaInsercaoRegistro := FieldByName('dta_insercao_registro').AsDateTime;
        end;

        if DadosAnimal.CodPaisSisbov <= 0 then
        begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
            'O animal não esta associado a nenhum código SISBOV', 1, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
        end;

        if (DadosAnimal.CodEstadoSisbov <> CodEstadoSisbov) then
        begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'O estado do código sisbov é diferente do estado da propriedade' +
                ' rural de identificação do animal', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('O estado do código sisbov é diferente do ' +
              'estado da propriedade rural de identificação do animal', 1,
              Self.ClassName, NomeMetodo, []);
          end;

          Inc(QtdMicroRegiaoSisbovDiferente);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Não é necessário verificar se o código SISBOV esta reservado
        // para os códigos inseridos antes da data de obrigatoriedade da reserva
        if DtaInsercaoRegistro > DtaReservaCodigos then
        begin
          // -> Verificar se o Cod. Sisbov é do produtor
          Result := ConsisteCodSisbovProdutor(Conexao.CodProdutorTrabalho,
            DadosAnimal.CodPropriedadeIdentificacao,
            DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
            DadosAnimal.CodAnimalSisbov);
          if Result = -1 then
          begin // Código Sisbov não pertence ao produtor e propriedade
            if not FIndLogMensagem then
            begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'Código Sisbov não pertence ao produtor e/ou propriedade.', 1, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end
            end
            else
            begin
              Mensagens.Adicionar(736, Self.ClassName, 'EfetivarCadastros', []);
            end;

            Result := -736;
            Inc(QtdCodSisBovNaoPertenceProdutor);
            FQueryAux.Next;
            Commit;
            Continue;
          end
          else
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
        end;

        // Verifica se data de identificação está compatível com data início
        // certificação da propriedade (R69)
        if DadosAnimal.DtaIdentificacaoSisbov = 0 then
        begin
          DadosAnimal.DtaIdentificacaoSisbov := DtaSistema;
        end;

        if DadosAnimal.DtaIdentificacaoSisbov < DtaInicioCertificacao then
        begin
          if not FIndLogMensagem then
          begin
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'A data de identificação do animal é inválida ou é menor que ' +
              'a data de início de certificação da propriedade rural de ' +
              'identificação', 1, 1);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end
          else
          begin
            Mensagens.Adicionar('A data de identificação do animal é inválida' +
              ' ou é menor que a data de início de certificação da ' +
              'propriedade rural de identificação',1,Self.ClassName,
              NomeMetodo, []);
          end;
          
          Inc(QtdDtaIdentificacaoInvalida);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Não é necessário verificar a identificação dupla do animal
        // para os códigos inseridos antes da data de obrigatoriedade da reserva
        if DtaInsercaoRegistro > DtaReservaCodigos then
        begin
          // Verifica se o animal possui identificação dupla segundo o SISBOV
          // Se ocorrer algum erro a própria função insere os erros de operação
          Result := BuscaIdentificacaoDuplaSisbov(FQueryAux, DadosAnimal,
            DtaSist, IdentificacaoDuplaSisbov, FIndLogMensagem);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end
          else
          if IdentificacaoDuplaSisbov = '' then
          begin
            Inc(QtdIdentificacaoDuplaInvalida);
            FQueryAux.Next;
            Commit;
            Continue;
          end;
        end;

        // Limpa possível mensagem de erro pré existente para o animal
        Result := LimparErrosOperacao(DadosAnimal.CodAnimal, 1);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

       // Altera o registro na tab_animal
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.ParamByName('cod_animal_certificadora').AsString := DadosAnimal.CodAnimalCertificadora;
        Q.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
        Q.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
        Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
        Q.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
        Q.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
        Q.ParamByName('dta_efetivacao_cadastro').AsDateTime := DtaSist;
        Q.ParamByName('dta_identificacao_sisbov').AsDateTime := DadosAnimal.DtaIdentificacaoSisbov;
        Q.ParamByName('cod_fazenda_identificacao').AsInteger := DadosAnimal.CodFazendaIdentificacao;
        Q.ParamByName('num_imovel_identificacao').AsString := DadosAnimal.NumImovelIdentificacao;
        Q.ParamByName('cod_localizacao_identificacao').AsInteger := DadosAnimal.CodLocalizacaoIdentificacao;
        Q.ParamByName('cod_propriedade_identificacao').AsInteger := DadosAnimal.CodPropriedadeIdentificacao;
        AtribuiParametro(Q, DadosAnimal.CodFazendaNascimento, 'cod_fazenda_nascimento', -1);
        AtribuiParametro(Q, DadosAnimal.NumImovelNascimento, 'num_imovel_nascimento', '');
        AtribuiParametro(Q, DadosAnimal.CodLocalizacaoNascimento, 'cod_localizacao_nascimento', -1);
        AtribuiParametro(Q, DadosAnimal.CodPropriedadeNascimento, 'cod_propriedade_nascimento', -1);
        Q.ExecSQL;

        // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
        // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após,
        //              4-Exclusão, 5-Finalização Validade
        Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3,
          Metodo);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

        // Atualiza a situação do código sisbov para "IDENT" (3)
        Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
          DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
          DadosAnimal.CodAnimalSisbov, 3);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

        try
          TIntOrdensServico.MudarSituacaoParaIdent(Conexao, Mensagens,
            DadosAnimal.CodPaisSisbov, DadosAnimal.CodEstadoSisbov,
            DadosAnimal.CodMicroRegiaoSisbov, DadosAnimal.CodAnimalSisbov,
            DadosAnimal.NumDVSisbov);
        except
          on E: EHerdomException do
          begin
            E.GerarMensagem(Mensagens);
            Rollback;
            BeginTran();
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
              'Erro ao atualiza a OS do animal efetivado.', 1, 1);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;

            FQueryAux.Next;
            Inc(QtdAnimalIncompativel);
            Commit;
            Continue;
          end
          else
          begin
            raise;
          end;
        end;

        Inc(QtdProcessados);
        FQueryAux.Next;
        Commit;
      end;

      // Confirma transação
      Commit;

      ZerarValoresUltimaPesquisa;

      // Atualiza coleção de mensagens
      if not FIndLogMensagem then
      begin
        Mensagens.Clear;

        QtdErros := (QtdJaEfetivados + QtdSituacaoImpropria +
          QtdSemCodigoCertificadora + QtdFazendaIdentNaoEfetivada +
          QtdPropriedadeIdentNaoEfetivada + QtdPropriedadeSemMicroRegiao +
          QtdMicroRegiaoSisbovDiferente + QtdIndisponibilidadeSisbov +
          QtdFazendaNascNaoEfetivada + QtdPropriedadeNascNaoEfetivada +
          QtdDtaIdentificacaoInvalida + QtdCodSisBovNaoInformado +
          QtdIdentificacaoDuplaInvalida + QtdCodSisBovNaoPertenceProdutor +
          QtdAnimalComprado);

        if QtdErros > 0 then
        begin
          Mensagens.Adicionar(790, Self.ClassName, NomeMetodo,
            [IntToStr(QtdProcessados), IntToStr(QtdErros)]);
          Result := -1;
        end
        else
        begin
          Mensagens.Adicionar(789, Self.ClassName, NomeMetodo,
            [IntToStr(QtdProcessados)]);
          Result := 0;
        end;
      end;
    finally
      QCodSisbov.Free;
      Q.Free;
      QAux.Free;
      QDataInsercaoCodigo.Free;
    end;
  except
    on E: Exception do
    begin
      Rollback;
      Mensagens.Adicionar(768, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -768;
      Exit;
    end;
  end;
end;

function TIntAnimais.Excluir(ECodFazendaManejo: Integer;
                             ECodInicialAnimalManejo,
                             ECodFinalAnimalManejo,
                             ECodAnimais: String): Integer;
const
  Metodo : Integer = 172;
  NomeMetodo : String = 'Excluir';
  SQLVerificaEvento: String = ' select ' +
                              '        1 ' +
                              '   from ' +
                              '        tab_animal_evento tae ' +
                              '      , tab_evento te ' +
                              '      , tab_tipo_evento tte ' +
                              '  where ' +
                              '        tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                              '    and tae.cod_evento = te.cod_evento ' +
                              '    and te.cod_tipo_evento = tte.cod_tipo_evento ' +
                              '    and tte.ind_restrito_sistema = ''N''' +
                              '    and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                              '    and tae.cod_animal = :cod_animal ';

  SQLVerificaEventoRestritoSistema: String = ' select ' +
                                             '        1 ' +
                                             '   from ' +
                                             '        tab_animal_evento tae ' +
                                             '      , tab_evento te ' +
                                             '      , tab_tipo_evento tte ' +
                                             '  where ' +
                                             '        tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                                             '    and tae.cod_evento = te.cod_evento ' +
                                             '    and te.cod_tipo_evento = tte.cod_tipo_evento ' +
                                             '    and tte.ind_restrito_sistema = ''S''' +
                                             '    and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                                             '    and tae.cod_animal = :cod_animal ';

  SQLExcluiEventoRestritoSistema: String = ' delete tab_animal_evento ' +
                                           '  where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                                           '    and cod_animal = :cod_animal ';

  SQLExcluiAnimal: String = ' update tab_animal ' +
                            {$IFDEF MSSQL}
                            '   set dta_fim_validade = getdate() ' +
                            {$ENDIF}
                            ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                            '   and cod_animal = :cod_animal ';
var
  Q : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  bLiberarCodSisbov : Boolean;
  QtdProcessados, QtdErros, QtdJaEfetivados, QtdSofreramEventos: Integer;
  DtaSist : TDateTime;
  i: Integer;
begin
  Result := -1;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Seleciona os animais candidatos à operação
  Result := SelecionaAnimaisMultiplos(ECodFazendaManejo,
                                      ECodInicialAnimalManejo,
                                      ECodFinalAnimalManejo,
                                      ECodAnimais);
  if Result < 0 then
  begin
    Exit;
  end;

  // Variaveis para totalização
  QtdProcessados := 0;
  QtdJaEfetivados := 0;
  QtdSofreramEventos := 0;
  DtaSist := DtaSistema;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Processa os animais
      while not FQueryAux.Eof do
      begin
        // Abre Transação
        BeginTran;

        // Obtem dados do animal atual
        ObtemAnimalSelecionado(DadosAnimal);

        if DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho then
        begin
          Mensagens.Adicionar(2261, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'Apenas o produtor do animal pode excluir o animal.', 3, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          Result := -2261;
          Inc(QtdJaEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        if (Conexao.CodPapelUsuario = 3) and
           (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and
           (DadosAnimal.CodPessoaTecnico > 0) then
        begin
           Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
           Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal não está associado ao usuário (técnico).', 3, 1);
           if Result < 0 then
           begin
              Rollback;
              Exit;
           end;
           Result := -1698;
           Inc(QtdJaEfetivados);
           FQueryAux.Next;
           Commit;
           Continue;
        end;

        // Caso o usuário logado seja um gestor, ao excluir o animal dever-se-á validar se o animal
        // pertence ao círculo de produtores relacionados a técnicos do gestor.
        if (Conexao.CodPapelUsuario = 9) and (DadosAnimal.CodPessoaTecnico > 0) then
        begin
          Q.SQL.Clear;
          Q.SQL.Add(' select 1 ');
          Q.SQL.Add('   from tab_tecnico tt ');
          Q.SQL.Add('      , tab_tecnico_produtor ttp ');
          Q.SQL.Add('  where tt.cod_pessoa_tecnico   = ttp.cod_pessoa_tecnico ');
          Q.SQL.Add('    and tt.cod_pessoa_tecnico   = :cod_pessoa_tecnico ');
          Q.SQL.Add('    and tt.cod_pessoa_gestor    = :cod_pessoa_gestor ');
          Q.SQL.Add('    and ttp.cod_pessoa_produtor = :cod_pessoa_produtor ');
          Q.SQL.Add('    and tt.dta_fim_validade     is null ');
          Q.SQL.Add('    and ttp.dta_fim_validade    is null ');
          Q.ParamByName('cod_pessoa_gestor').AsInteger   := Conexao.CodPessoa;
          Q.ParamByName('cod_pessoa_tecnico').AsInteger  := DadosAnimal.CodPessoaTecnico;
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q.Open;

          if Q.IsEmpty then
          begin
            Mensagens.Adicionar(2191, Self.ClassName, NomeMetodo, []);
            Result := -2191;
            Exit
          end;
        end;

        // Verifica se o cadastro já foi efetivado
        if (DadosAnimal.DtaEfetivacaoCadastro > 0) and (DadosAnimal.CodTipoOrigem <> 2) then
        begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O cadastro do animal já está efetivado', 3, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;

          Inc(QtdJaEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Verifica se o animal já foi exportado
        if (DadosAnimal.CodArquivoSisbov > 0) and (DadosAnimal.CodTipoOrigem <> 2) then
        begin
          Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal já foi exportado para o SISBOV', 3, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;

          Inc(QtdJaEfetivados);
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Monta comando que verifica se o animal sofreu algum evento
        Q.SQL.Text := SQLVerificaEvento;

        // Pesquisa se o animal em questão sofreu algum evento
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        if not Q.IsEmpty then
        begin
           Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal está associado a algum evento.', 3, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
        end;

        if Q.Fields[0].AsInteger > 0 then
        begin
          Inc(QtdSofreramEventos);
          FQueryAux.Next;
          Q.Close;
          Commit;          
          Continue;
        end;
        Q.Close;

        // Verifica se o animal não for externo ou importado e ja possuia um
        // código SISBOV, caso possua, indica que o mesmo deve ser liberado
        // durante o processamento
        bLiberarCodSisbov := (DadosAnimal.CodPaisSisbov > 0) and
         (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]);

        // Limpa possível mensagem de erro pré existente para o animal
        Result := LimparErrosOperacao(DadosAnimal.CodAnimal, 3);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

        Result := VerificaCadastroParto(DadosAnimal.CodAnimal);
        if Result < 0 then
        begin
          i := 0;
          while i < Mensagens.Count do
          begin
            if (Mensagens.Items[i].Codigo = 1588) or (Mensagens.Items[i].Codigo = 949) then
            begin
              Inc(i);
              Continue;
            end;
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, Mensagens.Items[i].Texto, 3, 1);
            Inc(i);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end;
          Inc(QtdSofreramEventos);
          Mensagens.Clear;
          Commit;
          FQueryAux.Next;
          Continue;
        end;

        if (bLiberarCodSisbov) and (DadosAnimal.CodTipoOrigem <> 2) then
        begin
          Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
            DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
            DadosAnimal.CodAnimalSisbov, 1);
          if Result < 0 then
          begin
            Exit;
          end;
        end;

        // Monta comando de consulta para verificar se existem eventos restritos ao
        // sistema e que deverão ser excluídos
        Q.SQL.Text := SQLVerificaEventoRestritoSistema;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        if not Q.IsEmpty then
        begin
          //Exclui os eventos restritos ao sistema, impedindo que ocorra erro na exclusão
          Q.SQL.Text := SQLExcluiEventoRestritoSistema;
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
          Q.ExecSQL;
        end;

        // Monta comando de update da tab_animal
        Q.SQL.Text := SQLExcluiAnimal;

        // Altera o registro na tab_animal
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.ExecSQL;

(*
        A partir de 19/10/2004 o procedimento de atualização de grandezas será
        realizado a partir da execução de processo batch por intervalos configuráveis
        e não mais a partir da execução de cada operação como anteriormente.
        // Atualiza Grandezas
        if DadosAnimal.CodTipoOrigem <> 4 then begin
          Result := AtualizaGrandeza(1, Conexao.CodProdutorTrabalho, -1); // cadastrados
          if Result < 0 then begin
            Rollback;
            Exit;
          end;
          // Atualiza grandeza para animais identificados
          if DadosAnimal.CodSituacaoSisbov = 'I' then begin
            Result := AtualizaGrandeza(2, Conexao.CodProdutorTrabalho, -1);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;
          end;
          // Atualiza grandeza para animais ainda não identificados
          if DadosAnimal.CodSituacaoSisbov = 'P' then begin
            Result := AtualizaGrandeza(3, Conexao.CodProdutorTrabalho, -1);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;
          end;
          // Atualiza grandeza para animais não controlados pela certificadora
          if DadosAnimal.CodSituacaoSisbov = 'N' then begin
            Result := AtualizaGrandeza(4, Conexao.CodProdutorTrabalho, -1);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;
          end;
        end;
*)

        // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
        // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
        Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 5, Metodo);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;
        Inc(QtdProcessados);
        // Confirma transação
        Commit;
        FQueryAux.Next;
      end;


      ZerarValoresUltimaPesquisa;

      // Atualiza coleção de mensagens
      Mensagens.Clear;

      QtdErros := QtdJaEfetivados + QtdSofreramEventos;

      if QtdErros > 0 then
      begin
        Mensagens.Adicionar(851, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados), IntToStr(QtdErros)]);
        Result := -1;
      end
      else
      begin
        Mensagens.Adicionar(850, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados)]);
        Result := 0;
      end;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(852, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -852;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AplicarEvento(CodAnimais: String; CodFazenda: Integer;
  CodAnimaisManejo: String; CodLote, CodLocal, CodEvento: Integer;
  IndLimparMensagens: String): Integer;
const
  Metodo : Integer = 287;
  NomeMetodo : String = 'AplicarEvento';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

//  Conexao.CodProdutorTrabalho := 792;
  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Limpa variável que armazena animais processados
  FIntAnimaisProcessados := '|';

  // Limpa variáveis de controle
  QtdProcessados := 0;
  QtdRelacionados := 0;
  QtdAnimalIncompativel := 0;
  QtdRelacionadoIncompativel := 0;
  NumNivelChamada := 0;

  // Chama função interna para aplicação de eventos
  Result := AplicarEventoInt(CodAnimais, CodFazenda, CodAnimaisManejo, CodLote,
      CodLocal, CodEvento, IndLimparMensagens);

  if Result = 0 then ZerarValoresUltimaPesquisa;
end;


///////////
function TIntAnimais.VerificaAnimalRM(DadosAnimal: TDadosAnimal;
     DadosEvento: TDadosEvento): Integer;
const
  NomeMetodo : String = 'VerificaAnimalRM';
var
  Q : THerdomQuery;
begin
  Result := 0;
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1');
      Q.SQL.Add('  from tab_animal_reprodutor_multiplo');
      Q.SQL.Add(' where cod_animal = :CodAnimal');
      Q.SQL.Add('   and (select dta_inicio from tab_evento where cod_evento = :CodEvento and cod_pessoa_produtor = :CodPessoaProdutor)');
      Q.SQL.Add('       between dta_inicio_uso and dta_fim_uso ');
{$ENDIF}
      Q.ParamByName('CodAnimal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('CodEvento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;

      Q.Open;
      if not Q.IsEmpty then begin
        Mensagens.Adicionar(1684, Self.ClassName, NomeMetodo, []);
        InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este animal não pode ser aplicado ao evento corrente, por estar presente em um RM (Reprodutor Múltiplo).', 'N');
        Result := -1684;
        Exit;
      end;

      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1684, Self.ClassName, NomeMetodo, [E.Message, 'local do animal']);
        Result := -1684;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;     
end;

function TIntAnimais.AplicarEventoInt(CodAnimais: String; CodFazenda: Integer;
  CodAnimaisManejo: String; CodLote, CodLocal,
  CodEvento: Integer; IndLimparMensagens: String): Integer;
const
  Metodo : Integer = 287;
  NomeMetodo : String = 'AplicarEvento';
var
  Q, QAnim : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DadosEvento : TDadosEvento;
  QtdProcessadosInt, Max, i:  Integer;
  Codigos: array of String;
  sTmp, sCod: String;
  DadosAnimalNotFound: TDadosAnimal;

  function fExcluirCodigosTemporarios: Integer;
  const
    NomeMetodo : String = 'fExcluirCodigosTemporarios';
  var
    excQ : THerdomQuery;
  begin
    excQ := THerdomQuery.Create(conexao, nil);
    try
      try

        excQ.SQL.Clear;
        {$IFDEF MSSQL}
        excQ.SQL.Add('delete from tmp_aplica_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_usuario = :cod_usuario ');
        {$ENDIF}
        excQ.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        excQ.ParamByName('cod_usuario').AsInteger         := Conexao.CodUsuario;
        excQ.ExecSQL;

        Result := 100;
      except
        on E: Exception do begin
          Rollback;
          Mensagens.Adicionar(859, Self.ClassName, NomeMetodo, [E.Message]);
          Result := -859;
          Exit;
        end;
      end;
    finally
      excQ.Free;
    end;
  end;
  function fInserirCodigoSemelhante(pCodProdutor, pCodAnimal, pNumOrdem, pUltimo: Integer; pCodAnimalManejo: String = ''): Integer;
  const
    NomeMetodo : String = 'fInserirCodigoSemelhante';
  var
    insQ : THerdomQuery;
  begin
    Result := 0;
    insQ := THerdomQuery.Create(conexao, nil);
    try
      try

        insQ.SQL.Clear;
        {$IFDEF MSSQL}
        insQ.SQL.Add('SELECT COUNT(*) AS Quantidade FROM tmp_aplica_evento WHERE cod_pessoa_produtor = :cod_pessoa_produtor AND cod_evento = :cod_evento AND cod_animal = :cod_animal');
        {$ENDIF}
        insQ.ParamByName('cod_pessoa_produtor').AsInteger := pCodProdutor;
        insQ.ParamByName('cod_evento').AsInteger          := DadosEvento.CodEvento;
        insQ.ParamByName('cod_animal').AsInteger          := pCodAnimal;
        insQ.Open;
        if insQ.FieldByName('Quantidade').AsInteger > 0 then
        begin
          insQ.Close;
          Exit;
        end;

        insQ.Close;

        insQ.SQL.Clear;
        {$IFDEF MSSQL}
        insQ.SQL.Add('insert into tmp_aplica_evento ' +
                  '      (cod_pessoa_produtor, ' +
                  '       cod_evento, ' +
                  '       cod_animal, ' +
                  '       cod_usuario, ' +
                  '       cod_sessao, ' +
                  '       num_ordem, ' +
                  '       ind_ultimo, cod_animal_manejo) ' +
                  'values ' +
                  '      (:cod_pessoa_produtor, ' +
                  '       :cod_evento, ' +
                  '       :cod_animal, ' +
                  '       :cod_usuario, ' +
                  '       :cod_sessao, ' +
                  '       :num_ordem, ' +
                  '       :ind_ultimo, :cod_animal_manejo) ');
        {$ENDIF}
        insQ.ParamByName('cod_pessoa_produtor').AsInteger := pCodProdutor;
        insQ.ParamByName('cod_evento').AsInteger          := DadosEvento.CodEvento;
        insQ.ParamByName('cod_animal').AsInteger          := pCodAnimal;
        insQ.ParamByName('cod_usuario').AsInteger         := Conexao.CodUsuario;
        insQ.ParamByName('cod_sessao').AsInteger          := 1;
        insQ.ParamByName('num_ordem').AsInteger           := pNumOrdem;
        insQ.ParamByName('ind_ultimo').AsInteger          := pUltimo;
        insQ.ParamByName('cod_animal_manejo').AsString    := pCodAnimalManejo;

        insQ.ExecSQL;

        Result := 100;
      except
        on E: Exception do begin
          Rollback;
          Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Erro ao inserir código semelhante. Detalhe: ' + E.Message]);
          Result := -9999;
          Exit;
        end;
      end;
    finally
      insQ.Free;
    end;
  end;
  function fExisteCodigosSemelhantes: Integer;
  const
    NomeMetodo : String = 'fExisteCodigosSemelhantes';
  var
    selQ : THerdomQuery;
    pCodProdutor, pCodAnimal, pNumOrdem, pUltimo: Integer;
  begin
    Result := 0;
    selQ := THerdomQuery.Create(conexao, nil);
    try
      try
        selQ.SQL.Clear;
{$IFDEF MSSQL}
        selQ.SQL.Add('SELECT COUNT(*) AS Quantidade FROM tab_animal ' +
                     ' WHERE cod_pessoa_produtor = ' + IntToStr(DadosAnimal.CodPessoaProdutor) +
                     ' AND cod_animal_manejo = ' + QuotedStr(DadosAnimal.CodAnimalManejo) +
                     ' AND dta_fim_validade IS NULL ' +
                     ' AND cod_categoria_animal IN (SELECT cod_categoria_animal FROM tab_categoria_animal WHERE ind_animal_ativo = ''S'' )' );
{$ENDIF}
        selQ.Open;
        if (selQ.FieldByName('Quantidade').AsInteger <= 1) then
          Exit;
        selQ.Close;
        selQ.SQL.Clear;
{$IFDEF MSSQL}
        selQ.SQL.Add('SELECT cod_pessoa_produtor, cod_animal FROM tab_animal ' +
                     ' WHERE cod_pessoa_produtor = ' + IntToStr(DadosAnimal.CodPessoaProdutor) +
                     ' AND cod_animal_manejo = ' + QuotedStr(DadosAnimal.CodAnimalManejo) +
                     ' AND dta_fim_validade IS NULL ' +
                     ' AND cod_categoria_animal IN (SELECT cod_categoria_animal FROM tab_categoria_animal WHERE ind_animal_ativo = ''S'' )' );
{$ENDIF}
        selQ.Open;
        pNumOrdem := 0;
        pUltimo   := 0;
        while not selQ.Eof do
        begin
          Inc(pNumOrdem);

          pCodProdutor := selQ.FieldByName('cod_pessoa_produtor').AsInteger;
          pCodAnimal   := selQ.FieldByName('cod_animal').AsInteger;

          selQ.Next;
          if (selQ.Eof) then
            pUltimo := 1;

          Result := fInserirCodigoSemelhante( pCodProdutor,
                                              pCodAnimal,
                                              pNumOrdem,
                                              pUltimo,
                                              DadosAnimal.CodAnimalManejo );
          if Result < 0 then
          begin
            Break;
            Exit;
          end;
        end;
        selQ.Close;
        Result := 1;
      except
        on E: Exception do begin
          Rollback;
          Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Erro ao verificar código semelhante. Detalhe: ' + E.Message]);
          Result := -9999;
          Exit;
        end;
      end;
    finally
      selQ.Free;
    end;
  end;
  function fPossuiSemelhantes: Integer;
  const
    NomeMetodo : String = 'fPossuiSemelhantes';
  var
    selQ : THerdomQuery;
  begin
    selQ := THerdomQuery.Create(Conexao, nil);
    try
      try

        selQ.SQL.Clear;

        {$IFDEF MSSQL}
        selQ.SQL.Add('select count(*) as qtd_ocorrencias ' +
                  '  from tmp_aplica_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_evento = :cod_evento ');
        {$ENDIF}
        selQ.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        selQ.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        selQ.Open;

        if selQ.FieldByName('qtd_ocorrencias').AsInteger > 0 then begin
          Result := 1;
          Exit;
        end;

        Result := 0;
      except
        On E: exception do begin
          Rollback;
          Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, [E.Message]);
          Result := -9999;
          Exit;
        end;
      end;
    Finally
      selQ.Free;
    end;
  end;

begin
  Result := -1;

  Inc(NumNivelChamada);

  try
    if not Inicializado then begin
      RaiseNaoInicializado(NomeMetodo);
      Exit;
    end;

    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Result := -307;
      Exit;
    end;

    QtdProcessadosInt := 0;

    Q := THerdomQuery.Create(Conexao, nil);
    try
      QAnim := THerdomQuery.Create(Conexao, nil);
      try
        try
          // Abre Transação
          BeginTran;

         // Limpa tab_erro_aplicacao_evento
          Q.SQL.Clear;
         {$IFDEF MSSQL}
          Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                    ' where dta_aplicacao_evento < dateadd(day, :qtd_dias, getdate())');
      {$ENDIF}
          Q.ParamByName('qtd_dias').AsInteger := StrToInt(ValorParametro(11)) * -1;
          Q.ExecSQL;

         if UpperCase(IndLimparMensagens) = 'S' then begin
            Q.SQL.Clear;
        {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ' +
                      '   and ind_operacao_remocao = ''N''');
        {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ExecSQL;
          end;

          MontaQueryInsertAnimalEvento;

          // Obtem o evento
          Result := VerificaEvento(CodEvento, True, 'Evento a aplicar', DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Não deixa aplicar eventos de pesagem com essa rotina
          if DadosEvento.CodTipoEvento = 22 then begin
            Mensagens.Adicionar(1145, Self.ClassName, NomeMetodo, []);
            Result := -1145;
            Rollback;
            Exit;
          end;

          // Se for evento de emissão de certificados, obtem a quantidade máxima de animais permitida
          Max := 0;
          if DadosEvento.CodTipoEvento = 16 then begin
            // Obtem parâmetro com o máximo número de códigos sisbov para pesquisa
            try
              Max := StrToInt(ValorParametro(23));
            except
              Result := -1;
              Exit;
            end;
          end;

          // Verifica se cadastro já foi efetivado
          if DadosEvento.DtaEfetivacaoCadastro > 0 then begin
            Mensagens.Adicionar(861, Self.ClassName, NomeMetodo, []);
            Result := -861;
            Rollback;
            Exit;
          end;

          // Consiste regras da inserção (por evento)
          Result := ConsisteInsercaoEvento(DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Monta Matriz de Codigos Manejo
          if Trim(CodAnimaisManejo) <> '' then
          begin
            SetLength(Codigos, 0);
            sTmp := Trim(CodAnimaisManejo) + ',';
            repeat
              sCod := Trim(Copy(sTmp, 1, Pos(',', sTmp)-1));
              System.Delete(sTmp, 1, Pos(',', sTmp));
              for i := Low(Codigos) to High(Codigos) do
                if (Codigos[i] = sCod) then
                begin
                  sCod := '';
                end;

              if (sCod <> '') then
              begin
                SetLength(Codigos, Length(Codigos)+1);
                Codigos[High(Codigos)] := sCod;
              end;
            until Length(sTmp)<=1;
          end;

          Result := fExcluirCodigosTemporarios;
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;

          // Seleciona os animais candidatos à operação
          Result := SelecionaAnimaisEvento(DadosEvento, CodAnimais, CodFazenda, CodAnimaisManejo, CodLote, CodLocal, CodEvento, False, QAnim);
          if Result < 0 then begin
            Rollback;
            fExcluirCodigosTemporarios;
            // Verificando Manejos Semelhantes
            if Trim(CodAnimaisManejo) <> '' then
            begin
              LimpaDadosAnimal(DadosAnimal);
              DadosAnimal.CodPessoaProdutor := Conexao.CodProdutorTrabalho;
              for i := Low(Codigos) to High(Codigos) do
              begin
                DadosAnimal.CodAnimalManejo := Codigos[i];
                fExisteCodigosSemelhantes;
              end;
            end;

            Exit;
          end;

          // Processa os animais
          while not QAnim.Eof do begin
            // Obtem dados do animal atual
            ObtemAnimalSelecionadoEvento(DadosAnimal, QAnim);

            // Tira o código da lista dos Códigos manejo informados
            // para apuração dos Código não encontrados
            if Trim(CodAnimaisManejo) <> '' then
            begin
              for i := Low(Codigos) to High(Codigos) do
                if (Codigos[i] <> '') and (Codigos[i] = QAnim.FieldByName('cod_animal_manejo').AsString) then
                begin
                  Codigos[i] := '';
                  Break;
                end;
            end;

            if (Conexao.CodPapelUsuario = 3) and
               (DadosAnimal.CodPessoaTecnico <> 0) and
               (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) then begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O técnico atual não está associado a este animal.', 'N');
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
              if NumNivelChamada = 1 then begin
                Inc(QtdAnimalIncompativel);
              end else begin
                Inc(QtdRelacionadoIncompativel);
              end;
              QAnim.Next;
              Continue;
            end;

            // Verifica se animal já foi processado
            if Pos('|' + IntToStr(DadosAnimal.CodAnimal) + '|', FIntAnimaisProcessados) > 0 then begin
              QAnim.Next;
              Continue;
            end;

            // Verifica a existência de Códigos Semelhantes
            if Trim(CodAnimaisManejo) <> '' then
            begin
              Result := fExisteCodigosSemelhantes;
              if Result < 0 then begin
                Rollback;
                Exit;
              end
              else
                if Result = 1 then
                begin
                  QAnim.Next;
                  Continue;
                end;
            end;

            // Atualiza animais processados
            FIntAnimaisProcessados := FIntAnimaisProcessados + IntToStr(DadosAnimal.CodAnimal) + '|';

            // Se for evento de emissão de certificados e se o número máximo de animais permitido for
            // atingido, cancela a operação
            if DadosEvento.CodTipoEvento = 16 then begin
              if (DadosEvento.QtdAnimais + QtdProcessadosInt) > Max then begin
                Mensagens.Adicionar(1156, Self.ClassName, NomeMetodo, [IntToStr(Max)]);
                Result := -1156;
                Rollback;
                Exit;
              end;
            end;

            // Verifica se o animal é valido para aplicação do evento na data do evento
            if DadosAnimal.DtaNascimento > DadosEvento.DtaFim then begin
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A data de nascimento do animal é superior a data de fim do evento', 'N');
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
              if NumNivelChamada = 1 then begin
                Inc(QtdAnimalIncompativel);
              end else begin
                Inc(QtdRelacionadoIncompativel);
              end;
              QAnim.Next;
              Continue;
            end;

            // Verifica se animal já não sofreu algum evento mais recente (exceto para eventos não controlados por data)
            Result := ConsisteEventoDtaControlada(DadosAnimal,DadosEvento,'A');
            if Result < 0 then begin
               Rollback;
               Exit;
            end;
            if Result = 100 then begin
               if NumNivelChamada = 1 then begin
                  Inc(QtdAnimalIncompativel);
               end else begin
                  Inc(QtdRelacionadoIncompativel);
               end;
               QAnim.Next;
               Continue;
            end;

            // Consiste se animal está na fazenda (Emissão de certificado)
            if (DadosEvento.CodFazenda > 0) and (DadosEvento.CodTipoEvento = 16) then begin
              if DadosAnimal.CodTipoLugar <> 1 then begin
                Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O evento foi cadastrado para uma fazenda específica mas o animal não está em nenhuma fazenda atualmente', 'N');
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
                if NumNivelChamada = 1 then begin
                  Inc(QtdAnimalIncompativel);
                end else begin
                  Inc(QtdRelacionadoIncompativel);
                end;
                QAnim.Next;
                Continue;
              end;
            end;

            // Consiste regras da associação (por animal)
            Case DadosEvento.CodTipoEvento of
              1 : begin  // Mudança de regime alimentar
                    Result := ConsisteMudancaRegimeAlimentar(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              2 : begin  // Desmame
                    Result := ConsisteDesmame(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              3 : begin  // Mudança de categoria
                    Result := ConsisteMudancaCategoria(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              4 : begin  // Seleção para reprodução
                    Result := ConsisteSelecaoReproducao(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              5 : begin  // Castração
                    Result := ConsisteCastracao(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              6 : begin  // Mudança de lote
                    Result := ConsisteMudancaLote(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              7 : begin  // Mudança de local
                    Result := ConsisteMudancaLocal(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              8 : begin  // Transferência
                    Result := ConsisteTransferencia(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              9 : begin  // Venda para criador

                    //Verifica para os animais se estão em RM
                    Result := VerificaAnimalRM(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                        if NumNivelChamada = 1 then begin
                          Inc(QtdAnimalIncompativel);
                        end else begin
                          Inc(QtdRelacionadoIncompativel);
                        end;
                       Continue;
                    end;

                    Result := ConsisteVendaCriador(DadosAnimal, DadosEvento, QAnim);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              10: begin  // Venda para frigorífico
                    //Verifica para os animais se estão em RM
                    Result := VerificaAnimalRM(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                        if NumNivelChamada = 1 then begin
                          Inc(QtdAnimalIncompativel);
                        end else begin
                          Inc(QtdRelacionadoIncompativel);
                        end;
                       Continue;
                    end;

                    Result := ConsisteVendaFrigorifico(DadosAnimal, DadosEvento, QAnim);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              11: begin  // Desaparecimento
                    Result := ConsisteDesaparecimento(DadosAnimal, DadosEvento, QAnim);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              12: begin  // Morte

                    //Verifica para os animais se estão em RM
                    Result := VerificaAnimalRM(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                       Continue;
                    end;

                    Result := ConsisteMorte(DadosAnimal, DadosEvento, QAnim);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              13: begin  // Parto

                  end;
              14: begin  // Aborto

                  end;
              15: begin  // Manejo sanitário
                    Result := ConsisteSanitario(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              16: begin  // Emissão de certificado
                    Result := ConsisteEmissaoCertificado(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              17: begin  // Desmame do bezerro
                    Result := ConsisteDesmameBezerro(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              18: begin  // Desaparecimento do bezerro
                    Result := ConsisteDesaparecimentoBezerro(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              19: begin  // Morte do bezerro
                    Result := ConsisteMorteBezerro(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              20: begin  // Venda do bezerro
                    Result := ConsisteVendaBezerro(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              21: begin  // Abate de animal nao rastreado
                    Result := ConsisteAbateAnimalVendido(DadosAnimal, DadosEvento);
//                    if Result < 0 then begin
//                      Rollback;
//                      Exit;
//                    end;
//                    if Result = 100 then begin
//                      if NumNivelChamada = 1 then begin
//                        Inc(QtdAnimalIncompativel);
//                      end else begin
//                        Inc(QtdRelacionadoIncompativel);
//                      end;
//                      QAnim.Next;
//                      Continue;
//                    end;
                  end;
              23: begin  // Cobertura em regime de pasto
                    Result := ConsisteCoberturaRegPasto(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              24: begin  // estação de monta
                    Result := ConsisteEstacaoMonta(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              33: begin  // descarte
                    Result := ConsisteDescarte(DadosAnimal, DadosEvento);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
              36: begin  // Retorno do frigorífico
                    Result := ConsisteRetornoFrigorifico(DadosAnimal, DadosEvento, QAnim);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                    if Result = 100 then begin
                      if NumNivelChamada = 1 then begin
                        Inc(QtdAnimalIncompativel);
                      end else begin
                        Inc(QtdRelacionadoIncompativel);
                      end;
                      QAnim.Next;
                      Continue;
                    end;
                  end;
            end;

            // Se não limpou as mensagens previamente, então limpa para o animal que
            // passou pela consistência
            if UpperCase(IndLimparMensagens) = 'N' then begin
              Q.SQL.Clear;
              {$IFDEF MSSQL}
              Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ' +
                        '   and cod_animal = :cod_animal ' +
                        '   and ind_operacao_remocao = :ind_operacao_remocao ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
              Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
              Q.ParamByName('ind_operacao_remocao').AsString := 'N';
              Q.ExecSQL;
            end;

            // Aplica o evento ao animal
            Result := InserirAnimalEvento(DadosEvento, DadosAnimal);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;

            // Evento sanitário é aplicado um a um
            if DadosEvento.CodTipoEvento = 15 then begin
              Result := AplicarSanitario(DadosAnimal, DadosEvento);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
            end;

            if DadosEvento.IndEventoSisbov = 'S' then begin
              if (DadosAnimal.CodSituacaoSisbov = 'P') or (DadosAnimal.CodSituacaoSisbov = 'I') then begin
                DadosEvento.CodSituacaoSisbov := 'P';
              end;
            end;

            Inc(QtdProcessadosInt);
            if NumNivelChamada = 1 then begin
              Inc(QtdProcessados);
            end else begin
              Inc(QtdRelacionados);
            end;
            QAnim.Next;
          end;

          // Apurando Códigos Manejo não processados
          for i := Low(Codigos) to High(Codigos) do
            if (Codigos[i] <> '') then
            begin
              DadosAnimalNotFound.CodPessoaProdutor  := DadosAnimal.CodPessoaProdutor;
              DadosAnimalNotFound.CodAnimalManejo    := Codigos[i];
              Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimalNotFound, 'Código Manejo não encontrado. [' + Codigos[i] + ']', 'N');
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
            end;

          if ((NumNivelChamada = 1) and (QtdProcessados > 0)) or
             ((NumNivelChamada > 1) and (QtdRelacionados > 0)) then begin
            // Aplica o evento "em lote" nos animais que passaram pelas consistências
            Case DadosEvento.CodTipoEvento of
              1 : begin  // Mudança de regime alimentar
                    Result := AplicarMudancaRegimeAlimentar(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              2 : begin  // Desmame
                    Result := AplicarDesmame(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              3 : begin  // Mudança de categoria
                    Result := AplicarMudancaCategoria(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              4 : begin  // Seleção para reprodução
                    Result := AplicarSelecaoReproducao(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              5 : begin  // Castração
                    Result := AplicarCastracao(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              6 : begin  // Mudança de lote
                    Result := AplicarMudancaLote(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              7 : begin  // Mudança de local
                    Result := AplicarMudancaLocal(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              8 : begin  // Transferência
                    Result := AplicarTransferencia(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              9 : begin  // Venda para criador
                    Result := AplicarVendaCriador(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              10: begin  // Venda para frigorífico
                    Result := AplicarVendaFrigorifico(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              11: begin  // Desaparecimento
                    Result := AplicarDesaparecimento(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              12: begin  // Morte
                    Result := AplicarMorte(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              13: begin  // Parto

                  end;
              14: begin  // Aborto

                  end;
              15: begin  // Manejo sanitário
                    // Evento sanitário é aplicado um a um
                  end;
              16: begin  // Emissão de certificado
                    Result := AplicarEmissaoCertificado(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              17: begin  // Desmame do bezerro
                    Result := AplicarDesmameBezerro(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              18: begin  // Desaparecimento do bezerro
                    Result := AplicarDesaparecimentoBezerro(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              19: begin  // Morte do bezerro
                    Result := AplicarMorteBezerro(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              20: begin  // Venda do bezerro
                    Result := AplicarVendaBezerro (DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              21: begin  // Abate de animal vendido
                    Result := AplicarAbateAnimalVendido(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              23: begin  // Cobertura em Regime de Pasto
                    Result := AplicarCoberturaRegPasto(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              24: begin  // Abate de animal vendido
                    Result := AplicarEstacaoMonta(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              33: begin  // Descarte
                    Result := AplicarDescarte(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
              36: begin  // Retorno do frigorífico
                    Result := AplicarRetornoFrigorifico(DadosAnimal, DadosEvento, True);
                    if Result < 0 then begin
                      Rollback;
                      Exit;
                    end;
                  end;
            end;

            // Atualiza tab_evento
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('update tab_evento ' +
                      '   set qtd_animais = qtd_animais + :qtd_animais, ' +
                      '       cod_situacao_sisbov = :cod_situacao_sisbov ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('qtd_animais').AsInteger := QtdProcessadosInt;
            Q.ParamByName('cod_situacao_sisbov').AsString := DadosEvento.CodSituacaoSisbov;
            Q.ExecSQL;

            // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            Result := GravarLogOperacao('tab_evento', DadosEvento.CodRegistroLog, 3, Metodo);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;
          end;

          // Confirma transação
          Commit;

          // Atualiza coleção de mensagens
    //      Mensagens.Clear;

          if NumNivelChamada = 1 then begin
            if (QtdAnimalIncompativel > 0) or (QtdRelacionadoIncompativel > 0) then begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1121, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados), IntToStr(QtdAnimalIncompativel)]);
              end else begin
                Mensagens.Adicionar(871, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdAnimalIncompativel)]);
              end;
              Result := -1;
            end else begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1120, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados)]);
              end else begin
                Mensagens.Adicionar(870, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                 IntToStr(QtdProcessados)]);
              end;
              Result := 0;
            end;
          end;
        except
          on E: Exception do begin
            Rollback;
            Mensagens.Adicionar(872, Self.ClassName, NomeMetodo, [E.Message]);
            Result := -872;
            Exit;
          end;
        end;
      finally
        QAnim.Free;
      end;
    finally
      Q.Free;
    end;
  finally
    Dec(NumNivelChamada);
    if fPossuiSemelhantes > 0 then
      Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Foram encontrados alguns Códigos Semelhantes. Para que estes sejam processados, retorne a tela principal do Evento e clique sobre a opção "Visualizar os Códigos Semelhantes encontrados".']);
    sCod := '';
    if Trim(CodAnimaisManejo) <> '' then
      for i := Low(Codigos) to High(Codigos) do
        if Codigos[i] <>  '' then
        begin
          if sCod <> '' then
            sCod := sCod + ', ';
          sCod := sCod + Codigos[i];
        end;
    if sCod <> '' then
      Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Os seguintes Códigos não foram encontrados: ' + sCod + '.']);
  end;
end;

function TIntAnimais.AplicarEventoAnimaisPesquisados(
  CodEvento: Integer; IndLimparMensagens: String): Integer;
const
  NomeMetodo : String = 'AplicarEventoAnimaisPesquisados';
  Metodo : Integer = 306;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(906, Self.ClassName, NomeMetodo, []);
    Result := -906;
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(906, Self.ClassName, NomeMetodo, []);
    Result := -906;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('if object_id(''tempdb..#tmp_animais_evento'') is null ' +
                '  create table #tmp_animais_evento ' +
                '              (cod_animal integer not null )');
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('truncate table #tmp_animais_evento');
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into #tmp_animais_evento ' +
                '       (cod_animal)' +
                'values ' +
                '       (:cod_animal)');
      {$ENDIF}


      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := AplicarEventoInt('#PESQUISADOS', -1, '', -1, -1, CodEvento, IndLimparMensagens);

      if Result = 0 then ZerarValoresUltimaPesquisa;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('drop table #tmp_animais_evento');
      {$ENDIF}
      Q.ExecSQL;

    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(903, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -903;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarMensagensAplicacaoEvento(CodEvento: Integer;
  IndOperacaoRemocao: String): Integer;
const
  NomeMetodo : String = 'PesquisarMensagensAplicacaoEvento';
  Metodo : Integer = 303;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  ZerarValoresUltimaPesquisa;

  Query.Close;
  Query.SQL.Clear;
  {$IFDEF MSSQL}
  Query.SQL.Add('select teae.cod_pessoa_produtor as CodPessoaProdutor, ' +
                '       teae.cod_evento as CodEvento, ' +
                '       teae.cod_animal as CodAnimal, ' +
                '       teae.ind_operacao_remocao as IndOperacaoRemocao, ' +
                '       teae.cod_tipo_mensagem as CodTipoMensagem, ' +
                '       teae.dta_aplicacao_evento as DtaAplicacaoEvento, ' +
                '       teae.txt_mensagem as TxtMensagem, ' +
                '       teae.des_apelido as DesApelido, ' +
                '       teae.cod_fazenda_manejo as CodFazendaManejo, ' +
                '       tf.sgl_fazenda as SglFazendaManejo, ' +
                '       teae.cod_animal_manejo as CodAnimalManejo, ' +
                '       teae.cod_animal_certificadora as CodAnimalCertificadora, ' +
                '       teae.cod_situacao_sisbov as CodSituacaoSisbov, ' +
                '       tss.des_situacao_sisbov as DesSituacaoSisbov, ' +
                '       teae.cod_pais_sisbov as CodPaisSisbov, ' +
                '       teae.cod_estado_sisbov as CodEstadoSisbov, ' +
                '       teae.cod_micro_regiao_sisbov as CodMicroRegiaoSisbov, ' +
                '       teae.cod_animal_sisbov as CodAnimalSisbov, ' +
                '       teae.num_dv_sisbov as NumDVSisbov, ' +
                '       teae.cod_raca as CodRaca, ' +
                '       tr.sgl_raca as SglRaca, ' +
                '       teae.ind_sexo as IndSexo, ' +
                '       teae.cod_tipo_origem as CodTipoOrigem, ' +
                '       tto.sgl_tipo_origem as SglTipoOrigem, ' +
                '       teae.cod_categoria_animal as CodCategoriaAnimal, ' +
                '       tca.sgl_categoria_animal as SglCategoriaAnimal, ' +
                '       teae.cod_local_corrente as CodLocalCorrente, ' +
                '       tl.sgl_local as SglLocalCorrente, ' +
                '       teae.cod_lote_corrente as CodLoteCorrente, ' +
                '       tlt.sgl_lote as SglLoteCorrente, ' +
                '       teae.cod_tipo_lugar as CodTipoLugar, ' +
                '       ttl.sgl_tipo_lugar as SglTipoLugar, ' +
                '       teae.qtd_peso_animal as QtdPesoAnimal, ' +
                '       teae.ind_vaca_prenha as IndVacaPrenha, ' +
                '       teae.ind_touro_apto as IndTouroApto, ' +
                '       dbo.fnt_idade_animal(teae.cod_animal, teae.cod_pessoa_produtor, getdate()) as IdadeAnimal ' +
                '  from tab_erro_aplicacao_evento teae, ' +
                '       tab_fazenda tf, ' +
                '       tab_situacao_sisbov tss, ' +
                '       tab_raca tr, ' +
                '       tab_tipo_origem tto, ' +
                '       tab_categoria_animal tca, ' +
                '       tab_local tl, ' +
                '       tab_lote tlt, ' +
                '       tab_tipo_lugar ttl ' +
                ' where tf.cod_pessoa_produtor =* teae.cod_pessoa_produtor ' +
                '   and tf.cod_fazenda =* teae.cod_fazenda_manejo ' +
                '   and tss.cod_situacao_sisbov =* teae.cod_situacao_sisbov ' +
                '   and tr.cod_raca =* teae.cod_raca ' +
                '   and tto.cod_tipo_origem =* teae.cod_tipo_origem ' +
                '   and tca.cod_categoria_animal =* teae.cod_categoria_animal ' +
                '   and tl.cod_pessoa_produtor =* teae.cod_pessoa_produtor ' +
                '   and tl.cod_local =* teae.cod_local_corrente ' +
                '   and tlt.cod_pessoa_produtor =* teae.cod_pessoa_produtor ' +
                '   and tlt.cod_lote =* teae.cod_lote_corrente ' +
                '   and ttl.cod_tipo_lugar =* teae.cod_tipo_lugar ' +
                '   and teae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and teae.cod_evento = :cod_evento ');
  if IndOperacaoRemocao = 'S' then begin
    Query.SQL.Add('   and teae.ind_operacao_remocao = ''S'' ');
  end else begin
    if IndOperacaoRemocao = 'N' then begin
      Query.SQL.Add('   and teae.ind_operacao_remocao = ''N'' ');
    end;
  end;
  Query.SQL.Add(' order by tf.sgl_fazenda, teae.cod_animal_manejo ');
  {$ENDIF}

  Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
  Query.ParamByName('cod_evento').AsInteger := CodEvento;

  try
    Query.Open;
    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(899, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -899;
      Exit;
    end;
  end;
end;

function TIntAnimais.PesquisarMensagensOperacaoCadastro(CodOperacao: Integer): Integer;
const
  NomeMetodo : String = 'PesquisarMensagensOperacaoCadastro';
  Metodo : Integer = 323;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  ZerarValoresUltimaPesquisa;

  Query.Close;
  Query.SQL.Clear;
  {$IFDEF MSSQL}
  Query.SQL.Add('select teoa.cod_pessoa_produtor as CodPessoaProdutor, ' +
                '       teoa.cod_animal as CodAnimal, ' +
                '       teoa.dta_operacao as DtaOperacao, ' +
                '       teoa.cod_operacao_cadastro as CodOperacaoCadastro, ' +
                '       toc.des_operacao_cadastro as DesOperacaoCadastro, ' +
                '       teoa.cod_tipo_mensagem as CodTipoMensagem, ' +
                '       teoa.txt_mensagem as TxtMensagem, ' +
                '       teoa.des_apelido as DesApelido, ' +
                '       teoa.cod_fazenda_manejo as CodFazendaManejo, ' +
                '       tf.sgl_fazenda as SglFazendaManejo, ' +
                '       teoa.cod_animal_manejo as CodAnimalManejo, ' +
                '       teoa.cod_animal_certificadora as CodAnimalCertificadora, ' +
                '       teoa.cod_situacao_sisbov as CodSituacaoSisbov, ' +
                '       tss.des_situacao_sisbov as DesSituacaoSisbov, ' +
                '       teoa.cod_pais_sisbov as CodPaisSisbov, ' +
                '       teoa.cod_estado_sisbov as CodEstadoSisbov, ' +
                '       teoa.cod_micro_regiao_sisbov as CodMicroRegiaoSisbov, ' +
                '       teoa.cod_animal_sisbov as CodAnimalSisbov, ' +
                '       teoa.num_dv_sisbov as NumDVSisbov, ' +
                '       teoa.cod_raca as CodRaca, ' +
                '       tr.sgl_raca as SglRaca, ' +
                '       teoa.ind_sexo as IndSexo, ' +
                '       teoa.cod_tipo_origem as CodTipoOrigem, ' +
                '       tto.sgl_tipo_origem as SglTipoOrigem, ' +
                '       teoa.cod_categoria_animal as CodCategoriaAnimal, ' +
                '       tca.sgl_categoria_animal as SglCategoriaAnimal, ' +
                '       teoa.cod_local_corrente as CodLocalCorrente, ' +
                '       tl.sgl_local as SglLocalCorrente, ' +
                '       teoa.cod_lote_corrente as CodLoteCorrente, ' +
                '       tlt.sgl_lote as SglLoteCorrente, ' +
                '       teoa.cod_tipo_lugar as CodTipoLugar, ' +
                '       ttl.sgl_tipo_lugar as SglTipoLugar, ' +
                '       dbo.fnt_idade_animal(teoa.cod_animal, teoa.cod_pessoa_produtor, getdate()) as IdadeAnimal ' +
                '  from tab_erro_operacao_animal teoa, ' +
                '       tab_operacao_cadastro toc, ' +
                '       tab_fazenda tf, ' +
                '       tab_situacao_sisbov tss, ' +
                '       tab_raca tr, ' +
                '       tab_tipo_origem tto, ' +
                '       tab_categoria_animal tca, ' +
                '       tab_local tl, ' +
                '       tab_lote tlt, ' +
                '       tab_tipo_lugar ttl ' +
                ' where tf.cod_pessoa_produtor =* teoa.cod_pessoa_produtor ' +
                '   and tf.cod_fazenda =* teoa.cod_fazenda_manejo ' +
                '   and toc.cod_operacao_cadastro = teoa.cod_operacao_cadastro ' +
                '   and tss.cod_situacao_sisbov = teoa.cod_situacao_sisbov ' +
                '   and tr.cod_raca = teoa.cod_raca ' +
                '   and tto.cod_tipo_origem = teoa.cod_tipo_origem ' +
                '   and tca.cod_categoria_animal =* teoa.cod_categoria_animal ' +
                '   and tl.cod_pessoa_produtor =* teoa.cod_pessoa_produtor ' +
                '   and tl.cod_local =* teoa.cod_local_corrente ' +
                '   and tlt.cod_pessoa_produtor =* teoa.cod_pessoa_produtor ' +
                '   and tlt.cod_lote =* teoa.cod_lote_corrente ' +
                '   and ttl.cod_tipo_lugar =* teoa.cod_tipo_lugar ' +
                '   and teoa.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and teoa.cod_operacao_cadastro = :cod_operacao_cadastro ' +
                ' order by tf.sgl_fazenda, teoa.cod_animal_manejo ');
  {$ENDIF}

  Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
  Query.ParamByName('cod_operacao_cadastro').AsInteger := CodOperacao;

  try
    Query.Open;
    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(1010, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1010;
      Exit;
    end;
  end;
end;

function TIntAnimais.RemoverEvento(CodAnimais: String; CodFazenda: Integer;
  CodAnimaisManejo: String; CodLote, CodLocal,
  CodEvento: Integer; IndLimparMensagens: String): Integer;
const
  Metodo : Integer = 302;
  NomeMetodo : String = 'RemoverEvento';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Variaveis para totalização
  QtdProcessados := 0;
  QtdRelacionados := 0;
  QtdAnimalIncompativel := 0;
  QtdRelacionadoIncompativel := 0;
  NumNivelChamada := 0;

  // Limpa variável que armazena animais processados
  FIntAnimaisProcessados := '|';

  // Chama função interna para remoção de eventos
  Result := RemoverEventoInt(CodAnimais, CodFazenda, CodAnimaisManejo, CodLote, CodLocal,
    CodEvento, IndLimparMensagens);

  if Result = 0 then ZerarValoresUltimaPesquisa;

end;

function TIntAnimais.RemoverEventoInt(CodAnimais: String; CodFazenda: Integer;
  CodAnimaisManejo: String; CodLote, CodLocal,
  CodEvento: Integer; IndLimparMensagens: String): Integer;
const
  Metodo : Integer = 302;
  NomeMetodo : String = 'RemoverEventoInt';
var
  Q, QAnim : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DadosEvento : TDadosEvento;
  QtdProcessadosInt: Integer;
  IndEventoExcluido,
  IndPodeRemover: Boolean;
  i: Integer;
begin
  Result := -1;

  Inc(NumNivelChamada);

  try
    if not Inicializado then begin
      RaiseNaoInicializado(NomeMetodo);
      Exit;
    end;

    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Result := -307;
      Exit;
    end;

    Result := VerificaEvento(CodEvento, True, 'Evento a Remover', DadosEvento);
    if Result < 0 then begin
      Exit;
    end;

    QtdProcessadosInt := 0;

    Q := THerdomQuery.Create(Conexao, nil);
    try
      QAnim := THerdomQuery.Create(Conexao, nil);
      try
        // Seleciona os animais candidatos à operação
        Result := SelecionaAnimaisEvento(DadosEvento, CodAnimais, CodFazenda, CodAnimaisManejo, CodLote, CodLocal, CodEvento, True, QAnim);
        if Result < 0 then begin
          Exit;
        end;

        try
          if not DadosEvento.EventoAssociado then
          begin
            Q.SQL.Clear;
            Q.SQL.Add('select tte.ind_restrito_sistema from tab_evento te, tab_tipo_evento tte');
            Q.SQL.Add(' where te.cod_evento = :cod_evento');
            Q.SQL.Add('   and te.cod_pessoa_produtor = :cod_pessoa_produtor');
            Q.SQL.Add('   and te.cod_tipo_evento = tte.cod_tipo_evento');
            Q.SQL.Add('   and tte.dta_fim_validade is null');
            Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.Open;

            if (UpperCase(Q.FieldByName('ind_restrito_sistema').AsString) = 'S') then
            begin
              Mensagens.Adicionar(2112, Self.ClassName, NomeMetodo, [IntToStr(DadosEvento.CodEvento)]);
              Result := -2112;
              Exit;
            end;
          end;

          if DadosEvento.DtaEfetivacaoCadastro > 0 then
          begin
            Mensagens.Adicionar(861, Self.ClassName, NomeMetodo, []);
            Result := -861;
            Exit;
          end;

          // Abre Transação
          BeginTran;

          // Limpa tab_erro_aplicacao_evento
          Q.SQL.Clear;
          {$IFDEF MSSQL}
          Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                    ' where dta_aplicacao_evento < dateadd(day, :qtd_dias, getdate())');
          {$ENDIF}
          Q.ParamByName('qtd_dias').AsInteger := StrToInt(ValorParametro(11)) * -1;
          Q.ExecSQL;

          if UpperCase(IndLimparMensagens) = 'S' then
          begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ' +
                      '   and ind_operacao_remocao = ''S''');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ExecSQL;
          end;

          Commit;

          MontaQueryDeleteAnimalEvento;

          BeginTran;

          // Processa os animais
          while not QAnim.Eof do
          begin
            // Obtem dados do animal atual
            ObtemAnimalSelecionadoEvento(DadosAnimal, QAnim);

            if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and
               (Conexao.CodPapelUsuario = 3) and
               (DadosAnimal.CodPessoaTecnico <> 0) then
            begin
              Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
              Result := -1698;
              QAnim.Next;
              Continue;
            end;

            // Verifica se animal já foi processado
            if Pos('|' + IntToStr(DadosAnimal.CodAnimal) + '|', FIntAnimaisProcessados) > 0 then
            begin
              QAnim.Next;
              Continue;
            end;

            // Atualiza animais processados
            FIntAnimaisProcessados := FIntAnimaisProcessados + IntToStr(DadosAnimal.CodAnimal) + '|';

            // Verifica se animal já não sofreu algum evento controlado por data mais recente
            Result := ConsisteEventoDtaControlada(DadosAnimal,DadosEvento, 'E');
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
            if Result = 100 then
            begin
              inc(QtdAnimalIncompativel);
              QAnim.Next;
              Mensagens.Adicionar('Não é possível excluir o evento %s, código %s, do animal %s, pois existem eventos aplicados que são mais recentes ao evento em questão.',
                                  1, Self.ClassName, NomeMetodo, [DadosEvento.DesTipoEvento, IntToStr(DadosEvento.CodEvento), (DadosAnimal.SglFazendaManejo + ' ' + DadosAnimal.CodAnimalManejo)]);
              Result := -100;
              Continue;
            end;

            case DadosEvento.CodTipoEvento of
              1: // Mudança de regime alimentar
              begin
                // Não há consistência na remocao
                Result := RemoverMudancaRegimeAlimentar(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
              end;

              2: // Desmame
              begin
                // Verifica se existe animal / evento associado e remove também
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado), -1, '', -1, -1, DadosEvento.CodEventoAssociado, IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then
                      begin
                        Exit;
                      end
                      else
                      begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                Result := RemoverDesmame(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              3: // Mudança de categoria
              begin
                // Não há consistência na remocao
                Result := RemoverMudancaCategoria(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              4: // Seleção para reprodução
              begin
                // Não há consistência na remocao
                Result := RemoverSelecaoReproducao(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              5: // Castração
              begin
                // Não há consistência na remocao
                Result := RemoverCastracao(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              6: // Mudança de lote
              begin
                // Não há consistência na remocao
                Result := RemoverMudancaLote(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              7: // Mudança de local
              begin
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado), -1, '', -1, -1, DadosEvento.CodEventoAssociado, IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then
                      begin
                        Exit;
                      end
                      else
                      begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                Result := RemoverMudancaLocal(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              8: // Transferência
              begin
                // Verifica se existe animal / evento associado e remove também
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado), -1, '', -1, -1, DadosEvento.CodEventoAssociado, IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then
                      begin
                        Exit;
                      end
                      else
                      begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                Result := ConsisteRemoverTransferencia(DadosAnimal, DadosEvento, IndPodeRemover);
                if (Result < 0) and (Abs(Result) <> 2258) then
                begin
                  Rollback;
                  Exit;
                end;

                if (Result < 0) then
                begin
                  for i := 0 to (Mensagens.Count - 1) do
                  begin
                    Result := InserirErroAplicacaoEvento(DadosEvento,
                                                         DadosAnimal,
                                                         Mensagens.Items[i].Texto,
                                                         IndLimparMensagens);
                    if Result < 0 then
                    begin
                      Rollback;
                      Exit;
                    end;
                  end;
                  Mensagens.Clear;
                  inc(QtdAnimalIncompativel);
                  Result := -100;
                  QAnim.Next;
                  Continue;
                end;

                Result := RemoverTransferencia(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;                
              end;

              9: // Venda para criador
              begin
                // Verifica se existe animal / evento associado e remove também
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado),
                                               -1,
                                               '',
                                               -1,
                                               -1,
                                               DadosEvento.CodEventoAssociado,
                                               IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then
                      begin
                        Exit;
                      end
                      else
                      begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                // Verifica se o evento pode ser removido do animal
                Result := ConsisteRemoverEventoAnimalInativo(DadosAnimal,
                  DadosEvento, IndPodeRemover);
                if Abs(Result) = 2018 then
                begin
                  Rollback;
                  Exit;
                end;

                // Se for permitido remove o animal, senão insere uma ocorrência
                if IndPodeRemover then
                begin
                  Result := RemoverVendaCriador(DadosAnimal, DadosEvento);
                  if (Abs(Result) = 1030) or
                     (Abs(Result) = 1902) then
                  begin
                    Rollback;
                    Exit;
                  end;
                end;

                if (Result < 0) or not IndPodeRemover then
                begin
                  for i := 0 to (Mensagens.Count - 1) do
                  begin
                    Result := InserirErroAplicacaoEvento(DadosEvento,
                                                         DadosAnimal,
                                                         Mensagens.Items[i].Texto,
                                                         IndLimparMensagens);
                    if Result < 0 then
                    begin
                      Rollback;
                      Exit;
                    end;
                  end;
                  Mensagens.Clear;                      
                  inc(QtdAnimalIncompativel);
                  Result := -100;
                  QAnim.Next;
                  Continue;
                end;
              end;

              10: // Venda para frigorífico
              begin
                // Verifica se existe animal / evento associado e remove também
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado), -1, '', -1, -1, DadosEvento.CodEventoAssociado, IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then
                      begin
                        Exit;
                      end
                      else
                      begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                // Verifica se o evento pode ser removido do animal
                Result := ConsisteRemoverEventoAnimalInativo(DadosAnimal,
                                                             DadosEvento,
                                                             IndPodeRemover);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;

                // Se for permitido remove o animal, senão insere uma ocorrência
                if IndPodeRemover then
                begin
                  Result := RemoverVendaFrigorifico(DadosAnimal, DadosEvento);
                  if Result < 0 then begin
                    Rollback;
                    Exit;
                  end;
                end
                else
                begin
                  Result := InserirErroAplicacaoEvento(DadosEvento,
                    DadosAnimal,
                    Format('Existe outro animal ativo com o mesmo código SISBOV: %s',
                      [IntToStr(DadosAnimal.CodPaisSisbov) + ' ' + IntToStr(DadosAnimal.CodEstadoSisbov) + ' ' +
                      SE(DadosAnimal.CodMicroRegiaoSisbov >= 0, PadL(IntToStr(DadosAnimal.CodMicroRegiaoSisbov), '0', 2) + ' ', '') +
                      PadL(IntToStr(DadosAnimal.CodAnimalSisbov), '0', 9)]),
                    'N');
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;

                  inc(QtdAnimalIncompativel);
                  Result := -100;
                  QAnim.Next;
                  Continue;
                end;
              end;

              11: // Desaparecimento
              begin
                // Verifica se existe animal / evento associado e remove também
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado), -1, '', -1, -1, DadosEvento.CodEventoAssociado, IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then begin
                        Exit;
                      end else begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                // Verifica se o evento pode ser removido do animal
                Result := ConsisteRemoverEventoAnimalInativo(DadosAnimal,
                  DadosEvento, IndPodeRemover);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;

                // Se for permitido remove o animal, senão insere uma ocorrência
                if IndPodeRemover then
                begin
                  Result := RemoverDesaparecimento(DadosAnimal, DadosEvento);
                  if Result < 0 then begin
                    Rollback;
                    Exit;
                  end;
                end
                else
                begin
                  Result := InserirErroAplicacaoEvento(DadosEvento,
                    DadosAnimal,
                    Format('Existe outro animal ativo com o mesmo código SISBOV: %s',
                      [IntToStr(DadosAnimal.CodPaisSisbov) + ' ' + IntToStr(DadosAnimal.CodEstadoSisbov) + ' ' +
                      SE(DadosAnimal.CodMicroRegiaoSisbov >= 0, PadL(IntToStr(DadosAnimal.CodMicroRegiaoSisbov), '0', 2) + ' ', '') +
                      PadL(IntToStr(DadosAnimal.CodAnimalSisbov), '0', 9)]),
                    'N');
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;

                  inc(QtdAnimalIncompativel);
                  Result := -100;
                  QAnim.Next;
                  Continue;
                end;
              end;

              12:
              begin  // Morte
                // Verifica se existe animal / evento associado e remove também
                if DadosEvento.CodEventoAssociado > 0 then
                begin
                  if DadosAnimal.CodAnimalAssociado > 0 then
                  begin
                    Result := RemoverEventoInt(IntToStr(DadosAnimal.CodAnimalAssociado), -1, '', -1, -1, DadosEvento.CodEventoAssociado, IndLimparMensagens);
                    if Result < 0 then
                    begin
                      if Abs(Result) <> 952 then
                      begin
                        Exit;
                      end
                      else
                      begin
                        // Exclui a última mensagem quando ela for 783
                        Mensagens.Delete(Mensagens.Count - 1);
                      end;
                    end;
                  end;
                end;

                // Verifica se o evento pode ser removido do animal
                Result := ConsisteRemoverEventoAnimalInativo(DadosAnimal,
                  DadosEvento, IndPodeRemover);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;

                // Se for permitido remove o animal, senão insere uma ocorrência
                if IndPodeRemover then
                begin
                  Result := RemoverMorte(DadosAnimal, DadosEvento);
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;
                end
                else
                begin
                  Result := InserirErroAplicacaoEvento(DadosEvento,
                    DadosAnimal,
                    Format('Existe outro animal ativo com o mesmo código SISBOV: %s',
                      [IntToStr(DadosAnimal.CodPaisSisbov) + ' ' + IntToStr(DadosAnimal.CodEstadoSisbov) + ' ' +
                      SE(DadosAnimal.CodMicroRegiaoSisbov >= 0, PadL(IntToStr(DadosAnimal.CodMicroRegiaoSisbov), '0', 2) + ' ', '') +
                      PadL(IntToStr(DadosAnimal.CodAnimalSisbov), '0', 9)]),
                    'N');
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;

                  inc(QtdAnimalIncompativel);
                  Result := -100;
                  QAnim.Next;
                  Commit;
                  Continue;
                end;
              end;

              13: // Parto
              begin

              end;

              14: // Aborto
              begin

              end;

              15: // Manejo sanitário
              begin
                // Não há consistência na remocao
                Result := RemoverSanitario(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              16: // Emissão de certificado
              begin
                // Não há consistência na remocao
                Result := RemoverEmissaoCertificado(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              17: // Desmame do bezerro
              begin
                // Não há consistência na remocao
                Result := RemoverDesmameBezerro(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              18: // Desaparecimento do bezerro
              begin
                // Não há consistência na remocao
                Result := RemoverDesaparecimentoBezerro(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              19: // Morte do bezerro
              begin
                // Não há consistência na remocao
                Result := RemoverMorteBezerro(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              20:
              begin  // Venda do bezerro
                // Não há consistência na remocao
                Result := RemoverVendaBezerro(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              21:
              begin  // Abate de animal vendido
                // Não há consistência na remocao
                Result := RemoverAbateAnimalVendido(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              23:
              begin  // Cobertura em regime de pasto
                Result := VerificaRemocaoCobertura(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;

                Result := RemoverCoberturaRegPasto(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              24: // Estação de monta
              begin
                // Não há consistência na remocao
                Result := RemoverEstacaoMonta(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
              end;

              25: //Exame Andrológico
              begin
                // Não há consistência na remocao
                Result := RemoverExameAndrologico(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
              end;

              26: //Inseminação Artificial
              begin
                Result := VerificaRemocaoCobertura(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
                Result := RemoverCoberturaInseminArtificial(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
              end;

              27: //Monta Controlada
              begin
                Result := VerificaRemocaoCobertura(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
                Result := RemoverCoberturaMontaControlada(DadosAnimal, DadosEvento);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
              end;

              28: //Diagnostico de gestacao
              begin
                // Não há consistência na remocao
                Result := RemoverDiagnosticoPrenhez(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              30: //Parto
              begin
                // Consiste a remoção do evento de parto!
                Result := ConsisteRemoverParto(DadosAnimal, DadosEvento, IndEventoExcluido);
                if Result < -1 then
                begin
                  Rollback;
                  Exit;
                end
                else
                begin
                  Commit;
//                  Exit;
                end;

                if not IndEventoExcluido then
                begin
                  Result := RemoverParto(DadosAnimal, DadosEvento);
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;
                end
                else
                begin
                  Exit;
                end;
              end;

              31: //Avaliação
              begin
                Q.SQL.Clear;
                {$IFDEF MSSQL}
                Q.SQL.Add('delete from tab_animal_evento_avaliacao ' +
                          ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                          '   and cod_evento = :cod_evento ' +
                          '   and cod_animal = :cod_animal ');
                {$ENDIF}
                Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
                Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
                Q.ExecSQL;
              end;

              33: // Descarte
              begin
                // Não há consistência na remocao
                Result := RemoverDescarte(DadosAnimal, DadosEvento);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end;

              36: // Retorno do frigorífico
              begin
                // Verifica se o evento pode ser removido do animal
                Result := ConsisteRemoverEventoAnimalInativo(DadosAnimal,
                                                             DadosEvento,
                                                             IndPodeRemover);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;

                // Se for permitido remove o animal, senão insere uma ocorrência
                if IndPodeRemover then
                begin
                  Result := RemoverRetornoFrigorifico(DadosAnimal, DadosEvento);
                  if Result < 0 then begin
                    Rollback;
                    Exit;
                  end;
                end else begin
                  Result := InserirErroAplicacaoEvento(DadosEvento,
                    DadosAnimal,
                    Format('Existe outro animal ativo com o mesmo código SISBOV: %s',
                      [IntToStr(DadosAnimal.CodPaisSisbov) + ' ' + IntToStr(DadosAnimal.CodEstadoSisbov) + ' ' +
                      SE(DadosAnimal.CodMicroRegiaoSisbov >= 0, PadL(IntToStr(DadosAnimal.CodMicroRegiaoSisbov), '0', 2) + ' ', '') +
                      PadL(IntToStr(DadosAnimal.CodAnimalSisbov), '0', 9)]),
                    'N');
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;

                  inc(QtdAnimalIncompativel);
                  Result := -100;
                  QAnim.Next;
                  Continue;
                end;
              end;
            end;

            // Se não limpou as mensagens previamente, então limpa para o animal que
            // passou pela consistência
    //        if UpperCase(IndLimparMensagens) = 'N' then begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ' +
                      '   and cod_animal = :cod_animal ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
            Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
    //        Q.ParamByName('ind_operacao_remocao').AsString := 'S';
            Q.ExecSQL;
    //      end;

            Result := RemoverAnimalEvento(DadosEvento, DadosAnimal);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;

            Inc(QtdProcessadosInt);
            Inc(QtdProcessados);
            QAnim.Next;
          end;

          Commit;

          BeginTran;
          if (QtdProcessadosInt > 0) and (DadosEvento.CodTipoEvento <> 30) then
          begin
            // Atualiza tab_evento
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('update tab_evento ' +
                      '   set qtd_animais = qtd_animais - :qtd_animais, ' +
                      '       cod_situacao_sisbov = :cod_situacao_sisbov ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('qtd_animais').AsInteger := QtdProcessadosInt;
            if (DadosEvento.QtdAnimais - QtdProcessadosInt) = 0 then
            begin
              Q.ParamByName('cod_situacao_sisbov').AsString := 'N';
            end
            else
            begin
              Q.ParamByName('cod_situacao_sisbov').AsString := DadosEvento.CodSituacaoSisbov;
            end;
            Q.ExecSQL;

            // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            Result := GravarLogOperacao('tab_evento', DadosEvento.CodRegistroLog, 4, Metodo);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end;

          // Confirma transação
          Commit;

          // Atualiza coleção de mensagens
          Mensagens.Clear;
          if NumNivelChamada = 1 then
          begin
            if QtdAnimalIncompativel > 0 then
            begin
              Mensagens.Adicionar(949, Self.ClassName, NomeMetodo, [IntToStr(CodEvento),
                                                                    DadosEvento.DesTipoEvento,
                                                                    IntToStr(QtdProcessados),
                                                                    IntToStr(QtdAnimalIncompativel)]);
              Result := 949;
            end
            else
            begin
              Mensagens.Adicionar(950, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
               IntToStr(QtdProcessados)]);
              Result := 950;
            end;
          end;
        except
          on E: Exception do
          begin
            Rollback;
            Mensagens.Adicionar(951, Self.ClassName, NomeMetodo, [E.Message]);
            Result := -951;
            Exit;
          end;
        end;
      finally
        QAnim.Free;
      end;
    finally
      Q.Free;
    end;
  finally
    Dec(NumNivelChamada);
  end;
end;

function TIntAnimais.RemoverEventoAnimaisPesquisados(
  CodEvento: Integer; IndLimparMensagens: String): Integer;
const
  NomeMetodo : String = 'RemoverEventoAnimaisPesquisados';
  Metodo : Integer = 307;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(907, Self.ClassName, NomeMetodo, []);
    Result := -907;
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(907, Self.ClassName, NomeMetodo, []);
    Result := -907;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('if object_id(''tempdb..#tmp_animais_evento'') is null ' +
                '  create table #tmp_animais_evento ' +
                '              (cod_animal integer not null )');
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('truncate table #tmp_animais_evento');
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('insert into #tmp_animais_evento ' +
                '       (cod_animal)' +
                'values ' +
                '       (:cod_animal)');
      {$ENDIF}

      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := RemoverEventoInt('#PESQUISADOS', -1, '', -1, -1, CodEvento, IndLimparMensagens);

      if Result = 0 then ZerarValoresUltimaPesquisa;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('drop table #tmp_animais_evento');
      {$ENDIF}
      Q.ExecSQL;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(903, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -903;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.VerificaCadastroParto(CodAnimal: Integer) : Integer;
const
  NomeMetodo : String = 'VerificaCadastroParto';
var
  Q : THerdomQuery;
  CodEvento, CodSituacaoCria : Integer;
  Eventos: TIntEventos;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select cod_evento from tab_animal_cria ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_animal = :cod_animal ');

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.Open;

      if Q.IsEmpty then begin
         Result := 0;
         Exit;
      end;

      CodEvento := Q.Fieldbyname('cod_evento').asinteger;
      //verifica os dados do evento
      Q.Close;
      Q.SQL.Clear;
      Q.SQL.Add('select cod_situacao_cria from tab_evento_parto ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_evento = :cod_evento ');

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;

      CodSituacaoCria := Q.Fieldbyname('cod_situacao_cria').asinteger;

      if CodSituacaoCria = 1 then begin// único --> exclui o evento
        Q.Close;
        Q.SQL.Clear;
        Q.SQL.Add('delete from tab_animal_cria ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and   cod_animal = :cod_animal ');

        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        Q.ExecSQL;

        Eventos := TIntEventos.Create;
        try
         result:= Eventos.Inicializar(Conexao,Mensagens);
         if Result < 0  then begin
           RollBack;
           Exit;
         end;
         Result:= Eventos.Excluir(CodEvento);
         if Result < 0 then begin
            Rollback;
            Exit;
         end;
        finally
         Eventos.Free;
        end;
      end else if CodSituacaoCria = 2 then begin // gemelar altera o evento
        Q.Close;
        Q.SQL.Clear;
        Q.SQL.Add('delete from tab_animal_cria ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and   cod_animal = :cod_animal ');

        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        Q.ExecSQL;

        Q.Close;
        Q.SQL.Clear;
        Q.SQL.Add('update tab_evento_parto ' +
                  ' set cod_situacao_cria = 1 '+
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and   cod_evento = :cod_evento ');

        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := CodEvento;
        Q.ExecSQL;

        Q.Close;
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
        Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').asinteger := CodEvento;
        Q.ExecSQL;
{$ENDIF}
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1014, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1014;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;


function TIntAnimais.LimparErrosOperacao(CodAnimal, CodOperacaoCadastro: Integer) : Integer;
const
  NomeMetodo : String = 'LimparErrosOperacao';
  Metodo : Integer = 326;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação
      BeginTran;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_erro_operacao_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal = :cod_animal ');
      end;
      Q.SQL.Add('   and cod_operacao_cadastro = :cod_operacao_cadastro ');
      {$ENDIF}

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodAnimal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      end;
      Q.ParamByName('cod_operacao_cadastro').AsInteger := CodOperacaoCadastro;
      Q.ExecSQL;

      // Fecha Transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1014, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1014;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.GerarRelatorio(CodFazendaManejo: Integer;
  CodManejoInicio, CodManejoFim, CodAnimalCertificadora: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer;
  CodSituacaoSisbov: String; DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
  CodFazendaNascimento: Integer; DtaCompraInicio, DtaCompraFim: TDateTime;
  CodPessoaSecundariaCriador: Integer; NomAnimal, DesApelido: String;
  CodAptidao: Integer; CodRaca, IndSexo, CodOrigem, SglFazendaPai: String;
  CodAnimalPai, DesApelidoPai, SglFazendaMae: String; CodAnimalMae,
  IndAnimalCastrado: String; CodRegimeAlimentar: Integer; CodCategoria: String;
  IndConsiderarExterno:String; CodAssociacao, CodGrauSangue: Integer;
  NumRGD: String; CodTipoLugar: Integer; CodLocal, CodLote: String;
  CodFazendaCorrente: Integer; NumImovelCorrente: String;
  CodLocalizacaoCorrente: Integer;  NumCPFCNPJCorrente,
  IndCadastroEfetivado, CodOrdenacao: String; CodEvento: Integer;
  IndEventoAplicado, IndAnimaisEvento: String; IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; IndAptoCobertura, IndAutenticacao: String;
  Tipo, QtdQuebraRelatorio: Integer; IndAnimalSemTecnico: String;
  CodPessoaTecnico: Integer): String;
const
  Metodo: Integer = 324;
  NomeMetodo: String = 'GerarRelatorio';
  CodRelatorio: Integer = 1;
var
  Rel: TRelatorioPadrao;
  Retorno,
  iAux: Integer;
  sQuebra,
  sAux: String;
  bTituloQuebra,
  bAvancou: Boolean;
  vAux: Array [1..2] of Variant;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  ZerarValoresUltimaPesquisa;

  Retorno := PesquisarRelatorio(CodFazendaManejo, CodManejoInicio, CodManejoFim,
    CodAnimalCertificadora, CodPaisSisBov, CodEstadoSisBov,
    CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim, CodSituacaoSisbov,
    DtaNascimentoInicio, DtaNascimentoFim, CodFazendaNascimento,
    DtaCompraInicio, DtaCompraFim, CodPessoaSecundariaCriador, NomAnimal,
    DesApelido, CodAptidao, CodRaca, IndSexo, CodOrigem, SglFazendaPai,
    CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae, IndAnimalCastrado,
    CodRegimeAlimentar, CodCategoria, IndConsiderarExterno, CodAssociacao,
    CodGrauSangue, NumRGD, CodTipoLugar, CodLocal, CodLote, CodFazendaCorrente,
    NumImovelCorrente, CodLocalizacaoCorrente, NumCPFCNPJCorrente,
    IndCadastroEfetivado, CodOrdenacao, CodEvento, IndEventoAplicado,
    IndAnimaisEvento, IndAgrupRaca1,CodRaca1,
    QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
    QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
    QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
    QtdCompRacialInicio4, QtdCompRacialFim4, IndAptoCobertura, IndAutenticacao,
    IndAnimalSemTecnico, CodPessoaTecnico);
  if Retorno < 0 then Exit;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(1015, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Rel.TipoDoArquvio := Tipo;
    Retorno := Rel.CarregarRelatorio(CodRelatorio);
    if Retorno < 0 then
    begin
      Exit;
    end;

    // Consiste se o número de quebras é válido
    if Rel.Campos.NumCampos < QtdQuebraRelatorio then begin
      Mensagens.Adicionar(1384, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    // Desabilita a apresentação dos campos selecionados para quebra
    Rel.Campos.IrAoPrimeiro;
    for iAux := 1 to QtdQuebraRelatorio do
    begin
      Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
      Rel.Campos.IrAoProximo;
    end;

    // Inicializa o procedimento de geração do arquivo de relatório
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then
    begin
      Exit;
    end;

    sQuebra := '';
    bTituloQuebra := False;
    while not Query.EOF do
    begin
      bAvancou := False;
      // Atualiza o campo valor do atributo Campos do relatorio
      // c/ os dados da query
      Rel.Campos.CarregarValores(Query);
      Rel.Campos.SalvarValores;

      // Realiza tratamento de quebras somente para formato PDF
      if Tipo = ctaPDF then
      begin
        if Rel.LinhasRestantes <= 2 then
        begin
          {Verifica se o próximo registro existe, para que o último registro
          do relatório possa ser exibido na próxima folha, e assim o total não
          seja mostrado sozinho nesta folha}
          Query.Next;
          bAvancou := True;
          if Query.Eof then
          begin
            Rel.NovaPagina;
          end;
        end;
        if QtdQuebraRelatorio > 0 then
        begin
          // Percorre o(s) campo(s) informado(s) para quebra
          sAux := '';
          for iAux := 1 to QtdQuebraRelatorio do
          begin
            // Concatena o valor dos campos de quebra, montando o título
            vAux[iAux] := Rel.Campos.ValorCampoIdx[iAux-1];
            sAux := SE(sAux = '', sAux, sAux + ' / ') +
              TrataQuebra(Rel.Campos.TextoTituloIdx[iAux-1]) + ': ' +
              Rel.Campos.ValorCampoIdx[iAux-1];
          end;
          if (sAux <> sQuebra) then
          begin
            {Se ocorreu mudança na quebra atual ou é a primeira ('')
             Apresenta subtotal para quebra concluída, caso não seja a primeira}
            sQuebra := sAux;
            if Rel.LinhasRestantes <= 4 then
            begin
              {Verifica se a quebra possui somente um registro e se o espaço é su-
              ficiênte para a impressão de título, registro e subtotal, caso
              contrário quebra a página antes da impressão}
              if not bAvancou then
              begin
                Query.Next;
                bAvancou := True;
              end;
              if Query.Eof then
              begin
                Rel.NovaPagina;
              end
              else
              begin
                Rel.Campos.CarregarValores(Query);
                for iAux := 1 to QtdQuebraRelatorio do
                begin
                  if (rel.LinhasRestantes <= 2)
                    or (vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1]) then
                  begin
                    Rel.NovaPagina;
                    Break;
                  end;
                end;
                // Verifica se uma nova página foi gerada, caso não salta uma linha
                if Rel.LinhasRestantes < Rel.LinhasPorPagina then
                begin
                  Rel.NovaLinha;
                end;
              end;
            end
            else if Rel.LinhasRestantes < Rel.LinhasPorPagina then
            begin
              // Salta uma linha antes da quebra, caso não seja a primeira da pág.
              Rel.NovaLinha;
            end;
            // Imprime título da quebra
            Rel.FonteNegrito;
            Rel.ImprimirTexto(0, sQuebra);
            Rel.FonteNormal;
          end
          else if bTituloQuebra then
          begin
            // Repete o título da quebra no topo da nova pág. qdo ocorrer
            // quebra de pág.
            Rel.NovaPagina;
            Rel.FonteNegrito;
            Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
            Rel.FonteNormal;
          end;
        end;

        {Verifica se o registro a ser apresentado é o último da quebra, caso
        seja faz com que ele possa ser exibido na próxima folha, e assim o
        subtotal e/ou o total não sejam mostrados sozinhos nesta folha}
        if (Rel.LinhasRestantes <= 2) and (QtdQuebraRelatorio > 0) then
        begin
          if not bAvancou then
          begin
             Query.Next;
             bAvancou := True;
          end;
          if not Query.Eof then
          begin
            {Caso uma nova pág. seja necessária, apresenta o texto da
            quebra novamente no início da nova página concatenado com o
            texto "(continuação)"}
            Rel.Campos.CarregarValores(Query);
            for iAux := 1 to QtdQuebraRelatorio do
            begin
              if vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1] then
              begin
                Rel.NovaPagina;
                Rel.FonteNegrito;
                Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
                Rel.FonteNormal;
                Break;
              end;
            end;
          end;
        end;
      end;
      Rel.Campos.RecuperarValores;
      Rel.ImprimirColunas;
      bTituloQuebra := (Rel.LinhaCorrente = Rel.LinhasPorPagina);
      if not bAvancou then
      begin
        Query.Next;
      end;
    end;

    if Rel.LinhasRestantes < 2 then begin
      Rel.NovaPagina;
    end else begin
      Rel.NovaLinha;
    end;
    Rel.ImprimirTexto(0, 'Total de Animais: '+IntToStr(Query.RecordCount));
    Retorno := Rel.FinalizarRelatorio;
    if Retorno = 0 then
    begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
  end;
{
  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Rel.TipoDoArquvio := Tipo;
    Retorno := Rel.InicializarRelatorio(CodRelatorio);
    if Retorno < 0 then Exit;
    Query.First;
    while not EOF do begin
      Rel.ImprimirColunasResultSet(Query);
      Query.Next;
    end;
    if Rel.LinhasRestantes < 2 then begin
      Rel.NovaPagina;
    end else begin
      Rel.NovaLinha;
    end;
    Rel.ImprimirTexto(0, 'Total de Animais: '+IntToStr(Query.RecordCount));
    Retorno := Rel.FinalizarRelatorio;
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
  end;
}
end;

function TIntAnimais.PesquisarEventos(CodAnimal,CodGrupoEvento : Integer): Integer;
Const
  NomeMetodo : String = 'PesquisarEventos';
  CodMetodo : Integer = 344;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;
  //-----------------------------------------
  // Verifica se usuário pode executar método
  //-----------------------------------------
  if not Conexao.PodeExecutarMetodo(CodMetodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  ZerarValoresUltimaPesquisa;

  Query.Close;
{$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select te.cod_evento as CodEvento ' +
                '     , tte.cod_tipo_evento as CodTipoEvento ' +
                '     , tte.sgl_tipo_evento as SglTipoEvento ' +
                '     , tte.Des_tipo_evento as DesTipoEvento ' +
                '     , te.dta_inicio as DtaInicio ' +
                '     , te.dta_fim as DtaFim ' +
                '     , isnull(cast(te.txt_dados as varchar(800)),'''') + isnull(cast(tae.txt_dados as varchar(800)),'''') as TxtDados ' +
                '     , te.cod_situacao_sisBov as CodSituacaoSisBov ' +
                '     , tf.cod_fazenda as CodFazenda ' +
                '     , tf.Sgl_fazenda as SglFazenda ' +
                '     , tf.Nom_fazenda as NomFazenda ' +
                '     , tte.ind_restrito_sistema as IndRestritoSistema ' +                
                '  from tab_animal as ta ' +
                '     , tab_animal_evento as tae ' +
                '     , tab_evento as te ' +
                '     , tab_tipo_evento as tte ' +
                '     , tab_fazenda as tf '+
                ' where ta.dta_fim_validade is null ' +
                '   and ta.cod_animal = :CodAnimal ' +
                '   and ta.cod_pessoa_produtor  = :CodPessoaProdutor ');
  if (Conexao.CodPapelUsuario = 3) then begin //Papel do usuário = Técnico
     Query.SQL.Add('and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                   'or  ta.cod_pessoa_tecnico is null)');
  end;
  Query.SQL.Add('   and tae.cod_pessoa_produtor = ta.cod_pessoa_produtor' +
                '   and tae.cod_animal = ta.cod_animal ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor' +
                '   and te.cod_evento = tae.cod_evento ' +
                '   and tte.cod_tipo_evento = te.cod_tipo_evento ' +
                '   and ((tte.cod_grupo_evento = :CodGrupoEvento) or (:CodGrupoEvento = -1))' +
                '   and tf.cod_fazenda =* te.cod_fazenda ' +
                '   and tf.cod_pessoa_produtor =* te.cod_pessoa_produtor ' +
                ' order by te.dta_inicio desc');
{$ENDIF}
  Query.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;
  Query.ParamByName('CodAnimal').AsInteger := CodAnimal;
  Query.ParamByName('CodGrupoEvento').AsInteger := CodGrupoEvento;
  if (Conexao.CodPapelUsuario = 3) then begin //Papel do usuário = Técnico
     Query.ParamByName('cod_pessoa_tecnico').AsInteger := Conexao.CodPessoa;
  end;

  try
    Query.Open;
    Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(1112, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1112;
      Exit;
    end;
  end;
end;

function TIntAnimais.GerarRelatorioConsolidado(SglProdutor,
                                               NomPessoaProdutor,
                                               CodSituacaoSisbov: String;
                                               DtaNascimentoInicio,
                                               DtaNascimentoFim,
                                               DtaIdentificacaoInicio,
                                               DtaIdentifcacaoFim: TDateTime;
                                               CodMicroRegiaoSisbovNascimento: Integer;
                                               NomMicroRegiaoNascimento: String;
                                               CodEstadoNascimento: Integer;
                                               NumImovelNascimento: String;
                                               CodLocalizacaoNascimento,
                                               CodMicroRegiaoSisbovIdentificacao: Integer;
                                               NomMicroRegiaoIdentificacao: String;
                                               CodEstadoIdentificacao: Integer;
                                               NumImovelIdentificacao: String;
                                               CodLocalizacaoIdentificacao: Integer;
                                               DtaCompraInicio,
                                               DtaCompraFim: TDateTime;
                                               CodRaca,
                                               IndSexo,
                                               CodOrigem,
                                               IndAnimalCastrado: String;
                                               CodRegimeAlimentar: Integer;
                                               CodCategoria: String;
                                               CodAssociacaoRaca,
                                               CodGrauSangue,
                                               CodTipoLugar: Integer;
                                               NumImovelCorrente: String;
                                               CodLocalizacaoCorrente: Integer;
                                               NumCNPJCPFCorrente,
                                               NomPaisOrigem: String;
                                               IndAgrupRaca1: String;
                                               CodRaca1: Integer;
                                               QtdCompRacialInicio1,
                                               QtdCompRacialFim1: Double;
                                               IndAgrupRaca2: String;
                                               CodRaca2: Integer;
                                               QtdCompRacialInicio2,
                                               QtdCompRacialFim2: Double;
                                               IndAgrupRaca3: String;
                                               CodRaca3: Integer;
                                               QtdCompRacialInicio3,
                                               QtdCompRacialFim3: Double;
                                               IndAgrupRaca4: String;
                                               CodRaca4: Integer;
                                               QtdCompRacialInicio4,
                                               QtdCompRacialFim4: Double;
                                               IndAptoCobertura: String;
                                               DtaInicioCertificado,
                                               DtaFimCertificado,
                                               DtaInicioCadastramento,
                                               DtaFimCadastramento: TDateTime;
                                               Tipo,
                                               QtdQuebraRelatorio: Integer;
                                               NumCNPJCPFTecnico,
                                               IndAnimalSemTecnico: String;
                                               IndAnimalCompradoComEvento: String;
                                               CodTarefa: Integer;
                                               DtaInicioCadastramentoHerdom,
                                               DtaFimCadastramentoHerdom: TDateTime): String;
const
  Metodo: Integer = 342;
  NomeMetodo: String = 'GerarRelatorioConsolidado';
  CodRelatorio: Integer = 3;
  CodTipoTarefa: Integer = 5;
var
  Query: THerdomQuery;
  Rel: TRelatorioPadrao;
  Retorno, iAux, iSubTotal, iTotal, iQtdAnimais, iRecordCount: Integer;
  vAux: Array [1..2] of Variant;
  sAux, sQuebra, sTxtDados: String;
  bAux, bTituloQuebra, bAvancou: Boolean;
begin
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Query := THerdomQuery.Create(Conexao, nil);
  try
    {Realiza pesquisa de animais de acordo com os critérios informados}
    Retorno := PesquisarRelatorioConsolidado(Query,
                                             SglProdutor,
                                             NomPessoaProdutor,
                                             CodSituacaoSisbov,
                                             DtaNascimentoInicio,
                                             DtaNascimentoFim,
                                             DtaIdentificacaoInicio,
                                             DtaIdentifcacaoFim,
                                             CodMicroRegiaoSisbovNascimento,
                                             NomMicroRegiaoNascimento,
                                             CodEstadoNascimento,
                                             NumImovelNascimento,
                                             CodLocalizacaoNascimento,
                                             CodMicroRegiaoSisbovIdentificacao,
                                             NomMicroRegiaoIdentificacao,
                                             CodEstadoIdentificacao,
                                             NumImovelIdentificacao,
                                             CodLocalizacaoIdentificacao,
                                             DtaCompraInicio,
                                             DtaCompraFim,
                                             CodRaca,
                                             IndSexo,
                                             CodOrigem,
                                             IndAnimalCastrado,
                                             CodRegimeAlimentar,
                                             CodCategoria,
                                             CodAssociacaoRaca,
                                             CodGrauSangue,
                                             CodTipoLugar,
                                             NumImovelCorrente,
                                             CodLocalizacaoCorrente,
                                             NumCNPJCPFCorrente,
                                             NomPaisOrigem,
                                             IndAgrupRaca1,
                                             CodRaca1,
                                             QtdCompRacialInicio1,
                                             QtdCompRacialFim1,
                                             IndAgrupRaca2,
                                             CodRaca2,
                                             QtdCompRacialInicio2,
                                             QtdCompRacialFim2,
                                             IndAgrupRaca3,
                                             CodRaca3,
                                             QtdCompRacialInicio3,
                                             QtdCompRacialFim3,
                                             IndAgrupRaca4,
                                             CodRaca4,
                                             QtdCompRacialInicio4,
                                             QtdCompRacialFim4,
                                             IndAptoCobertura,
                                             DtaInicioCertificado,
                                             DtaFimCertificado,
                                             DtaInicioCadastramento,
                                             DtaFimCadastramento,
                                             NumCNPJCPFTecnico,
                                             IndAnimalSemTecnico,
                                             IndAnimalCompradoComEvento,                                             
                                             CodTarefa,
                                             DtaInicioCadastramentoHerdom,
                                             DtaFimCadastramentoHerdom);
    if Retorno < 0 then begin
      if Retorno = idExceedsTheConfiguredThreshold then begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio,
                                                              SglProdutor,
                                                              NomPessoaProdutor,
                                                              CodSituacaoSisbov,
                                                              DtaNascimentoInicio,
                                                              DtaNascimentoFim,
                                                              DtaIdentificacaoInicio,
                                                              DtaIdentifcacaoFim,
                                                              CodMicroRegiaoSisbovNascimento,
                                                              NomMicroRegiaoNascimento,
                                                              CodEstadoNascimento,
                                                              NumImovelNascimento,
                                                              CodLocalizacaoNascimento,
                                                              CodMicroRegiaoSisbovIdentificacao,
                                                              NomMicroRegiaoIdentificacao,
                                                              CodEstadoIdentificacao,
                                                              NumImovelIdentificacao,
                                                              CodLocalizacaoIdentificacao,
                                                              DtaCompraInicio,
                                                              DtaCompraFim,
                                                              CodRaca,
                                                              IndSexo,
                                                              CodOrigem,
                                                              IndAnimalCastrado,
                                                              CodRegimeAlimentar,
                                                              CodCategoria,
                                                              CodAssociacaoRaca,
                                                              CodGrauSangue,
                                                              CodTipoLugar,
                                                              NumImovelCorrente,
                                                              CodLocalizacaoCorrente,
                                                              NumCNPJCPFCorrente,
                                                              NomPaisOrigem,
                                                              IndAgrupRaca1,
                                                              CodRaca1,
                                                              QtdCompRacialInicio1,
                                                              QtdCompRacialFim1,
                                                              IndAgrupRaca2,
                                                              CodRaca2,
                                                              QtdCompRacialInicio2,
                                                              QtdCompRacialFim2,
                                                              IndAgrupRaca3,
                                                              CodRaca3,
                                                              QtdCompRacialInicio3,
                                                              QtdCompRacialFim3,
                                                              IndAgrupRaca4,
                                                              CodRaca4,
                                                              QtdCompRacialInicio4,
                                                              QtdCompRacialFim4,
                                                              IndAptoCobertura,
                                                              DtaInicioCertificado,
                                                              DtaFimCertificado,
                                                              DtaInicioCadastramento,
                                                              DtaFimCadastramento,
                                                              Tipo,
                                                              QtdQuebraRelatorio,
                                                              NumCNPJCPFTecnico,
                                                              IndAnimalSemTecnico,
                                                              IndAnimalCompradoComEvento,
                                                              DtaInicioCadastramentoHerdom,
                                                              DtaFimCadastramentoHerdom]);
        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio,
                                                              SglProdutor,
                                                              NomPessoaProdutor,
                                                              CodSituacaoSisbov,
                                                              DtaNascimentoInicio,
                                                              DtaNascimentoFim,
                                                              DtaIdentificacaoInicio,
                                                              DtaIdentifcacaoFim,
                                                              CodMicroRegiaoSisbovNascimento,
                                                              NomMicroRegiaoNascimento,
                                                              CodEstadoNascimento,
                                                              NumImovelNascimento,
                                                              CodLocalizacaoNascimento,
                                                              CodMicroRegiaoSisbovIdentificacao,
                                                              NomMicroRegiaoIdentificacao,
                                                              CodEstadoIdentificacao,
                                                              NumImovelIdentificacao,
                                                              CodLocalizacaoIdentificacao,
                                                              DtaCompraInicio,
                                                              DtaCompraFim,
                                                              CodRaca,
                                                              IndSexo,
                                                              CodOrigem,
                                                              IndAnimalCastrado,
                                                              CodRegimeAlimentar,
                                                              CodCategoria,
                                                              CodAssociacaoRaca,
                                                              CodGrauSangue,
                                                              CodTipoLugar,
                                                              NumImovelCorrente,
                                                              CodLocalizacaoCorrente,
                                                              NumCNPJCPFCorrente,
                                                              NomPaisOrigem,
                                                              IndAgrupRaca1,
                                                              CodRaca1,
                                                              QtdCompRacialInicio1,
                                                              QtdCompRacialFim1,
                                                              IndAgrupRaca2,
                                                              CodRaca2,
                                                              QtdCompRacialInicio2,
                                                              QtdCompRacialFim2,
                                                              IndAgrupRaca3,
                                                              CodRaca3,
                                                              QtdCompRacialInicio3,
                                                              QtdCompRacialFim3,
                                                              IndAgrupRaca4,
                                                              CodRaca4,
                                                              QtdCompRacialInicio4,
                                                              QtdCompRacialFim4,
                                                              IndAptoCobertura,
                                                              DtaInicioCertificado,
                                                              DtaFimCertificado,
                                                              DtaInicioCadastramento,
                                                              DtaFimCadastramento,
                                                              Tipo,
                                                              QtdQuebraRelatorio,
                                                              NumCNPJCPFTecnico,
                                                              IndAnimalSemTecnico,
                                                              IndAnimalCompradoComEvento,
                                                              DtaInicioCadastramentoHerdom,
                                                              DtaFimCadastramentoHerdom],
                                                              DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Query.IsEmpty then begin
      Mensagens.Adicionar(1103, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      Rel.TipoDoArquvio := Tipo;

      {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
      if CodTarefa > 0 then begin
        Rel.CodTarefa := CodTarefa;
      end;

      {Define o relatório em questão e carrega os seus dados específicos}
      Retorno := Rel.CarregarRelatorio(CodRelatorio);
      if Retorno < 0 then Exit;

      {Caso a previsão para emissão de certificados tenha sido solicitada, monta
      a área de dados do relatório cotendo o periodo informado pelo usuário}
      if (DtaInicioCertificado > 0) and (DtaFimCertificado > 0) then begin
        sTxtDados := 'Previsão para emissão de certificados: '+
          FormatDateTime('dd/mm/yyyy', DtaInicioCertificado)+' à '+
          FormatDateTime('dd/mm/yyyy', DtaFimCertificado)+'.';

        {Atribui texto de dados no cabeçalho do relatório}
        Rel.TxtDados := sTxtDados;
      end;

      {Consiste se o número de quebras é válido}
      if Rel.Campos.NumCampos < QtdQuebraRelatorio then begin
        Mensagens.Adicionar(1384, Self.ClassName, NomeMetodo, []);
        Exit;
      end;

      {Desabilita a apresentação dos campos selecionados para quebra}
      Rel.Campos.IrAoPrimeiro;
      for iAux := 1 to QtdQuebraRelatorio do begin
        Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
        Rel.Campos.IrAoProximo;
      end;

      {Inicializa o procedimento de geração do arquivo de relatório}
      Retorno := Rel.InicializarRelatorio;
      if Retorno < 0 then Exit;

      {Inicializa totalizadores (subtotal e total)}
      iSubTotal := 0;
      iTotal := 0;

      sQuebra := '';
      iRecordCount := 0;
      bTituloQuebra := False;
      while not Query.EOF do begin
        bAvancou := False;
        {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
        iQtdAnimais := Query.FieldByName('QtdAnimais').AsInteger;
        Rel.Campos.CarregarValores(Query);
        Rel.Campos.SalvarValores;
        {Realiza tratamento de quebras somente para formato PDF}
        if Tipo = ctaPDF then begin
          if Rel.LinhasRestantes <= 2 then begin
            {Verifica se o próximo registro existe, para que o último registro
            do relatório possa ser exibido na próxima folha, e assim o total não
            seja mostrado sozinho nesta folha}
            Query.Next;
            bAvancou := True;
            if Query.Eof then begin
              Rel.NovaPagina;
            end;
          end;
          if QtdQuebraRelatorio > 0 then begin
            {Percorre o(s) campo(s) informado(s) para quebra}
            sAux := '';
            for iAux := 1 to QtdQuebraRelatorio do begin
              {Concatena o valor dos campos de quebra, montando o título}
              vAux[iAux] := Rel.Campos.ValorCampoIdx[iAux-1];
              sAux := SE(sAux = '', sAux, sAux + ' / ') +
                TrataQuebra(Rel.Campos.TextoTituloIdx[iAux-1]) + ': ' +
                Rel.Campos.ValorCampoIdx[iAux-1];
            end;
            if (sAux <> sQuebra) then begin
              {Se ocorreu mudança na quebra atual ou é a primeira ('')}
              {Apresenta subtotal para quebra concluída, caso não seja a primeira}
              if sQuebra <> '' then begin
                {Confirma se o subtotal deve ser apresentado}
                if Rel.Campos.NumCampos > (QtdQuebraRelatorio+1) then begin
                  Rel.NovaLinha;
                  Rel.Campos.LimparValores;
                  Rel.Campos.ValorCampo['QtdAnimais'] := iSubTotal;
                  Rel.ImprimirTextoTotalizador('Sub-total');
                end;
                {Zera acumulador da quebra}
                iSubTotal := 0;
              end;
              sQuebra := sAux;
              if Rel.LinhasRestantes <= 4 then begin
                {Verifica se a quebra possui somente um registro e se o espaço é su-
                ficiênte para a impressão de título, registro e subtotal, caso
                contrário quebra a página antes da impressão}
                if not bAvancou then begin
                  Query.Next;
                  bAvancou := True;
                end;
                if Query.Eof then begin
                  Rel.NovaPagina;
                end else begin
                  Rel.Campos.CarregarValores(Query);
                  for iAux := 1 to QtdQuebraRelatorio do begin
                    if (rel.LinhasRestantes <= 2) or (vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1]) then begin
                      Rel.NovaPagina;
                      Break;
                    end;
                  end;
                  {Verifica se uma nova página foi gerada, caso não salta uma linha}
                  if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
                    Rel.NovaLinha;
                  end;
                end;
              end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
                {Salta uma linha antes da quebra, caso não seja a primeira da pág.}
                Rel.NovaLinha;
              end;
              {Imprime título da quebra}
              Rel.FonteNegrito;
              Rel.ImprimirTexto(0, sQuebra);
              Rel.FonteNormal;
            end else if bTituloQuebra then begin
              {Repete o título da quebra no topo da nova pág. qdo ocorrer quebra de pág.}
              Rel.NovaPagina;
              Rel.FonteNegrito;
              Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
              Rel.FonteNormal;
            end;
          end;
          {Verifica se o registro a ser apresentado é o último da quebra, caso
          seja faz com que ele possa ser exibido na próxima folha, e assim o
          subtotal e/ou o total não sejam mostrados sozinhos nesta folha}
          if (Rel.LinhasRestantes <= 2) and (QtdQuebraRelatorio > 0) then begin
            if not bAvancou then begin
               Query.Next;
               bAvancou := True;
             end;
            if not Query.Eof then begin
              {Caso uma nova pág. seja necessária, apresenta o texto da
              quebra novamente no início da nova página concatenado com o
              texto "(continuação)"}
              Rel.Campos.CarregarValores(Query);
              for iAux := 1 to QtdQuebraRelatorio do begin
                if vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1] then begin
                  Rel.NovaPagina;
                  Rel.FonteNegrito;
                  Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
                  Rel.FonteNormal;
                  Break;
                end;
              end;
            end;
          end;
          Inc(iSubTotal, iQtdAnimais);
          Inc(iTotal, iQtdAnimais);
        end;
        Inc(iRecordCount);
        Rel.Campos.RecuperarValores;
        Rel.ImprimirColunas;
        bTituloQuebra := (Rel.LinhaCorrente = Rel.LinhasPorPagina);
        if not bAvancou then begin
          Query.Next;
        end;
      end;
      {Realiza tratamento de quebras somente para formato PDF}
      if Tipo = ctaPDF then begin
        {Monta Linhas totalizadoras, caso necessário}
        if iRecordCount > 1 then begin
          {Confirma se o subtotal deve ser apresentado}
          if Rel.Campos.NumCampos > (QtdQuebraRelatorio+1) then begin
            Rel.NovaLinha;
            Rel.Campos.LimparValores;
            Rel.Campos.ValorCampo['QtdAnimais'] := iSubTotal;
            Rel.ImprimirTextoTotalizador('Sub-total');
          end;
          Rel.NovaLinha;
          Rel.Campos.LimparValores;
          Rel.Campos.ValorCampo['QtdAnimais'] := iTotal;
          Rel.ImprimirTextoTotalizador('Total');
        end;
      end;
      Retorno := Rel.FinalizarRelatorio;
      {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
      if Retorno = 0 then begin
        Result := Rel.NomeArquivo;
      end;
    finally
      Rel.Free;
    end;
  finally
    Query.Free;
  end;
end;

function TIntAnimais.GerarRelatorioEventos(CodAnimal,CodGrupoEvento, Tipo,QtdQuebraRelatorio: Integer): String;
const
  Metodo: Integer = 352;
  NomeMetodo: String = 'GerarRelatorioEventos';
  CodRelatorio: Integer = 5;
  sQuebraLinha : String = #13#10;
var
  Q : THerdomQuery;
  Rel: TRelatorioPadrao;
  Retorno: Integer;
  sQuebra,sAnimal: String;
  sTxtSubTitulo : String;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;
  //------------------------------------------
  // Verifica se usuário pode executar método
  //------------------------------------------
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  {Realiza pesquisa de animais de acordo com os critérios informados}
  Retorno := PesquisarEventos(CodAnimal,CodGrupoEvento);
  if Retorno < 0 then Exit;

  {Verifica se a pesquisa é válida (se existe algum registro)}
  if Query.IsEmpty then begin
    Mensagens.Adicionar(1103, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

   //SubTiulo
    Q := THerdomQuery.Create(Conexao, nil);

    try
      Q.SQL.Clear;
  {$IFDEF MSSQL}
      Q.SQL.Add(' select tpro.sgl_produtor as SglProdutor, ' +
       '    tp.nom_pessoa as NomProdutor,  ' +
       '    tp.cod_natureza_pessoa as CodNatureza,  ' +
       '    case tp.cod_natureza_pessoa  ' +
       '      when ''F'' then convert(varchar(18),  ' +
       '        substring(tp.num_cnpj_cpf, 1, 3) + ''.'' +  ' +
       '        substring(tp.num_cnpj_cpf, 4, 3) + ''.'' +  ' +
       '        substring(tp.num_cnpj_cpf, 7, 3) + ''-'' +  ' +
       '        substring(tp.num_cnpj_cpf, 10, 2))  ' +
       '      when ''J'' then convert(varchar(18),  ' +
       '        substring(tp.num_cnpj_cpf, 1, 2) + ''.'' + ' +
       '        substring(tp.num_cnpj_cpf, 3, 3) + ''.'' + ' +
       '        substring(tp.num_cnpj_cpf, 6, 3) + ''/'' + ' +
       '        substring(tp.num_cnpj_cpf, 9, 4) + ''-'' + ' +
       '        substring(tp.num_cnpj_cpf, 13, 2)) ' +
       '     end as NumCPFCNPJFormatado ' +
       'from tab_pessoa tp, ' +
       '     tab_produtor tpro, ' +
       '     tab_pessoa_papel tpp ' +
       'where tpp.cod_pessoa = tp.cod_pessoa ' +
       '  and tpro.cod_pessoa_produtor = tp.cod_pessoa ' +
       '  and tpro.dta_fim_validade is null ' +
       '  and tpp.dta_fim_validade is null' +
       '  and tp.cod_pessoa = :CodProdutorTrabalho ' +
       '  and tpro.ind_produtor_bloqueado = ''N'' ' +
       '  and tpp.cod_papel = 4 ' +
       '  and tp.dta_fim_validade is null');
   {$ENDIF}
      Q.ParamByName('CodProdutorTrabalho').asInteger := IntAnimal.CodPessoaProdutor;
      Q.open;

      if not Q.Eof then begin
        sTxtSubTitulo := 'Produtor: ' + Trim(Q.FieldByName('SglProdutor').asString)  + ' - ' + Q.FieldByName('NomProdutor').asString;
        if Q.FieldByName('CodNatureza').asString  =  'F' then
          sTxtSubTitulo := sTxtSubTitulo + ' (CPF: '
        else
          sTxtSubTitulo := sTxtSubTitulo + ' (CNPJ: ';

        sTxtSubTitulo := sTxtSubTitulo + Q.FieldByName('NumCPFCNPJFormatado').asString + ')';
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(179, Self.ClassName, NomeMetodo, [E.Message]);
        Result := '';
        Exit;
      end;
    end;

  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Rel.TipoDoArquvio := Tipo;

    {Define o relatório em questão e carrega os seus dados específicos}
    Retorno := Rel.CarregarRelatorio(CodRelatorio);
    if Retorno < 0 then Exit;

    rel.TxtSubTitulo := sTxtSubTitulo;

    //Carrega Dados do animal
    Retorno := Buscar(CodAnimal,'','','');
    if Retorno < 0 then Exit;

    //1º linha
    //1º Coluna
    sAnimal := 'Cód. manejo:    ' + PadR(FIntAnimal.CodAnimalManejo,' ', 13) + '   ';

    //2º Coluna
    if FIntAnimal.NomAnimal = '' then
      sAnimal := sAnimal + 'Cód. certif.:   ' + PadR(FIntAnimal.CodAnimalCertificadora,' ',48)
    else
      sAnimal := sAnimal + 'Nome:           ' + PadR(FIntAnimal.NomAnimal,' ',48);

    //3º Coluna
    if FIntAnimal.CodEstadoSisbov > 0 then
      sAnimal := sAnimal + 'Cód. SISBOV:    ' + StrZero(FIntAnimal.CodEstadoSisbov,2) + ' ' + StrZero(FIntAnimal.CodMicroRegiaoSisbov,2) + ' ' + StrZero(FIntAnimal.CodAnimalSisbov,9) + ' ' + IntToStr(FIntAnimal.NumDVSisbov)
    else
      sAnimal := sAnimal + 'Cód. SISBOV:    ';

    sAnimal := sAnimal + sQuebraLinha;

    //2º linha
    //1º Coluna
    if FIntAnimal.IndSexo = 'M' then
      sAnimal := sAnimal + 'Sexo/espécie:   Macho/' + PadR(FIntAnimal.DesEspecie,' ',7) + '   '
    else
      sAnimal := sAnimal + 'Sexo/espécie:   Fêmea/' + PadR(FIntAnimal.DesEspecie,' ',7) + '   ';
    //2º Coluna
    sAnimal := sAnimal + 'Raça/pelagem:   ' + PadR(FIntAnimal.DesRaca + '/' + FIntAnimal.DesPelagem,' ',45) + '   ';
    //3º Coluna
    sAnimal := sAnimal + 'Aptidão/origem: ' + PadR(FIntAnimal.DesAptidao + '/' + FIntAnimal.DesTipoOrigem,' ',27);
    sAnimal := sAnimal + sQuebraLinha;

    //3º linha
    //1º Coluna
    sAnimal := sAnimal + 'Nascimento:     ' + PadR(FormatDateTime('dd/mm/yyyy', FIntAnimal.DtaNascimento),' ',13) + '   ';
    //2º e 3º Coluna
    sAnimal := sAnimal + 'Prop. nasc.:    ' + RedimensionaString(FIntAnimal.NomPropriedadeNascimento,29);
    if FIntAnimal.NumImovelNascimento <> '' then
      sAnimal := sAnimal + PadR(' (' + FIntAnimal.NumImovelNascimento + ')',' ',27)
    else
      sAnimal := sAnimal + PadR(' ',' ',27);

    if FIntAnimal.SglEstadoNascimento <> '' then
      sAnimal := sAnimal + 'Município:      ' + RedimensionaString(FIntAnimal.NomMunicipioNascimento,20) + ' - ' + RedimensionaString(FIntAnimal.SglEstadoNascimento,2)
    else
      sAnimal := sAnimal + 'Município:      ' + RedimensionaString(FIntAnimal.NomMunicipioNascimento,20);

    sAnimal := sAnimal + sQuebraLinha;

    // 4º Linha
    //1º Coluna
    sAnimal := sAnimal + 'Identificação:  ' + PadR(FormatDateTime('dd/mm/yyyy',FIntAnimal.DtaIdentificacaoSisbov),' ',13) + '   ';
    //2º e 3º Coluna
    sAnimal := sAnimal + 'Prop. ident.:   ' + RedimensionaString(FIntAnimal.NomPropriedadeIdentificacao,29);
    if FIntAnimal.NumImovelIdentificacao <> '' then
      sAnimal := sAnimal + PadR(' (' + FIntAnimal.NumImovelIdentificacao + ')',' ',27)
    else
      sAnimal := sAnimal + PadR(' ',' ',27);

    if FIntAnimal.SglEstadoIdentificacao <> '' then
      sAnimal := sAnimal + 'Município:      ' + RedimensionaString(FIntAnimal.NomMunicipioIdentificacao,20) + ' - ' + RedimensionaString(FIntAnimal.SglEstadoIdentificacao,2)
    else
      sAnimal := sAnimal + PadR(RedimensionaString(FIntAnimal.NomMunicipioIdentificacao,20),' ',20);

    sAnimal := sAnimal + sQuebraLinha;

    rel.FormatarTxtDados := false;
    rel.PrimeiraLinhaNegritoTxtDados := true;
    rel.CodTamanhoFonteTxtDados := 2;
    rel.TxtDados := sAnimal;

    {Inicializa o procedimento de geração do arquivo de relatório}
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    sQuebra := '';
    Query.First;
    while not EOF do begin
      Rel.ImprimirColunasResultSet(Query);
      Query.Next;
    end;
    Retorno := Rel.FinalizarRelatorio;
    {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
  end;
end;

function TIntAnimais.DefinirPesoAnimal(CodEvento, CodFazendaManejo: Integer;
  CodAnimais, CodAnimaisManejo, QtdPesosAnimais,
  IndLimparMensagens: String): Integer;
const
  Metodo : Integer = 356;
  NomeMetodo : String = 'DefinirPesoAnimal';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  //Converte os códigos manejo para letra maiúscula
  if CodAnimaisManejo <> '' then
     CodAnimaisManejo := uppercase(CodAnimaisManejo);
  // Limpa variável que armazena animais processados
  FIntAnimaisProcessados := '|';

  // Limpa variáveis de controle
  QtdProcessados := 0;
  QtdRelacionados := 0;
  QtdAnimalIncompativel := 0;
  QtdRelacionadoIncompativel := 0;
  NumNivelChamada := 0;

  // Chama função interna para definição do peso dos animais
  Result := DefinirPesoAnimalInt(CodFazendaManejo, CodAnimaisManejo, CodAnimais, QtdPesosAnimais, CodEvento, IndLimparMensagens,'D');
  if Result = 0 then ZerarValoresUltimaPesquisa;
end;

function TIntAnimais.AlterarPesoAnimal(CodEvento: Integer; CodAnimais,
  QtdPesosAnimais: String): Integer;
const
  Metodo : Integer = 357;
  NomeMetodo : String = 'AlterarPesoAnimal';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Limpa variável que armazena animais processados
  FIntAnimaisProcessados := '|';

  // Limpa variáveis de controle
  QtdProcessados := 0;
  QtdRelacionados := 0;
  QtdAnimalIncompativel := 0;
  QtdRelacionadoIncompativel := 0;
  NumNivelChamada := 0;

  // Chama função interna para alteração do pesos dos animais
  Result := AlterarPesoAnimalInt(CodAnimais, QtdPesosAnimais, CodEvento);
  // Limpa variável que armazena animais processados
  if Result < 0 then exit;
  FIntAnimaisProcessados := '|';
  Result := DefinirPesoAnimalInt(-1, '', CodAnimais, QtdPesosAnimais, CodEvento, 'S','A');
  if Result = 0 then ZerarValoresUltimaPesquisa;
end;

function TIntAnimais.DefinirPesoAnimalInt(CodFazenda: Integer;
  CodAnimaisManejo, CodAnimais, QtdPesosAnimais: String; CodEvento: Integer; IndLimparMensagens, IndChamada: String): Integer;
const
  Metodo : Integer = 356;
  NomeMetodo : String = 'DefinirPesoAnimal';
var
  Q, QAnim : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DadosEvento : TDadosEvento;
  QtdProcessadosInt:  Integer;
  DadosPesoAnimais : TPesosAnimais;
  QtdAnimais, I : Integer;
  pesoanimal :real;
begin
  Result := -1;
  //eliminar duplicidades da lista de CodAnimaisManejo e QtdPesosAnimais e carregar a estrutura DadosPesoAnimal
  if CodAnimais = ''
     then QtdAnimais := PopulaPesoAnimal(CodAnimaisManejo, QtdPesosAnimais,DadosPesoAnimais)
     else QtdAnimais := PopulaPesoAnimal(CodAnimais, QtdPesosAnimais,DadosPesoAnimais);

  if QtdAnimais < 0 then begin
    Exit;
  end;

  //Trata a string multivalorada CodAnimais

  Inc(NumNivelChamada);

  try
    if not Inicializado then begin
      RaiseNaoInicializado(NomeMetodo);
      Exit;
    end;

    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Result := -307;
      Exit;
    end;

    QtdProcessadosInt := 0;

    Q := THerdomQuery.Create(Conexao, nil);
    try
      QAnim := THerdomQuery.Create(Conexao, nil);
      try
        try
          // Abre Transação
          BeginTran;

          // Limpa tab_erro_aplicacao_evento
          Q.SQL.Clear;
      {$IFDEF MSSQL}
          Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                    ' where dta_aplicacao_evento < dateadd(day, :qtd_dias, getdate())');
      {$ENDIF}
          Q.ParamByName('qtd_dias').AsInteger := StrToInt(ValorParametro(11)) * -1;
          Q.ExecSQL;

          if UpperCase(IndLimparMensagens) = 'S' then begin
            Q.SQL.Clear;
        {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ' +
                      '   and ind_operacao_remocao = ''N''');
        {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ExecSQL;
          end;

          MontaQueryInsertPesoAnimal;

          // Obtem o evento
          Result := VerificaEvento(CodEvento, True, 'Evento a aplicar', DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Não deixa aplicar outros eventos a não ser pesagem com essa rotina
          if DadosEvento.CodTipoEvento <> 22 then begin
            Mensagens.Adicionar(1146, Self.ClassName, NomeMetodo, []);
            Result := -1146;
            Rollback;
            Exit;
          end;

          // Verifica se cadastro já foi efetivado
          if DadosEvento.DtaEfetivacaoCadastro > 0 then begin
            Mensagens.Adicionar(861, Self.ClassName, NomeMetodo, []);
            Result := -861;
            Rollback;
            Exit;
          end;

          // Consiste regras da inserção (por evento)
          Result := ConsisteInsercaoEvento(DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Seleciona os animais candidatos à operação
          Result := SelecionaAnimaisEventosEsp(CodFazenda, CodAnimaisManejo, CodAnimais, CodEvento, False, QAnim);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Processa os animais
          while not QAnim.Eof do begin
            // Obtem dados do animal atual
            ObtemAnimalSelecionadoEvento(DadosAnimal, QAnim);

            // Verifica se animal já foi processado
            if Pos('|' + IntToStr(DadosAnimal.CodAnimal) + '|', FIntAnimaisProcessados) > 0 then begin
              QAnim.Next;
              Continue;
            end;

            // Atualiza animais processados
            FIntAnimaisProcessados := FIntAnimaisProcessados + IntToStr(DadosAnimal.CodAnimal) + '|';

            //busca peso do animal
            PesoAnimal := BuscaPesoAnimal(inttostr(DadosAnimal.CodAnimal),DadosAnimal.CodAnimalManejo,QtdAnimais,DadosPesoAnimais);

            if PesoAnimal > 0 then begin
                // Consiste regras da associação de pesagem (por animal)
                Result := ConsistePesagemAnimal(DadosAnimal, DadosEvento, PesoAnimal);
                if Result < 0 then begin
                   Rollback;
                   Exit;
                end;
                if Result = 100 then begin
                   if NumNivelChamada = 1 then begin
                      Inc(QtdAnimalIncompativel);
                   end else begin
                      Inc(QtdRelacionadoIncompativel);
                   end;
                   QAnim.Next;
                   Continue;
                end;
                // Se não limpou as mensagens previamente, então limpa para o animal que
                // passou pela consistência
                if UpperCase(IndLimparMensagens) = 'N' then begin
                   Q.SQL.Clear;
                   {$IFDEF MSSQL}
                   Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ' +
                        '   and cod_animal = :cod_animal ' +
                        '   and ind_operacao_remocao = :ind_operacao_remocao ');
                   {$ENDIF}
                   Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                   Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
                   Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
                   Q.ParamByName('ind_operacao_remocao').AsString := 'N';
                   Q.ExecSQL;
                end;

                // Aplica a pesagem ao animal
                Result := InserirAnimalPesagem(DadosEvento, DadosAnimal, PesoAnimal);
                if Result < 0 then begin
                   Rollback;
                   Exit;
                end;

                Inc(QtdProcessadosInt);
                if NumNivelChamada = 1 then begin
                   Inc(QtdProcessados);
                end else begin
                   Inc(QtdRelacionados);
                end;
                QAnim.Next;
             end;
          end;
          if ((NumNivelChamada = 1) and (QtdProcessados > 0)) or
             ((NumNivelChamada > 1) and (QtdRelacionados > 0)) then begin
            // Atualiza tab_evento
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('update tab_evento ' +
                      '   set qtd_animais = qtd_animais + :qtd_animais ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('qtd_animais').AsInteger := QtdProcessadosInt;
            Q.ExecSQL;

            // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            if CodAnimaisManejo <> '' then begin
               Result := GravarLogOperacao('tab_evento', DadosEvento.CodRegistroLog, 3, Metodo);
               if Result < 0 then begin
                  Rollback;
                  Exit;
               end;
            end;
          end;

          // Confirma transação
          Commit;

          // Atualiza coleção de mensagens
          // Mensagens.Clear;
          // Insere mensagem para os animais que sobraram na lista (animais não cadastrados)
          for I:=1 to QtdAnimais do
              if DadosPesoAnimais[I].IndCadastrado = '' then
              begin
                //verifica se o animal já está associado ao evento ou não está cadastrado
                if AnimalEstaCadastrado(DadosPesoAnimais[I].CodAnimalManejo,CodFazenda) = 0 then begin
                   LimpaDadosAnimal(DadosAnimal);
                   DadosAnimal.CodAnimalManejo := DadosPesoAnimais[I].CodAnimalManejo;
                   DadosAnimal.QtdPesoAnimal := DadosPesoAnimais[I].PesoAnimal;
                   Inc(QtdAnimalIncompativel);
                   Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Animal não cadastrado para o produtor nesta fazenda', 'N');
                end;
              end;
         if CodAnimaisManejo <> '' then begin
          if NumNivelChamada = 1 then begin
            if (QtdAnimalIncompativel > 0) or (QtdRelacionadoIncompativel > 0) then begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1121, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados), IntToStr(QtdAnimalIncompativel)]);
              end else begin
                Mensagens.Adicionar(871, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdAnimalIncompativel)]);
              end;
              Result := -1;
            end else begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1120, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados)]);
              end else begin
                Mensagens.Adicionar(870, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                 IntToStr(QtdProcessados)]);
              end;
              Result := 0;
            end;
          end;
         end;
         if (CodAnimaisManejo = '') and (QtdProcessados > 0) and (QtdAnimalIncompativel = 0) and (IndChamada = 'D') then begin
            Mensagens.Adicionar(870, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
            IntToStr(QtdProcessados)]);
         end;
         if (CodAnimaisManejo = '') and (QtdAnimalIncompativel > 0) and (IndChamada = 'D') then begin
            Mensagens.Adicionar(871, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
            IntToStr(QtdProcessados), IntToStr(QtdAnimalIncompativel)]);
         end;
         if (CodAnimaisManejo = '') and (QtdAnimalIncompativel > 0) and (IndChamada = 'A') then begin
            Mensagens.Adicionar(1157, Self.ClassName, NomeMetodo, [IntToStr(QtdAnimalIncompativel)]);
         end;
        except
          on E: Exception do begin
            Rollback;
            Mensagens.Adicionar(872, Self.ClassName, NomeMetodo, [E.Message]);
            Result := -872;
            Exit;
          end;
        end;
      finally
        QAnim.Free;
      end;
    finally
      Q.Free;
    end;
  finally
    Dec(NumNivelChamada);
  end;
end;

function TIntAnimais.DefinirDiagnosticoExame(CodFazenda: Integer;
  CodAnimaisManejo, CodAnimais, IndDiagnosticos: String; CodEvento: Integer; IndLimparMensagens:String; CodTipoEvento: Integer): Integer;
const
  NomeMetodo : String = 'DefinirDiagnosticoExame';
var
  Q, QAnim : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DadosEvento : TDadosEvento;
  QtdProcessadosInt:  Integer;
  DadosDiagnosticosAnimais : TReproducaoAnimais;
  QtdAnimais, QtdAlterados: Integer;
  IndDiagnostico :string;
  Metodo: Integer;
begin
  if CodTipoEvento = 28
     then Metodo := 438
     else Metodo := 439;
  Result := -1;
  //eliminar duplicidades da lista de CodAnimaisManejo e QtdPesosAnimais e carregar a estrutura DadosPesoAnimal
  if CodAnimais = ''                 
     then QtdAnimais := PopulaDiagnosticoAnimal(CodAnimaisManejo, IndDiagnosticos,DadosDiagnosticosAnimais)
     else QtdAnimais := PopulaDiagnosticoAnimal(CodAnimais, IndDiagnosticos,DadosDiagnosticosAnimais);
  if QtdAnimais < 0 then begin
    Exit;
  end;

  //Trata a string multivalorada CodAnimais

  Inc(NumNivelChamada);

  try
    if not Inicializado then begin
      RaiseNaoInicializado(NomeMetodo);
      Exit;
    end;

    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Result := -307;
      Exit;
    end;

    QtdProcessadosInt := 0;

    Q := THerdomQuery.Create(Conexao, nil);
    try
      QAnim := THerdomQuery.Create(Conexao, nil);
      try
        try
          // Abre Transação
          BeginTran;

          // Limpa tab_erro_aplicacao_evento
          Q.SQL.Clear;
      {$IFDEF MSSQL}
          Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                    ' where dta_aplicacao_evento < dateadd(day, :qtd_dias, getdate())');
      {$ENDIF}
          Q.ParamByName('qtd_dias').AsInteger := StrToInt(ValorParametro(11)) * -1;
          Q.ExecSQL;

          if UpperCase(IndLimparMensagens) = 'S' then begin
            Q.SQL.Clear;
        {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ' +
                      '   and ind_operacao_remocao = ''N''');
        {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ExecSQL;
          end;

          if CodTipoEvento = 25
             then MontaQueryInsertDiagnosticoAnimal('N')
             else MontaQueryInsertDiagnosticoAnimal('S');

          // Obtem o evento
          Result := VerificaEvento(CodEvento, True, 'Evento a aplicar', DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Não deixa aplicar outros eventos a não ser exame andrológico e diagnóstico de prenhez
          if not((DadosEvento.CodTipoEvento = 25) or (DadosEvento.CodTipoEvento = 28)) then begin
            Mensagens.Adicionar(1457, Self.ClassName, NomeMetodo, []);
            Result := -1457;
            Rollback;
            Exit;
          end;

          // Verifica se cadastro já foi efetivado
          if DadosEvento.DtaEfetivacaoCadastro > 0 then begin
            Mensagens.Adicionar(861, Self.ClassName, NomeMetodo, []);
            Result := -861;
            Rollback;
            Exit;
          end;

          // Consiste regras da inserção (por evento)
          Result := ConsisteInsercaoEvento(DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          //remove o evento para animais que já o tinham recebido no caso de exame andrológico e diagnostico
          //e qdo for informado os códigos internos dos animais
          Q.Close;
          Q.SQL.Clear;
          if CodAnimais <> '' then begin
             Q.SQL.Add('select count(*) total from tab_animal_evento ' +
                           ' where cod_animal in (' + CodAnimais + ')' +
                           ' and   cod_pessoa_produtor = :cod_pessoa_produtor ' +
                           ' and   cod_evento = :cod_evento ');
             Q.ParamByName('cod_evento').AsInteger := CodEvento;
             Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
             Q.Open;
             QtdAlterados := Q.FieldbyName('total').AsInteger;
             if QtdAlterados > 0 then begin
                Q.Close;
                Q.SQL.Clear;
                Q.SQL.Add('delete from tab_animal_evento ' +
                          ' where cod_animal in (' + CodAnimais + ')' +
                          ' and   cod_pessoa_produtor = :cod_pessoa_produtor ' +
                          ' and   cod_evento = :cod_evento ');
                Q.ParamByName('cod_evento').AsInteger := CodEvento;
                Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                Q.ExecSQL;
                Q.Close;
                Q.SQL.Clear;
                Q.SQL.Add('update tab_evento ' +
                      '   set qtd_animais = qtd_animais - :qtd_animais ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
                Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                Q.ParamByName('cod_evento').AsInteger := CodEvento;
                Q.ParamByName('qtd_animais').AsInteger := QtdAlterados;
                Q.ExecSQL;
             end;
          end;
          // Seleciona os animais candidatos à operação
          Result := SelecionaAnimaisEventosEsp(CodFazenda, CodAnimaisManejo, CodAnimais, CodEvento, False, QAnim);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Processa os animais
          while not QAnim.Eof do begin
            // Obtem dados do animal atual
            ObtemAnimalSelecionadoEvento(DadosAnimal, QAnim);
            // Verifica se animal já não sofreu algum evento mais recente (exceto para emissão de certificado)
            Result := ConsisteEventoDtaControlada(DadosAnimal,DadosEvento,'A');
            if Result < 0 then begin
               Rollback;
               Exit;
            end;
            if Result = 100 then begin
               if NumNivelChamada = 1 then begin
                  Inc(QtdAnimalIncompativel);
               end else begin
                  Inc(QtdRelacionadoIncompativel);
               end;
               QAnim.Next;
               Continue;
            end;

            // Verifica se animal já foi processado
            if Pos('|' + IntToStr(DadosAnimal.CodAnimal) + '|', FIntAnimaisProcessados) > 0 then begin
              QAnim.Next;
              Continue;
            end;

            // Atualiza animais processados
            FIntAnimaisProcessados := FIntAnimaisProcessados + IntToStr(DadosAnimal.CodAnimal) + '|';

            //busca peso do animal
            IndDiagnostico := BuscaDiagnosticoAnimal(inttostr(DadosAnimal.CodAnimal),DadosAnimal.CodAnimalManejo,QtdAnimais,DadosDiagnosticosAnimais);

            if (IndDiagnostico = 'S') or (IndDiagnostico = 'N') then begin
                // Consiste regras da associação de diagnostico ou exame (por animal)
                case CodTipoEvento of
                 25: Result := ConsisteExameAndrologico(DadosAnimal, DadosEvento, IndDiagnostico);
                 28: Result := ConsisteDiagnosticoPrenhez(DadosAnimal, DadosEvento, IndDiagnostico);
                end;
                if Result < 0 then begin
                   Rollback;
                   Exit;
                end;
                if Result = 100 then begin
                   if NumNivelChamada = 1 then begin
                      Inc(QtdAnimalIncompativel);
                   end else begin
                      Inc(QtdRelacionadoIncompativel);
                   end;
                   QAnim.Next;
                   Continue;
                end;
                // Se não limpou as mensagens previamente, então limpa para o animal que
                // passou pela consistência
                if UpperCase(IndLimparMensagens) = 'N' then begin
                   Q.SQL.Clear;
                   {$IFDEF MSSQL}
                   Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ' +
                        '   and cod_animal = :cod_animal ' +
                        '   and ind_operacao_remocao = :ind_operacao_remocao ');
                   {$ENDIF}
                   Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                   Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
                   Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
                   Q.ParamByName('ind_operacao_remocao').AsString := 'N';
                   Q.ExecSQL;
                end;

                // Aplica o evento ao animal
                case CodTipoEvento of
                  25: Result := InserirAnimalDiagnosticoExame(DadosEvento, DadosAnimal, '',IndDiagnostico);
                  28: Result := InserirAnimalDiagnosticoExame(DadosEvento, DadosAnimal, IndDiagnostico, '');
                end;
                if Result < 0 then begin
                   Rollback;
                   Exit;
                end;

                case CodTipoEvento of
                 25: Result := AplicarExameAndrologico(DadosAnimal, DadosEvento, IndDiagnostico, False);
                 28: Result := AplicarDiagnosticoPrenhez(DadosAnimal, DadosEvento, IndDiagnostico, False);
                end;
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;

                Inc(QtdProcessadosInt);
                if NumNivelChamada = 1 then begin
                   Inc(QtdProcessados);
                end else begin
                   Inc(QtdRelacionados);
                end;
                QAnim.Next;
             end;
          end;
          if ((NumNivelChamada = 1) and (QtdProcessados > 0)) or
             ((NumNivelChamada > 1) and (QtdRelacionados > 0)) then begin
            // Atualiza tab_evento
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('update tab_evento ' +
                      '   set qtd_animais = qtd_animais + :qtd_animais ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('qtd_animais').AsInteger := QtdProcessadosInt;
            Q.ExecSQL;

            // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            if CodAnimaisManejo <> '' then begin
               Result := GravarLogOperacao('tab_evento', DadosEvento.CodRegistroLog, 3, Metodo);
               if Result < 0 then begin
                  Rollback;
                  Exit;
               end;
            end;
          end;

          // Confirma transação
          Commit;

          // Atualiza coleção de mensagens
         if CodAnimaisManejo <> '' then begin
          if NumNivelChamada = 1 then begin
            if (QtdAnimalIncompativel > 0) or (QtdRelacionadoIncompativel > 0) then begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1121, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados), IntToStr(QtdAnimalIncompativel)]);
              end else begin
                Mensagens.Adicionar(871, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdAnimalIncompativel)]);
              end;
              Result := -1;
            end else begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1120, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados)]);
              end else begin
                Mensagens.Adicionar(870, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                 IntToStr(QtdProcessados)]);
              end;
              Result := 0;
            end;
          end;
         end;
         if (CodAnimaisManejo = '') and (QtdProcessados > 0) and (QtdAnimalIncompativel = 0) then begin
            Mensagens.Adicionar(870, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
            IntToStr(QtdProcessados)]);
         end;
         if (CodAnimaisManejo = '') and (QtdAnimalIncompativel > 0) then begin
            Mensagens.Adicionar(871, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
            IntToStr(QtdProcessados), IntToStr(QtdAnimalIncompativel)]);
         end;
        except
          on E: Exception do begin
            Rollback;
            Mensagens.Adicionar(872, Self.ClassName, NomeMetodo, [E.Message]);
            Result := -872;
            Exit;
          end;
        end;
      finally
        QAnim.Free;
      end;
    finally
      Q.Free;
    end;
  finally
    Dec(NumNivelChamada);
  end;
end;

function TIntAnimais.AlterarPesoAnimalInt(CodAnimais, QtdPesosAnimais: String;
CodEvento: Integer): Integer;
const
  Metodo : Integer = 357;
  NomeMetodo : String = 'AlterarPesoAnimal';
var
  Q, QAnim : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DadosEvento : TDadosEvento;
  QtdProcessadosInt:  Integer;
  DadosPesoAnimais : TPesosAnimais;
  QtdAnimais : Integer;
begin
  Result := -1;
  //eliminar duplicidades da lista de CodAnimaisManejo e QtdPesosAnimais e carregar a estrutura DadosPesoAnimal
  QtdAnimais := PopulaPesoAnimal(CodAnimais,QtdPesosAnimais,DadosPesoAnimais);
  if QtdAnimais < 0 then begin
    Exit;
  end;
  Inc(NumNivelChamada);

  try
    if not Inicializado then begin
      RaiseNaoInicializado(NomeMetodo);
      Exit;
    end;

    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Result := -307;
      Exit;
    end;

    QtdProcessadosInt := 0;

    Q := THerdomQuery.Create(Conexao, nil);
    try
      QAnim := THerdomQuery.Create(Conexao, nil);
      try
        try
          // Abre Transação
          BeginTran;

          // Limpa tab_erro_aplicacao_evento
          Q.SQL.Clear;
      {$IFDEF MSSQL}
          Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                    ' where dta_aplicacao_evento < dateadd(day, :qtd_dias, getdate())');
      {$ENDIF}
          Q.ParamByName('qtd_dias').AsInteger := StrToInt(ValorParametro(11)) * -1;
          Q.ExecSQL;

            Q.SQL.Clear;
        {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ' +
                      '   and ind_operacao_remocao = ''N''');
        {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ExecSQL;

          MontaQueryDeleteAnimalEvento;

          // Obtem o evento
          Result := VerificaEvento(CodEvento, True, 'Evento a aplicar', DadosEvento);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Não deixa aplicar outros eventos a não ser pesagem com essa rotina
          if DadosEvento.CodTipoEvento <> 22 then begin
            Mensagens.Adicionar(1146, Self.ClassName, NomeMetodo, []);
            Result := -1146;
            Rollback;
            Exit;
          end;

          // Seleciona os animais candidatos à operação
          Result := SelecionaAnimaisEventosEsp(-1, '', CodAnimais, CodEvento, true, QAnim);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          // Processa os animais
          while not QAnim.Eof do begin
            // Obtem dados do animal atual
            ObtemAnimalSelecionadoEvento(DadosAnimal, QAnim);

            // Verifica se animal já foi processado
            if Pos('|' + IntToStr(DadosAnimal.CodAnimal) + '|', FIntAnimaisProcessados) > 0 then begin
              QAnim.Next;
              Continue;
            end;

            // Atualiza animais processados
            FIntAnimaisProcessados := FIntAnimaisProcessados + IntToStr(DadosAnimal.CodAnimal) + '|';

            //busca peso do animal
            //PesoAnimal := BuscaPesoAnimal(DadosAnimal.CodAnimalManejo,QtdAnimais,DadosPesoAnimais);

            // Consiste regras da associação de pesagem (por animal)
            //Result := ConsistePesagemAnimal(DadosAnimal, DadosEvento, PesoAnimal);
            if Result < 0 then begin
               Rollback;
               Exit;
            end;
            if Result = 100 then begin
               if NumNivelChamada = 1 then begin
                  Inc(QtdAnimalIncompativel);
               end else begin
                  Inc(QtdRelacionadoIncompativel);
               end;
               QAnim.Next;
               Continue;
             end;
            // Se não limpou as mensagens previamente, então limpa para o animal que
            // passou pela consistência
              Q.SQL.Clear;
              {$IFDEF MSSQL}
              Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                        ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '   and cod_evento = :cod_evento ' +
                        '   and cod_animal = :cod_animal ' +
                        '   and ind_operacao_remocao = :ind_operacao_remocao ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
              Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
              Q.ParamByName('ind_operacao_remocao').AsString := 'N';
              Q.ExecSQL;

            // Remove a pesagem ao animal
            Result := RemoverAnimalEvento(DadosEvento, DadosAnimal);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;

            Inc(QtdProcessadosInt);
            if NumNivelChamada = 1 then begin
              Inc(QtdProcessados);
            end else begin
              Inc(QtdRelacionados);
            end;
            QAnim.Next;
          end;

          if ((NumNivelChamada = 1) and (QtdProcessados > 0)) or
             ((NumNivelChamada > 1) and (QtdRelacionados > 0)) then begin
            // Atualiza tab_evento
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('update tab_evento ' +
                      '   set qtd_animais = qtd_animais - :qtd_animais ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('qtd_animais').AsInteger := QtdProcessadosInt;
            Q.ExecSQL;

            // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            Result := GravarLogOperacao('tab_evento', DadosEvento.CodRegistroLog, 3, Metodo);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;
          end;

          // Confirma transação
          Commit;

          // Atualiza coleção de mensagens
          // Mensagens.Clear;
          if NumNivelChamada = 1 then begin
            if (QtdAnimalIncompativel > 0) or (QtdRelacionadoIncompativel > 0) then begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1121, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados), IntToStr(QtdAnimalIncompativel)]);
              end else begin
                Mensagens.Adicionar(871, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdAnimalIncompativel)]);
              end;
              Result := -1;
            end else begin
              if (QtdRelacionados > 0) then begin
                Mensagens.Adicionar(1154, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                  IntToStr(QtdProcessados), IntToStr(QtdRelacionados)]);
              end else begin
                Mensagens.Adicionar(1155, Self.ClassName, NomeMetodo, [IntToStr(CodEvento), DadosEvento.DesTipoEvento,
                 IntToStr(QtdProcessados)]);
              end;
              Result := 0;
            end;
          end;
        except
          on E: Exception do begin
            Rollback;
            Mensagens.Adicionar(1153, Self.ClassName, NomeMetodo, [E.Message]);
            Result := -1153;
            Exit;
          end;
        end;
      finally
        QAnim.Free;
      end;
    finally
      Q.Free;
    end;
  finally
    Dec(NumNivelChamada);
  end;
end;

function TIntAnimais.PopulaPesoAnimal(CodAnimais,PesoAnimais: String;
var DadosPesosAnimais: TPesosAnimais):integer;
var codigo:string;
    peso:string;
    I,Qtd:Integer;

function busca(codigo:string; posicao:integer):boolean;
var cont:integer;
begin
  for cont:=1 to Qtd+1 do begin
     if (DadosPesosAnimais[cont].CodAnimalManejo = codigo) and (cont<posicao) then begin
        result := true;
        exit;
     end;
  end;
  result := false;
end;

begin
   Qtd:=0;
   For I := 1 to Length(CodAnimais) do begin
    if Pos(UpperCase(Copy(CodAnimais, I, 1)), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ') > 0 then begin
      codigo := codigo + Copy(CodAnimais, I, 1);
      if I = Length(codanimais) then begin
         DadosPesosAnimais[Qtd+1].CodAnimalManejo := codigo;
         DadosPesosAnimais[Qtd+1].IndCadastrado := '';
         inc(Qtd);
      end;
    end else begin
      if Copy(CodAnimais, I, 1) = ' ' then begin
        Continue;
      end;
      if Copy(CodAnimais, I, 1) <> ',' then begin
        Mensagens.Adicionar(428, Self.ClassName, 'InserePesosAnimais', [CodAnimais]);
        Result := -428;
        Exit;
      end;
      DadosPesosAnimais[Qtd+1].CodAnimalManejo := codigo;
      DadosPesosAnimais[Qtd+1].IndCadastrado := '';
      inc(Qtd);
      Codigo := '';
    end;
  end;
  if Qtd < 1 then begin
    Mensagens.Adicionar(437, Self.ClassName, 'InserePesosAnimais', [CodAnimais]);
    Result := -437;
    Exit;
  end;
   Qtd:=0;
   For I := 1 to Length(PesoAnimais) do begin
    if (Pos(UpperCase(Copy(PesoAnimais, I, 1)), '0123456789') > 0) or ((PesoAnimais[I] = ',') and (PesoAnimais[I+1] <> ' ')) then begin
      peso := peso + Copy(PesoAnimais, I, 1);
      if I = Length(Pesoanimais) then begin
         DadosPesosAnimais[Qtd+1].PesoAnimal := strtofloat(peso);
         inc(Qtd);
      end;
    end else begin
      if Copy(PesoAnimais, I, 1) = ' ' then begin
        Continue;
      end;
      if Copy(PesoAnimais, I, 2) <> ', ' then begin
        Mensagens.Adicionar(428, Self.ClassName, 'InserePesosAnimais', [PesoAnimais]);
        Result := -428;
        Exit;
      end;
      DadosPesosAnimais[Qtd+1].PesoAnimal := strtofloat(peso);
      inc(Qtd);
      peso := '';
    end;
  end;
  //retira as duplicidades da lista formada
  For I:=1 to Qtd+1 do
      if busca(DadosPesosAnimais[I].CodAnimalManejo,I) then
         DadosPesosAnimais[I].IndCadastrado := 'D';
  result := Qtd;
end;

function TIntAnimais.BuscaPesoAnimal(CodAnimalManejo, CodAnimal: String; Qtd:Integer;
         var DadosPesosAnimais: TPesosAnimais):real;
var cont:integer;
begin
  for cont:=1 to Qtd+1 do begin
     if ((DadosPesosAnimais[cont].CodAnimalManejo = CodAnimalManejo) or (DadosPesosAnimais[cont].CodAnimalManejo = CodAnimal)) And (DadosPesosAnimais[cont].IndCadastrado <> 'D') then begin
        DadosPesosAnimais[cont].IndCadastrado := 'S';
        result := DadosPesosAnimais[cont].PesoAnimal;
        exit;
     end;
  end;
  result := -1;
end;

function TIntAnimais.PopulaDiagnosticoAnimal(CodAnimais,IndVacaPTouroA: String;
var DadosReprodutivosAnimais: TReproducaoAnimais):integer;
var codigo:string;
    diagnostico:string;
    I,Qtd,IndRem :Integer;

function busca(codigo:string; posicao:integer):Integer;
var cont:integer;
begin
  for cont:=1 to Qtd+1 do begin
     if (DadosReprodutivosAnimais[cont].CodAnimalManejo = codigo) and (cont>posicao) then begin
        result := posicao;
        exit;
     end;
  end;
  result := -1;
end;

begin
   Qtd:=0;
   For I := 1 to Length(CodAnimais) do begin
    if Pos(UpperCase(Copy(CodAnimais, I, 1)), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ') > 0 then begin
      codigo := codigo + Copy(CodAnimais, I, 1);
      if I = Length(codanimais) then begin
         DadosReprodutivosAnimais[Qtd+1].CodAnimalManejo := codigo;
         DadosReprodutivosAnimais[Qtd+1].IndCadastrado := '';
         inc(Qtd);
      end;
    end else begin
      if Copy(CodAnimais, I, 1) = ' ' then begin
        Continue;
      end;
      if Copy(CodAnimais, I, 1) <> ',' then begin
        Mensagens.Adicionar(428, Self.ClassName, 'InsereDiagnosticoAnimais', [CodAnimais]);
        Result := -428;
        Exit;
      end;
      DadosReprodutivosAnimais[Qtd+1].CodAnimalManejo := codigo;
      DadosReprodutivosAnimais[Qtd+1].IndCadastrado := '';
      inc(Qtd);
      Codigo := '';
    end;
  end;
  if Qtd < 1 then begin
    Mensagens.Adicionar(437, Self.ClassName, 'InsereDiagnosticoAnimais', [CodAnimais]);
    Result := -437;
    Exit;
  end;
   Qtd:=0;
   For I := 1 to Length(IndVacaPTouroA) do begin
    if (Pos(UpperCase(Copy(IndVacaPTouroA, I, 1)), 'SN') > 0) or ((IndVacaPTouroA[I] = ',') and (IndVacaPTouroA[I+1] <> ' ')) then begin
      diagnostico := diagnostico + Copy(IndVacaPTouroA, I, 1);
      if I = Length(IndVacaPTouroA) then begin
         DadosReprodutivosAnimais[Qtd+1].IndVacaPTouroA := diagnostico;
         inc(Qtd);
      end;
    end else begin
      if Copy(IndVacaPTouroA, I, 1) = ' ' then begin
        Continue;
      end;
      if Copy(IndVacaPTouroA, I, 2) <> ', ' then begin
        Mensagens.Adicionar(428, Self.ClassName, 'InsereDiagnosticoAnimais', [IndVacaPTouroA]);
        Result := -428;
        Exit;
      end;
      DadosReprodutivosAnimais[Qtd+1].IndVacaPTouroA := diagnostico;
      inc(Qtd);
      diagnostico := '';
    end;
  end;
  //retira as duplicidades da lista formada
  For I:=1 to Qtd+1 do begin
      IndRem := busca(DadosReprodutivosAnimais[I].CodAnimalManejo,I);
      if IndRem > 0 then
         DadosReprodutivosAnimais[IndRem].IndCadastrado := 'D';
  end;
  result := Qtd;
end;

function TIntAnimais.BuscaDiagnosticoAnimal(CodAnimalManejo, CodAnimal: String; Qtd:Integer;
         var DadosReprodutivosAnimais: TReproducaoAnimais):string;
var cont:integer;
begin
  for cont:=1 to Qtd+1 do begin
     if ((DadosReprodutivosAnimais[cont].CodAnimalManejo = CodAnimalManejo) or (DadosReprodutivosAnimais[cont].CodAnimalManejo = CodAnimal)) And (DadosReprodutivosAnimais[cont].IndCadastrado <> 'D') then begin
        result := DadosReprodutivosAnimais[cont].IndVacaPTouroA;
        exit;
     end;
  end;
  result := '';
end;

function TIntAnimais.AnimalEstaCadastrado(CodAnimalManejo:String; CodFazenda:integer): integer;
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select  1' +
                '  from tab_animal ' +
                '  where cod_animal_manejo = :cod_animal_manejo ' +
                '   and cod_fazenda_manejo = :cod_fazenda_manejo ' +
                '   and cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazenda;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if Q.IsEmpty
         then result := 0
         else result := 1;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1150, Self.ClassName, 'VerificaAnimal', [E.Message]);
        Result := -1150;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.GerarRelatorioPesoAjustado(Origem: Integer;
  Sexo: String; Aptidao, CodFazendaManejo: Integer; CodManejoInicial,
  CodManejoFinal, Raca, SglFazendaPai,
  CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae: String;
  DtaNascimentoInicio, DtaNascimentoFim, DtaCompraInicio,
  DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
  CodCategoria, IndAnimalCastrado: String;
  CodRegimeAlimentar: Integer; CodLocal, CodLote: String; CodTipoLugar:
  Integer; NumIdadePadrao: Integer; QtdPesoMinimo,
  QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
  QtdGPMMaximo: Double; IndAgrupRaca1: String; CodRaca1: Integer;
  QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
  QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; Tipo, QtdQuebraRelatorio, CodTarefa, CodPessoaProdutor: Integer): String;
const
  NomeMetodo: String = 'GerarRelatorioPesoAjustado';
  Metodo: Integer = 377;
  CodTipoTarefa: Integer = 5;
  CodRelatorio: Integer = 10;
var
  Retorno: Integer;
  NomPessoaProdutor: String;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  If Conexao.CodProdutorTrabalho = -1 Then
  Begin
    if CodTarefa > 0 then
    begin
      Conexao.DefinirProdutorTrabalho(CodPessoaProdutor, NomPessoaProdutor);
    end;
    If Conexao.CodProdutorTrabalho = -1 Then
    Begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Exit;
    end;
  End;

  {Realiza pesquisa de animais de acordo com os critérios informados}
  Result := PesquisarRelatorioPesoAjustado(Origem, Sexo, Aptidao, CodFazendaManejo,
                                            CodManejoInicial, CodManejoFinal, Raca, SglFazendaPai,
                                            CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae,
                                            DtaNascimentoInicio, DtaNascimentoFim, DtaCompraInicio,
                                            DtaCompraFim, CodPessoaSecundaria, CodCategoria, IndAnimalCastrado,
                                            CodRegimeAlimentar, CodLocal, CodLote, CodTipoLugar, NumIdadePadrao,
                                            QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
                                            QtdGPMMaximo, IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                            QtdCompRacialFim1, IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2,
                                            QtdCompRacialFim2, IndAgrupRaca3, CodRaca3, QtdCompRacialInicio3,
                                            QtdCompRacialFim3, IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                            QtdCompRacialFim4, Tipo, QtdQuebraRelatorio, CodTarefa);
  if StrToIntDef(Result, -1) < 0 then begin
    if Result = IntToStr(idExceedsTheConfiguredThreshold) then begin
      // Verifica se o arquivo se se encontra na lista de tarefas para processamento
      Result := '';
      Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, Origem, Sexo, Aptidao, CodFazendaManejo,
                                            CodManejoInicial, CodManejoFinal, Raca, SglFazendaPai,
                                            CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae,
                                            DtaNascimentoInicio, DtaNascimentoFim, DtaCompraInicio,
                                            DtaCompraFim, CodPessoaSecundaria, CodCategoria, IndAnimalCastrado,
                                            CodRegimeAlimentar, CodLocal, CodLote, CodTipoLugar, NumIdadePadrao,
                                            QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
                                            QtdGPMMaximo, IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                            QtdCompRacialFim1, IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2,
                                            QtdCompRacialFim2, IndAgrupRaca3, CodRaca3, QtdCompRacialInicio3,
                                            QtdCompRacialFim3, IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                            QtdCompRacialFim4, Tipo, QtdQuebraRelatorio, Conexao.CodProdutorTrabalho]);
      if Retorno <= 0 then begin
        if Retorno = 0 then begin
          Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
        end;
        Exit;
      end;

      // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
      Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, Origem, Sexo, Aptidao, CodFazendaManejo,
                                            CodManejoInicial, CodManejoFinal, Raca, SglFazendaPai,
                                            CodAnimalPai, DesApelidoPai, SglFazendaMae, CodAnimalMae,
                                            DtaNascimentoInicio, DtaNascimentoFim, DtaCompraInicio,
                                            DtaCompraFim, CodPessoaSecundaria, CodCategoria, IndAnimalCastrado,
                                            CodRegimeAlimentar, CodLocal, CodLote, CodTipoLugar, NumIdadePadrao,
                                            QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
                                            QtdGPMMaximo, IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                            QtdCompRacialFim1, IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2,
                                            QtdCompRacialFim2, IndAgrupRaca3, CodRaca3, QtdCompRacialInicio3,
                                            QtdCompRacialFim3, IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                            QtdCompRacialFim4, Tipo, QtdQuebraRelatorio, Conexao.CodProdutorTrabalho],
                                            DtaSistema);

      // Trata o resultado da solicitação, gerando mensagem se bem sucedido
      if Retorno >= 0 then begin
        Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
      end;
    end;
    Exit;
  end;
end;

function TIntAnimais.GerarRelatorioPesagem(CodOrigem: Integer;
  IndSexoAnimal: String; CodAptidao, CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim, CodRaca, SglFazendaPai,
  CodAnimalManejoPai, DesApelidoPai, SglFazendaMae,
  CodAnimalManejoMae: String; DtaNascimentoInicio, DtaNascimentoFim,
  DtaCompraInicio, DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
  CodCategoria, IndAnimalCastrado: String;
  CodRegimeAlimentar: Integer; CodLote, CodLocal: String;
  CodTipoLugar: Integer; DtaPesagemInicio, DtaPesagemFim: TDateTime;
  QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo, QtdGPDMaximo, QtdGPMMinimo,
  QtdGPMMaximo: Double; QtdUltimasPesagens: Integer; IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
  QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; Tipo,QtdQuebraRelatorio, CodTarefa, CodPessoaProdutor: Integer): String;
const
  Metodo: Integer = 388;
  NomeMetodo: String = 'GerarRelatorioPesagem';
  CodRelatorio: Integer = 11;
  CodTipoTarefa: Integer = 5;
var
  Retorno: Integer;
  NomPessoaProdutor: String;
begin
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  If Conexao.CodProdutorTrabalho = -1 Then
  Begin
    if CodTarefa > 0 then
    begin
      Conexao.DefinirProdutorTrabalho(CodPessoaProdutor, NomPessoaProdutor);
    end;
    If Conexao.CodProdutorTrabalho = -1 Then
    Begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Exit;
    end;
  End;

  {Realiza pesquisa de animais de acordo com os critérios informados}
  Result := PesquisarRelatorioPesagem(CodOrigem, IndSexoAnimal, CodAptidao, CodFazendaManejo, CodAnimalManejoInicio,
                                      CodAnimalManejoFim, CodRaca, SglFazendaPai, CodAnimalManejoPai, DesApelidoPai,
                                      SglFazendaMae, CodAnimalManejoMae, DtaNascimentoInicio, DtaNascimentoFim,
                                      DtaCompraInicio, DtaCompraFim, CodPessoaSecundaria, CodCategoria,
                                      IndAnimalCastrado, CodRegimeAlimentar, CodLote, CodLocal, CodTipoLugar,
                                      DtaPesagemInicio, DtaPesagemFim, QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo,
                                      QtdGPDMaximo, QtdGPMMinimo, QtdGPMMaximo, QtdUltimasPesagens, IndAgrupRaca1,
                                      CodRaca1, QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                      QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                      QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
                                      QtdCompRacialInicio4, QtdCompRacialFim4, Tipo, QtdQuebraRelatorio,
                                      CodTarefa);
  if StrToIntDef(Result, -1) < 0 then
  begin
    if Result = IntToStr(idExceedsTheConfiguredThreshold) then
    begin
      // Verifica se o arquivo se se encontra na lista de tarefas para processamento
      Result := '';
      Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodOrigem, IndSexoAnimal, CodAptidao, CodFazendaManejo, CodAnimalManejoInicio,
                                      CodAnimalManejoFim, CodRaca, SglFazendaPai, CodAnimalManejoPai, DesApelidoPai,
                                      SglFazendaMae, CodAnimalManejoMae, DtaNascimentoInicio, DtaNascimentoFim,
                                      DtaCompraInicio, DtaCompraFim, CodPessoaSecundaria, CodCategoria,
                                      IndAnimalCastrado, CodRegimeAlimentar, CodLote, CodLocal, CodTipoLugar,
                                      DtaPesagemInicio, DtaPesagemFim, QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo,
                                      QtdGPDMaximo, QtdGPMMinimo, QtdGPMMaximo, QtdUltimasPesagens, IndAgrupRaca1,
                                      CodRaca1, QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                      QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                      QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
                                      QtdCompRacialInicio4, QtdCompRacialFim4, Tipo, QtdQuebraRelatorio,
                                      Conexao.CodProdutorTrabalho]);
      if Retorno <= 0 then begin
        if Retorno = 0 then begin
          Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
        end;
        Exit;
      end;

      // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
      Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodOrigem, IndSexoAnimal, CodAptidao, CodFazendaManejo, CodAnimalManejoInicio,
                                      CodAnimalManejoFim, CodRaca, SglFazendaPai, CodAnimalManejoPai, DesApelidoPai,
                                      SglFazendaMae, CodAnimalManejoMae, DtaNascimentoInicio, DtaNascimentoFim,
                                      DtaCompraInicio, DtaCompraFim, CodPessoaSecundaria, CodCategoria,
                                      IndAnimalCastrado, CodRegimeAlimentar, CodLote, CodLocal, CodTipoLugar,
                                      DtaPesagemInicio, DtaPesagemFim, QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo,
                                      QtdGPDMaximo, QtdGPMMinimo, QtdGPMMaximo, QtdUltimasPesagens, IndAgrupRaca1,
                                      CodRaca1, QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                      QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                      QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
                                      QtdCompRacialInicio4, QtdCompRacialFim4, Tipo, QtdQuebraRelatorio,
                                      Conexao.CodProdutorTrabalho], DtaSistema);

      // Trata o resultado da solicitação, gerando mensagem se bem sucedido
      if Retorno >= 0 then begin
        Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
      end;
    end;
    Exit;
  end;
end;

function TIntAnimais.DefinirComposicaoRacial(CodAnimal, CodRaca: Integer;
  QtdComposicaoRacial: Double): Integer;
const
  NomMetodo: String = 'DefinirComposicaoRacial';
var
  Q : THerdomQuery;
  CodRegistroLog : Integer;
  Total_composicao : real;
  Tipo_Operacao: Integer; //1- Insere, 2 - Altera, 3 - Exclui
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(404) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  Total_Composicao := 0;
  Tipo_Operacao := 0;
  try
    try

      // Verifica se o animal é válido
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ');
      Q.SQL.Add(' where cod_animal = :cod_animal ');
      Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add(' and   dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(679, Self.ClassName, NomMetodo, []);
         Result := -679;
         Exit;
      end;
      Q.Close;

      // Verifica se a raça é pura
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_raca ');
      Q.SQL.Add(' where cod_raca = :cod_raca ');
      Q.SQL.Add(' and   ind_raca_pura = ''S'' ');
{$ENDIF}
      Q.ParamByName('cod_raca').AsInteger := CodRaca;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(1265, Self.ClassName, NomMetodo, []);
         Result := -1265;
         Exit;
      end;
      Q.Close;

      // Verifica se já existe uma composição cadastrada para esta raça e este animal
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_registro_log, qtd_composicao_racial ');
      Q.SQL.Add(' from tab_composicao_racial ');
      Q.SQL.Add(' where cod_animal = :cod_animal ');
      Q.SQL.Add(' and   cod_raca = :cod_raca ');
      Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('cod_raca').AsInteger := CodRaca;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if Q.FieldByName('qtd_composicao_racial').Isnull then
         Tipo_Operacao := 1;
      if not(Q.FieldByName('qtd_composicao_racial').Isnull) and (QtdComposicaoRacial = 0) then begin
         Total_Composicao := 0;
         Tipo_Operacao := 3;
      end;
      if not(Q.FieldByName('qtd_composicao_racial').Isnull) and (QtdComposicaoRacial <> 0) then begin
         Total_Composicao := Q.FieldByName('qtd_composicao_racial').asfloat;
         Tipo_Operacao := 2;
      end;

      // Verifica se QtdComposicaoRacial é válido (alteração e inserção)
      if (Tipo_Operacao = 1) or (Tipo_Operacao = 2) then begin
         Q.SQL.Clear;
{$IFDEF MSSQL}
         Q.SQL.Add('select isnull(sum(qtd_composicao_racial),0) as total ');
         Q.SQL.Add(' from tab_composicao_racial ');
         Q.SQL.Add(' where cod_animal = :cod_animal ');
         Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
         Q.ParamByName('cod_animal').AsInteger := CodAnimal;
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.Open;

         Total_Composicao := QtdComposicaoRacial + Q.fieldbyname('total').asfloat - Total_Composicao;

         if (Total_Composicao < 0) or (Total_Composicao > 1) then begin
            Mensagens.Adicionar(1271, Self.ClassName, NomMetodo, []);
            Result := -1271;
            Exit;
         end;
      end;

      Q.Close;

      // Abre transação
      BeginTran;

      Q.SQL.Clear;

      case Tipo_Operacao of
      1:begin       // Tenta Inserir o registro (inserção)
         // Pega próximo CodRegistroLog
         CodRegistroLog := ProximoCodRegistroLog;
         if CodRegistroLog < 0 then begin
            Rollback;
            Result := CodRegistroLog;
            Exit;
         end;
         {$IFDEF MSSQL}
         Q.SQL.Add('insert into tab_composicao_racial ');
         Q.SQL.Add(' (cod_pessoa_produtor, ');
         Q.SQL.Add('  cod_animal, ');
         Q.SQL.Add('  cod_raca, ');
         Q.SQL.Add('  qtd_composicao_racial, ');
         Q.SQL.Add('  cod_registro_log) ');
         Q.SQL.Add('values ');
         Q.SQL.Add(' (:cod_pessoa_produtor, ');
         Q.SQL.Add('  :cod_animal, ');
         Q.SQL.Add('  :cod_raca, ');
         Q.SQL.Add('  :qtd_composicao_racial, ');
         Q.SQL.Add('  :cod_registro_log) ');
         {$ENDIF}
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ParamByName('cod_animal').AsInteger := CodAnimal;
         Q.ParamByName('cod_raca').AsInteger := CodRaca;
         Q.ParamByName('qtd_composicao_racial').AsFloat := QtdComposicaoRacial;
         //Inicio Solicitação Herdom001019.doc
         Q.ParamByName('cod_registro_log').AsInteger := 0;//CodRegistroLog;
         //Fim Solicitação Herdom001019.doc
         Q.ExecSQL;
         // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
         // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
         //Result := GravarLogOperacao('tab_composicao_racial', CodRegistroLog, 1, 404);
         //if Result < 0 then begin
         //   Rollback;
         //   Exit;
         //end;
      end;
      2:begin
         // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
         // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
         //Result := GravarLogOperacao('tab_composicao_racial', CodRegistroLog, 2, 404);
         //if Result < 0 then begin
         //   Rollback;
         //   Exit;
         //end;
         {$IFDEF MSSQL}
         Q.SQL.Add('update tab_composicao_racial ');
         Q.SQL.Add(' set qtd_composicao_racial = :qtd_composicao_racial ');
         Q.SQL.Add(' where ');
         Q.SQL.Add(' cod_pessoa_produtor = :cod_pessoa_produtor and ');
         Q.SQL.Add(' cod_animal = :cod_animal and ');
         Q.SQL.Add(' cod_raca = :cod_raca ');
         {$ENDIF}
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ParamByName('cod_animal').AsInteger := CodAnimal;
         Q.ParamByName('cod_raca').AsInteger := CodRaca;
         Q.ParamByName('qtd_composicao_racial').AsFloat := QtdComposicaoRacial;
         Q.ExecSQL;
         //Result := GravarLogOperacao('tab_composicao_racial', CodRegistroLog, 3, 404);
         //if Result < 0 then begin
         //   Rollback;
         //   Exit;
         //end;
      end;
      3:begin
         // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
         // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
         //Result := GravarLogOperacao('tab_composicao_racial', CodRegistroLog, 4, 404);
         //if Result < 0 then begin
         //   Rollback;
         //   Exit;
         //end;
         {$IFDEF MSSQL}
         Q.SQL.Add('delete from tab_composicao_racial ');
         Q.SQL.Add(' where ');
         Q.SQL.Add(' cod_pessoa_produtor = :cod_pessoa_produtor and ');
         Q.SQL.Add(' cod_animal = :cod_animal and ');
         Q.SQL.Add(' cod_raca = :cod_raca ');
         {$ENDIF}
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ParamByName('cod_animal').AsInteger := CodAnimal;
         Q.ParamByName('cod_raca').AsInteger := CodRaca;
         Q.ExecSQL;
      end;
      end;
      // Cofirma transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1272, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1272;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarComposicaoRacial(CodAnimal: Integer;
  CodOrdenacao: String): Integer;
const
  NomMetodo: String = 'PesquisarComposicaoRacial';
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(405) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomMetodo, []);
    Result := -307;
    Exit;
  end;

{$IFDEF MSSQL}
  Query.Close;
  Query.SQL.Clear;
  Query.SQL.Add('select tr.cod_raca as CodRaca ');
  Query.SQL.Add('     , tr.sgl_raca as SglRaca ');
  Query.SQL.Add('     , tr.des_raca as DesRaca ');
  Query.SQL.Add('     , tc.qtd_composicao_racial as QtdComposicaoRacial  ');
  Query.SQL.Add(' from tab_raca tr ');
  Query.SQL.Add('     ,tab_composicao_racial tc ');
  Query.SQL.Add(' where tc.cod_raca = tr.cod_raca ');
  Query.SQL.Add(' and   tc.cod_animal = :cod_animal ');
  Query.SQL.Add(' and   tc.cod_pessoa_produtor = :cod_pessoa_produtor ');
  if CodOrdenacao = 'Q' then
    Query.SQL.Add(' order by tc.qtd_composicao_racial desc ');
  if CodOrdenacao = 'S' then
    Query.SQL.Add(' order by tr.sgl_raca ')
  else if CodOrdenacao = 'D' then
    Query.SQL.Add(' order by tr.des_raca ');
{$ENDIF}
  try
  Query.Parambyname('cod_animal').asinteger := CodAnimal;
  Query.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
  Query.Open;
  Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(1273, Self.ClassName, NomMetodo, [E.Message]);
      Result := -1273;
      Exit;
    end;
  end;
end;

function TIntAnimais.ObterCodFazenda(SglFazenda: String;
  var CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirFazenda';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Text :=
        'select '+
        '  tf.cod_fazenda as CodFazenda '+
        'from '+
        '  tab_fazenda tf '+
        'where '+
        '  tf.cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and tf.sgl_fazenda = :sgl_fazenda '+
        '  and tf.dta_fim_validade is null ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('sgl_fazenda').AsString := SglFazenda;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1291, Self.ClassName, NomeMetodo, [SglFazenda]);
        Result := -1291;
      end else begin
        CodFazenda := Q.FieldByName('CodFazenda').AsInteger;
        Result := 0;
      end;
      Q.Close;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1293, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1293;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.AlterarAtributo(CodAnimal, CodAtributo: Integer;
  Valor1, Valor2: Variant): Integer;
const
  CodMetodo: Integer = 406;
  NomeMetodo: String = 'AlterarAtributo';
  ListaAtributos: Array [1..38] of String = (
    {1} 'cod_fazenda_manejo', { não utilizado }
    {2} 'cod_animal_manejo',
    {3} 'cod_animal_certificadora',
    {4} 'cod_animal_sisbov',
    {5} 'dta_identificacao_sisbov',
    {6} 'ind_sexo',
    {7} 'cod_fazenda_identificacao',
    {8} 'dta_nascimento',
    {9} 'num_imovel_nascimento',
    {10} 'cod_fazenda_nascimento',
    {11} 'dta_compra',
    {12} 'nom_animal',
    {13} 'des_apelido',
    {14} 'num_transponder',
    {15} 'cod_tipo_identificador_1',
    {16} 'cod_posicao_identificador_1',
    {17} 'cod_tipo_identificador_2',
    {18} 'cod_posicao_identificador_2',
    {19} 'cod_tipo_identificador_3',
    {20} 'cod_posicao_identificador_3',
    {21} 'cod_tipo_identificador_4',
    {22} 'cod_posicao_identificador_4',
    {23} 'cod_raca',
    {24} 'cod_pelagem',
    {25} 'ind_animal_castrado',
    {26} 'cod_regime_alimentar',
    {27} 'cod_categoria_animal',
    {28} 'cod_fazenda_corrente',
    {29} 'cod_local_corrente',
    {30} 'cod_lote_corrente',
    {31} 'txt_observação',
    {32} 'num_gta',
    {33} 'dta_emissao_gta',
    {34} 'num_nota_fiscal',
    {35} 'cod_manejo_pai',
    {36} 'cod_manejo_mae',
    {37} 'cod_manejo_receptor',
    {38} 'cod_pessoa_tecnico');

var
  Q,
  QueryLocal: THerdomQuery;
  DadosAnimal: TDadosAnimal;
  CodPaisSisbov: Integer;
  CodEstadoSisbov: Integer;
  CodMicroRegiaoSisbov: Integer;
  CodAnimalSisbov: Integer;
  NumDVSisbov: Integer;
  bLiberarCodSisbov: Boolean;
  bReservarCodSisbov: Boolean;
  bIndAlterarAnimalSisbov: Boolean;
  sTMP: String;

  {--------------------------------------------------
  Obtem o código do atributo através de sua descrição
  --------------------------------------------------}
  function Atributo(DesAtributo: String): Integer;
  var
    iAux: Integer;
  begin
    Result := -1;
    for iAux := 1 to Length(ListaAtributos) do begin
      if Trim(UpperCase(DesAtributo)) = Trim(UpperCase(ListaAtributos[iAux])) then begin
        Result := iAux;
        Break;
      end;
    end;
    if Result = -1 then begin
      Raise Exception.CreateFmt('Atributo de animal não definido!', []);
    end;
  end;

(*
  A rotina abaixo foi desabilita, pois a fazenda de manejo é alterada
  junto com o código de manejo do animal.

  {-------------------------------------------------------
  Altera o código da fazenda de manejo do animal informado
  -------------------------------------------------------}
  function AlterarCodFazendaManejo(CodFazendaManejo: Integer): Integer;
  var
    bAux: Boolean;
    sCodAnimalCertificadora: String;
  begin
    // Trata origem animal (R07)
    if DadosAnimal.CodTipoOrigem = 4 then begin
      Mensagens.Adicionar(1276, Self.ClassName, NomeMetodo, []);
      Result := -1276;
      Exit;
    end;

    // Trata cod_fazenda_manejo (R23)
    Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
    if Result < 0 then begin
      Exit;
    end;

    // Verifica duplicidade de fazenda/animal manejo (R04)
    Result := VerificaCodAnimalFazendaManejo(CodAnimal, DadosAnimal.CodAnimalManejo, CodFazendaManejo);
    if Result < 0 then begin
      Exit;
    end;

    // Verifica se o código animal certificadora é gerado automaticamente
    bAux := (ValorParametro(8) = 'S');

    // Gera novo código animal certificadora a partir da nova fazenda de manejo
    // se o mesmo é gerado automaticamente
    if bAux then begin
      Result := GeraCodAnimalCertificadora(sCodAnimalCertificadora, CodFazendaManejo, DadosAnimal.CodAnimalManejo, -1);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Concatena a string SQL o atributo a ser alterado
    if bAux then begin
      // Altera também o novo código animal certificadora
      Q.SQL.Text := Q.SQL.Text +
        'cod_fazenda_manejo = :cod_fazenda_manejo '+
        ', cod_animal_certificadora = :cod_animal_certificadora ';
    end else begin
      Q.SQL.Text := Q.SQL.Text +
        'cod_fazenda_manejo = :cod_fazenda_manejo ';
    end;

    // Identifica o novo valor para o atributo
    Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
    if bAux then begin
      // Altera também o novo código animal certificadora
      Q.ParamByName('cod_animal_certificadora').AsString := sCodAnimalCertificadora;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;
*)

  {--------------------------------------------
  Altera o código de manejo do animal informado
  --------------------------------------------}
  function AlterarCodAnimalManejo(SglFazendaManejo, CodAnimalManejo: String): Integer;
  var
    bAux: Boolean;
    CodFazendaManejo: Integer;
    sCodAnimalCertificadora: String;
  begin
    // Trata origem animal (R07)
    if (DadosAnimal.CodTipoOrigem = 4) and (SglFazendaManejo <> '') then begin
      Mensagens.Adicionar(1276, Self.ClassName, NomeMetodo, []);
      Result := -1276;
      Exit;
    end;

    // Obtem código da fazenda, caso a mesma tenha sido informada
    if SglFazendaManejo <> '' then begin
      Result := ObterCodFazenda(SglFazendaManejo, CodFazendaManejo);
      if Result < 0 then Exit;
    end else begin
      CodFazendaManejo := -1;
    end;

    // Consiste a fazenda informada, caso a mesma seja obrigatória
    if (DadosAnimal.CodTipoOrigem <> 4) then begin
      // Trata cod_fazenda_manejo (R23)
      Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo do animal');
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Trata cod_animal_manejo (R25)
    CodAnimalManejo := UpperCase(CodAnimalManejo);
    Result := VerificaCodAnimalManejo(CodAnimalManejo);
    if Result < 0 then begin
      Exit;
    end;

    // Verifica duplicidade de fazenda/animal manejo (R04)
    Result := VerificaCodAnimalFazendaManejo(CodAnimal, CodAnimalManejo, CodFazendaManejo);
    if Result < 0 then begin
      Exit;
    end;

    // Verifica se o código animal certificadora é gerado automaticamente
    bAux := (ValorParametro(8) = 'S');

    // Gera novo código animal certificadora a partir da nova fazenda de manejo
    // se o mesmo é gerado automaticamente
    if bAux then begin
      Result := GeraCodAnimalCertificadora(sCodAnimalCertificadora, CodFazendaManejo, CodAnimalManejo, -1);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Concatena a string SQL o atributo a ser alterado
    if bAux then begin
      // Altera também o código animal certificadora
      Q.SQL.Text := Q.SQL.Text +
        'cod_fazenda_manejo = :cod_fazenda_manejo '+
        ', cod_animal_manejo = :cod_animal_manejo '+
        ', cod_animal_certificadora = :cod_animal_certificadora ';
    end else begin
      Q.SQL.Text := Q.SQL.Text +
        'cod_fazenda_manejo = :cod_fazenda_manejo '+
        ', cod_animal_manejo = :cod_animal_manejo ';
    end;

    // Identifica o novo valor para o atributo
    if CodFazendaManejo <> -1 then begin
      Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
    end else begin
      Q.ParamByName('cod_fazenda_manejo').DataType := ftInteger;
      Q.ParamByName('cod_fazenda_manejo').Clear;
    end;
    Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
    if bAux then begin
      // Altera também o novo código animal certificadora
      Q.ParamByName('cod_animal_certificadora').AsString := sCodAnimalCertificadora;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {------------------------------------------------
  Altera o código certificadora do animal informado
  ------------------------------------------------}
  function AlterarCodAnimalCertificadora(CodAnimalCertificadora: String): Integer;
  begin
    // Trata código da certificadora
    if ValorParametro(8) = 'S' then begin
      Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, DadosAnimal.CodFazendaManejo, DadosAnimal.CodAnimalManejo, -1);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Verifica código animal certificadora (R25, R38)
    if CodAnimalCertificadora <> '' then begin
      CodAnimalCertificadora := UpperCase(CodAnimalCertificadora);
      Result := VerificaCodAnimalCertificadora(CodAnimal, CodAnimalCertificadora);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_animal_certificadora = :cod_animal_certificadora ';

    // Identifica o novo valor para o atributo
    if CodAnimalCertificadora <> '' then begin
      Q.ParamByName('cod_animal_certificadora').AsString := CodAnimalCertificadora;
    end else begin
      Q.ParamByName('cod_animal_certificadora').DataType := ftString;
      Q.ParamByName('cod_animal_certificadora').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-----------------------------------------------------------------------------
  Identifica na query de alteração (Q) os parametros a serem utilizados na mesma
  -----------------------------------------------------------------------------}
  procedure IdentificarParametrosCodSisbov(pCodPaisSisbov, pCodEstadoSisbov,
    pCodMicroRegiaoSisbov, pCodAnimalSisbov, pNumDVSisbov: Integer);
  begin
    if pCodPaisSisbov > 0 then begin
      Q.ParamByName('cod_pais_sisbov').AsInteger := pCodPaisSisbov;
      Q.ParamByName('cod_estado_sisbov').AsInteger := pCodEstadoSisbov;
      Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := pCodMicroRegiaoSisbov;
      Q.ParamByName('cod_animal_sisbov').AsInteger := pCodAnimalSisbov;
      Q.ParamByName('num_dv_sisbov').AsInteger := pNumDVSisbov;
    end else begin
      Q.ParamByName('cod_pais_sisbov').DataType := ftInteger;
      Q.ParamByName('cod_pais_sisbov').Clear;
      Q.ParamByName('cod_estado_sisbov').DataType := ftInteger;
      Q.ParamByName('cod_estado_sisbov').Clear;
      Q.ParamByName('cod_micro_regiao_sisbov').DataType := ftInteger;
      Q.ParamByName('cod_micro_regiao_sisbov').Clear;
      Q.ParamByName('cod_animal_sisbov').DataType := ftInteger;
      Q.ParamByName('cod_animal_sisbov').Clear;
      Q.ParamByName('num_dv_sisbov').DataType := ftInteger;
      Q.ParamByName('num_dv_sisbov').Clear;
    end;
  end;

  {-----------------------------------------
  Altera o código SISBOV do animal informado
  -----------------------------------------}
  function AlterarCodAnimalSisbov(StrCodAnimalSISBOV: String): Integer;
  var
    bAux: Boolean;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem = 3 then begin {Importação}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    if DadosAnimal.CodArquivoSisbov > 0 then begin {Animal Identificado}
      Mensagens.Adicionar(1389, Self.ClassName, NomeMetodo, []);
      Result := -1389;
      Exit;
    end;

    if DadosAnimal.CodSituacaoSisbov = 'I' then begin {Animal Identificado}
      Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
      Result := -712;
      Exit;
    end;

    with QueryLocal do
    begin
      Close;
      ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Open;
      if not isEmpty then
      begin
        Mensagens.Adicionar(1389, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
        Result := -1389;
        Exit;
      end;
      Close;
    end;

    if Length(StrCodAnimalSISBOV) = 15 then begin
      CodPaisSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 1, 3), 0);
      CodEstadoSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 4, 2), 0);
      CodMicroRegiaoSisbov := -1;
      CodAnimalSISBOV := StrToIntDef(Copy(StrCodAnimalSISBOV, 6, 9), 0);
      NumDVSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 15, 1), 0);
    end else begin
      CodPaisSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 1, 3), 0);
      CodEstadoSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 4, 2), 0);
      CodMicroRegiaoSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 6, 2), 0);
      CodAnimalSISBOV := StrToIntDef(Copy(StrCodAnimalSISBOV, 8, 9), 0);
      NumDVSisbov := StrToIntDef(Copy(StrCodAnimalSISBOV, 17, 1), 0);
    end;

    // Identifica se o código SISBOV do animal está sendo realmente alterado
    bAux := (CodPaisSisbov <> DadosAnimal.CodPaisSisbov) or
     (CodEstadoSisbov <> DadosAnimal.CodEstadoSisbov) or
     (CodMicroRegiaoSisbov <> DadosAnimal.CodMicroRegiaoSisbov) or
     (CodAnimalSisbov <> DadosAnimal.CodAnimalSisbov) or
     (NumDVSisbov <> DadosAnimal.NumDVSisbov);

    // Se o código SISBOV não foi alterado encerra o procedimento deste ponto
    if not(bAux) then begin
      Result := -1;
      Exit;
    end;

    // Verifica código sisbov (R01, R02, R03, R16, R39, R43)
    Result := VerificaCodigoSisbov(CodAnimal, CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov,
      CodAnimalSisbov, NumDVSisbov, 'A', 1, DadosAnimal.CodSituacaoSisbov, 1);
    if Result < 0 then begin
      Exit;
    end;

    // Verifica se o animal ja possuia um código SISBOV, caso possua, identifica
    // que o mesmo deve ser liberado durante o prcessamento
    bLiberarCodSisbov := DadosAnimal.CodPaisSisbov > 0;

    // Verifica se o animal esta recebendo um novo código SISBOV, identifica que o
    // mesmo deve ser reservado (marcado como utilizando) durante o processamento
    bReservarCodSisbov := CodPaisSisbov > 0;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_pais_sisbov = :cod_pais_sisbov '+
      ', cod_estado_sisbov = :cod_estado_sisbov '+
      ', cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov '+
      ', cod_animal_sisbov = :cod_animal_sisbov '+
      ', num_dv_sisbov = :num_dv_sisbov ';

    // Identifica o novo valor para os atributos
    IdentificarParametrosCodSisbov(CodPaisSisbov, CodEstadoSisbov,
      CodMicroRegiaoSisbov, CodAnimalSisbov, NumDVSisbov);

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {--------------------------------------------------------
  Marca código sisbov retirado do animal como não utilizado
  --------------------------------------------------------}
  procedure LiberarCodSisbovRetirado;
  begin
    // Atualiza a situação do código sisbov para "DISP" (1) se não houver nenhum
    // animal válido usando o código
    if DadosAnimal.CodTipoOrigem in [1, 2, 5, 6] then
    begin
      Result := FCodigosSisbov.AlterarSituacaoSisbov(DadosAnimal.CodPaisSisbov,
        DadosAnimal.CodEstadoSisbov, DadosAnimal.CodMicroRegiaoSisbov,
        DadosAnimal.CodAnimalSisbov, 1);
      if Result < 0 then
      begin
        Exit;
      end;
    end;
  end;

  {-----------------------------------------------------
  Marca código sisbov atribuido ao animal como utilizado
  -----------------------------------------------------}
  procedure ReservarCodSisbovUtilizado;
  begin
    // Atualiza a situação do código sisbov para "CAD" (2)
    if DadosAnimal.CodTipoOrigem in [1, 2, 5, 6] then
    begin
      Result := FCodigosSisbov.AlterarSituacaoSisbov(CodPaisSisbov, CodEstadoSisbov,
        CodMicroRegiaoSisbov, CodAnimalSisbov, 2);
      if Result < 0 then
      begin
        Exit;
      end;
    end;
  end;

  {----------------------------------------------
  Altera a data de identificação sisbov do animal
  ----------------------------------------------}
  function AlterarDtaIdentificacaoSisbov(DtaIdentificacaoSisbov: TDateTime): Integer;
  begin
    // Trata origem animal
    if not (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then begin {Nascimento, Compra}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica data de identificacao no sisbov (R42, R44)
    Result := VerificaDtaIdentificacaoSisbov(DadosAnimal.DtaNascimento, DtaIdentificacaoSisbov, DadosAnimal.CodSituacaoSisbov);
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'dta_identificacao_sisbov = :dta_identificacao_sisbov ';

    // Identifica o novo valor para o atributo
    if DtaIdentificacaoSisbov > 0 then begin
      Q.ParamByName('dta_identificacao_sisbov').AsDateTime := Trunc(DtaIdentificacaoSisbov);
    end else begin
      Q.ParamByName('dta_identificacao_sisbov').DataType := ftDateTime;
      Q.ParamByName('dta_identificacao_sisbov').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-----------------------------------------------------------
  Altera o código da fazenda de identificação sisbov do animal
  -----------------------------------------------------------}
  function AlterarCodFazendaIdentificacao(CodFazendaIdentificacao: Integer): Integer;
  var
    CodLocalizacaoIdentificacao: Integer;
    NumImovelIdentificadcao: String;
  begin
    CodLocalizacaoIdentificacao := -1;

    // Trata origem animal
    if not (DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) then begin {Nascimento, Compra, não especificado, carga inicial}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica local de identificacao do animal (R13, R23, R26, R42, R44)
    Result := VerificaLocalIdentificacao(NumImovelIdentificadcao,
      CodLocalizacaoIdentificacao, -1, CodFazendaIdentificacao,
      DadosAnimal.CodSituacaoSisbov);
    if Result < 0 then
    begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_fazenda_identificacao = :cod_fazenda_identificacao, ' +
      'cod_propriedade_identificacao = NULL, ' +
      'cod_localizacao_identificacao = NULL, ' +
      'num_imovel_identificacao = NULL ';

    // Identifica o novo valor para o atributo
    AtribuiParametro(Q, CodFazendaIdentificacao, 'cod_fazenda_identificacao',
      CodFazendaIdentificacao > 0);

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {------------------------------------
  Altera a data de nascimento do animal
  ------------------------------------}
  function AlterarDtaNascimento(DtaNascimento: TDateTime): Integer;
  begin
    // Verifica se usuário está tentando alterar alguma informação que não
    // pode ser alterada se o animal já possuir evento(s) (R08)
    Result := VerificaRegra08(DadosAnimal, DtaNascimento, DadosAnimal.IndAnimalCastrado,
      DadosAnimal.CodRegimeAlimentar, DadosAnimal.CodCategoriaAnimal, DadosAnimal.CodTipoLugar,
      DadosAnimal.CodLoteCorrente, DadosAnimal.CodLocalCorrente, DadosAnimal.CodFazendaCorrente,
      DadosAnimal.NumImovelCorrente, DadosAnimal.CodPropriedadeCorrente,
      DadosAnimal.NumCNPJCPFCorrente, DadosAnimal.CodPessoaCorrente);
    if Result < 0 then begin
      Exit;
    end;

    // Verifica data de nascimento
    Result := VerificaDtaNascimento(DtaNascimento);
    if Result < 0 then begin
      Exit;
    end;

    // Trata origem animal
    if (DadosAnimal.CodTipoOrigem <> 4) then begin
      // Verifica categoria do animal (R12, R15, R29, R34, R35, R36)
      Result := VerificaCategoria(DadosAnimal.CodCategoriaAnimal,
        DadosAnimal.IndSexo, DadosAnimal.IndAnimalCastrado,
        DadosAnimal.CodAptidao, DtaNascimento);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'dta_nascimento = :dta_nascimento ';

    // Identifica o novo valor para o atributo
    if DtaNascimento > 0 then begin
      Q.ParamByName('dta_nascimento').AsDateTime := Trunc(DtaNascimento);
    end else begin
      Q.ParamByName('dta_nascimento').DataType := ftDateTime;
      Q.ParamByName('dta_nascimento').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {------------------------------------------------
  Altera o número do imóvel de nascimento do animal
  ------------------------------------------------}
  function AlterarNumImovelNascimento(NumImovelNascimento: String): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem <> 2 then begin {Compra}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo,
        [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica local de Nascimento (R14, R26)
    Result := VerificaLocalNascimento(NumImovelNascimento, -1);
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_fazenda_nascimento = NULL, ' +
      'cod_propriedade_nascimento = NULL, ' +
      'cod_localizacao_nascimento = NULL, ' +
      'num_imovel_nascimento = :num_imovel_nascimento ';

    // Identifica o novo valor para o atributo
    if NumImovelNascimento <> '' then begin
      Q.ParamByName('num_imovel_nascimento').AsString := NumImovelNascimento;
    end else begin
      Q.ParamByName('num_imovel_nascimento').DataType := ftString;
      Q.ParamByName('num_imovel_nascimento').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-----------------------------------------------------------
  Altera o código da fazenda de nascimento do animal informado
  -----------------------------------------------------------}
  function AlterarCodFazendaNascimento(CodFazendaNascimento: Integer): Integer;
  begin
    // Trata origem animal
    if not (DadosAnimal.CodTipoOrigem in [1, 5, 6]) then begin {Nascimento}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Trata fazenda de nascimento (R23)
    Result := VerificaFazenda(CodFazendaNascimento, True, 'Fazenda de nascimento do animal');
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_fazenda_nascimento = :cod_fazenda_nascimento, ' +
      'cod_propriedade_nascimento = NULL, ' +
      'cod_localizacao_nascimento = NULL, ' +
      'num_imovel_nascimento = NULL ';

    // Identifica o novo valor para o atributo
    if CodFazendaNascimento > 0 then begin
      Q.ParamByName('cod_fazenda_nascimento').AsInteger := CodFazendaNascimento;
    end else begin
      Q.ParamByName('cod_fazenda_nascimento').DataType := ftInteger;
      Q.ParamByName('cod_fazenda_nascimento').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-----------------------------------------------------
  Altera o número do transponder que identifica o animal
  -----------------------------------------------------}
  function AlterarNumTransponder(NumTransponder: String): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem = 4 then begin {Externo}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
    Result := VerificaIdentificadores(NumTransponder,
      DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
      DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
      DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
      DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'num_transponder = :num_transponder ';

    // Identifica o novo valor para o atributo
    if NumTransponder <> '' then begin
      Q.ParamByName('num_transponder').AsString := NumTransponder;
    end else begin
      Q.ParamByName('num_transponder').DataType := ftString;
      Q.ParamByName('num_transponder').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {--------------------------------------------------------------
  Altera o tipo de um dos identificadores possíveis para o animal
  --------------------------------------------------------------}
  function AlterarCodTipoIdentificador(NumIdentificador,
    CodTipoIdentificador: Integer): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem = 4 then begin {Externo}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
    case NumIdentificador of
      1:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          CodTipoIdentificador, DadosAnimal.CodPosicaoIdentificador1,
          DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
          DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
          DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
      2:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
          CodTipoIdentificador, DadosAnimal.CodPosicaoIdentificador2,
          DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
          DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
      3:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
          DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
          CodTipoIdentificador, DadosAnimal.CodPosicaoIdentificador3,
          DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
      4:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
          DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
          DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
          CodTipoIdentificador, DadosAnimal.CodPosicaoIdentificador4);
    else
      Raise Exception.CreateFmt('Número de identificador inválido: %s (1-4)', [IntToStr(NumIdentificador)]);
    end;
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_tipo_identificador_'+IntToStr(NumIdentificador)+
      ' = :cod_tipo_identificador_'+IntToStr(NumIdentificador)+' ';

    // Identifica o novo valor para o atributo
    if CodTipoIdentificador > 0 then begin
      Q.ParamByName('cod_tipo_identificador_'+IntToStr(NumIdentificador)).AsInteger := CodTipoIdentificador;
    end else begin
      Q.ParamByName('cod_tipo_identificador_'+IntToStr(NumIdentificador)).DataType := ftInteger;
      Q.ParamByName('cod_tipo_identificador_'+IntToStr(NumIdentificador)).Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-----------------------------------------------------------------
  Altera a posição de um dos identificadores possíveis para o animal
  -----------------------------------------------------------------}
  function AlterarCodPosicaoIdentificador(NumIdentificador,
    CodPosicaoIdentificador: Integer): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem = 4 then begin {Externo}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica NumTransponder, Identificadores e Posicoes (R29, R46, R47, R48, R49)
    case NumIdentificador of
      1:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, CodPosicaoIdentificador,
          DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
          DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
          DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
      2:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
          DadosAnimal.CodTipoIdentificador2, CodPosicaoIdentificador,
          DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
          DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
      3:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
          DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
          DadosAnimal.CodTipoIdentificador3, CodPosicaoIdentificador,
          DadosAnimal.CodTipoIdentificador4, DadosAnimal.CodPosicaoIdentificador4);
      4:
        Result := VerificaIdentificadores(DadosAnimal.NumTransponder,
          DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodPosicaoIdentificador1,
          DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodPosicaoIdentificador2,
          DadosAnimal.CodTipoIdentificador3, DadosAnimal.CodPosicaoIdentificador3,
          DadosAnimal.CodTipoIdentificador4, CodPosicaoIdentificador);
    else
      Raise Exception.CreateFmt('Número de identificador inválido: %s (1-4)', [IntToStr(NumIdentificador)]);
    end;
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_posicao_identificador_'+IntToStr(NumIdentificador)+
      ' = :cod_posicao_identificador_'+IntToStr(NumIdentificador)+' ';

    // Identifica o novo valor para o atributo
    if CodPosicaoIdentificador > 0 then begin
      Q.ParamByName('cod_posicao_identificador_'+IntToStr(NumIdentificador)).AsInteger := CodPosicaoIdentificador;
    end else begin
      Q.ParamByName('cod_posicao_identificador_'+IntToStr(NumIdentificador)).DataType := ftInteger;
      Q.ParamByName('cod_posicao_identificador_'+IntToStr(NumIdentificador)).Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {------------------------------------------
  Altera o código da raça do animal informado
  ------------------------------------------}
  function AlterarCodRaca(CodRaca: Integer): Integer;
  begin
    // Verifica Especie, Raca e Aptidao (R22, R29, R50)
    Result := VerificaEspecieRacaAptidao(DadosAnimal.CodEspecie, CodRaca, DadosAnimal.CodAptidao);
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_raca = :cod_raca ';

    // Identifica o novo valor para o atributo
    Q.ParamByName('cod_raca').AsInteger := CodRaca;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {---------------------------------------------
  Altera o código da pelagem do animal informado
  ---------------------------------------------}
  function AlterarCodPelagem(CodPelagem: Integer): Integer;
  begin
    // Verifica Pelagem (R29)
    Result := VerificaPelagem(CodPelagem);
    if Result < 0 then begin
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_pelagem = :cod_pelagem ';

    // Identifica o novo valor para o atributo
    Q.ParamByName('cod_pelagem').AsInteger := CodPelagem;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-----------------------------------------
  Altera o número do GTA do animal informado
  -----------------------------------------}
  function AlterarNumGta(NumGta: String): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem <> 2 then begin {Compra}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica número do GTA
    if NumGTA <> '' then begin
      Result := TrataString(NumGTA, 13, 'Número do GTA');
      if Result < 0 then begin
        Exit;
      end;
    end;

{    if (NumGTA = '') and (DadosAnimal.DtaEmissaoGta > 0) then begin
      Mensagens.Adicionar(1282, Self.ClassName, NomeMetodo, []);
      Result := -1282;
      Exit;
    end;    } // Convencionado em 17/03/2002

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'num_gta = :num_gta ';

    // Identifica o novo valor para o atributo
    if NumGta <> '' then begin
      Q.ParamByName('num_gta').AsString := NumGta;
    end else begin
      Q.ParamByName('num_gta').DataType := ftString;
      Q.ParamByName('num_gta').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {--------------------------------------------------
  Altera a data de emissão do GTA do animal informado
  --------------------------------------------------}
  function AlterarDtaEmissaoGta(DtaEmissaoGta: TDateTime): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem <> 2 then begin {Compra}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Verifica data do Gta
    if DtaEmissaoGta > 0 then begin
      if DtaEmissaoGta < DadosAnimal.DtaNascimento then begin
        Mensagens.Adicionar(1094, Self.ClassName, NomeMetodo, []);
        Result := -1094;
        Exit;
      end;
      if DtaEmissaoGta > DtaSistema then begin
        { TODO : Criar mensagem Data do GTA não pode ser maior que a data atual }
        Mensagens.Adicionar(1283, Self.ClassName, NomeMetodo, []);
        Result := -1283;
        Exit;
      end;
{      if DadosAnimal.NumGTA = '' then begin
        Mensagens.Adicionar(1095, Self.ClassName, NomeMetodo, []);
        Result := -1095;
        Exit;
      end;        } // Convencionado em 17/03/2002
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'dta_emissao_gta = :dta_emissao_gta ';

    // Identifica o novo valor para o atributo
    if DtaEmissaoGta > 0 then begin
      Q.ParamByName('dta_emissao_gta').AsDateTime := Trunc(DtaEmissaoGta);
    end else begin
      Q.ParamByName('dta_emissao_gta').DataType := ftDateTime;
      Q.ParamByName('dta_emissao_gta').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-------------------------------------------------
  Altera o número da nota fiscal do animal informado
  -------------------------------------------------}
  function AlterarNumNotaFiscal(NumNotaFiscal: Integer): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem <> 2 then begin {Compra}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'num_nota_fiscal = :num_nota_fiscal ';

    // Identifica o novo valor para o atributo
    if NumNotaFiscal > 0 then begin
      Q.ParamByName('num_nota_fiscal').AsInteger := NumNotaFiscal;
    end else begin
      Q.ParamByName('num_nota_fiscal').DataType := ftInteger;
      Q.ParamByName('num_nota_fiscal').Clear;
    end;

    // Identifica passo como bem sucedido
    Result := 0;
  end;

  {-------------------------------------------------
  Altera o técnico do animail
  -------------------------------------------------}
  function AlterarTecnico(NumCNPJCPFTecnico: String): Integer;
  var
    CodPessoaTecnico, Retorno: Integer;
  begin
    CodPessoaTecnico :=  BuscaCodTecnico(NumCNPJCPFTecnico);
     // Concatena a string SQL o atributo a ser alterado
    Q.SQL.Text := Q.SQL.Text +
      'cod_pessoa_tecnico = :cod_pessoa_tecnico ';

    // Identifica o novo valor para o atributo
    if CodPessoaTecnico > 0 then begin
      Q.ParamByName('cod_pessoa_tecnico').AsInteger := CodPessoaTecnico;
      Retorno := 0;
    end else begin
      Q.ParamByName('cod_pessoa_tecnico').DataType := ftInteger;
      Q.ParamByName('cod_pessoa_tecnico').Clear;
      Retorno := CodPessoaTecnico;
    end;
    // Identifica passo como bem sucedido
    Result := Retorno;
  end;

  {--------------------------
  Altera a filiação do animal
  --------------------------}
  function AlterarAtributoFiliacao(CodTipoFiliacao, SglFazendaManejo, CodAnimalManejo: String): Integer;
  var
    CodFazendaManejo: Integer;
  begin
    // Obtem código da fazenda, caso a mesma tenha sido informada
    if SglFazendaManejo <> '' then begin
      Result := ObterCodFazenda(SglFazendaManejo, CodFazendaManejo);
      if Result < 0 then Exit;
    end else begin
      CodFazendaManejo := -1;
    end;

    // Identifica se o pai é um RM
    if CodTipoFiliacao = 'P' then begin
      Q.Close;
      Q.SQL.Text :=
        'select '+
        '  1 '+
        'from '+
        '  tab_reprodutor_multiplo '+
        'where '+
        '  cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and cod_fazenda_manejo = :cod_fazenda_manejo '+
        '  and cod_reprodutor_multiplo_manejo = :cod_reprodutor_multiplo_manejo ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      Q.ParamByName('cod_reprodutor_multiplo_manejo').AsString := CodAnimalManejo;
      Q.Open;
      if not Q.IsEmpty then begin
        CodTipoFiliacao := 'G';
      end;
      Q.Close;
    end;

    Result := AlterarFiliacao(CodAnimal, -1, CodFazendaManejo, CodAnimalManejo,
      '', CodTipoFiliacao);
  end;

  function AlterarDtaCompra(EDtaCompra: TDateTime): Integer;
  begin
    // Trata origem animal
    if DadosAnimal.CodTipoOrigem <> 2 then begin {Compra}
      Mensagens.Adicionar(1279, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -1279;
      Exit;
    end;

    if not (EDtaCompra > 0) then
    begin
      Mensagens.Adicionar(2216, Self.ClassName, NomeMetodo, []);
      Result := -2216;
      Exit;
    end;

    if (DadosAnimal.DtaNascimento > 0) and (DadosAnimal.DtaCompra < DadosAnimal.DtaNascimento) then
    begin
      Mensagens.Adicionar(675, Self.ClassName, NomeMetodo, []);
      Result := -675;
      Exit;
    end;

    if DadosAnimal.DtaInsercaoRegistro < EDtaCompra then
    begin
      Mensagens.Adicionar(2212, Self.ClassName, NomeMetodo, [Valor2, DadosAnimal.DtaInsercaoRegistro]);
      Result := -2212;
      Exit;
    end;

    Q.SQL.Text := Q.SQL.Text + ' dta_compra = :dta_compra ';
    Q.ParamByName('dta_compra').AsDateTime := EDtaCompra;

    Result := 0;
  end;


  function AlterarNomAnimal(ENomAnimal: String): Integer;
  begin
    if Length(Trim(ENomAnimal)) > 60 then
    begin
      Mensagens.Adicionar(2213, Self.ClassName, NomeMetodo, []);
      Result := -2213;
      Exit;
    end;

    Q.SQL.Text := Q.SQL.Text + ' nom_animal = :nom_animal ';
    if Length(Trim(ENomAnimal)) > 0 then
    begin
      Q.ParamByName('nom_animal').AsString := ENomAnimal;
    end
    else
    begin
      Q.ParamByName('nom_animal').DataType := ftString;
      Q.ParamByName('nom_animal').Clear;
    end;

    Result := 0;
  end;

  function AlterarDesApelido(EDesApelido: String): Integer;
  begin
    if Length(Trim(EDesApelido)) > 20 then
    begin
      Mensagens.Adicionar(2214, Self.ClassName, NomeMetodo, []);
      Result := -2214;
      Exit;
    end;

    Q.SQL.Text := Q.SQL.Text + ' des_apelido = :des_apelido ';
    if Length(Trim(EDesApelido)) > 0 then
    begin
      Q.ParamByName('des_apelido').AsString := EDesApelido;
    end
    else
    begin
      Q.ParamByName('des_apelido').DataType := ftString;
      Q.ParamByName('des_apelido').Clear;
    end;

    Result := 0;
  end;

  function AlterarSexoAnimal(EIndSexoAnimal: String): Integer;
  begin
    if (UpperCase(EIndSexoAnimal) <> 'F') and (UpperCase(EIndSexoAnimal) <> 'M') then
    begin
      Mensagens.Adicionar(690, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
      Result := -690;
      Exit;
    end;

    with QueryLocal do
    begin
      SQL.Clear;
      SQL.Add(' select ind_sexo, des_categoria_animal from tab_categoria_animal ');
      SQL.Add('  where cod_categoria_animal = :cod_categoria_animal ');
      ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
      Open;

      if IsEmpty then
      begin
        Mensagens.Adicionar(873, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo]]);
        Result := -873;
        Exit;
      end;

      if (FieldByName('ind_sexo').AsString <> EIndSexoAnimal) and (FieldByName('ind_sexo').AsString <> 'A') then
      begin
        Mensagens.Adicionar(2215, Self.ClassName, NomeMetodo, [EIndSexoAnimal, FieldByName('des_categoria_animal').AsString]);
        Result := -2215;
        Exit;
      end;
    end;

    Q.SQL.Text := Q.SQL.Text + ' ind_sexo = :ind_sexo ';
    Q.ParamByName('ind_sexo').AsString := EIndSexoAnimal;

    Result := 0;
  end;

{---------------------------------------------------------
procedimento genérico de alteração de atributos de animais
---------------------------------------------------------}
begin
  bIndAlterarAnimalSisbov := False;
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(CodMetodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end; 

  // Verifica se o cadastro já foi efetivado. Porém há tipos de atributos que não necessitam desta verificação, como no if abaixo
  if not (Atributo('cod_pessoa_tecnico') in [12, 13, 38]) then begin
    Result := CadastroEfetivado('tab_animal', 'cod_animal', Conexao.CodProdutorTrabalho, CodAnimal, True);
    if Result < 0 then begin
      Exit;
    end;
    if Result = 1 then begin
      Mensagens.Adicionar(712, Self.ClassName, NomeMetodo, []);
      Result := -712;
      Exit;
    end;
  end;

  // Verifica se animal existe e pega dados necessários caso o mesmo exista
  Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
  if Result < 0 then begin
    Exit;
  end;

  //**************************
  //* Verificação das Regras *
  //**************************

  FUsarSisbov := False;
  FCodReprodutorMultiplo := -1;
  FCodAnimalPai := -1;
  FCodAnimalMae := -1;
  FCodAnimalReceptor := -1;

  // Processamento de alteração
  Q := THerdomQuery.Create(Conexao, nil);
  QueryLocal := THerdomQuery.Create(Conexao, nil);
  try
    // Inicializa a query que valida se o animal já foi exportado
    with QueryLocal do
    begin
      SQL.Clear;
      SQL.Add('select cod_arquivo_sisbov');
      SQL.Add('  from tab_codigo_exportacao');
      SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
      SQL.Add('   and cod_animal = :cod_animal');
    end;

    try
      // Verifica se alteração solicitada refere-se a alteração de filiação
      if CodAtributo = Atributo('cod_manejo_pai') then begin
        Result := AlterarAtributoFiliacao('P', Valor1, Valor2);
        Exit;
      end else if CodAtributo = Atributo('cod_manejo_mae') then begin
        Result := AlterarAtributoFiliacao('M', Valor1, Valor2);
        Exit;
      end else if CodAtributo = Atributo('cod_manejo_receptor') then begin
        Result := AlterarAtributoFiliacao('R', Valor1, Valor2);
        Exit;
      end else if (CodAtributo = Atributo('cod_animal_certificadora'))
      and (ValorParametro(8) = 'S') then begin
        Mensagens.Adicionar(1357, Self.ClassName, NomeMetodo, []);
        Result := -1357;
        Exit;
      end;

      // Auxiliares para tratamento de atualiações feitas sobre Cód. Sisbov
      bLiberarCodSisbov := False;
      bReservarCodSisbov := False;

      // Inicia string SQL de atualização
      Q.SQL.Text :=
        'update tab_animal set ';

      // Identifica/consiste atributo específico a ser alterado
      if CodAtributo = Atributo('cod_animal_manejo') then begin
        Result := AlterarCodAnimalManejo(Valor1, Valor2);
      end else if CodAtributo = Atributo('cod_animal_certificadora') then begin
        Result := AlterarCodAnimalCertificadora(Valor2);
      end else if CodAtributo = Atributo('cod_animal_sisbov') then begin
        Result := AlterarCodAnimalSisbov(Valor2);
        // Se o código sisbov não foi alterado
        if Result = -1 then begin
          Result := 0;
          Exit;
        end;
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('dta_identificacao_sisbov') then begin
        sTMP := Valor2;
        Result := AlterarDtaIdentificacaoSisbov( StrToDate(sTMP) );
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('cod_fazenda_identificacao') then begin
        Result := AlterarCodFazendaIdentificacao(Valor2);
      end else if CodAtributo = Atributo('dta_nascimento') then begin
        sTMP := Valor2;
        Result := AlterarDtaNascimento( StrToDate(sTMP) );
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('num_imovel_nascimento') then begin
        Result := AlterarNumImovelNascimento(Valor2);
      end else if CodAtributo = Atributo('cod_fazenda_nascimento') then begin
        Result := AlterarCodFazendaNascimento(Valor2);
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('ind_sexo') then begin
        Result := AlterarSexoAnimal(Valor2); // Não implementado
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('dta_compra') then begin
        sTMP := Valor2;
        Result := AlterarDtaCompra( StrToDate(sTMP) );
      end else if CodAtributo = Atributo('nom_animal') then begin
        Result := AlterarNomAnimal(Valor2);
      end else if CodAtributo = Atributo('des_apelido') then begin
        Result := AlterarDesApelido(Valor2);
      end else if CodAtributo = Atributo('num_transponder') then begin
        Result := AlterarNumTransponder(Valor2);
      end else if CodAtributo = Atributo('cod_tipo_identificador_1') then begin
        Result := AlterarCodTipoIdentificador(1, Valor2);
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('cod_posicao_identificador_1') then begin
        Result := AlterarCodPosicaoIdentificador(1, Valor2);
      end else if CodAtributo = Atributo('cod_tipo_identificador_2') then begin
        Result := AlterarCodTipoIdentificador(2, Valor2);
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('cod_posicao_identificador_2') then begin
        Result := AlterarCodPosicaoIdentificador(2, Valor2);
      end else if CodAtributo = Atributo('cod_tipo_identificador_3') then begin
        Result := AlterarCodTipoIdentificador(3, Valor2);
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('cod_posicao_identificador_3') then begin
        Result := AlterarCodPosicaoIdentificador(3, Valor2);
      end else if CodAtributo = Atributo('cod_tipo_identificador_4') then begin
        Result := AlterarCodTipoIdentificador(4, Valor2);
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('cod_posicao_identificador_4') then begin
        Result := AlterarCodPosicaoIdentificador(4, Valor2);
      end else if CodAtributo = Atributo('cod_raca') then begin
        Result := AlterarCodRaca(Valor2);
        bIndAlterarAnimalSisbov := True;
      end else if CodAtributo = Atributo('cod_pelagem') then begin
        Result := AlterarCodPelagem(Valor2);
      {end else if CodAtributo = Atributo('ind_animal_castrado') then begin
        Result := AlterarIndAnimalCastrado(Valor2);} // Não implementado
      {end else if CodAtributo = Atributo('cod_regime_alimentar') then begin
        Result := AlterarCodRegimeAlimentar(Valor2);} // Não implementado
      {end else if CodAtributo = Atributo('cod_categoria_animal') then begin
        Result := AlterarCodCategoriaAnimal(Valor2);} // Não implementado
      {end else if CodAtributo = Atributo('cod_fazenda_corrente') then begin
        Result := AlterarCodFazendaCorrente(Valor2);} // Não implementado
      {end else if CodAtributo = Atributo('cod_local_corrente') then begin
        Result := AlterarCodLocalCorrente(Valor2);} // Não implementado
      {end else if CodAtributo = Atributo('cod_lote_corrente') then begin
        Result := AlterarCodLoteCorrente(Valor2);} // Não implementado
      {end else if CodAtributo = Atributo('txt_observacao') then begin
        Result := AlterarTxtObservacao(Valor2);} // Não implementado
      end else if CodAtributo = Atributo('num_gta') then begin
        Result := AlterarNumGta(Valor2);
      end else if CodAtributo = Atributo('dta_emissao_gta') then begin
        sTMP := Valor2;
        Result := AlterarDtaEmissaoGta( StrToDate(sTMP) );
      end else if CodAtributo = Atributo('num_nota_fiscal') then begin
        Result := AlterarNumNotaFiscal(Valor2);
      end else if CodAtributo = Atributo('cod_pessoa_tecnico') then begin
        Result := AlterarTecnico(Valor2);
      end else begin
        Mensagens.Adicionar(1275, Self.ClassName, NomeMetodo, [IntToStr(CodAtributo)]);
        Result := -1275;
      end;

      // Completa e executa string SQL caso a consistência do atributo tenha sido bem sucedida
      if Result = 0 then begin
        // Finaliza string SQL identificando animal a ser alterado
        Q.SQL.Text := Q.SQL.Text +
          'where '+
          '  cod_pessoa_produtor = :cod_pessoa_produtor '+
          '  and cod_animal = :cod_animal ';

        // Identifica o animal a ser alterado
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;

        // Inicializa transação com o servidor de banco
        BeginTran;

        // Marca código sisbov retirado do animal como não utilizado
        if bLiberarCodSisbov then begin
          LiberarCodSisbovRetirado;
        end;

        // Marca código sisbov atribuido ao animal como utilizado
        if bReservarCodSisbov then begin
          ReservarCodSisbovUtilizado;
        end;

        // Realiza a alteração definitiva
        Q.ExecSQL;

        // Busca os novos dados do animal para enviar para o SISBOV
        Result := ObtemDadosAnimal(CodAnimal, DadosAnimal);
        if Result < 0 then begin
          Exit;
        end;

        if bIndAlterarAnimalSisbov = True then
        begin
          Result := AlterarAnimalSISBOV(DadosAnimal, DadosAnimal.DtaIdentificacaoSisbov, DadosAnimal.DtaNascimento,
            DadosAnimal.NumRGD, DadosAnimal.CodPropriedadeNascimento, DadosAnimal.CodFazendaNascimento, DadosAnimal.CodPaisSISBOV,
            DadosAnimal.CodEstadoSISBOV, DadosAnimal.CodMicroRegiaoSISBOV, DadosAnimal.CodAnimalSISBOV, DadosAnimal.NumDVSISBOV,
            DadosAnimal.CodRaca, DadosAnimal.CodTipoIdentificador1, DadosAnimal.CodTipoIdentificador2, DadosAnimal.CodTipoIdentificador3,
            DadosAnimal.CodTipoIdentificador4, DadosAnimal.IndSexo, True);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;
        end;

        // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
        // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
        Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, CodMetodo);
        if Result < 0 then begin
          Rollback;
          Exit;
        end;

        // Encerra transação com servidor de banco
        Commit;

        // Identifica procedimento como bem sucedido
        Result := 0;
      end;
    except
      on E: Exception do begin
        Rollback; // desfaz transação se houver uma ativa
        Mensagens.Adicionar(1274, Self.ClassName, NomeMetodo, [ListaAtributos[CodAtributo], E.Message]);
        Result := -1274;
        Exit;
      end;
    end;
  finally
    Q.Free;
    QueryLocal.Free;
  end;
end;

function TIntAnimais.CalcularCompRacial(CodAnimal: Integer): Integer;
const
  NomMetodo: String = 'CalcularCompRacial';
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(411) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se o animal é válido
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ');
      Q.SQL.Add(' where cod_animal = :cod_animal ');
      Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add(' and   dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(679, Self.ClassName, NomMetodo, []);
         Result := -679;
         Exit;
      end;
      Q.Close;
      Q.SQL.Clear;
      //calcula a composição racial
{$IFDEF MSSQL}
      Q.SQL.Add('execute dbo.spt_calcula_comp_racial :cod_animal, :cod_pessoa_produtor, null, null, 0 ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ExecSQL;
      // Cofirma transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1338, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1338;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.CalcularCompRacialDescendentes(
  CodAnimal: Integer; CodAnimalRM: Integer): Integer;
const
  NomMetodo: String = 'CalcularCompRacialDescendentes';
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(412) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se o animal é válido
      Q.SQL.Clear;
      if CodAnimal > 0 then
      begin
{$IFDEF MSSQL}
        Q.SQL.Add('select 1 from tab_animal ');
        Q.SQL.Add(' where cod_animal = :cod_animal ');
        Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add(' and   dta_fim_validade is null ');
{$ENDIF}
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

      end else //Reprodutor Múltiplo
      begin
{$IFDEF MSSQL}
        Q.SQL.Add('select 1 from tab_reprodutor_multiplo');
        Q.SQL.Add(' where cod_reprodutor_multiplo = :cod_reprodutor_multiplo ');
        Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
        Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodAnimalRM;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      end;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(679, Self.ClassName, NomMetodo, []);
         Result := -679;
         Exit;
      end;
      Q.Close;
      Q.SQL.Clear;
      //calcula a composição racial
{$IFDEF MSSQL}
      Q.SQL.Add('execute dbo.spt_comp_racial_descendentes :cod_animal,:cod_animal_rm, :cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('cod_animal_rm').AsInteger := CodAnimalRM;
      Q.ExecSQL;
      // Cofirma transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1341, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1341;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.RecalcularTodasCompRacial: Integer;
const
  NomMetodo: String = 'ReCalcularTodasCompRacial';
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(413) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      //calcula a composição racial
{$IFDEF MSSQL}
      Q.SQL.Add('execute dbo.spt_recalcula_comp_racial :cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ExecSQL;
      // Cofirma transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1342, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1342;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.LimparComposicaoRacial(CodAnimal: Integer): Integer;
const
  NomMetodo: String = 'LimparComposicaoRacial';
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(416) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se o animal é válido
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_animal ');
      Q.SQL.Add(' where cod_animal = :cod_animal ');
      Q.SQL.Add(' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add(' and   dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(679, Self.ClassName, NomMetodo, []);
         Result := -679;
         Exit;
      end;
      Q.Close;
      Q.SQL.Clear;
      //Limpa a composição racial
{$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_composicao_racial ');
      Q.SQL.Add('where cod_animal = :cod_animal ');
      Q.SQL.Add('and   cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ExecSQL;
      // Cofirma transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1354, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1354;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarGenealogia(CodAnimais: String;
  CodFazendaManejo: Integer; CodAnimaisManejo: String): Integer;
const
  NomMetodo: String = 'PesquisarGenealogia';
var
  Param: TValoresParametro;
  Q, Q1 : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(434) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se pelo menos um parâmetro foi informado
  if (CodFazendaManejo <= 0) and (CodAnimaisManejo = '') and (CodAnimais = '') then begin
    Mensagens.Adicionar(1445, Self.ClassName, NomMetodo, []);
    Result := -1445;
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    // Se códigos de animais foram informados, verifica se outras informações não foram
    if (CodAnimais <> '') then begin
      if (CodFazendaManejo > 0) or (CodAnimaisManejo <> '') then begin
        Mensagens.Adicionar(1446, Self.ClassName, NomMetodo, []);
        Result := -1446;
        Exit;
      end;
      Result := VerificaParametroMultiValor(CodAnimais, Param);
      if Result < 0 then begin
        Exit;
      end;
    end;

    // Se códigos de manejo foram informados, verifica se outras informações não foram
    // e verifica também se fazenda foi informada já que ela é necessária
    if CodAnimaisManejo <> '' then begin
      if (CodAnimais <> '') then begin
        Mensagens.Adicionar(1446, Self.ClassName, NomMetodo, []);
        Result := -1446;
        Exit;
      end;
      Result := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo');
      if Result < 0 then begin
        Exit;
      end;
      Result := VerificaParametroMultiValorString(CodAnimaisManejo, Param);
      if Result < 0 then begin
        Exit;
      end;
    end;
  finally
    Param.Free;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  Q1 := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Cria a temporária onde serão armazenados os ascendendes dos animais
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('if object_id(''tempdb..#tmp_animais_genealogia'') is null '+
                '  create table #tmp_animais_genealogia '+
                '  ( '+
                '      CodAnimal int null '+
                '    , CodAnimalAncestral int null '+
                '    , SglAncestral varchar(5) null '+
                '    , NumAncestral int null '+
                '    , SglFazendaManejo char(2) null '+
                '    , CodAnimalManejo varchar(8) null '+
                '    , CodAnimalSisBov varchar(20) null '+
                '    , DtaNascimento smalldatetime null '+
                '    , NomAnimal varchar(60) null '+
                '    , DesApelido varchar(20) null '+
                '    , SglPelagem char(4) null '+
                '    , DesPelagem varchar(30) null '+
                '    , SglAssociacaoRaca varchar(10) null '+
                '    , SglGrauSangue char(5) null '+
                '    , DesGrauSangue varchar(40) null '+
                '    , NumRGD varchar(20) null '+
                '    , SglRaca char(3) null '+
                '    , DesRaca varchar(35) null '+
                '    , IndSexo varchar(1) null '+
                '    , SexoRacaDtaNascimento varchar(16) null '+
                '    , AssociacaoRacaGrauSangue varchar(10) null '+
                '    , DesComposicaoRacial varchar(50) null )');
{$ENDIF}
      Q.ExecSQL;
      Q.Close;
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add(' truncate table #tmp_animais_genealogia ');
{$ENDIF}
      Q.ExecSQL;
      Q.Close;
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add(' select cod_pessoa_produtor, cod_animal '+
                ' from tab_animal ');
      if CodAnimais <> '' then begin
         Q.SQL.Add(' where cod_animal in (' + CodAnimais + ')');
      end else begin
         Q.SQL.Add(' where cod_animal_manejo in ('+ CodAnimaisManejo + ')');
         Q.SQL.Add(' and   cod_fazenda_manejo = :CodFazendaManejo ');
      end;
      Q.SQL.Add(' and   cod_pessoa_produtor = :CodPessoaProdutor ');

      if (Conexao.CodPapelUsuario = 3) then begin
        Q.SQL.Add('and (cod_pessoa_tecnico = :CodPessoaTecnico ' +
                  'or   cod_pessoa_tecnico is null) ');
      end;

{$ENDIF}
      if CodAnimaisManejo <> '' then
         Q.ParamByName('CodFazendaManejo').AsInteger := CodFazendaManejo;
      Q.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;

      if (Conexao.CodPapelUsuario = 3) then begin
        Q.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;

      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(1447, Self.ClassName, NomMetodo, []);
         Result := -1447;
         Exit;
      end;
      while not Q.Eof do begin
            // calcula os ascendentes para cada animal da lista
{$IFDEF MSSQL}
            Q1.SQL.Add('execute dbo.spt_buscar_ascendentes :cod_animal, :cod_pessoa_produtor ');
{$ENDIF}
            Q1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q1.ParamByName('cod_animal').AsInteger := Q.FieldByName('cod_animal').AsInteger;
            Q1.ExecSQL;
            Q.Next;
      end;

      Query.Close;
      Query.SQL.Clear;
      Query.SQL.Add(' select distinct ' +
                    ' CodAnimal, '+
                    ' SglAncestral, '+
                    ' NumAncestral, '+
                    ' CodAnimalAncestral, '+
                    ' SglFazendaManejo, '+
                    ' CodAnimalManejo, '+
                    ' CodAnimalSisBov, '+
                    ' DtaNascimento, '+
                    ' NomAnimal, '+
                    ' DesApelido, '+
                    ' SglPelagem, '+
                    ' DesPelagem, '+
                    ' SglAssociacaoRaca, '+
                    ' DesGrauSangue, '+
                    ' SglGrauSangue, '+
                    ' NumRGD, '+
                    ' SglRaca, '+
                    ' DesRaca, '+
                    ' IndSexo, '+
                    ' SexoRacaDtaNascimento, '+
                    ' AssociacaoRacaGrauSangue, '+
                    ' SexoRacaDtaNascimento, '+
                    ' AssociacaoRacaGrauSangue, '+
                    ' DesComposicaoRacial '+
                    ' from #tmp_animais_genealogia ' +
                    ' order by CodAnimal, NumAncestral ');
      Query.Open;

      if (Conexao.CodPapelUsuario = 3) then begin
         Mensagens.Adicionar(1697, Self.ClassName, NomMetodo, []);
      end;

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1448, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1448;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.DefinirDiagnosticoPrenhez(CodEvento: Integer;
  CodAnimais: String; CodFazendaManejo: Integer;
  CodAnimaisManejo, IndVacasPrenhas: String): Integer;
const
  Metodo : Integer = 438;
  NomeMetodo : String = 'DefinirDiagnosticoPrenhez';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  //Converte os códigos manejo para letra maiúscula
  if CodAnimaisManejo <> '' then
     CodAnimaisManejo := uppercase(CodAnimaisManejo);
  // Limpa variável que armazena animais processados
  FIntAnimaisProcessados := '|';

  // Limpa variáveis de controle
  QtdProcessados := 0;
  QtdRelacionados := 0;
  QtdAnimalIncompativel := 0;
  QtdRelacionadoIncompativel := 0;
  NumNivelChamada := 0;

  // Chama função interna para definição do peso dos animais
  Result := DefinirDiagnosticoExame(CodFazendaManejo, CodAnimaisManejo, CodAnimais, IndVacasPrenhas, CodEvento, 'S',28);
  if Result = 0 then ZerarValoresUltimaPesquisa;
end;

function TIntAnimais.DefinirExameAndrologico(CodEvento: Integer;
  CodAnimais: String; CodFazendaManejo: Integer;
  CodAnimaisManejo, IndTourosAptos: String): Integer;
const
  Metodo : Integer = 439;
  NomeMetodo : String = 'DefinirExameAndrologico';
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  //Converte os códigos manejo para letra maiúscula
  if CodAnimaisManejo <> '' then
     CodAnimaisManejo := uppercase(CodAnimaisManejo);
  // Limpa variável que armazena animais processados
  FIntAnimaisProcessados := '|';

  // Limpa variáveis de controle
  QtdProcessados := 0;
  QtdRelacionados := 0;
  QtdAnimalIncompativel := 0;
  QtdRelacionadoIncompativel := 0;
  NumNivelChamada := 0;

  // Chama função interna para definição do peso dos animais
  Result := DefinirDiagnosticoExame(CodFazendaManejo, CodAnimaisManejo, CodAnimais, IndTourosAptos, CodEvento, 'S',25);
  if Result = 0 then ZerarValoresUltimaPesquisa;
end;

function TIntAnimais.GerarRelatorioGenealogia(CodAnimais: String;
  CodFazendaManejo: Integer; CodAnimaisManejo: String): String;
type
  TArea = record
    Altura: Extended;
    Largura: Extended;
  end;
const
  Metoto: Integer = 440;
  NomeMetodo: String = 'PesquisarGenealogia';
  CodRelatorio: Integer = 13;
  Pagina: TArea = (Altura: 17.10; Largura: 29.70); // Define a área útil da página
  Celula: TArea = (Altura: 2.00; Largura: 6.00); // Define a área útil de cada célula
  ConstConversao: Extended = 28.3501; // Const. que transforma as coordenada de cm para PDF
  ConstAlturaLinha: Integer = 10; // Valor da altura a linha a ser incrementado a linha atual após a sua conclusão
var
  PDF: TRelatorioPadrao;
  X, Retorno: Integer;
  iNumMaxColunas: Integer;
  iMargemPagSup, iMargemPagEsq: Integer;
  iMargemCelSup, iMargemCelEsq: Integer;
  iLarguraColunas, iAlturaLinhas: Integer;
  iAux, jAux, kAux, yAux, xAux, zAux, lAux, cAux: Integer;
  Caminho, sAux: String;
begin
  Result := '';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metoto) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Verifica se pelo menos um parâmetro foi informado
  if (CodFazendaManejo <= 0) and (CodAnimaisManejo = '') and (CodAnimais = '') then begin
    Mensagens.Adicionar(1445, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Pesquisa por genealogia de acordo com os critérios informados
  Retorno := PesquisarGenealogia(CodAnimais, CodFazendaManejo, CodAnimaisManejo);
  if Retorno < 0 then Exit;

  // Verifica se existem registro para serem consultados
  if Query.IsEmpty then begin
    Mensagens.Adicionar(1015, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Prepara dados para início da geração do arquivo
  PDF := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    try
      // Identifica dados padrões para o relatório
      PDF.TipoDoArquvio := ctaPDF; // Sempre formato PDF

      // Inicializa/Carrega dados do relatório
      Retorno := PDF.InicializarRelatorio(CodRelatorio);
      if Retorno < 0 then Exit;

      // Identifica margens
      yAux := Trunc(0.36 * ConstConversao);
      iMargemPagEsq := (PDF.PageWidth - Trunc(Pagina.Largura * ConstConversao)) div 2;
      iMargemPagSup := PDF.AlturaCabecalho + yAux +
        (PDF.PageHeight - (yAux + PDF.AlturaCabecalho + PDF.AlturaRodape) -
        Trunc(Pagina.Altura * ConstConversao)) div 2;

      // Identifica o número máximo de colunas a serem apresentadas
      iNumMaxColunas := Trunc(Pagina.Largura / Celula.Largura);

      // Identifica a largura das colunas
      iLarguraColunas := Trunc(Pagina.Largura * ConstConversao) div iNumMaxColunas;

      // Identifica margem esquerda para as células
      iMargemCelEsq := (iLarguraColunas - Trunc(Celula.Largura * ConstConversao)) div 2;

      // Inicializa geração do relatório
      PDF.LineWidth := 1;

      // Apresenta informações dos animais
      Query.First;

      // Percorre o result set obtido apresentando os dados no relatório
      while not Query.EOF do begin
        // Se não for a primeiro registro da base, gera uma nova página
        if not Query.BOF then begin
          PDF.NovaPagina;
        end;

        // Define posição vertical da descrição do grau de parentesco da árvore
        yAux := iMargemPagSup - Trunc(0.18 * ConstConversao);

        // Imprime descrição do grau de parentesco na árvore
        PDF.Font.Name := poCourierBold;
        PDF.Font.Size := 10;
        for kAux := 0 to 3 do begin
          // Identifica a posição inicial da coluna
          xAux := iMargemPagEsq + (kAux * iLarguraColunas) + iMargemCelEsq;

          // Identifica a descrição do grau de parentesco de acordo com a coluna
          // 12345678901234567890123456789
          case kAux of
            0: sAux := '           ANIMAL            ';
            1: sAux := '            PAIS             ';
            2: sAux := '            AVÓS             ';
            3: sAux := '           BISAVÓS           ';
          else
            sAux := '';
          end;
          PDF.TextOut(xAux + iMargemPagEsq, yAux, sAux);
        end;

        // Inicializa indicadores de linha x coluna auxiliares
        iAux := 0; // Inicia a partir da primeira coluna
        jAux := 1; // Inicia a primeira coluna com uma única linha
        while iAux < iNumMaxColunas do begin
          // Identifica a altura da linha
          iAlturaLinhas := Trunc(Pagina.Altura * ConstConversao) div jAux;

          // Identifica margem superior para as células
          iMargemCelSup := (iAlturaLinhas - Trunc(Celula.Altura * ConstConversao)) div 2;

          // Identifica a posição inicial da coluna
          xAux := iMargemPagEsq + (iAux * iLarguraColunas);

          kAux := 0; // Inicia a partir da primeira linha
          while kAux < jAux do begin
            // Identifica a posição inicial da linha
            yAux := iMargemPagSup + (kAux * iAlturaLinhas);

            // Desenha a célula
            PDF.DrawRectangle(
              xAux + iMargemCelEsq,
              yAux + iMargemCelSup,
              xAux + iMargemCelEsq + Trunc(Celula.Largura * ConstConversao),
              yAux + iMargemCelSup + Trunc(Celula.Altura * ConstConversao));

            // Imprime o conteúdo da célula
            // Ajusta fonte e margens iniciais
            PDF.Font.Size := 8;
            cAux := xAux + iMargemCelEsq + 5;
            lAux := yAux + iMargemCelSup + 10;

            // Imprime código de manejo do animal em negrito
            PDF.Font.Name := poCourierBold;
            PDF.TextOut(cAux, lAux, Trim(
              Query.FieldByName('SglFazendaManejo').AsString + ' ' +
              Query.FieldByName('CodAnimalManejo').AsString));

            // Recupera os dados do animal atual para os campos selecionados pelo usuário
            PDF.Campos.CarregarValores(Query);

            // Imprime o restante das colunas em fonte normal
            PDF.Font.Name := poCourier;
            zAux := 1;
            while (zAux < PDF.Campos.NumCampos) and (zAux < 5) do begin
              Inc(lAux, ConstAlturaLinha);
              PDF.TextOut(cAux, lAux, PDF.Campos.ValorCampoIdx[zAux]);
              Inc(zAux);
            end;

            // Não imprime linhas de ligações para a última coluna
            if iAux + 1 < iNumMaxColunas then begin
              // Identifica número de linhas da próxima coluna
              zAux := iAlturaLinhas div 2;
              // Imprime as linhas de ligação com as células de outro nível hierárquico
               PDF.DrawLine(xAux + iLarguraColunas - iMargemCelEsq,
                yAux + iMargemCelSup + (Trunc(Celula.Altura * ConstConversao) div 2),
                xAux + iLarguraColunas,
                yAux + iMargemCelSup + (Trunc(Celula.Altura * ConstConversao) div 2));
               PDF.DrawLine(xAux + iLarguraColunas,
                yAux + (zAux div 2),
                xAux + iLarguraColunas,
                yAux + zAux + (zAux div 2));
               PDF.DrawLine(xAux + iLarguraColunas,
                yAux + (zAux div 2),
                xAux + iLarguraColunas + iMargemCelEsq,
                yAux + (zAux div 2));
               PDF.DrawLine(xAux + iLarguraColunas,
                yAux + zAux + (zAux div 2),
                xAux + iLarguraColunas + iMargemCelEsq,
                yAux + zAux + (zAux div 2));
            end;

            Query.Next; // Avança ao próximo registro
            Inc(kAux); // Passa a trabalhar na próxima linha
          end;
          jAux := jAux * 2; // Duplica a quantidade de células para a próxima coluna
          Inc(iAux); // Passa a trabalhar na próxima coluna
        end;
      end;

      // Finaliza geração do relatório
      Retorno := PDF.FinalizarRelatorio;
      if Retorno = 0 then begin
        Result := PDF.NomeArquivo;
      end;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1454, Self.ClassName, NomeMetodo, [E.Message]);
        Result := '';
        Exit;
      end;
    end;
  finally
    PDF.Free;
  end;
end;

function TIntAnimais.GerarRelatorioAscendentes(CodAnimais: String;
  CodFazendaManejo: Integer; CodAnimaisManejo: String): String;
const
  NomMetodo: String = 'GerarRelatorioAscendentes';
  CodRelatorio: Integer = 15;
var
  Rel: TRelatorioPadrao;
  IntRelatorios: TIntRelatorios;
  Resultado, Retorno : Integer;
  Param: TValoresParametro;
  Q, Q1 : THerdomQuery;
begin
  Result := '';
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(440) then begin //mesmo código de relatório de genealogia
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomMetodo, []);
    Exit;
  end;

  // Verifica se pelo menos um parâmetro foi informado
  if (CodFazendaManejo <= 0) and (CodAnimaisManejo = '') and (CodAnimais = '') then begin
    Mensagens.Adicionar(1445, Self.ClassName, NomMetodo, []);
    Exit;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Retorno := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Buscar(CodRelatorio);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Pesquisar(CodRelatorio);
    if Retorno < 0 then Exit;

  if CodAnimais <> '#PESQUISADOS' then begin
    Param := TValoresParametro.Create(TValorParametro);
    try
      // Se códigos de animais foram informados, verifica se outras informações não foram
      if (CodAnimais <> '') then begin
        if (CodFazendaManejo > 0) or (CodAnimaisManejo <> '') then begin
          Mensagens.Adicionar(1446, Self.ClassName, NomMetodo, []);
          Exit;
        end;
        Resultado := VerificaParametroMultiValor(CodAnimais, Param);
        if Resultado < 0 then begin
          Exit;
        end;
      end;

      // Se códigos de manejo foram informados, verifica se outras informações não foram
      // e verifica também se fazenda foi informada já que ela é necessária
      if CodAnimaisManejo <> '' then begin
        if (CodAnimais <> '') then begin
          Mensagens.Adicionar(1446, Self.ClassName, NomMetodo, []);
          Exit;
        end;
        Resultado := VerificaFazenda(CodFazendaManejo, True, 'Fazenda de manejo');
        if Resultado < 0 then begin
          Exit;
        end;
        Resultado := VerificaParametroMultiValorString(CodAnimaisManejo, Param);
        if Resultado < 0 then begin
          Exit;
        end;
      end;
    finally
      Param.Free;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  Q1 := THerdomQuery.Create(Conexao, nil);
  try
//    try
      // Cria a temporária onde serão armazenados os ascendendes dos animais
      if CodAnimais = '#PESQUISADOS' then begin
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add('if object_id(''tempdb..#tmp_todos_ascendentes'') is null '+
                  '  create table #tmp_todos_ascendentes '+
                  '  ( '+
                  '      CodPessoaProdutor int null '+
                  '    , CodAnimal int null '+
                  '    , CodAnimalManejo varchar(11) null '+
                  '    , NomAnimal varchar(60) null '+
                  '    , CodAnimalPai int null '+
                  '    , CodAnimalManejoPai varchar(11) null '+
                  '    , CodAnimalMae int null '+
                  '    , CodAnimalManejoMae varchar(11) null '+
                  '    , DtaNascimento smalldatetime null '+
                  '    , IndSexo varchar(1) null '+
                  '    , Idade varchar(10) null  '+
                  '    , IndProcessado int null )');
{$ENDIF}
        Q.ExecSQL;
        Q.Close;
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add(' truncate table #tmp_todos_ascendentes ');
{$ENDIF}
        Q.ExecSQL;
        Q.Close;
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add('insert into #tmp_todos_ascendentes '+
                  ' select distinct ta.cod_pessoa_produtor, '+
                  '        ta.cod_animal, '+
                  '        tf.sgl_fazenda + '' '' + ta.cod_animal_manejo, '+
                  '        ta.nom_animal, '+
                  '        ta.cod_animal_pai, '+
                  '        dbo.fnt_buscar_pai(ta.cod_animal,ta.cod_pessoa_produtor,''I''), '+
                  '        ta.cod_animal_mae, '+
                  '        dbo.fnt_buscar_mae(ta.cod_animal,ta.cod_pessoa_produtor,''I''), '+
                  '        ta.dta_nascimento, '+
                  '        ta.ind_sexo, '+
                  '        case  when ta.dta_desativacao is null then dbo.fnt_idade(ta.dta_nascimento, getdate()) else dbo.fnt_idade(ta.dta_nascimento, ta.dta_desativacao) end as IdadeAnimal, '+
                  '        0 as IndProcessado '+
                  '        from tab_animal ta, '+
                  '             tab_fazenda tf '+
                  '        where ta.cod_animal in (select cod_animal from #tmp_animais_pesquisa) '+
                  '        and   ta.cod_fazenda_manejo *= tf.cod_fazenda '+
                  '        and   ta.cod_pessoa_produtor *= tf.cod_pessoa_produtor ');
{$ENDIF}
        Q.ExecSQL;
{$IFDEF MSSQL}
        Q.SQL.Add('execute dbo.spt_busca_todos_ascendentes_pesq :cod_pessoa_produtor ');
{$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ExecSQL;
      end else begin
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add('if object_id(''tempdb..#tmp_todos_ascendentes'') is null '+
                  '  create table #tmp_todos_ascendentes '+
                  '  ( '+
                  '      CodPessoaProdutor int null '+
                  '    , CodAnimal int null '+
                  '    , CodAnimalManejo varchar(11) null '+
                  '    , NomAnimal varchar(60) null '+
                  '    , CodAnimalPai int null '+
                  '    , CodAnimalManejoPai varchar(11) null '+
                  '    , CodAnimalMae int null '+
                  '    , CodAnimalManejoMae varchar(11) null '+
                  '    , DtaNascimento smalldatetime null '+
                  '    , IndSexo varchar(1) null '+
                  '    , Idade varchar(10) null  '+
                  '    , IndProcessado int null )');
{$ENDIF}
        Q.ExecSQL;
        Q.Close;
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add(' truncate table #tmp_todos_ascendentes ');
{$ENDIF}
        Q.ExecSQL;
        Q.Close;
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add(' select cod_pessoa_produtor, cod_animal '+
                  ' from tab_animal ');
        if CodAnimais <> '' then begin
           Q.SQL.Add(' where cod_animal in (' + CodAnimais + ')');
          end else begin
             Q.SQL.Add(' where cod_animal_manejo in ('+ CodAnimaisManejo + ')');
             Q.SQL.Add(' and   cod_fazenda_manejo = :CodFazendaManejo ');
        end;
        Q.SQL.Add(' and   cod_pessoa_produtor = :CodPessoaProdutor ');
{$ENDIF}
        if CodAnimaisManejo <> '' then
           Q.ParamByName('CodFazendaManejo').AsInteger := CodFazendaManejo;
        Q.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.Open;
        if Q.IsEmpty then begin
           Mensagens.Adicionar(1447, Self.ClassName, NomMetodo, []);
           Exit;
        end;
        while not Q.Eof do begin
              // calcula os ascendentes para cada animal da lista
{$IFDEF MSSQL}
              Q1.SQL.Add('execute dbo.spt_busca_todos_ascendentes :cod_animal, :cod_pessoa_produtor ');
{$ENDIF}
              Q1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q1.ParamByName('cod_animal').AsInteger := Q.FieldByName('cod_animal').AsInteger;
              Q1.ExecSQL;
              Q.Next;
        end;
      end;

      Query.Close;
      Query.SQL.Clear;
      Query.SQL.Add(' select distinct ' +
                    ' CodAnimal, '+
                    ' CodAnimalManejo, '+
                    ' NomAnimal, '+
                    ' CodAnimalManejoPai, '+
                    ' CodAnimalManejoMae, '+
                    ' DtaNascimento, '+
                    ' IndSexo, '+
                    ' Idade '+
                    ' from #tmp_todos_ascendentes ' +
                    ' order by CodAnimalManejo ');
      Query.Open;

  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
 try
   Rel.TipoDoArquvio := 2;
   Retorno := Rel.CarregarRelatorio(CodRelatorio);
   if Retorno < 0 then Exit;

  Retorno := Rel.InicializarRelatorio;
  if Retorno < 0 then Exit;

  Query.First;
  while not EOF do begin
      Rel.ImprimirColunasResultSet(Query);
      Query.Next;
  end;
  Retorno := Rel.FinalizarRelatorio;
  if Retorno = 0 then begin
     Result := Rel.NomeArquivo;
  end;
  finally
    Rel.Free;
    Q.free;
    Q1.free;
  end;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(2004, Self.ClassName, 'GerarRelatorioAscendentes', [E.Message]);
      Result := '';
      Exit;
    end;
  end;
 finally
  IntRelatorios.Free;
 end;
end;

function TIntAnimais.GerarRelAscendentesPesquisados: String;
const
  NomeMetodo : String = 'GerarRelAscendentesPesquisados';
  Metodo : Integer = 440;
  CodRelatorio :Integer = 15;
var
  Q : THerdomQuery;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(1493, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(1493, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
{$IFDEF MSSQL}
      Q.SQL.Add('if object_id(''tempdb..#tmp_animais_pesquisa'') is null '+
                '  create table #tmp_animais_pesquisa '+
                '  ( '+
                '    cod_animal int null '+
                '   )');
{$ENDIF}
      Q.ExecSQL;
      Q.Close;
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add(' truncate table #tmp_animais_pesquisa ');
{$ENDIF}
      Q.ExecSQL;
      Q.Close;
      Q.SQL.Clear;

      Q.SQL.Add('insert into #tmp_animais_pesquisa values (:cod_animal) ');

      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := GerarRelatorioAscendentes('#PESQUISADOS',-1,'');

      if Result <> '' then ZerarValoresUltimaPesquisa;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('drop table #tmp_animais_pesquisa');
      {$ENDIF}
      Q.ExecSQL;

    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1494, Self.ClassName, NomeMetodo, [E.Message]);
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.DefinirAvaliacao(CodEvento, CodAnimal, CodFazendaManejo: Integer;
  CodAnimalManejo: String; CodCaracteristicaAvaliacao: Integer;
  QtdAvalicao: Double): Integer;
const
  NomMetodo: String = 'DefinirAvaliacao';
var
  Q : THerdomQuery;
  Tipo_Operacao: Integer; //1- Insere, 2 - Altera
  AnimaisInseridos: Integer;
  DadosEvento: TDadosEvento;
  DadosAnimal: TDadosAnimal;
  VerificaFC: Integer;
  sAux: String;
begin
  Result := -1;
  AnimaisInseridos := 0;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(448) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      //Carrega os dados do evento
      Result := VerificaEvento(CodEvento, True, 'Evento a aplicar', DadosEvento);
      if Result < 0 then
         Exit;
      // Verifica se o animal é válido
      Result := BuscaDadosAnimal(CodAnimal,-1,-1,-1,-1,-1,CodFazendaManejo,CodAnimalManejo,'',DadosAnimal);
      if Result < 0 then begin
         if Result = -100 then begin
            Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Animal não cadastrado.', 'N');
         end;   
         Exit;
      end;
      // Verifica se o animal está na fazenda do evento
      VerificaFC := VerificaFazendaCorrente(DadosAnimal,DadosEvento);
      if VerificaFC = -100 then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O Animal não está na fazenda especificada no cadastro do evento.', 'N');
        Exit;
      end;
      if VerificaFC = -200 then begin
        Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'Este evento só pode ser aplicado a animais que não estejam em fazenda do produtor.', 'N');
        Exit;
      end;
      // Verifica se a característica é compatível com o tipo de avaliação
      // e se os limites são compatíveis
     if QtdAvalicao <> -1 then
      begin
         Q.close;
         Q.SQL.Clear;
         {$IFDEF MSSQL}
         Q.SQL.Add('select des_caracteristica, ind_sexo, val_limite_maximo, val_limite_minimo '+
               ' from tab_caracteristica_avaliacao '+
               ' where cod_tipo_avaliacao = :cod_tipo_avaliacao '+
               ' and   cod_caracteristica = :cod_caracteristica '+
               ' and   dta_fim_validade is null ');
         {$ENDIF}
         Q.ParamByName('cod_tipo_avaliacao').AsInteger := DadosEvento.CodTipoAvaliacao;
         Q.ParamByName('cod_caracteristica').AsInteger := CodCaracteristicaAvaliacao;
         Q.Open;
         if Q.IsEmpty then begin
             Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A caracteristica é inválida ou não se aplica ao tipo de avaliação', 'N');
             Exit;
         end;


         if Q.FieldValues['ind_sexo'] <> 'A' then
          begin
             if (DadosAnimal.IndSexo <> Q.FieldValues['ind_sexo']) then
              begin
                 if DadosAnimal.IndSexo = 'M' then
                    sAux := 'Machos'
                 else
                    sAux := 'Fêmeas';
                 Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'A característica ' + Q.fieldbyname('des_caracteristica').asstring + ' não se aplica a animais '+sAux, 'N');
                 Exit;
              end;
          end;
        if (QtdAvalicao > Q.FieldByName('val_limite_maximo').asfloat) or (QtdAvalicao < Q.FieldByName('val_limite_minimo').asfloat) then
         begin
            Result := InserirErroAplicacaoEvento(DadosEvento, DadosAnimal, 'O valor '+ FloattoStr(QtdAvalicao) + ' atribuído à característica ' + Q.fieldbyname('des_caracteristica').asstring + ' está fora do limite que deve estar entre '+Q.FieldByName('val_limite_minimo').asstring + ' e ' + Q.FieldByName('val_limite_maximo').asstring, 'N');
            Exit;
         end;
      end;

      //verifica se este animal já recebeu este evento (alteração ou inserção)
      Q.close;
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select tae.cod_evento, taec.cod_caracteristica '+
                ' from tab_animal_evento as tae, tab_animal_evento_avaliacao as taec '+
                ' where taec.cod_caracteristica = :cod_caracteristica '+
                ' and   taec.cod_animal =* tae.cod_animal '+
                ' and   taec.cod_pessoa_produtor =* tae.cod_pessoa_produtor '+
                ' and   taec.cod_evento =* tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal '+
                ' and   tae.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   tae.cod_evento = :cod_evento ');
      {$ENDIF}
      Q.ParamByName('cod_caracteristica').AsInteger := CodCaracteristicaAvaliacao;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;


      BeginTran;

      if Q.IsEmpty then begin// o animal ainda não está relacionado no evento
         Tipo_Operacao := 1;
         Q.close;
         Q.SQL.Clear;
         {$IFDEF MSSQL}
         Q.SQL.Add('update tab_evento set qtd_animais = qtd_animais + 1 '+
                   ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                   ' and   cod_evento = :cod_evento ');
         {$ENDIF}
         Q.ParamByName('cod_evento').AsInteger := CodEvento;
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ExecSQL;
         MontaQueryInsertAnimalEvento;
         Result := InserirAnimalEvento(DadosEvento, DadosAnimal);
         if Result < 0 then
            Exit;
         AnimaisInseridos := 1;
      end else begin
         if Q.Fieldbyname('cod_caracteristica').isnull
            then Tipo_Operacao := 1
            else Tipo_Operacao := 2;
      end;
      if (Tipo_Operacao = 1) and (QtdAvalicao <> -1) then begin
         Q.close;
         Q.SQL.Clear;
         {$IFDEF MSSQL}
         Q.SQL.Add('insert into tab_animal_evento_avaliacao '+
                   ' (cod_pessoa_produtor, '+
                   '  cod_evento, '+
                   '  cod_animal, '+
                   '  cod_tipo_avaliacao, '+
                   '  cod_caracteristica, '+
                   '  val_avaliacao) '+
                   '  values '+
                   ' (:cod_pessoa_produtor, '+
                   '  :cod_evento, '+
                   '  :cod_animal, '+
                   '  :cod_tipo_avaliacao, '+
                   '  :cod_caracteristica, '+
                   '  :val_avaliacao) ');
         {$ENDIF}
         Q.ParamByName('cod_caracteristica').AsInteger := CodCaracteristicaAvaliacao;
         Q.ParamByName('cod_evento').AsInteger := CodEvento;
         Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ParamByName('val_avaliacao').AsFloat := QtdAvalicao;
         Q.ParamByName('cod_tipo_avaliacao').AsInteger := DadosEvento.CodTipoAvaliacao;
         Q.ExecSQL;
      end else begin
         if (QtdAvalicao = -1) then
          begin
            Q.close;
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_animal_evento_avaliacao '+
                   ' where cod_evento = :cod_evento '+
                   ' and   cod_animal = :cod_animal '+
                   ' and   cod_tipo_avaliacao = :cod_tipo_avaliacao '+
                   ' and   cod_caracteristica = :cod_caracteristica '+
                   ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
            {$ENDIF}
            Q.ParamByName('cod_caracteristica').AsInteger := CodCaracteristicaAvaliacao;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_tipo_avaliacao').AsInteger := DadosEvento.CodTipoAvaliacao;
            Q.ExecSQL;
          end
         else
          begin
            Q.close;
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('update tab_animal_evento_avaliacao '+
                   ' set val_avaliacao =:val_avaliacao '+
                   ' where cod_evento = :cod_evento '+
                   ' and   cod_animal = :cod_animal '+
                   ' and   cod_tipo_avaliacao = :cod_tipo_avaliacao '+
                   ' and   cod_caracteristica = :cod_caracteristica '+
                   ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
            {$ENDIF}
            Q.ParamByName('cod_caracteristica').AsInteger := CodCaracteristicaAvaliacao;
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('val_avaliacao').AsFloat := QtdAvalicao;
            Q.ParamByName('cod_tipo_avaliacao').AsInteger := DadosEvento.CodTipoAvaliacao;
            Q.ExecSQL;
          end;
      end;

      // Cofirma transação
      Commit;
      Result := AnimaisInseridos;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1520, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1520;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarAvaliacao(CodEvento: Integer): Integer;
const
  NomMetodo: String = 'PesquisarAvaliacao';
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(450) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomMetodo, []);
    Result := -307;
    Exit;
  end;

{$IFDEF MSSQL}
  Query.Close;
  Query.SQL.Clear;
  Query.SQL.Add('select CodAnimalManejo  '+
                '    , CodFazendaManejo  '+
                '    , SglFazendaManejo  '+
                '    , CodTipoAvaliacao  '+
                '    , SglTipoAvaliacao  '+
                '    , DesTipoAvaliacao  '+
                '    , CodCaracteristicaAvaliacao  '+
                '    , SglCaracteristicaAvaliacao  '+
                '    , DesCaracteristicaAvaliacao  '+
                '    , CodUnidadeMedida  '+
                '    , SglUnidadeMedida  '+
                '    , DesUnidadeMedida  '+
                '    , isnull(sum(QtdAvaliacao), -1) as QtdAvaliacao  '+
                'from(  '+
                'select ta.cod_animal_manejo as CodAnimalManejo  '+
                '    , tf.cod_fazenda as CodFazendaManejo  '+
                '    , tf.sgl_fazenda as SglFazendaManejo  '+
                '    , tta.cod_tipo_avaliacao as CodTipoAvaliacao  '+
                '    , tta.sgl_tipo_avaliacao as SglTipoAvaliacao  '+
                '    , tta.des_tipo_avaliacao as DesTipoAvaliacao  '+
                '    , tca.cod_caracteristica as CodCaracteristicaAvaliacao  '+
                '    , tca.sgl_caracteristica as SglCaracteristicaAvaliacao  '+
                '    , tca.des_caracteristica as DesCaracteristicaAvaliacao  '+
                '    , tum.cod_unidade_medida as CodUnidadeMedida  '+
                '    , tum.sgl_unidade_medida as SglUnidadeMedida  '+
                '    , tum.des_unidade_medida as DesUnidadeMedida  '+
                '    , taea.val_avaliacao as QtdAvaliacao  '+
                'from tab_animal ta  '+
                '    ,tab_fazenda tf  '+
                '    ,tab_tipo_avaliacao tta  '+
                '    ,tab_caracteristica_avaliacao tca  '+
                '    ,tab_animal_evento_avaliacao taea  '+
                '    ,tab_unidade_medida tum  '+
                'where taea.cod_evento = :cod_evento  '+
                'and   taea.cod_pessoa_produtor = :cod_pessoa_produtor  '+
                'and   taea.cod_animal = ta.cod_animal  '+
                'and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor  '+
                'and   ta.cod_fazenda_manejo = tf.cod_fazenda  ');
                
  if (Conexao.CodPapelUsuario = 3) then begin
     Query.SQL.Add('and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                   'or  ta.cod_pessoa_tecnico is null) ');
  end;

  Query.SQL.Add('and   taea.cod_pessoa_produtor = ta.cod_pessoa_produtor  '+
                'and   tta.cod_tipo_avaliacao = taea.cod_tipo_avaliacao  '+
                'and   tca.cod_tipo_avaliacao = taea.cod_tipo_avaliacao  '+
                'and   taea.cod_caracteristica = tca.cod_caracteristica  '+
                'and   tum.cod_unidade_medida = tca.cod_unidade_medida  '+
                'union  '+
                'select ta.cod_animal_manejo as CodAnimalManejo  '+
                '    , tf.cod_fazenda as CodFazendaManejo  '+
                '    , tf.sgl_fazenda as SglFazendaManejo  '+
                '    , tta.cod_tipo_avaliacao as CodTipoAvaliacao  '+
                '    , tta.sgl_tipo_avaliacao as SglTipoAvaliacao  '+
                '    , tta.des_tipo_avaliacao as DesTipoAvaliacao  '+
                '    , tca.cod_caracteristica as CodCaracteristicaAvaliacao  '+
                '    , tca.sgl_caracteristica as SglCaracteristicaAvaliacao  '+
                '    , tca.des_caracteristica as DesCaracteristicaAvaliacao  '+
                '    , tum.cod_unidade_medida as CodUnidadeMedida  '+
                '    , tum.sgl_unidade_medida as SglUnidadeMedida  '+
                '    , tum.des_unidade_medida as DesUnidadeMedida  '+
                '    , null as QtdAvaliacao  '+
                'from tab_animal ta  '+
                '    ,tab_fazenda tf  '+
                '    ,tab_tipo_avaliacao tta  '+
                '    ,tab_caracteristica_avaliacao tca  '+
                '    ,tab_animal_evento taea  '+
                '    ,tab_evento_avaliacao te  '+
                '    ,tab_unidade_medida tum   '+
                'where taea.cod_evento = :cod_evento  '+
                'and   taea.cod_pessoa_produtor = :cod_pessoa_produtor  '+
                'and   taea.cod_evento = te.cod_evento  '+
                'and   taea.cod_pessoa_produtor = te.cod_pessoa_produtor  '+
                'and   taea.cod_animal = ta.cod_animal  '+
                'and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor  '+
                'and   ta.cod_fazenda_manejo = tf.cod_fazenda  ');

  if (Conexao.CodPapelUsuario = 3) then begin
     Query.SQL.Add('and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
                   'or  ta.cod_pessoa_tecnico is null) ');
  end;

  Query.SQL.Add('and   taea.cod_pessoa_produtor = ta.cod_pessoa_produtor  '+
                'and   tta.cod_tipo_avaliacao = te.cod_tipo_avaliacao  '+
                'and   tca.cod_tipo_avaliacao = te.cod_tipo_avaliacao  '+
                'and   tum.cod_unidade_medida = tca.cod_unidade_medida) as tabela  '+
                'group by CodAnimalManejo  '+
                '    , CodFazendaManejo  '+
                '    , SglFazendaManejo  '+
                '    , CodTipoAvaliacao  '+
                '    , SglTipoAvaliacao  '+
                '    , DesTipoAvaliacao  '+
                '    , CodCaracteristicaAvaliacao  '+
                '    , SglCaracteristicaAvaliacao  '+
                '    , DesCaracteristicaAvaliacao  '+
                '    , CodUnidadeMedida  '+
                '    , SglUnidadeMedida  '+
                '    , DesUnidadeMedida  '+
                'order by CodAnimalManejo,SglCaracteristicaAvaliacao ');
{$ENDIF}
  try
  Query.Parambyname('cod_evento').asinteger := CodEvento;
  Query.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
  if (Conexao.CodPapelUsuario = 3) then begin
     Query.Parambyname('cod_pessoa_tecnico').asinteger := Conexao.CodPessoa;
  end;
  Query.Open;
  Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(1501, Self.ClassName, NomMetodo, [E.Message]);
      Result := -1501;
      Exit;
    end;
  end;
end;

function TIntAnimais.RemoverAvaliacao(CodEvento, CodAnimal,
  CodFazendaManejo: Integer; const CodAnimalManejo: WideString): Integer;
const
  NomMetodo: String = 'RemoverAvaliacao';
var
  Q : THerdomQuery;
  CodAnimalInt: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(449) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      //Verifica se o animal é válido
      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select cod_animal, cod_pessoa_tecnico, cod_animal_manejo from tab_animal '+
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   dta_fim_validade is null ');
      if CodAnimal > 0
         then Q.SQL.Add(' and   cod_animal = :cod_animal ')
         else if CodAnimalManejo <> '' then begin
              Q.SQL.Add(' and   cod_animal_manejo = :cod_animal_manejo ');
              Q.SQL.Add(' and   cod_fazenda_manejo = :cod_fazenda_manejo ');
         end;
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      if CodAnimal > 0 then
         Q.ParambyName('cod_animal').asinteger := CodAnimal
      else if CodAnimalManejo <> '' then begin
         Q.ParambyName('cod_animal_manejo').asstring := CodAnimalManejo;
         Q.ParambyName('cod_fazenda_manejo').asinteger := CodFazendaManejo;
      end;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(692, Self.ClassName, NomMetodo, []);
        Result := -692;
        Exit;
      end;

      if (Conexao.CodPapelUsuario = 3)
        and (Q.FieldByName('cod_pessoa_tecnico').AsInteger <> Conexao.CodUsuario)
        and (Q.FieldByName('cod_pessoa_tecnico').AsInteger <> 0) then
      begin
         Mensagens.Adicionar(1698, Self.ClassName, NomMetodo, [Q.FieldByName('cod_animal_manejo').AsString]);
         Result := -1698;
         Exit;
      end;

      CodAnimalInt := Q.FieldByName('cod_animal').asinteger;

      //verifica se o evento é válido
      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select cod_evento from tab_evento '+
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_evento = :cod_evento ');

      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(837, Self.ClassName, NomMetodo, []);
        Result := -837;
        Exit;
      end;

      //Verifica se o animal está associado ao evento
      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('select 1 from tab_animal_evento '+
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_animal = :cod_animal '+
                ' and   cod_evento = :cod_evento ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Parambyname('cod_animal').asinteger := CodAnimalInt;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1518, Self.ClassName, NomMetodo, []);
        Result := -1518;
        Exit;
      end;

      BeginTran;

      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('update tab_evento set qtd_animais = qtd_animais - 1 '+
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_evento = :cod_evento ');
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ExecSQL;

      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('delete from tab_animal_evento_avaliacao '+
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_evento = :cod_evento '+
                ' and   cod_animal = :cod_animal ');

      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalInt;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ExecSQL;

      Q.close;
      Q.SQL.Clear;
      Q.SQL.Add('delete from tab_animal_evento '+
                ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   cod_evento = :cod_evento '+
                ' and   cod_animal = :cod_animal ');

      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalInt;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ExecSQL;

      // Cofirma transação
      Commit;
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1519, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1519;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.InserirNascidoParto(CodAnimalMae, CodAnimalPai,
  CodReprodutorMultiplo, CodFazendaManejo: Integer;
  CodAnimalManejoCria, IndSexo: String; CodPelagem: Integer;
  DtaNascimento: TDateTime;CodSituacaoSisBov:String;CodEspecie,
  CodAptidao, CodRaca, CodRegimeAlimentar, CodCategoriaAnimal,
  CodTipoLugar, CodLoteCorrente, CodLocalCorrente,
  CodFazendaCorrente:Integer; IndCodSisBovReservado:String; CodPessoaTecnico: Integer;
  numCNPJCPFTecnico: String): Integer;
var CodAnimalCertificadora: String;
    Q:THerdomQuery;
    MsgTecnicoOS, MsgIdentificadorOS: Boolean;
begin
  Result := -1;
  MsgTecnicoOS := True;
  MsgIdentificadorOS := True;
  if not Inicializado then begin
    RaiseNaoInicializado('InserirNascidoParto');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(466) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'InserirNascido', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, 'InserirNascido', []);
    Result := -307;
    Exit;
  end;

  if CodReprodutorMultiplo > 0 then
     CodAnimalPai := -1;

  CodAnimalManejoCria := UpperCase(CodAnimalManejoCria);
  Result := VerificaCodAnimalManejo(CodAnimalManejoCria);
  if Result < 0 then begin
    Exit;
  end;

  // Verifica duplicidade de fazenda/animal manejo
  Result := VerificaCodAnimalFazendaManejo(-1, CodAnimalManejoCria, CodFazendaManejo);
  if Result < 0 then begin
    Exit;
  end;

  // Gera o código da certificadora
  if ValorParametro(8) = 'S' then begin
    Result := GeraCodAnimalCertificadora(CodAnimalCertificadora, CodFazendaManejo, CodAnimalManejoCria, -1);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Verifica Pelagem
  Result := VerificaPelagem(CodPelagem);
  if Result < 0 then begin
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
     BeginTran;

     MontaQueryInsert;

     //-88 para diferenciar pois se trata da Micro Região! Irá gravar Null no Banco
     Result := InserirAnimal(CodFazendaManejo, CodAnimalManejoCria,
      CodAnimalCertificadora, -1, -1, -88, -1, -1, CodSituacaoSisbov, 0, '', -1,
      -1, -1, DtaNascimento, '', -1, -1, CodFazendaManejo, 0, -1, '', '', -1,
      -1, '', '', -1, -1, -1, -1, -1, -1, -1, -1, CodEspecie, CodAptidao, CodRaca, CodPelagem,
      IndSexo, 1, CodReprodutorMultiplo, CodAnimalPai, CodAnimalMae, -1, 'N', CodRegimeAlimentar,
      CodCategoriaAnimal, CodTipoLugar, CodLoteCorrente, CodLocalCorrente, CodFazendaCorrente,
      '', -1, '', -1, -1, -1, '', 0, 0, '', '', '', 'InserirNascidoParto', '', 0,
      -1, FUsarSisbov, 163, False, -1, -1, -1, IndCodSisBovReservado, '', -1, -1,
      CodPessoaTecnico, numCNPJCPFTecnico, MsgTecnicoOS, MsgIdentificadorOS);

     // Chama proc de composição racial caso não seja inserção múltipla e
     // caso o animal possua pai ou mãe
     Q.SQL.Clear;
{$IFDEF MSSQL}
     Q.SQL.Add('exec spt_calcula_comp_racial :cod_animal, ' +
            '                             :cod_pessoa_produtor, '+
            '                             :cod_animal_pai, '+
            '                             :cod_animal_mae, '+
            '                             :ind_tipo ');
{$ENDIF}
     Q.ParamByName('cod_animal').AsInteger := Result;
     Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
     Q.ParamByName('cod_animal_pai').AsInteger := CodAnimalPai;
     Q.ParamByName('cod_animal_mae').AsInteger := CodAnimalMae;
     Q.ParamByName('ind_tipo').AsInteger := 2;
     Q.ExecSQL;

     if Result >= 0 then ZerarValoresUltimaPesquisa;
      // Cofirma transação
      Commit;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1560, Self.ClassName, 'InserirNascidoParto', [E.Message]);
        Result := -1560;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarPossivelPai(CodEstacaoMonta, CodAnimalFemea,
  CodFazendaManejoFemea: Integer; CodAnimalManejoFemea: String;
  DtaEventoParto: TDateTime): Integer;
const
  NomMetodo: String = 'PesquisarPossivelPai';
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  if DtaEventoParto = 0 then
     DtaEventoParto := date;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(471) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomMetodo, []);
    Result := -307;
    Exit;
  end;

  if CodAnimalFemea <= 0 then begin
    Query.close;
    Query.SQL.Clear;
    Query.SQL.Add(' select cod_animal from tab_animal '+
                  ' where cod_animal_manejo = :cod_animal_manejo '+
                  ' and   cod_fazenda_manejo = :cod_fazenda_manejo '+
                  ' and   cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and dta_fim_validade is null ');
    Query.Parambyname('cod_fazenda_manejo').asinteger := CodFazendaManejoFemea;
    Query.Parambyname('cod_animal_manejo').asstring := CodAnimalManejoFemea;
    Query.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
    Query.Open;
    if Query.IsEmpty then begin
      Mensagens.Adicionar(692,Self.ClassName, NomMetodo, []);
      Result := -692;
      Exit;
    end;
    CodAnimalFemea := Query.Fieldbyname('cod_animal').asinteger;
  end;

{$IFDEF MSSQL}
  Query.Close;
  Query.SQL.Clear;
  Query.SQL.Add(' select distinct ta.cod_animal as CodAnimal, '+
                '        tf.sgl_fazenda as SglFazendaManejo, '+
                '        ta.cod_animal_manejo as CodAnimalManejo, '+
                '        ta.cod_situacao_sisbov as CodSituacaoSisBov, '+
                '        ta.ind_sexo as IndSexo, '+
                '        tca.sgl_categoria_animal as SglCategoria, '+
                '        tr.sgl_raca as SglRaca, '+
                '        dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as IdadeAnimal, '+
                '        tfc.sgl_fazenda as SglFazendaCorrente, '+
                '        tl.sgl_lote as SglLote, '+
                '        tll.sgl_local as SglLocal, '+
                '        ta.des_apelido as DesApelido, '+
                '        dbo.fnt_composicao_racial(ta.cod_animal,ta.cod_pessoa_produtor) as DesComposicaoRacial, '+
                '        ''MC'' as SglTipoEvento, '+
                '        dbo.fnt_idade_dias(te.dta_inicio, :dta_evento_parto) as NumDiasGestacao '+
                ' from tab_evento_monta_controlada as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae, '+
                '      tab_fazenda as tf, '+
                '      tab_fazenda as tfc, '+
                '      tab_raca as tr, '+
                '      tab_lote as tl, '+
                '      tab_local as tll, '+
                '      tab_categoria_animal as tca, '+
                '      tab_animal as ta '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea  '+
                ' and   te.cod_tipo_evento = 27 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   ta.cod_animal = tem.cod_animal_touro '+
                ' and   ta.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                ' and   ta.cod_pessoa_produtor = tfc.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tfc.cod_fazenda '+
                ' and   ta.cod_raca = tr.cod_raca '+
                ' and   ta.cod_categoria_animal = tca.cod_categoria_animal '+
                ' and   ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
                ' and   ta.cod_lote_corrente *= tl.cod_lote '+
                ' and   ta.cod_fazenda_corrente *= tl.cod_fazenda '+
                ' and   ta.cod_pessoa_produtor *= tll.cod_pessoa_produtor '+
                ' and   ta.cod_local_corrente *= tll.cod_local '+
                ' and   ta.cod_fazenda_corrente *= tll.cod_fazenda '+
                ' union '+
                ' select distinct ta.cod_animal as CodAnimal, '+
                '        tf.sgl_fazenda as SglFazendaManejo, '+
                '        ta.cod_animal_manejo as CodAnimalManejo, '+
                '        ta.cod_situacao_sisbov as CodSituacaoSisBov, '+
                '        ta.ind_sexo as IndSexo, '+
                '        tca.sgl_categoria_animal as SglCategoria, '+
                '        tr.sgl_raca as SglRaca, '+
                '        dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as IdadeAnimal, '+
                '        tfc.sgl_fazenda as SglFazendaCorrente, '+
                '        tl.sgl_lote as SglLote, '+
                '        tll.sgl_local as SglLocal, '+
                '        ta.des_apelido as DesApelido, '+
                '        dbo.fnt_composicao_racial(ta.cod_animal,ta.cod_pessoa_produtor) as DesComposicaoRacial, '+
                '        ''IA'' as SglTipoEvento, '+
                '        dbo.fnt_idade_dias(te.dta_inicio, :dta_evento_parto) as NumDiasGestacao '+
                ' from tab_evento_insemin_artificial as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae, '+
                '      tab_fazenda as tf, '+
                '      tab_fazenda as tfc, '+
                '      tab_raca as tr, '+
                '      tab_lote as tl, '+
                '      tab_local as tll, '+
                '      tab_categoria_animal as tca, '+
                '      tab_animal as ta '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' and   te.cod_tipo_evento = 26 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   ta.cod_animal = tem.cod_animal '+
                ' and   ta.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                ' and   ta.cod_pessoa_produtor = tfc.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tfc.cod_fazenda '+
                ' and   ta.cod_raca = tr.cod_raca '+
                ' and   ta.cod_categoria_animal = tca.cod_categoria_animal '+
                ' and   ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
                ' and   ta.cod_lote_corrente *= tl.cod_lote '+
                ' and   ta.cod_fazenda_corrente *= tl.cod_fazenda '+
                ' and   ta.cod_pessoa_produtor *= tll.cod_pessoa_produtor '+
                ' and   ta.cod_local_corrente *= tll.cod_local '+
                ' and   ta.cod_fazenda_corrente *= tll.cod_fazenda '+
                ' union '+
                ' select distinct ta.cod_animal as CodAnimal, '+
                '        tf.sgl_fazenda as SglFazendaManejo, '+
                '        ta.cod_animal_manejo as CodAnimalManejo, '+
                '        ta.cod_situacao_sisbov as CodSituacaoSisBov, '+
                '        ta.ind_sexo as IndSexo, '+
                '        tca.sgl_categoria_animal as SglCategoria, '+
                '        tr.sgl_raca as SglRaca, '+
                '        dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as IdadeAnimal, '+
                '        tfc.sgl_fazenda as SglFazendaCorrente, '+
                '        tl.sgl_lote as SglLote, '+
                '        tll.sgl_local as SglLocal, '+
                '        ta.des_apelido as DesApelido, '+
                '        dbo.fnt_composicao_racial(ta.cod_animal,ta.cod_pessoa_produtor) as DesComposicaoRacial, '+
                '        ''RP'' as SglTipoEvento, '+
                '        dbo.fnt_idade_dias(te.dta_inicio, :dta_evento_parto) as NumDiasGestacao '+
                ' from tab_evento_cobertura_reg_pasto as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae, '+
                '      tab_fazenda as tf, '+
                '      tab_fazenda as tfc, '+
                '      tab_raca as tr, '+
                '      tab_lote as tl, '+
                '      tab_local as tll, '+
                '      tab_categoria_animal as tca, '+
                '      tab_animal as ta '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' and   te.cod_tipo_evento = 23 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   tem.cod_reprodutor_multiplo is null '+
                ' and   ta.cod_animal = tem.cod_animal_touro '+
                ' and   ta.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                ' and   ta.cod_pessoa_produtor = tfc.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tfc.cod_fazenda '+
                ' and   ta.cod_raca = tr.cod_raca '+
                ' and   ta.cod_categoria_animal = tca.cod_categoria_animal '+
                ' and   ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor '+
                ' and   ta.cod_lote_corrente *= tl.cod_lote '+
                ' and   ta.cod_fazenda_corrente *= tl.cod_fazenda '+
                ' and   ta.cod_pessoa_produtor *= tll.cod_pessoa_produtor '+
                ' and   ta.cod_local_corrente *= tll.cod_local '+
                ' and   ta.cod_fazenda_corrente *= tll.cod_fazenda '+
                ' union '+
                ' select distinct ta.cod_reprodutor_multiplo as CodAnimal, '+
                '        tf.sgl_fazenda as SglFazendaManejo, '+
                '        ta.cod_reprodutor_multiplo_manejo as CodAnimalManejo, '+
                '        null as CodSituacaoSisBov, '+
                '        null as IndSexo, '+
                '        null as SglCategoria, '+
                '        null as SglRaca, '+
                '        null as IdadeAnimal, '+
                '        null as SglFazendaCorrente, '+
                '        null as SglLote, '+
                '        null as SglLocal, '+
                '        null as DesApelido, '+
                '        null as DesComposicaoRacial, '+
                '        ''RP'' as SglTipoEvento, '+
                '        dbo.fnt_idade_dias(te.dta_inicio, :dta_evento_parto) as NumDiasGestacao '+
                ' from tab_evento_cobertura_reg_pasto as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae, '+
                '      tab_fazenda as tf, '+
                '      tab_reprodutor_multiplo as ta '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' and   te.cod_tipo_evento = 23 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   tem.cod_animal_touro is null '+
                ' and   ta.cod_reprodutor_multiplo = tem.cod_reprodutor_multiplo '+
                ' and   ta.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                ' order by CodAnimalManejo ');
{$ENDIF}
  try
  Query.Parambyname('cod_estacao_monta').asinteger := CodEstacaoMonta;
  Query.Parambyname('cod_animal_femea').asinteger := CodAnimalFemea;
  Query.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
  Query.Parambyname('dta_evento_parto').asdatetime := DtaEventoParto;
  Query.Open;
  if (Conexao.CodPapelUsuario = 3) then begin
     Mensagens.Adicionar(1697, Self.ClassName, NomMetodo, []);
  end;

  Result := 0;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(1559, Self.ClassName, NomMetodo, [E.Message]);
      Result := -1559;
      Exit;
    end;
  end;
end;

function TIntAnimais.CancelarEfetivacaoAnimaisPesquisados: Integer;
const
  NomeMetodo : String = 'CancelarEfetivacaoAnimaisPesquisados';
  Metodo : Integer = 493;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(1611, Self.ClassName, NomeMetodo, []);
    Result := -1611;
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(1611, Self.ClassName, NomeMetodo, []);
    Result := -1611;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.Close;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'if object_id(''tempdb..#tmp_animais_pesquisados'') is null ' +
        '  create table #tmp_animais_pesquisados ' +
        '    (cod_animal integer not null )';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'truncate table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'insert into #tmp_animais_pesquisados ' +
        '  (cod_animal)' +
        'values ' +
        '  (:cod_animal)';
      {$ENDIF}

      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := CancelarEfetivacoes(-1, '', '', '#PESQUISADOS');
      if Result = 0 then ZerarValoresUltimaPesquisa;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'drop table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1612, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1612;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.EfetivarCadastroAnimaisPesquisados: Integer;
const
  NomeMetodo : String = 'EfetivarCadastroAnimaisPesquisados';
  Metodo : Integer = 492;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(1610, Self.ClassName, NomeMetodo, []);
    Result := -1610;
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(1610, Self.ClassName, NomeMetodo, []);
    Result := -1610;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.Close;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'if object_id(''tempdb..#tmp_animais_pesquisados'') is null ' +
        '  create table #tmp_animais_pesquisados '+
        '    (cod_animal integer not null )';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'truncate table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'insert into #tmp_animais_pesquisados ' +
        '  (cod_animal)' +
        'values ' +
        '  (:cod_animal)';
      {$ENDIF}


      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := EfetivarCadastros(-1, '', '', '#PESQUISADOS');
      if Result = 0 then ZerarValoresUltimaPesquisa;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'drop table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;

    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1609, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1609;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.DesmCancAnimaisComoExportadosPesquisados(CodProcessamento : Integer): Integer;
const
  NomeMetodo : String = 'DesmCancAnimaisComoExportadosPesquisados';
  Metodo : Integer = 506;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(1640, Self.ClassName, NomeMetodo, []);
    Result := -1640;
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(1640, Self.ClassName, NomeMetodo, []);
    Result := -1640;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.Close;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'if object_id(''tempdb..#tmp_animais_pesquisados'') is null ' +
        '  create table #tmp_animais_pesquisados ' +
        '    (cod_animal integer not null )';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'truncate table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'insert into #tmp_animais_pesquisados ' +
        '  (cod_animal)' +
        'values ' +
        '  (:cod_animal)';
      {$ENDIF}

      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := DesmarcarExportados(-1, '', '', '#PESQUISADOS', CodProcessamento);
      if Result = 0 then ZerarValoresUltimaPesquisa;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'drop table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1641, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1641;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.DesmarcarExportados(CodFazendaManejo: Integer;
  CodInicialAnimalManejo, CodFinalAnimalManejo,
  CodAnimais: String; CodProcessamento : Integer): Integer;
const
  Metodo : Integer = 508;
  NomeMetodo : String = 'DesmarcarExportados';
var
  Q, QS, QI, QU : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DtaSist : TDateTime;
  QtdAnimalComprado, QtdProcessados, QtdErros, QtdSituacaoImpropria, QtdNaoEfetivados : Integer;
  QtdAnimalNaoexportado, QtdSemCodigoExportacao, CodOperacao,
  CodLogOperacao: integer;
  sLog: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Seleciona os animais candidatos à operação
  Result := SelecionaAnimaisMultiplos(CodFazendaManejo, CodInicialAnimalManejo,
    CodFinalAnimalManejo, CodAnimais);
  if Result < 0 then begin
    Exit;
  end;

  // Variaveis para totalização
  QtdSituacaoImpropria := 0;
  QtdNaoEfetivados := 0;
  QtdAnimalNaoexportado := 0;
  QtdSemCodigoExportacao := 0;
  QtdProcessados := 0;
  QtdAnimalComprado := 0;
//  QtdErros := 0;
  DtaSist := DtaSistema;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    // Monta comando de update da tab_animal
    Q.SQL.Clear;
{$IFDEF MSSQL}
    Q.SQL.Add('update tab_animal ' +
              '   set cod_arquivo_sisbov      = NULL ' +
//              '       cod_pais_sisbov         = NULL, ' +
//              '       cod_estado_sisbov       = NULL, ' +
//              '       cod_micro_regiao_sisbov = NULL, ' +
//              '       cod_animal_sisbov       = NULL, ' +
//              '       num_dv_sisbov           = NULL, ' +
//              '       cod_arquivo_sisbov_log  = NULL, ' +
//              '       dta_efetivacao_cadastro = NULL, ' +
//              '       cod_situacao_sisbov     = "P"   ' +
              ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
              '   and cod_animal = :cod_animal ');
{$ENDIF}
    QS := THerdomQuery.Create(Conexao, nil);
    try
      // Monta comando de select na tabela tab_codigo_exportacao
      QS.SQL.Clear;
  {$IFDEF MSSQL}
      QS.SQL.Add('select 1 as CodExportacao ' +
                 'from   tab_codigo_exportacao ' +
                 'where  cod_pessoa_produtor = :cod_pessoa_produtor ' +
                 ' and   cod_animal = :cod_animal ');
  {$ENDIF}

      QI := THerdomQuery.Create(Conexao, nil);
      try
        // Monta comando de insert da tabela tab_codigo_exportacao
        QI.SQL.Clear;
  {$IFDEF MSSQL}
        QI.SQL.Add('insert  into tab_codigo_exportacao ' +
                   'values (:cod_pessoa_produtor, :cod_animal, :cod_arquivo_sisbov )');
  {$ENDIF}

        QU := THerdomQuery.Create(Conexao, nil);
        try
          // Monta comando de update na tabela tab_codigo_sisbov
          QU.SQL.CLEAR;
  {$IFDEF MSSQL}
          QU.SQL.ADD(' update tab_codigo_sisbov ' +
                     '   set cod_animal_cancelado    = :cod_animal        ' +
                     ' where cod_pais_sisbov         = :cod_pais_sisbov   ' +
                     '   and cod_estado_sisbov       = :cod_estado_sisbov ' +
                     '   and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov' +
                     '   and cod_animal_sisbov       = :cod_animal_sisbov ' +
                     '   and num_dv_sisbov           = :num_dv_sisbov');
  {$ENDIF}

          try
            // Processa os animais
            while not FQueryAux.Eof do begin
              // Abre Transação
              BeginTran;

              // Obtem dados do animal atual
              ObtemAnimalSelecionado(DadosAnimal);

              if (DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho) then
              begin
                Mensagens.Adicionar(2266, Self.ClassName, NomeMetodo, []);
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                  'Somente o produtor do animal pode desmarcar como exportado o cadastro do animal.', 6, 1);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
                Result := -2266;
                Inc(QtdNaoEfetivados);
                FQueryAux.Next;
                Commit;
                Continue;
              end;

              if (DadosAnimal.CodPessoaTecnico <> Conexao.CodPessoa) and (Conexao.CodPapelUsuario = 3) and
                 (DadosAnimal.CodPessoaTecnico > 0) then begin
                 Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [DadosAnimal.CodAnimalManejo]);
                 Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal não está associado ao usuário (técnico).', 6, 1);
                 if Result < 0 then begin
                    Rollback;
                    Exit;
                 end;
                 Result := -1698;
                 Inc(QtdNaoEfetivados);
                 FQueryAux.Next;
                 Commit;
                 Continue;
              end;

              // Verifica se o cadastro não foi efetivado
              if DadosAnimal.DtaEfetivacaoCadastro <= 0 then begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O cadastro do animal não está efetivado', 6, 1);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
                Inc(QtdNaoEfetivados);
                FQueryAux.Next;
                Commit;
                Continue;
              end;

              // Verifica se a situação do animal é (I) Identificado
              if DadosAnimal.CodSituacaoSisbov <> 'I' then begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal tem que estar em situação de "Identificado no SISBOV" para poder desmarcá-lo', 6, 1);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
                Inc(QtdSituacaoImpropria);
                FQueryAux.Next;
                Commit;
                Continue;
              end;

              // Verifica se o codArquivoSisbov é válido
              if DadosAnimal.CodArquivoSisbov = 0 then begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'Não existe código de exportação para este animal.', 6, 1);
                if Result < 0 then begin
                  Rollback;
                  Exit;
                end;
                Inc(QtdAnimalNaoexportado);
                FQueryAux.Next;
                Commit;
                Continue;
              end;

              if (DadosAnimal.CodAnimalVendido > 0) and
                 (DadosAnimal.CodSituacaoAnimalVendido <> 'N') then
              begin
                if not FIndLogMensagem then
                begin
                  Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                                                      'O animal não pode ser desmarcado como exportado, por ser um animal já ' +
                                                      'identificado no SISBOV antes de seu evento de COMPRA.', 6, 1);
                  if Result < 0 then
                  begin
                    Rollback;
                    Exit;
                  end;
                end
                else
                begin
                  Mensagens.Adicionar('O animal não pode ser desmarcado como exportado, por ser um animal já ' +
                                      'identificado no SISBOV antes de seu evento de COMPRA.', 1,
                                      Self.ClassName, NomeMetodo, []);
                end;
                Inc(QtdAnimalComprado);
                FQueryAux.Next;
                Commit;
                Continue;
              end;

              // Limpa possível mensagem de erro pré existente para o animal
              Result := LimparErrosOperacao(DadosAnimal.CodAnimal, 1);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;

              if (CodProcessamento = 21) or (CodProcessamento = 24) then begin
                QS.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                QS.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
                QS.Open;

                if QS.FieldByName('CodExportacao').AsInteger = 0 then begin
                  // Insere o código de exportacao da tabela tab_codigo_exportacao
                  QI.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                  QI.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
                  QI.ParamByName('cod_arquivo_sisbov').AsInteger := DadosAnimal.CodArquivoSisbov;
                  QI.ExecSQL;
                end;
              end;

              // Altera o campo cod_arquivo_sisbov na tab_animal
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
              Q.ExecSQL;

              // Atualiza o cmapo cod_animal_cancelado na tabela tab_codigo_sisbov
              QU.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
              QU.ParamByName('cod_pais_sisbov').AsInteger := DadosAnimal.CodPaisSisbov;
              QU.ParamByName('cod_estado_sisbov').AsInteger := DadosAnimal.CodEstadoSisbov;
              QU.ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
              QU.ParamByName('cod_animal_sisbov').AsInteger := DadosAnimal.CodAnimalSisbov;
              QU.ParamByName('num_dv_sisbov').AsInteger := DadosAnimal.NumDVSisbov;
              QU.ExecSQL;

              // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
              // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
              Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;

              CodLogOperacao := ProximoCodRegistroLog;
              if (CodProcessamento = 21) or (CodProcessamento = 24) then begin
                sLog := 'Desmarcou como exportado o animal: ' + DadosAnimal.CodAnimalCertificadora;
                CodOperacao := 8;
              end else begin
                sLog := 'Cancelou a exportação do animal: ' + DadosAnimal.CodAnimalCertificadora;
                CodOperacao := 9;                
              end;
              // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
              // 7- Marcar como exportado, 8- Desmarcar como exportado 9- Cancelar exportacao
              Result := GravarLogOperacaoAnimal('tab_animal', sLog, CodLogOperacao, DadosAnimal.CodRegistroLog, CodOperacao, Metodo);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;

              // Confirma transação
              Commit;
              Inc(QtdProcessados);
              FQueryAux.Next;
            end;

            ZerarValoresUltimaPesquisa;

            // Atualiza coleção de mensagens
            Mensagens.Clear;

            QtdErros := (QtdNaoEfetivados + QtdSituacaoImpropria + QtdAnimalNaoexportado + QtdSemCodigoExportacao + QtdAnimalComprado);

            if QtdErros > 0 then begin
              Mensagens.Adicionar(1643, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados), IntToStr(QtdErros)]);
              Result := -1;
            end else begin
              Mensagens.Adicionar(1642, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados)]);
              Result := 0;
            end;

          except
            on E: Exception do begin
              Rollback;
              Mensagens.Adicionar(1644, Self.ClassName, NomeMetodo, [E.Message]);
              Result := -1644;
              Exit;
            end;
          end;
        finally
          QU.Free;
        end;
      finally
        QI.Free;
      end;
    finally
      QS.Free;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.MarcarAnimaisComoExportadosPesquisados: Integer;
const
  NomeMetodo : String = 'MarcarAnimaisComoExportadosPesquisados';
  Metodo : Integer = 505;
var
  Q : THerdomQuery;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if not Query.Active then begin
    Mensagens.Adicionar(1639, Self.ClassName, NomeMetodo, []);
    Result := -1639;
    Exit;
  end;

  if Query.IsEmpty then begin
    Mensagens.Adicionar(1639, Self.ClassName, NomeMetodo, []);
    Result := -1639;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.Close;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'if object_id(''tempdb..#tmp_animais_pesquisados'') is null ' +
        '  create table #tmp_animais_pesquisados '+
        '    (cod_animal integer not null )';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'truncate table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'insert into #tmp_animais_pesquisados ' +
        '  (cod_animal)' +
        'values ' +
        '  (:cod_animal)';
      {$ENDIF}


      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;
      Query.First;

      Result := MarcarExportados(-1, '', '', '#PESQUISADOS');
      if Result = 0 then ZerarValoresUltimaPesquisa;

      Q.SQL.Text :=
      {$IFDEF MSSQL}
        'drop table #tmp_animais_pesquisados';
      {$ENDIF}
      Q.ExecSQL;

    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1638, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1638;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.MarcarExportados(CodFazendaManejo: Integer;
  CodInicialAnimalManejo, CodFinalAnimalManejo,
  CodAnimais: String): Integer;
const
  Metodo : Integer = 507;
  NomeMetodo : String = 'MarcarExportados';
var
  Q, QS, QD : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DtaSist : TDateTime;
  QtdAnimalComprado, QtdProcessados, QtdErros, QtdSituacaoImpropria, QtdNaoEfetivados : Integer;
  QtdAnimalNaoDesmarcado, QtdSemCodigoExportacao, CodLogOperacao: integer;
  sLog: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Seleciona os animais candidatos à operação
  Result := SelecionaAnimaisMultiplos(CodFazendaManejo, CodInicialAnimalManejo,
    CodFinalAnimalManejo, CodAnimais);
  if Result < 0 then begin
    Exit;
  end;

  // Variaveis para totalização
  QtdSituacaoImpropria := 0;
  QtdNaoEfetivados := 0;
  QtdAnimalNaoDesmarcado := 0;
  QtdSemCodigoExportacao := 0;
  QtdProcessados := 0;
  QtdAnimalComprado := 0;
//  QtdErros := 0;
  DtaSist := DtaSistema;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    // Monta comando de update da tab_animal
    Q.SQL.Clear;
{$IFDEF MSSQL}
    Q.SQL.Add('update tab_animal ' +
              '   set cod_arquivo_sisbov = :cod_arquivo_sisbov ' +
              ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
              '   and cod_animal = :cod_animal ');
{$ENDIF}
    QS := THerdomQuery.Create(Conexao, nil);
    try
      // Monta comando de select na tabela tab_codigo_exportacao
      QS.SQL.Clear;
  {$IFDEF MSSQL}
      QS.SQL.Add('select cod_animal as CodAnimal ' +
                 '    ,  cod_arquivo_sisbov as CodArquivoSisbov ' +
                 'from   tab_codigo_exportacao ' +
                 'where  cod_pessoa_produtor = :cod_pessoa_produtor ' +
                 ' and   cod_animal = :cod_animal ');

  {$ENDIF}

      QD := THerdomQuery.Create(Conexao, nil);
      try
        // Monta comando de delete da tabela tab_codigo_exportacao
        QD.SQL.Clear;
  {$IFDEF MSSQL}
        QD.SQL.Add('delete from  tab_codigo_exportacao ' +
                   'where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   ' and  cod_animal = :cod_animal ');
  {$ENDIF}
        try
          // Processa os animais
          while not FQueryAux.Eof do begin
            // Abre Transação
            BeginTran;

            // Obtem dados do animal atual
            ObtemAnimalSelecionado(DadosAnimal);

            if (DadosAnimal.CodPessoaProdutor <> Conexao.CodProdutorTrabalho) then
            begin
              Mensagens.Adicionar(2265, Self.ClassName, NomeMetodo, []);
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                'Somente o produtor do animal pode marcar como exportado o cadastro do animal.', 5, 1);
              if Result < 0 then
              begin
                Rollback;
                Exit;
              end;
              Result := -2265;
              Inc(QtdNaoEfetivados);
              FQueryAux.Next;
              Commit;
              Continue;
            end;

            // Verifica se o cadastro não foi efetivado
            if DadosAnimal.DtaEfetivacaoCadastro <= 0 then begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O cadastro do animal não está efetivado', 5, 1);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
              Inc(QtdNaoEfetivados);
              FQueryAux.Next;
              Commit;
              Continue;
            end;

            // Verifica se a situação do animal é (I) Identificado
            if DadosAnimal.CodSituacaoSisbov <> 'I' then begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal tem que estar em situação de "Identificado no SISBOV" para poder ter sido exportado.', 5, 1);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
              Inc(QtdSituacaoImpropria);
              FQueryAux.Next;
              Commit;
              Continue;
            end;

            if DadosAnimal.CodArquivoSisbov > 0 then begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal não foi desmarcado como exportado. A operação de marcar como exportado não será realizada.', 5, 1);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
              Inc(QtdAnimalNaoDesmarcado);
              FQueryAux.Next;
              Commit;
              Continue;
            end;

            if (DadosAnimal.CodAnimalVendido > 0) and
               (DadosAnimal.CodSituacaoAnimalVendido <> 'N') then
            begin
              if not FIndLogMensagem then
              begin
                Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist,
                                                    'O animal não pode ser marcado como exportado, por ser um animal já ' +
                                                    'identificado no SISBOV antes de seu evento de COMPRA.', 5, 1);
                if Result < 0 then
                begin
                  Rollback;
                  Exit;
                end;
              end
              else
              begin
                Mensagens.Adicionar('O animal não pode ser marcado como exportado, por ser um animal já ' +
                                    'identificado no SISBOV antes de seu evento de COMPRA.', 1,
                                    Self.ClassName, NomeMetodo, []);
              end;
              Inc(QtdAnimalComprado);
              FQueryAux.Next;
              Commit;
              Continue;
            end;

            // Limpa possível mensagem de erro pré existente para o animal
            Result := LimparErrosOperacao(DadosAnimal.CodAnimal, 1);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;

            QS.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            QS.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
            QS.Open;

            if QS.Eof then begin
              Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal não tem código de arquivo Sisbov processado para exportação.', 5, 1);
              if Result < 0 then begin
                Rollback;
                Exit;
              end;
              Inc(QtdSemCodigoExportacao);
              FQueryAux.Next;
              Commit;              
              Continue;
            end;

            // Altera o campo cod_arquivo_sisbov na tab_animal
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
            Q.ParamByName('cod_arquivo_sisbov').AsInteger := QS.FieldByName('CodArquivoSisbov').AsInteger;
            Q.ExecSQL;

            // Deleta o código de exportacao da tabela tab_codigo_exportacao
            QD.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            QD.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
            QD.ExecSQL;

            // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            Result := GravarLogOperacao('tab_animal', DadosAnimal.CodRegistroLog, 3, Metodo);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;

            CodLogOperacao := ProximoCodRegistroLog;
            sLog := 'Marcou como exportado o animal: ' + DadosAnimal.CodAnimalCertificadora;
            // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
            // 7- Marcar como exportado, 8- Desmarcar como exportado 9- Cancelar exportacao
            Result := GravarLogOperacaoAnimal('tab_animal', sLog, CodLogOperacao, DadosAnimal.CodRegistroLog, 7, Metodo);
            if Result < 0 then begin
              Rollback;
              Exit;
            end;

            // Confirma transação
            Commit;

            Inc(QtdProcessados);
            FQueryAux.Next;
          end;

          ZerarValoresUltimaPesquisa;

          // Atualiza coleção de mensagens
          Mensagens.Clear;

          QtdErros := (QtdNaoEfetivados + QtdSituacaoImpropria + QtdAnimalNaoDesmarcado + QtdSemCodigoExportacao + QtdAnimalComprado);

          if QtdErros > 0 then begin
            Mensagens.Adicionar(1637, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados), IntToStr(QtdErros)]);
            Result := -1;
          end
          else
          begin
            Mensagens.Adicionar(1636, Self.ClassName, NomeMetodo, [IntToStr(QtdProcessados)]);
            Result := 0;
          end;
        except
          on E: Exception do
          begin
            Rollback;
            Mensagens.Adicionar(1635, Self.ClassName, NomeMetodo, [E.Message]);
            Result := -1635;
            Exit;
          end;
        end;
      finally
        QD.Free;
      end;
    finally
      QS.Free;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.PesquisarRelatorioAutenticacao(SglProdutor, NomPessoaProdutor,
  CodOrigens, IndSexo: String; CodAptidao, CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer; CodRacas,
  CodCategorias: String; DtaInicioNascimento, DtaFimNascimento: TDateTime;
  CodRegimeAlimentar, CodTipoLugar: Integer; DtaInicioAutenticacao,
  DtaFimAutenticacao, DtaInicioAutenticacaoPrevista,
  DtaFimAutenticacaoPrevista: TDateTime;
  IndCertificadoEmitido: String): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioAutenticacao';
  CodRelatorio: Integer = 24;
  // Atributos que podem vir a compor o resultset montado pelo método
  cNOMPESSOAPRODUTOR: Integer = 1;
  cCODANIMALMANEJO: Integer = 2;
  cCODANIMALSISBOV: Integer = 3;
  cCODAUTENTICACAOSISBOV: Integer = 4;
  cSGLRACA: Integer = 5;
  cDESRACA: Integer = 6;
  cINDSEXO: Integer = 7;
  cIDADE: Integer = 8;
  cNOMANIMAL: Integer = 9;
  cDESAPELIDO: Integer = 10;
  cDTAAUTENTICACAOSISBOV: Integer = 11;
  cQTDANIMAIS: Integer = 12;
  cDTAIDENTIFICACAOPROPRIEDADE: Integer = 13;
  cNOMPROPRIEDADEIDENTIFICACAO: Integer = 14;
  cNUMIMOVELIDENTIFICACAO: Integer = 15;
  cDTAPREVISAOAUTENTICACAO: Integer = 16;
  cINDCERTIFICADOEMITIDO: Integer = 17;
var
  NumDiasEspera: Integer;
  sAux: String;
  bPersonalizavel, bAux: Boolean;
  IntRelatorios: TIntRelatorios;
  Param : TValoresParametro;
  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        Query.SQL.Text := Query.SQL.Text + Linha;
      end;
    end;
  end;
  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;
begin
  {----------------------------------------------------------------------------
  * Notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    Param.Clear;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodOrigens <> '' then begin
      Result := VerificaParametroMultiValor(CodOrigens, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
    end;
  finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');
    try
      NumDiasEspera := StrToIntDef(ValorParametro(66), 40);
      Query.Close;
      Query.SQL.Clear;

      // Construção da query de pesquisa
      SQL('select '+
          '  tp.nom_pessoa as NomPessoaProdutor ', 0);
{$IFDEF MSSQL}
      SQL('  , isnull(tfm.sgl_fazenda+'' ''+ta.cod_animal_manejo, '+
          '    ta.cod_animal_manejo) as CodAnimalManejo ', cCODANIMALMANEJO);
      SQL('  , case ta.cod_animal_sisbov when null then '+
          '      null '+
          '    else '+
          '      right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + '+
          '      case ta.cod_micro_regiao_sisbov when -1 then '+
          '        ''00'' '+
          '      when -1 then ' +
          '        '''' ' +
          '      else '+
          '        right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) '+
          '      end + '' '' + '+
          '      right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '' '' + '+
          '      right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) '+
          '    end as CodAnimalSisBov ', cCODANIMALSISBOV);
{$ENDIF}
      SQL('  , ta.cod_autenticacao_sisbov as CodAutenticacaoSisbov ', cCODAUTENTICACAOSISBOV);
      SQL('  , tr.sgl_raca as SglRaca ', cSGLRACA);
      SQL('  , tr.des_raca as DesRaca ', cDESRACA);
      SQL('  , ta.ind_sexo as IndSexo ', cINDSEXO);
{$IFDEF MSSQL}
      SQL('  , case when ta.dta_desativacao is null then '+
          '      dbo.fnt_idade(ta.dta_nascimento, getdate()) '+
          '    else '+
          '      dbo.fnt_idade(ta.dta_nascimento, ta.dta_desativacao) '+
          '    end as Idade ', cIDADE);
{$ENDIF}
      SQL('  , ta.nom_animal as NomAnimal ', cNOMANIMAL);
      SQL('  , ta.des_apelido as DesApelido ', cDESAPELIDO);
      SQL('  , taa.dta_importacao as DtaAutenticacaoSisbov ', cDTAAUTENTICACAOSISBOV);
      SQL('  , ta.num_imovel_identificacao as NumImovelIdentificacao ', cNUMIMOVELIDENTIFICACAO);
      SQL('  , tpr.nom_propriedade_rural as NomPropriedadeIdentificacao ', cNOMPROPRIEDADEIDENTIFICACAO);
      SQL('  , tpr.dta_efetivacao_cadastro as DtaIdentificacaoPropriedade ', cDTAIDENTIFICACAOPROPRIEDADE);
      SQL('  , tas.dta_insercao_sisbov + :num_dias_espera as DtaPrevisaoAutenticacao ', cDTAPREVISAOAUTENTICACAO);
{$IFDEF MSSQL}
      SQL('  , case isnull(tca.cod_pessoa_produtor, 0) when 0 then ''N'' else ''S'' end as IndCertificadoEmitido ', cINDCERTIFICADOEMITIDO);
{$ENDIF}
      SQL('  , count(1) as QtdAnimais ', 0);
      SQL('from '+
          '  tab_animal ta '+
          '  , tab_pessoa tp '+
          '  , tab_arq_import_sisbov taa ', 0);
      SQL('  , tab_fazenda tfm ', cCODANIMALMANEJO);
      SQL('  , tab_raca tr ', [cSGLRACA, cDESRACA]);
      SQL('  , tab_produtor tpp ', SE((SglProdutor <> ''), 0, -1));
      SQL('  , tab_propriedade_rural tpr ', [cNOMPROPRIEDADEIDENTIFICACAO, cDTAIDENTIFICACAOPROPRIEDADE]);
      SQL('  , tab_arquivo_sisbov tas ', SE((DtaInicioAutenticacaoPrevista > 0) and (DtaFimAutenticacaoPrevista > 0), 0, cDTAPREVISAOAUTENTICACAO));
      SQL('  , tab_certificado_animal tca ', SE(IndCertificadoEmitido = 'S', 0, cINDCERTIFICADOEMITIDO));
      SQL('where '+
          '  tp.cod_pessoa = ta.cod_pessoa_produtor '+
          '  and taa.cod_arq_import_sisbov = ta.cod_arq_import_sisbov ', 0);
{$IFDEF MSSQL}
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ', cCODANIMALMANEJO);
{$ENDIF}
      SQL('  and tr.cod_raca = ta.cod_raca ', [cSGLRACA, cDESRACA]);
      SQL('  and tpr.cod_propriedade_rural =* ta.cod_propriedade_identificacao ', [cNOMPROPRIEDADEIDENTIFICACAO, cDTAIDENTIFICACAOPROPRIEDADE]);
      SQL('  and tas.cod_arquivo_sisbov = ta.cod_arquivo_sisbov ', SE((DtaInicioAutenticacaoPrevista > 0) and (DtaFimAutenticacaoPrevista > 0), 0, cDTAPREVISAOAUTENTICACAO));
      SQL('  and tpp.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '  and tpp.sgl_produtor like :sgl_produtor ', SE((SglProdutor <> ''), 0, -1));
      SQL('  and tp.nom_pessoa like :nom_pessoa ', SE((NomPessoaProdutor <> ''), 0, -1));
      SQL('  and ta.cod_tipo_origem in ( '+CodOrigens+' ) ', SE((CodOrigens <> ''), 0, -1));
      SQL('  and ta.cod_aptidao = :cod_aptidao ', SE((CodAptidao > 0), 0, -1));
      SQL('  and ta.ind_sexo  = :ind_sexo ', SE((IndSexo = 'M') or (IndSexo = 'F'), 0, -1));
      SQL('  and ta.cod_pais_sisbov = :cod_pais_sisbov '+
          '  and ta.cod_estado_sisbov = :cod_estado_sisbov '+
          '  and ta.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov '+
          '  and ta.cod_animal_sisbov between :cod_animal_sisbov_inicio and :cod_animal_sisbov_fim ', SE((CodPaisSisbov > 0) and (CodEstadoSisbov > 0) and (CodMicroRegiaoSisbov>=0) and (CodSisbovInicio > 0) and (CodSisbovFim > 0), 0, -1));
      SQL('  and ta.cod_raca in ( '+CodRacas+' ) ', SE((CodRacas <> ''), 0, -1));
      SQL('  and ta.cod_categoria_animal in ( '+CodCategorias+' ) ', SE((CodCategorias <> ''), 0, -1));
      SQL('  and ta.cod_regime_alimentar = :cod_regime_alimentar ', SE((CodRegimeAlimentar > 0), 0, -1));
      SQL('  and ta.cod_tipo_lugar = :cod_tipo_lugar ', SE((CodTipoLugar > 0), 0, -1));
      SQL('  and ta.dta_nascimento >= :dta_nascimento_inicio '+
          '  and ta.dta_nascimento < :dta_nascimento_fim ', SE((DtaInicioNascimento > 0) and (DtaFimNascimento > 0), 0, -1));
      SQL('  and taa.dta_importacao >= :dta_importacao_inicio '+
          '  and taa.dta_importacao < :dta_importacao_fim ', SE((DtaInicioAutenticacao > 0) and (DtaFimAutenticacao > 0), 0, -1));
      SQL('  and ta.cod_pessoa_produtor in (select Cod_pessoa_produtor from tab_associacao_produtor where cod_pessoa_associacao = :cod_pessoa ) ', SE((Conexao.CodPapelUsuario = 1) and (Conexao.CodTipoAcesso = 'C'), 0, -1)); // Associação
      SQL('  and ta.cod_pessoa_produtor in (select Cod_pessoa_produtor from tab_tecnico_produtor where cod_pessoa_tecnico = :cod_pessoa ) ', SE((Conexao.CodPapelUsuario = 3) and (Conexao.CodTipoAcesso = 'C'), 0, -1)); // Tecnico
      SQL('  and ta.cod_pessoa_produtor = :cod_pessoa ', SE((Conexao.CodPapelUsuario = 4) and (Conexao.CodTipoAcesso ='P'), 0, -1)); // Produtor
      SQL('  and ta.cod_pessoa_produtor = :cod_pessoa ', SE(Conexao.CodTipoAcesso = 'N', 0, -1)); // Não tem acesso
      SQL('  and tas.dta_insercao_sisbov >= :dta_insercao_sisbov_inicio '+
          '  and tas.dta_insercao_sisbov < :dta_insercao_sisbov_fim ', SE((DtaInicioAutenticacaoPrevista > 0) and (DtaFimAutenticacaoPrevista > 0), 0, -1));
      SQL('  and tca.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '  and tca.cod_animal = ta.cod_animal  ', SE(IndCertificadoEmitido = 'S', 0, -1));
{$IFDEF MSSQL}
      SQL('  and tca.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tca.cod_animal =* ta.cod_animal  ', SE(IndCertificadoEmitido = 'S', -1, cINDCERTIFICADOEMITIDO));
{$ENDIF}
      SQL('  and not exists '+
          '      (select '+
          '          top 1 1 '+
          '        from '+
{$IFDEF MSSQL}
          '          tab_certificado_animal etca with (nolock) '+
{$ENDIF}
          '        where '+
          '          etca.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '          and etca.cod_animal = ta.cod_animal) ', SE(IndCertificadoEmitido = 'N', 0, -1));
      SQL('group by '+
          '  tp.nom_pessoa ', 0);
      SQL('  , tfm.sgl_fazenda '+
          '  , ta.cod_animal_manejo ', cCODANIMALMANEJO);
      SQL('  , ta.cod_estado_sisbov '+
          '  , ta.cod_micro_regiao_sisbov '+
          '  , ta.cod_animal_sisbov '+
          '  , ta.num_dv_sisbov ', cCODANIMALSISBOV);
      SQL('  , ta.cod_autenticacao_sisbov ', cCODAUTENTICACAOSISBOV);
      SQL('  , tr.sgl_raca ', cSGLRACA);
      SQL('  , tr.des_raca ', cDESRACA);
      SQL('  , ta.ind_sexo ', cINDSEXO);
      SQL('  , ta.dta_desativacao '+
          '  , ta.dta_nascimento ', cIDADE);
      SQL('  , ta.nom_animal ', cNOMANIMAL);
      SQL('  , ta.des_apelido ', cDESAPELIDO);
      SQL('  , taa.dta_importacao ', cDTAAUTENTICACAOSISBOV);
      SQL('  , ta.num_imovel_identificacao ', cNUMIMOVELIDENTIFICACAO);
      SQL('  , tpr.nom_propriedade_rural ', cNOMPROPRIEDADEIDENTIFICACAO);
      SQL('  , tpr.dta_efetivacao_cadastro ', cDTAIDENTIFICACAOPROPRIEDADE);
      SQL('  , tas.dta_insercao_sisbov ', cDTAPREVISAOAUTENTICACAO);
      SQL('  , tca.cod_pessoa_produtor ', cINDCERTIFICADOEMITIDO);
      SQL('order by ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        if (IntRelatorios.ValorCampo('NomField') <> 'QtdAnimais') then begin
          sAux := SE(bAux, '  , ', '')+IntRelatorios.ValorCampo('NomField');
          if SQL(sAux, SE(not bPersonalizavel
            or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
            or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
            and not(bAux) then bAux := True;
        end;
        IntRelatorios.IrAoProximo;
      end;

      // Atribuição dos parâmetros de pesquisa (quando informados)
      if (IntRelatorios.CampoAssociado(cDTAPREVISAOAUTENTICACAO) = 1) then begin
        Query.ParamByName('num_dias_espera').AsInteger := NumDiasEspera;
      end;
      if SglProdutor <> '' then begin
        Query.ParamByName('sgl_produtor').AsString := SglProdutor;
      end;
      if NomPessoaProdutor <> '' then begin
        Query.ParamByName('nom_pessoa').AsString := NomPessoaProdutor + '%';
      end;
      if CodAptidao > 0 then begin
        Query.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      end;
      if (IndSexo = 'M') or (IndSexo = 'F') then begin
        Query.ParamByName('ind_sexo').AsString := IndSexo;
      end;
      if (CodPaisSisbov > 0) and (CodEstadoSisbov > 0)
        and (CodMicroRegiaoSisbov>=0) and (CodSisbovInicio > 0)
        and (CodSisbovFim > 0) then begin
        Query.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisBov;
        Query.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisBov;
        Query.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisBov;
        Query.ParamByName('cod_animal_sisbov_inicio').AsInteger := CodSisBovInicio;
        Query.ParamByName('cod_animal_sisbov_fim').AsInteger := CodSisBovFim;
      end;
      if CodRegimeAlimentar > 0 then begin
        Query.ParamByName('cod_regime_alimentar').AsInteger := CodRegimeAlimentar;
      end;
      if CodTipoLugar > 0 then begin
        Query.ParamByName('cod_tipo_lugar').AsInteger := CodTipoLugar;
      end;
      if (DtaInicioNascimento > 0) and (DtaFimNascimento > 0) then begin
        Query.ParamByName('dta_nascimento_inicio').AsDateTime := Trunc(DtaInicioNascimento);
        Query.ParamByName('dta_nascimento_fim').AsDateTime := Trunc(DtaFimNascimento)+1;
      end;
      if (DtaInicioAutenticacao > 0) and (DtaFimAutenticacao > 0) then begin
        Query.ParamByName('dta_importacao_inicio').AsDateTime := Trunc(DtaInicioAutenticacao);
        Query.ParamByName('dta_importacao_fim').AsDateTime := Trunc(DtaFimAutenticacao)+1;
      end;
      if (DtaInicioAutenticacaoPrevista > 0) and (DtaFimAutenticacaoPrevista > 0) then begin
        Query.ParamByName('dta_insercao_sisbov_inicio').AsDateTime := Trunc(DtaInicioAutenticacaoPrevista) - NumDiasEspera;
        Query.ParamByName('dta_insercao_sisbov_fim').AsDateTime := (Trunc(DtaFimAutenticacaoPrevista)+1) - NumDiasEspera;
      end;
      if ((Conexao.CodPapelUsuario = 1) and (Conexao.CodTipoAcesso = 'C')) // Associacao
        or ((Conexao.CodPapelUsuario = 3) and (Conexao.CodTipoAcesso = 'C')) // Tecnico
        or ((Conexao.CodPapelUsuario = 4) and (Conexao.CodTipoAcesso ='P')) //Produtor
        then begin
        Query.ParamByName('cod_pessoa').AsInteger := Conexao.CodPessoa;
      end else if (Conexao.CodTipoAcesso = 'N') then begin
        Query.ParamByName('cod_pessoa').AsInteger := -1;
      end;

      // Realiza pesquisa
      Query.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1618, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1618;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntAnimais.GerarRelatorioAutenticacao(SglProdutor, NomPessoaProdutor,
  CodOrigens, IndSexo: String; CodAptidao, CodPaisSisBov, CodEstadoSisBov,
  CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim: Integer; CodRacas,
  CodCategorias: String; DtaInicioNascimento, DtaFimNascimento: TDateTime;
  CodRegimeAlimentar, CodTipoLugar: Integer; DtaInicioAutenticacao,
  DtaFimAutenticacao, DtaInicioAutenticacaoPrevista,
  DtaFimAutenticacaoPrevista: TDateTime;  IndCertificadoEmitido: String;
  Tipo, QtdQuebraRelatorio: Integer): String;
const
  Metodo: Integer = 495;
  NomeMetodo: String = 'GerarRelatorioAutenticacao';
  CodRelatorio: Integer = 24;
var
  Rel: TRelatorioPadrao;
  Retorno, iAux, iSubTotal, iTotal: Integer;
  vAux: Array [1..2] of Variant;
  sAux, sQuebra: String;
begin
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  ZerarValoresUltimaPesquisa;

  {Realiza pesquisa de animais de acordo com os critérios informados}
  Retorno := PesquisarRelatorioAutenticacao(SglProdutor, NomPessoaProdutor,
    CodOrigens, IndSexo, CodAptidao, CodPaisSisBov, CodEstadoSisBov,
    CodMicroRegiaoSisBov, CodSisBovInicio, CodSisBovFim, CodRacas,
    CodCategorias, DtaInicioNascimento, DtaFimNascimento, CodRegimeAlimentar,
    CodTipoLugar, DtaInicioAutenticacao, DtaFimAutenticacao,
    DtaInicioAutenticacaoPrevista, DtaFimAutenticacaoPrevista,
    IndCertificadoEmitido);
  if Retorno < 0 then Exit;

  {Verifica se a pesquisa é válida (se existe algum registro)}
  if Query.IsEmpty then begin
    Mensagens.Adicionar(1619, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Rel.TipoDoArquvio := Tipo;

    {Define o relatório em questão e carrega os seus dados específicos}
    Retorno := Rel.CarregarRelatorio(CodRelatorio);
    if Retorno < 0 then Exit;

    {Consiste se o número de quebras é válido}
    if Rel.Campos.NumCampos < QtdQuebraRelatorio then begin
      Mensagens.Adicionar(1384, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    {Desabilita a apresentação dos campos selecionados para quebra}
    Rel.Campos.IrAoPrimeiro;
    for iAux := 1 to QtdQuebraRelatorio do begin
      Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
      Rel.Campos.IrAoProximo;
    end;

    {Inicializa o procedimento de geração do arquivo de relatório}
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    {Incializa totalizadores (subtotal e total)}
    iSubTotal := 0;
    iTotal := 0;

    sQuebra := '';
    Query.First;
    while not Query.EOF do begin
      {Realiza tratamento de quebras somente para formato PDF}
      if Tipo = ctaPDF then begin
        if Rel.LinhasRestantes <= 2 then begin
          {Verifica se o próximo registro existe, para que o último registro
          do relatório possa ser exibido na próxima folha, e assim o total não
          seja mostrado sozinho nesta folha}
          if Query.FindNext then begin
            Query.Prior;
          end else begin
            Rel.NovaPagina;
          end;
        end;
        if QtdQuebraRelatorio > 0 then begin
          {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
          Rel.Campos.CarregarValores(Query);
          {Percorre o(s) campo(s) informado(s) para quebra}
          sAux := '';
          for iAux := 1 to QtdQuebraRelatorio do begin
            {Concatena o valor dos campos de quebra, montando o título}
            vAux[iAux] := Rel.Campos.ValorCampoIdx[iAux-1];
            sAux := SE(sAux = '', sAux, sAux + ' / ') +
              TrataQuebra(Rel.Campos.TextoTituloIdx[iAux-1]) + ': ' +
              Rel.Campos.ValorCampoIdx[iAux-1];
          end;
          if (sAux <> sQuebra) then begin
            {Se ocorreu mudança na quebra atual ou é a primeira ('')}
            {Apresenta subtotal para quebra concluída, caso não seja a primeira}
            if sQuebra <> '' then begin
              {Confirma se o subtotal deve ser apresentado}
              if Rel.Campos.NumCampos > (QtdQuebraRelatorio+1) then begin
                Rel.NovaLinha;
                Rel.Campos.LimparValores;
                Rel.Campos.ValorCampo['QtdAnimais'] := iSubTotal;
                Rel.ImprimirTextoTotalizador('Sub-total');
              end;
              {Zera acumulador da quebra}
              iSubTotal := 0;
            end;
            sQuebra := sAux;
            if Rel.LinhasRestantes <= 4 then begin
              {Verifica se a quebra possui somente um registro e se o espaço é su-
              ficiênte para a impressão de título, registro e subtotal, caso
              contrário quebra a página antes da impressão}
              if not Query.FindNext then begin
                Rel.NovaPagina;
              end else begin
                Rel.Campos.CarregarValores(Query);
                for iAux := 1 to QtdQuebraRelatorio do begin
                  if vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1] then begin
                    Rel.NovaPagina;
                    Break;
                  end;
                end;
              end;
              Query.Prior;
            end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
              {Salta uma linha antes da quebra, caso não seja a primeira da pág.}
              Rel.NovaLinha;
            end;
            {Imprime título da quebra}
            Rel.FonteNegrito;
            Rel.ImprimirTexto(0, sQuebra);
            Rel.FonteNormal;
          end else if (Rel.LinhasRestantes = Rel.LinhasPorPagina) then begin
            {Repete o título da quebra no topo da nova pág. qdo ocorrer quebra de pág.}
            Rel.FonteNegrito;
            Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
            Rel.FonteNormal;
          end;
        end;
        {Verifica se o registro a ser apresentado é o último da quebra, caso
        seja faz com que ele possa ser exibido na próxima folha, e assim o
        subtotal e/ou o total não sejam mostrados sozinhos nesta folha}
        if (Rel.LinhasRestantes <= 2) and (QtdQuebraRelatorio > 0) then begin
          if Query.FindNext then begin
            Rel.Campos.CarregarValores(Query);
            for iAux := 1 to QtdQuebraRelatorio do begin
              if vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1] then begin
                Rel.NovaPagina;
                Break;
              end;
            end;
            Query.Prior;
            {Caso uma nova pág. tenha sido criada, força o reinício do procedi-
            mento para que o nome do produtor possa ser impresso no início da nova
            página concatenado com o texto "(continuação)"}
            if Rel.LinhasRestantes = Rel.LinhasPorPagina then begin
              Continue;
            end;
          end;
        end;
        Inc(iSubTotal, Query.FieldByName('QtdAnimais').AsInteger);
        Inc(iTotal, Query.FieldByName('QtdAnimais').AsInteger);
      end;
      Rel.ImprimirColunasResultSet(Query);
      Query.Next;
    end;
    {Realiza tratamento de quebras somente para formato PDF}
    if Tipo = ctaPDF then begin
      {Monta Linhas totalizadoras, caso necessário}
      if Query.RecordCount > 1 then begin
        {Confirma se o subtotal deve ser apresentado}
        if Rel.Campos.NumCampos > (QtdQuebraRelatorio+1) then begin
          Rel.NovaLinha;
          Rel.Campos.LimparValores;
          Rel.Campos.ValorCampo['QtdAnimais'] := iSubTotal;
          Rel.ImprimirTextoTotalizador('Sub-total');
        end;
        Rel.NovaLinha;
        Rel.Campos.LimparValores;
        Rel.Campos.ValorCampo['QtdAnimais'] := iTotal;
        Rel.ImprimirTextoTotalizador('Total');
      end;
    end;
    Retorno := Rel.FinalizarRelatorio;
    {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
  end;
end;

function TIntAnimais.AlterarTecnico(CodTecnico: Integer;
  const CodAnimais: String): Integer;
const
  Metodo : Integer = 530;
  NomeMetodo : String = 'AlterarTecnico';
var
  Q, QAux: THerdomQuery;
  Param: TValoresParametro;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  QAux := THerdomQuery.Create(Conexao, nil);
  try
    try
      Param := TValoresParametro.Create(TValorParametro);
      try
        Result := VerificaParametroMultiValor(CodAnimais, Param);
        if Result < 0 then begin
          Exit;
        end;
      finally
        Param.Free;
      end;

      Begintran;

      Q.SQL.Text :=
        'update ' +
        '  tab_animal ' +
        'set ' +
        '  cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
        'where ' +
        '  cod_pessoa_produtor = :cod_pessoa_produtor ' +
        '  and cod_animal in ( ' + CodAnimais + ' ) ';
      Q.ParamByName('cod_pessoa_tecnico').DataType := ftInteger;
      Q.ParamByName('cod_pessoa_produtor').DataType := ftInteger;
      AtribuiValorParametro(Q.ParamByName('cod_pessoa_tecnico'), CodTecnico);
      AtribuiValorParametro(Q.ParamByName('cod_pessoa_produtor'), Conexao.CodProdutorTrabalho);
      Q.ExecSQL;

      Commit;

      QAux.SQL.Add('select nom_pessoa from tab_pessoa ');
      QAux.SQL.Add(' where cod_pessoa = :cod_pessoa_tecnico');
      QAux.ParamByName('cod_pessoa_tecnico').DataType := ftInteger;
      AtribuiValorParametro(QAux.ParamByName('cod_pessoa_tecnico'), CodTecnico);
      QAux.Open;
      if CodTecnico <> -1 then
        Mensagens.Adicionar(1993, Self.ClassName, NomeMetodo, [QAux.FieldByName('nom_pessoa').AsString, 'foi associado a '+IntToStr(Q.RowsAffected)])
      else
        Mensagens.Adicionar(1993, Self.ClassName, NomeMetodo, ['', 'foi removido de '+IntToStr(Q.RowsAffected)]);

      Result := 0;
    except
      on E: Exception do begin
        Rollback;
        Mensagens.Adicionar(1720, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1720;
        Exit;
      end;
    end;
  finally
    Q.Free;
    QAux.Free;
  end;
end;

function TIntAnimais.AlterarTecnicoAnimaisPesquisados(
  CodTecnico: Integer): Integer;
const
  Metodo : Integer = 531;
  NomeMetodo : String = 'AlterarTecnicoAnimaisPesquisados';
var
  Q, QAux: THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  try
    Q := THerdomQuery.Create(Conexao, nil);
    QAux := THerdomQuery.Create(Conexao, nil);
    try

      Q.SQL.Text :=
{$IFDEF MSSQL}
        'if object_id(''tempdb..#tmp_animais_tecnico'') is null ' +
        '  create table #tmp_animais_tecnico (cod_animal integer not null )';
{$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text := 
{$IFDEF MSSQL}
        'truncate table #tmp_animais_tecnico';
{$ENDIF}
      Q.ExecSQL;

      Q.SQL.Text :=
{$IFDEF MSSQL}
        'insert into #tmp_animais_tecnico (cod_animal) ' +
        'values (:cod_animal)';
{$ENDIF}

      Query.First;
      while not Query.Eof do begin
        Q.ParamByName('cod_animal').AsInteger := Query.FieldByName('CodAnimal').AsInteger;
        Q.ExecSQL;
        Query.Next;
      end;

      Begintran;

      Q.SQL.Text :=
        'update ' +
        '  tab_animal ' +
        'set ' +
        '  cod_pessoa_tecnico = :cod_pessoa_tecnico ' +
        'where ' +
        '  cod_pessoa_produtor = :cod_pessoa_produtor ' +
        '  and cod_animal in ( select cod_animal from #tmp_animais_tecnico )';
      Q.ParamByName('cod_pessoa_tecnico').DataType := ftInteger;
      Q.ParamByName('cod_pessoa_produtor').DataType := ftInteger;
      AtribuiValorParametro(Q.ParamByName('cod_pessoa_tecnico'), CodTecnico);
      AtribuiValorParametro(Q.ParamByName('cod_pessoa_produtor'), Conexao.CodProdutorTrabalho);
      Q.ExecSQL;

      QAux.SQL.Add('select nom_pessoa from tab_pessoa ');
      QAux.SQL.Add(' where cod_pessoa = :cod_pessoa_tecnico');
      QAux.ParamByName('cod_pessoa_tecnico').DataType := ftInteger;
      AtribuiValorParametro(QAux.ParamByName('cod_pessoa_tecnico'), CodTecnico);
      QAux.Open;
      if CodTecnico <> -1 then
        Mensagens.Adicionar(1993, Self.ClassName, NomeMetodo, [QAux.FieldByName('nom_pessoa').AsString, 'foi associado a '+IntToStr(Q.RowsAffected)])
      else
        Mensagens.Adicionar(1993, Self.ClassName, NomeMetodo, ['', 'foi removido de '+IntToStr(Q.RowsAffected)]);

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('drop table #tmp_animais_tecnico');
{$ENDIF}
      Q.ExecSQL;

      Commit;

      Result := 0;

    finally
      Q.Free;
      QAux.Free;
    end;
  except
    on E: Exception do begin
      Rollback;
      Mensagens.Adicionar(1720, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1720;
      Exit;
    end;
  end;
end;

function TIntAnimais.BuscarCaracteristicaAvaliacao(ECodAnimalManejo: String; ESglCaracteristicaAvaliacao: String): Double;
const
  NomMetodo: String = 'BuscarCaracteristicaAvaliaca';
begin
  try
    Result := -1;
    if Trim(ECodAnimalManejo) <= Trim(Query.FieldByName('CodAnimalManejo').AsString) then
    begin
      Query.First;
    end;

    while not Query.Eof do
    begin
      if Trim(ECodAnimalManejo) = Trim(Query.FieldByName('CodAnimalManejo').AsString) then
      begin
        while (Trim(ESglCaracteristicaAvaliacao) <> Trim(Query.FieldByName('SglCaracteristicaAvaliacao').AsString)) and
              (not Query.Eof) do
        begin
          Query.Next;
        end;
        if (Query.Eof) or (Query.FieldByName('QtdAvaliacao').IsNull) or (Query.FieldByName('QtdAvaliacao').AsInteger = 0) then
        begin
          Result := -1;
          Exit;
        end
        else
        begin
          Result := Query.FieldByName('QtdAvaliacao').AsFloat;
          Exit;
        end;
      end
      else
      begin
        Query.Next;
      end;
    end;
  except
    on E:Exception do
    begin
      Mensagens.Adicionar(-1, Self.ClassName, NomMetodo, [e.message]);
      Result := -1;
      Exit;
    end;
  end;
end;

function TIntAnimais.BuscarPosicaoAnimalAvaliacaoCaracteristica(ENumTela: Integer): Integer;
const
  NomMetodo: String = 'BuscarPosicaoAnimalAvaliacaoCaracteristica';
  QtdAnimais: Integer = 5;
var
  NumAnimais,
  Posicao,
  NumTela: Integer;
  Animal: String;
begin
  Result := -1;
  try
    if ENumTela <= 1 then
    begin
      Result := 1;
      Exit;
    end;

    NumAnimais := 1;
    NumTela    := 1;
    Posicao    := 1; 
    Query.First;
    Animal     := Query.FieldByName('CodAnimalManejo').AsString;
    while not Query.Eof do
    begin
      if Animal = Query.FieldByName('CodAnimalManejo').AsString then
      begin
        Query.Next;
        Inc(Posicao);
        Continue;
      end
      else
      begin
        Animal := Query.FieldByName('CodAnimalManejo').AsString;
        Query.Next;        
        Inc(NumAnimais);
        if NumAnimais > QtdAnimais then
        begin
          Inc(NumTela);
          NumAnimais := 1;
        end;
        if NumTela >= (ENumTela) then
        begin
          Result := Posicao;
          Exit;
        end;
        Inc(Posicao);        
      end;
    end;
  except
    on E:Exception do
    begin
      Mensagens.Adicionar(-1, Self.ClassName, NomMetodo, [e.message]);
      Result := -1;
      Exit;
    end;
  end;
end;

class function TIntAnimais.ValidarNIRFIdentificacao(EConexao: TConexao;
  EMensagem: TIntMensagens; ENumImovelReceitaFederal: String;
  ECodPropriedadeRural, ECodLocalizacaoSisbov, ECodPessoaProdutor: Integer;
  IndVerificaEfetivado: Boolean): Integer;
const
  NomMetodo: String = 'ValidarNIRFIdentificacao';
var
  Qry: THerdomQuery;
  CodPropriedadeRural: Integer;
begin
  if ECodPessoaProdutor <= 0 then
  begin
    EMensagem.Adicionar(2103, Self.ClassName, NomMetodo, []);
    Result := -2103;
    Exit;
  end;

  if (ECodPropriedadeRural > 0) and (ENumImovelReceitaFederal <> '') then
  begin
    EMensagem.Adicionar(-2104, Self.ClassName, NomMetodo, []);
    Result := -2104;
    Exit;
  end;

  Try
    Qry := THerdomQuery.Create(EConexao, nil);
    Try
      { Caso o NIRF/INCRA seja informado verifica a existência de uma propriedade.
        Caso seja encontrado mais de 1 registro ou nenhum registro para a consulta retornar erro informando-o
        Caso contrário, retornar o cod_propriedade_rural }
      if (Length(Trim(ENumImovelReceitaFederal)) > 0) and (ECodLocalizacaoSisbov > 0) then
      begin
        Qry.SQL.Clear;
        Qry.SQL.Add('select tpr.cod_propriedade_rural from tab_propriedade_rural tpr, tab_localizacao_sisbov tls');
        Qry.SQL.Add(' where tpr.cod_propriedade_rural = tls.cod_propriedade_rural ');
        Qry.SQL.Add('   and tpr.num_imovel_receita_federal = :num_imovel_receita_federal');
        Qry.SQL.Add('   and tls.cod_localizacao_sisbov = :cod_localizacao_sisbov');
        Qry.SQL.Add('   and tpr.dta_fim_validade is null');        
        Qry.ParamByName('num_imovel_receita_federal').AsString := ENumImovelReceitaFederal;
        Qry.ParamByName('cod_localizacao_sisbov').AsInteger := ECodLocalizacaoSisbov;
        Qry.Open;

        if Qry.IsEmpty then
        begin
          EMensagem.Adicionar('Não foi encontrada nenhuma propriedade rural com o NIRF/INCRA de identificação: %s. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, [ENumImovelReceitaFederal +
                              SE(ECodLocalizacaoSisbov > 0, ' - código exportação: ' + IntToStr(ECodLocalizacaoSisbov), '')]);
          Result := -2094;
          Exit;
        end;
        CodPropriedadeRural := Qry.FieldByName('cod_propriedade_rural').AsInteger;
      end
      else
      if Length(Trim(ENumImovelReceitaFederal)) > 0 then
      begin
        Qry.SQL.Clear;
        Qry.SQL.Add('select num_imovel_receita_federal, count(cod_propriedade_rural) as QtdPropriedade, max(cod_propriedade_rural) as CodPropriedadeRural from tab_propriedade_rural');
        Qry.SQL.Add(' where num_imovel_receita_federal = :num_imovel_receita_federal');
        Qry.SQL.Add('   and dta_fim_validade is null');
        Qry.SQL.Add('group by num_imovel_receita_federal');
        Qry.ParamByName('num_imovel_receita_federal').AsString := ENumImovelReceitaFederal;
        Qry.Open;

        if Qry.FieldByName('QtdPropriedade').AsInteger = 0 then
        begin
          EMensagem.Adicionar('Não foi encontrada nenhuma propriedade rural com o NIRF/INCRA de identificação: %s. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, [ENumImovelReceitaFederal +
                              SE(ECodLocalizacaoSisbov > 0, ' - código exportação: ' + IntToStr(ECodLocalizacaoSisbov), '')]);
          Result := -2094;
          Exit;
        end;

        if Qry.FieldByName('QtdPropriedade').AsInteger > 1 then
        begin
          EMensagem.Adicionar('Foram encontradas 2 (duas) ou mais propriedades rurais com o NIRF/INCRA de identificação: %s. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, [ENumImovelReceitaFederal]);
          Result := -2095;
          Exit;
        end;
        CodPropriedadeRural := Qry.FieldByName('CodPropriedadeRural').AsInteger;
      end
      else if ECodPropriedadeRural > 0 then
      begin
        CodPropriedadeRural := ECodPropriedadeRural;
      end
      else
      begin
        EMensagem.Adicionar('A propriedade rural não foi informada.  O animal não será efetivado.', 1, Self.ClassName, NomMetodo, []);
        Result := -2096;
        Exit;
      end;
      { Caso o CodLocalizacaoSisbov tenha sido informado, consistir o par, produtor/propriedade
        verficando-os com o respectivo codigo de localizacao }
      if (ECodLocalizacaoSisbov > 0) or (IndVerificaEfetivado) then
      begin
        Qry.SQL.Clear;
        Qry.SQL.Add('select cod_localizacao_sisbov');
        Qry.SQL.Add('  from tab_localizacao_sisbov');
        Qry.SQL.Add(' where (1 = 1)');
        if ECodLocalizacaoSisbov > 0 then
        begin
          Qry.SQL.Add('   and cod_localizacao_sisbov = :cod_localizacao_sisbov');
        end;
        Qry.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor');
        Qry.SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
        if ECodLocalizacaoSisbov > 0 then
        begin
          Qry.ParamByName('cod_localizacao_sisbov').AsInteger := ECodLocalizacaoSisbov;
        end;
        Qry.ParamByName('cod_pessoa_produtor').AsInteger :=   ECodPessoaProdutor;
        Qry.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
        Qry.Open;

        if Qry.IsEmpty then
        begin
          EMensagem.Adicionar('O código de exportação informado não corresponde a propriedade de identificação informada. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, []);
          Result := -2097;
          Exit;
        end;
      end
      else
      begin
        { Caso o CodLocalizacaoSisbov não seja informado, ou esteja pesquisando por uma propriedade não exportada
          é necessário verificar se existe uma fazenda associada a propriedade e ao produtor informado }
        Qry.SQL.Clear;  
        Qry.SQL.Add('select cod_fazenda from tab_fazenda');
        Qry.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
        Qry.SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
        Qry.SQL.Add('   and dta_fim_validade is null');        
        Qry.ParamByName('cod_pessoa_produtor').AsInteger := ECodPessoaProdutor;
        Qry.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
        Qry.Open;

        if Qry.IsEmpty then
        begin
          EMensagem.Adicionar('Não foi encontrada uma fazenda de identificação cadastrada para o produtor, para a propriedade rural informada. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, []);
          Result := -2098;
          Exit;
        end;
      end;

      Result := CodPropriedadeRural;
    Finally
      qry.Free;
    end;
  Except
    on E:Exception do
    begin
      EMensagem.Adicionar(2099, Self.ClassName, NomMetodo, [e.message]);
      Result := -2099;
      Exit;
    end;
  end;
end;

class function TIntAnimais.ValidarNIRFNascimento(EConexao: TConexao;
  EMensagem: TIntMensagens; ENumImovelReceitaFederal: String;
  ECodPropriedadeRural, ECodLocalizacaoSisbov, ECodPessoaProdutor: Integer;
  IndVerificaEfetivado: Boolean): Integer;
const
  NomMetodo: String = 'ValidarNIRFNascimento';
var
  Qry: THerdomQuery;
  CodPropriedadeRural: Integer;
begin
  if ECodPessoaProdutor <= 0 then
  begin
    EMensagem.Adicionar(2103, Self.ClassName, NomMetodo, []);
    Result := -2103;
    Exit;
  end;

  if (ECodPropriedadeRural > 0) and (ENumImovelReceitaFederal <> '') then
  begin
    EMensagem.Adicionar(-2104, Self.ClassName, NomMetodo, []);
    Result := -2104;
    Exit;
  end;

  Try
    Qry := THerdomQuery.Create(EConexao, nil);
    Try
      { Caso o NIRF/INCRA seja informado verifica a existência de uma propriedade.
        Caso seja encontrado mais de 1 registro ou nenhum registro para a consulta retornar erro informando-o
        Caso contrário, retornar o cod_propriedade_rural }
      if (Length(Trim(ENumImovelReceitaFederal)) > 0) and (ECodLocalizacaoSisbov > 0) then
      begin
        Qry.SQL.Clear;
        Qry.SQL.Add('select tpr.cod_propriedade_rural from tab_propriedade_rural tpr, tab_localizacao_sisbov tls');
        Qry.SQL.Add(' where tpr.cod_propriedade_rural = tls.cod_propriedade_rural ');
        Qry.SQL.Add('   and tpr.num_imovel_receita_federal = :num_imovel_receita_federal');
        Qry.SQL.Add('   and tls.cod_localizacao_sisbov = :cod_localizacao_sisbov');
        Qry.SQL.Add('   and tpr.dta_fim_validade is null');        
        Qry.ParamByName('num_imovel_receita_federal').AsString := ENumImovelReceitaFederal;
        Qry.ParamByName('cod_localizacao_sisbov').AsInteger := ECodLocalizacaoSisbov;
        Qry.Open;

        if Qry.IsEmpty then
        begin
          EMensagem.Adicionar('Não foi encontrada nenhuma propriedade rural com o NIRF/INCRA de nascimento: %s. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, [ENumImovelReceitaFederal + SE(ECodLocalizacaoSisbov > 0, ' - código exportação: ' + IntToStr(ECodLocalizacaoSisbov), '')]);
          Result := -2094;
          Exit;
        end;
        CodPropriedadeRural := Qry.FieldByName('cod_propriedade_rural').AsInteger;
      end
      else
      if Length(Trim(ENumImovelReceitaFederal)) > 0 then
      begin
        Qry.SQL.Clear;
        Qry.SQL.Add('select num_imovel_receita_federal, count(cod_propriedade_rural) as QtdPropriedade, max(cod_propriedade_rural) as CodPropriedadeRural from tab_propriedade_rural');
        Qry.SQL.Add(' where num_imovel_receita_federal = :num_imovel_receita_federal');
        Qry.SQL.Add('   and dta_fim_validade is null');
        Qry.SQL.Add('group by num_imovel_receita_federal');
        Qry.ParamByName('num_imovel_receita_federal').AsString := ENumImovelReceitaFederal;
        Qry.Open;

        if Qry.FieldByName('QtdPropriedade').AsInteger = 0 then
        begin
          EMensagem.Adicionar('Não foi encontrada nenhuma propriedade rural com o NIRF/INCRA de nascimento: %s. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, [ENumImovelReceitaFederal + SE(ECodLocalizacaoSisbov > 0, ' - código exportação: ' + IntToStr(ECodLocalizacaoSisbov), '')]);
          Result := -2094;
          Exit;
        end;

        if Qry.FieldByName('QtdPropriedade').AsInteger > 1 then
        begin
          EMensagem.Adicionar('Foram encontradas 2 (duas) ou mais propriedades rurais com o NIRF/INCRA de nascimento: %s. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, [ENumImovelReceitaFederal]);
          Result := -2095;
          Exit;
        end;
        CodPropriedadeRural := Qry.FieldByName('CodPropriedadeRural').AsInteger;
      end
      else if ECodPropriedadeRural > 0 then
      begin
        CodPropriedadeRural := ECodPropriedadeRural;
      end
      else
      begin
        EMensagem.Adicionar('A propriedade rural não foi informada.', 1, Self.ClassName, NomMetodo, []);
        Result := -2096;
        Exit;
      end;
      { Caso o CodLocalizacaoSisbov tenha sido informado, consistir o par, produtor/propriedade
        verficando-os com o respectivo codigo de localizacao }
      if (ECodLocalizacaoSisbov > 0) or (IndVerificaEfetivado) then
      begin
        Qry.SQL.Clear;
        Qry.SQL.Add('select cod_localizacao_sisbov');
        Qry.SQL.Add('  from tab_localizacao_sisbov');
        Qry.SQL.Add(' where (1 = 1)');
        if ECodLocalizacaoSisbov > 0 then
        begin
          Qry.SQL.Add('   and cod_localizacao_sisbov = :cod_localizacao_sisbov');
        end;
        Qry.SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor');
        Qry.SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
        if ECodLocalizacaoSisbov > 0 then
        begin
          Qry.ParamByName('cod_localizacao_sisbov').AsInteger := ECodLocalizacaoSisbov;
        end;
        Qry.ParamByName('cod_pessoa_produtor').AsInteger :=   ECodPessoaProdutor;
        Qry.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
        Qry.Open;

        if Qry.IsEmpty then
        begin
          EMensagem.Adicionar('O código de exportação informado não corresponde a propriedade (nascimento) informada. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, []);
          Result := -2097;
          Exit;
        end;
      end
      else
      begin
        { Caso o CodLocalizacaoSisbov não seja informado, ou esteja pesquisando por uma propriedade não exportada
          é necessário verificar se existe uma fazenda associada a propriedade e ao produtor informado }
        Qry.SQL.Clear;  
        Qry.SQL.Add('select cod_fazenda from tab_fazenda');
        Qry.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
        Qry.SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
        Qry.SQL.Add('   and dta_fim_validade is null');        
        Qry.ParamByName('cod_pessoa_produtor').AsInteger := ECodPessoaProdutor;
        Qry.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
        Qry.Open;

        if Qry.IsEmpty then
        begin
          EMensagem.Adicionar('Não foi encontrada uma fazenda de nascimento cadastrada para o produtor, para a propriedade rural informada. O animal não será efetivado.', 1,
                              Self.ClassName, NomMetodo, []);
          Result := -2098;
          Exit;
        end;
      end;

      Result := CodPropriedadeRural;
    Finally
      qry.Free;
    end;
  Except
    on E:Exception do
    begin
      EMensagem.Adicionar(2099, Self.ClassName, NomMetodo, [e.message]);
      Result := -2099;
      Exit;
    end;
  end;
end;

function TIntAnimais.PesquisarRelatorioPesoAjustado(Origem: Integer;
  Sexo: String; Aptidao, CodFazendaManejo: Integer; CodManejoInicial,
  CodManejoFinal, Raca, SglFazendaPai, CodAnimalPai, DesApelidoPai,
  SglFazendaMae, CodAnimalMae: String; DtaNascimentoInicio,
  DtaNascimentoFim, DtaCompraInicio, DtaCompraFim: TDateTime;
  CodPessoaSecundaria: Integer; CodCategoria, IndAnimalCastrado: String;
  CodRegimeAlimentar: Integer; CodLocal, CodLote: String; CodTipoLugar,
  NumIdadePadrao: Integer; QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo,
  QtdGPDMaximo, QtdGPMMinimo, QtdGPMMaximo: Double; IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double; Tipo,
  QtdQuebraRelatorio, CodTarefa: Integer): String;
const
  NomeMetodo: String = 'PesquisarRelatorioPesoAjustado';
  CodRelatorio: Integer = 10;
var
  Rel: TRelatorioPadrao;
  Retorno, Max, X, iAux, icont: Integer;
  IntRelatorios: TIntRelatorios;
  bPersonalizavel : boolean;
  IndTipo, squebra, saux, cOrderby, cGroupby, sumario: string;
  Id1, Id2, Id3, Id4, Id5, linhasumario : String;
  calc1,calc2,calc3,calc4,calc5, TotalAnimais : integer;
  Q:   THerdomQuery;
  Q1:  THerdomQuery;
  Q2:  THerdomQuery;
  Qry: THerdomQueryNavegacao;
  QtdAnimaisQuebra: Integer;
begin
  calc1 := 0;
  calc2 := 0;
  calc3 := 0;
  calc4 := 0;
  calc5 := 0;
  Q := THerdomQuery.Create(Conexao, nil);
  Q1 := THerdomQuery.Create(Conexao, nil);
  Q2 := THerdomQuery.Create(Conexao, nil);
  Qry := THerdomQueryNavegacao.Create(nil);
  Qry.SQLConnection := Conexao.SQLConnection;

   // Obtem parâmetro com o máximo número de animais para pesquisa
  try
    Max := StrToInt(ValorParametro(35));
  except
    Result := '';
    Exit;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Retorno := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Buscar(CodRelatorio);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Pesquisar(CodRelatorio);
    if Retorno < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');
 try
// calcula as idades padrões do produtor
  Qry.Close;
  Qry.SQL.Clear;
{$IFDEF MSSQL}
  Qry.SQL.Add('select * from tab_produtor where cod_pessoa_produtor = :cod_produtor ');
{$ENDIF}
  Qry.ParamByName('cod_produtor').asinteger := Conexao.CodProdutorTrabalho;
  Qry.Open;
  id1 := Qry.fieldbyname('Num_Idade_Padrao_1').asstring;
  id2 := Qry.fieldbyname('Num_Idade_Padrao_2').asstring;
  id3 := Qry.fieldbyname('Num_Idade_Padrao_3').asstring;
  id4 := Qry.fieldbyname('Num_Idade_Padrao_4').asstring;
  id5 := Qry.fieldbyname('Num_Idade_Padrao_5').asstring;

  Qry.Close;
  Qry.SQL.Clear;
{$IFDEF MSSQL}
  Qry.SQL.Add('if object_id(''tempdb..#tmp_relatorio_peso_ajustado'') is null '+
        #13#10'  create table #tmp_relatorio_peso_ajustado '+
        #13#10'  ( '+
        #13#10'    CodPessoaProdutor int '+
        #13#10'    , CodAnimal int '+
        #13#10'    , CodRaca int '+
        #13#10'    , CodAnimalPai int null '+
        #13#10'    , CodAnimalMae int null '+
        #13#10'    , DesApelido varchar(20) null '+
        #13#10'    , CodAnimalManejo varchar(11) null '+
        #13#10'    , CodAnimalSisBov varchar(17) null '+
        #13#10'    , IndAnimalCastrado varchar(1) null '+
        #13#10'    , SglCategoria char(3) null '+
        #13#10'    , DesCategoria varchar(25) null '+
        #13#10'    , DtaNascimento smalldatetime null '+
        #13#10'    , SglFazendaCorrente char(2) null '+
        #13#10'    , NomFazendaCorrente varchar(50) null '+
        #13#10'    , QtdGPD1 decimal(6,2) null '+
        #13#10'    , QtdGPD2 decimal(6,2) null '+
        #13#10'    , QtdGPD3 decimal(6,2) null '+
        #13#10'    , QtdGPD4 decimal(6,2) null '+
        #13#10'    , QtdGPD5 decimal(6,2) null '+
        #13#10'    , QtdGPM1 decimal(6,2) null '+
        #13#10'    , QtdGPM2 decimal(6,2) null '+
        #13#10'    , QtdGPM3 decimal(6,2) null '+
        #13#10'    , QtdGPM4 decimal(6,2) null '+
        #13#10'    , QtdGPM5 decimal(6,2) null '+
        #13#10'    , Idade varchar(7) null '+
        #13#10'    , SglLocal char(2) null '+
        #13#10'    , DesLocal varchar(30) null '+
        #13#10'    , SglLote char(2) null '+
        #13#10'    , DesLote varchar(30) null '+
        #13#10'    , CodAnimalManejoMae varchar(11) null '+
        #13#10'    , SglOrigem char(3) null '+
        #13#10'    , DesOrigem varchar(10) null '+
        #13#10'    , CodAnimalManejoPai varchar(11) null '+
        #13#10'    , NomAnimalPai varchar(60) null '+
        #13#10'    , DesApelidoPai varchar(20) null '+
        #13#10'    , QtdPeso1 decimal (6,1) null '+
        #13#10'    , QtdPeso2 decimal (6,1) null '+
        #13#10'    , QtdPeso3 decimal (6,1) null '+
        #13#10'    , QtdPeso4 decimal (6,1) null '+
        #13#10'    , QtdPeso5 decimal (6,1) null '+
        #13#10'    , QtdPesoNascimento decimal (6,1) null '+
        #13#10'    , SglRaca char(3) null '+
        #13#10'    , DesRaca varchar(35) null '+
        #13#10'    , SglRegimeAlimentar char(6) null '+
        #13#10'    , DesRegimeAlimentar varchar(50) null '+
        #13#10'    , IndSexo char(1) null '+
        #13#10'    , SglTipoLugar char(3) null '+
        #13#10'    , DesTipoLugar varchar(25) null '+
        #13#10'    , DesComposicaoRacial varchar(40) null '+
        #13#10'  ) ');
{$ENDIF}
      Qry.ExecSQL;

      Qry.SQL.Clear;
{$IFDEF MSSQL}
      Qry.SQL.Add('truncate table #tmp_relatorio_peso_ajustado');
{$ENDIF}
      Qry.ExecSQL;
{$IFDEF MSSQL}
      Qry.SQL.Add('insert into #tmp_relatorio_peso_ajustado '+
                'select distinct top ' + IntToStr(Max) + ' ta.cod_pessoa_produtor as CodPessoaProdutor '+
                '     , ta.cod_animal as CodAnimal '+
                '     , ta.cod_raca as CodRaca '+
                '     , null as CodAnimalPai '+
                '     , ta.cod_animal_mae as CodAnimalMae '+
                '     , ta.des_apelido as DesApelido '+
                '     , tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                '     , case ta.cod_animal_sisbov '+
                '       when null then null ' +
                '       else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '+
                '       case ta.cod_micro_regiao_sisbov when -1 then '''' ' +
                '            else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end + ' +
                '       right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '+
                '       right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov '+
                '     , ta.ind_animal_castrado as IndAnimalCastrado '+
                '     , tc.sgl_categoria_animal as SglCategoria '+
                '     , tc.des_categoria_animal as DesCategoria '+
                '     , ta.dta_nascimento as DtaNascimento ' +
                '     , tfc.sgl_fazenda as SglFazendaCorrente '+
                '     , tfc.nom_fazenda as NomFazendaCorrente '+
                '     , null as QtdGPD1 ' +
                '     , null as QtdGPD2 ' +
                '     , null as QtdGPD3 ' +
                '     , null as QtdGPD4 ' +
                '     , null as QtdGPD5 ' +
                '     , null as QtdGPM1 ' +
                '     , null as QtdGPM2 ' +
                '     , null as QtdGPM3 ' +
                '     , null as QtdGPM4 ' +
                '     , null as QtdGPM5 ' +
                '     , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as Idade ' +
                '     , tl.sgl_local as SglLocal '+
                '     , tl.des_local as DesLocal '+
                '     , tlt.sgl_lote as SglLote '+
                '     , tlt.des_lote as DesLote '+
                '     , null as CodAnimalManejoMae ' +
                '     , tto.sgl_tipo_origem as SglOrigem '+
                '     , tto.des_tipo_origem as DesOrigem '+
                '     , case isnull(ta.cod_animal_pai, 0) ' +
                '       when 0 then case isnull(ta.cod_reprodutor_multiplo, 0) '+
                '            when 0 then null '+
                '            else dbo.fnt_buscar_pai(ta.cod_reprodutor_multiplo, ta.cod_pessoa_produtor, ''R'') '+
                '            end ' +
                '       else dbo.fnt_buscar_pai(ta.cod_animal_pai, ta.cod_pessoa_produtor, ''T'') end as CodAnimalManejoPai ');
                if (not bPersonalizavel) or ((IntRelatorios.CampoAssociado(43) = 1) or (IntRelatorios.CampoAssociado(44) = 1)) then
                   Qry.SQL.Add(' , taa.nom_animal NomAnimalPai, taa.des_apelido DesApelidoPai ')
                else
                   Qry.SQL.Add(' ,null as NomApelidoPai, null as DesApelidoPai ');
                Qry.SQL.Add('     , null as QtdPeso1 ' +
                '     , null as QtdPeso2 ' +
                '     , null as QtdPeso3 ' +
                '     , null as QtdPeso4 ' +
                '     , null as QtdPeso5 ' +
                '     , null as QtdPesoNascimento ' +
                '     , tr.sgl_raca as SglRaca '+
                '     , tr.des_raca as DesRaca '+
                '     , tra.sgl_regime_alimentar as SglRegimeAlimentar ' +
                '     , tra.des_regime_alimentar as DesRegimeAlimentar ' +
                '     , ta.ind_sexo as IndSexo '+
                '     , tlu.sgl_tipo_lugar as SglTipoLugar ' +
                '     , tlu.des_tipo_lugar as DesTipoLugar ' +
                '     , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ');
                Qry.SQL.Add('  from tab_animal as ta '+
                '       ,tab_fazenda as tfc '+
                '       ,tab_fazenda as tfm '+
                '       ,tab_raca as tr '+
                '       ,tab_tipo_origem as tto '+
                '       ,tab_pessoa_secundaria as ts '+
                '       ,tab_categoria_animal as tc '+
                '       ,tab_local as tl '+
                '       ,tab_lote as tlt '+
                '       ,tab_regime_alimentar as tra '+
                '       ,tab_animal_evento as tae '+
                '       ,tab_tipo_lugar as tlu ');
                if (not bPersonalizavel) or ((IntRelatorios.CampoAssociado(43) = 1) or (IntRelatorios.CampoAssociado(44) = 1)) then
                   Qry.SQL.Add(' , tab_animal as taa ');
   if IndAgrupRaca1 = 'N' then
      Qry.SQL.Add('  , tab_composicao_racial as tcr ');
   if IndAgrupRaca2 = 'N' then
      Qry.SQL.Add('  , tab_composicao_racial as tcr2 ');
   if IndAgrupRaca3 = 'N' then
      Qry.SQL.Add('  , tab_composicao_racial as tcr3 ');
   if IndAgrupRaca4 = 'N' then
      Qry.SQL.Add('  , tab_composicao_racial as tcr4 ');
                Qry.SQL.Add(' where ta.dta_fim_validade is null '+
                '          and ta.cod_pessoa_produtor = :CodPessoaProdutor '+
                '          and ta.cod_fazenda_corrente *= tfc.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tfc.cod_pessoa_produtor '+
                '          and ta.cod_fazenda_manejo *= tfm.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tfm.cod_pessoa_produtor '+
                '          and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                '          and ta.cod_animal = tae.cod_animal '+
                '          and tae.qtd_peso_animal is not null '+
                '          and ta.cod_raca = tr.cod_raca '+
                '          and ta.cod_tipo_origem = tto.cod_tipo_origem '+
                '          and ta.cod_pessoa_secundaria_criador *= ts.cod_pessoa_produtor ' +
                '          and ta.cod_categoria_animal *= tc.cod_categoria_animal ' +
                '          and ta.cod_regime_alimentar *= tra.cod_regime_alimentar ');

                if (not bPersonalizavel) or ((IntRelatorios.CampoAssociado(43) = 1) or (IntRelatorios.CampoAssociado(44) = 1)) then
                   Qry.SQL.Add(' and ta.cod_animal_pai *= taa.cod_animal '+
                                 ' and ta.cod_pessoa_produtor *= taa.cod_pessoa_produtor ');

  if (CodLocal <> '') then begin
    Qry.SQL.Add('          and ta.cod_local_corrente = tl.cod_local ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor = tl.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente = tl.cod_fazenda ');
  end else begin
    Qry.SQL.Add('          and ta.cod_local_corrente *= tl.cod_local ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente *= tl.cod_fazenda ');
  end;

  if (CodLote <> '') then begin
    Qry.SQL.Add('          and ta.cod_lote_corrente = tlt.cod_lote ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor = tlt.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente = tlt.cod_fazenda ');
  end else begin
    Qry.SQL.Add('          and ta.cod_lote_corrente *= tlt.cod_lote ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente *= tlt.cod_fazenda ');
  end;

  if (CodTipoLugar <> -1) then begin
    Qry.SQL.Add('          and ta.cod_tipo_lugar = tlu.cod_tipo_lugar ');
  end else begin
    Qry.SQL.Add('          and ta.cod_tipo_lugar *= tlu.cod_tipo_lugar ');
  end;

  if (CodFazendaManejo <> -1) then begin
    Qry.SQL.Add('          and ta.cod_fazenda_manejo = :CodFazendaManejo ');
  end;

  if (CodManejoInicial <> '') and (CodManejoFinal <> '') then begin
    Qry.SQL.Add('          and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim');
  end;

  if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then begin
    Qry.SQL.Add('          and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim');
  end;

  if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then begin
    Qry.SQL.Add('          and ta.dta_compra between :DtaCompraInicio and :DtaCompraFim');
  end;

  if (CodPessoaSecundaria <> -1) then begin
    Qry.SQL.Add('          and ta.cod_pessoa_secundaria_criador = :CodPessoaSecundariaCriador');
  end;

  if (Aptidao <> -1) then begin
    Qry.SQL.Add('          and ta.cod_aptidao = :CodAptidao');
  end;

  if (Raca <> '') then begin
    Qry.SQL.Add('          and ta.cod_raca in (' + Raca + ')');
  end;

  if (Sexo = 'M') or (Sexo = 'F') then begin
    Qry.SQL.Add('          and ta.ind_sexo =:IndSexo');
  end;

  if (Origem <> -1) then begin
    Qry.SQL.Add('          and ta.cod_tipo_origem = :CodOrigem ');
  end;

  // Se foram informados dados de manejo do pai, verifica se trata-se de um touro ou de um RM
  // para posteriormente montar a condição correta no SQL. Se foi informado o apelido, assume-se
  // que o pai é um touro
  if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then begin
//  if DesApelidoPai = '' then begin
      Retorno := VerificaTipoPai(SglFazendaPai, CodAnimalPai, IndTipo);
      if Retorno < 0 then Exit;
//  end else begin
//    IndTipo := 'T';
//  end;

    if IndTipo = 'T' then begin
      Qry.SQL.Add('          and ta.cod_animal_pai in');
      Qry.SQL.Add('              (select cod_animal ');
      Qry.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      Qry.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Qry.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
      Qry.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');
      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;
      if (CodAnimalPai <> '') then begin
        Qry.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
      end;
      if (DesApelidoPai <> '') then begin
        Qry.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
      end;
      Qry.SQL.Add(') ');

    end else if IndTipo = 'E' then begin
      Qry.SQL.Add('          and ta.cod_animal_pai in');
      Qry.SQL.Add('              (select cod_animal ');

      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      end
      else begin
        Qry.SQL.Add('              from tab_animal as ta ');
      end;

      Qry.SQL.Add('              where ta.cod_tipo_origem = 4 ');
      Qry.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');
      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('                and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
        Qry.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
        Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;
      if (CodAnimalPai <> '') then begin
        Qry.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
      end;
      if (DesApelidoPai <> '') then begin
        Qry.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
      end;
      Qry.SQL.Add(') ');

    end else begin
      Qry.SQL.Add('          and ta.cod_reprodutor_multiplo in');
      Qry.SQL.Add('              (select cod_reprodutor_multiplo ');
      Qry.SQL.Add('              from tab_reprodutor_multiplo as trm, tab_fazenda as tf ');
      Qry.SQL.Add('              where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Qry.SQL.Add('                and trm.cod_fazenda_manejo = tf.cod_fazenda ');
      Qry.SQL.Add('                and trm.cod_pessoa_produtor = :CodPessoaProdutor1 ');
      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;
      if (CodAnimalPai <> '') then begin
        Qry.SQL.Add('                and trm.cod_reprodutor_multiplo_manejo =:CodAnimalPai ');
      end;
      Qry.SQL.Add(') ');
    end;
  end;

  if (SglFazendaMae <> '') or (CodAnimalMae <> '') then begin
    Qry.SQL.Add('          and ta.cod_animal_mae in');
    Qry.SQL.Add('              (select cod_animal ');
    Qry.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
    Qry.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
    Qry.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
    Qry.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor2 ');
    if (SglFazendaMae <> '') then begin
      Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaMae ');
    end;
    if (CodAnimalMae <> '') then begin
      Qry.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalMae ');
    end;
    Qry.SQL.Add(') ');
  end;

  if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then begin
    Qry.SQL.Add('          and ta.ind_animal_castrado =:IndAnimalCastrado');
  end;

  if (CodRegimeAlimentar <> -1) then begin
    Qry.SQL.Add('          and ta.cod_regime_alimentar = :CodRegimeAlimentar');
  end;

  if (CodCategoria <> '') then begin
    Qry.SQL.Add('          and ta.cod_categoria_animal in (' + CodCategoria + ')');
  end;

  if (CodTipoLugar <> -1) then begin
    Qry.SQL.Add('          and ta.cod_tipo_lugar = :CodTipoLugar');
  end;

  if (CodLocal <> '') then begin
    Qry.SQL.Add('          and ta.cod_local_corrente in (' + CodLocal + ')');
  end;

  if (CodLote <> '') then begin
    Qry.SQL.Add('          and ta.cod_lote_corrente in (' + CodLote + ')');
  end;

  if (Conexao.CodPapelUsuario = 3) then begin
      Qry.SQL.Add('        and (ta.cod_pessoa_tecnico = :cod_pessoa_tecnico or cod_pessoa_tecnico is null)')
  end;

  if IndAgrupRaca1 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ' +
                   '  and tcr.cod_raca = :codraca1  ' +
                   '  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ');
  end;
  if IndAgrupRaca2 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr2.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ' +
                   '  and tcr2.cod_raca = :codraca2  ' +
                   '  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ');
  end;
  if IndAgrupRaca3 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr3.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ' +
                   '  and tcr3.cod_raca = :codraca3  ' +
                   '  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ');
  end;
  if IndAgrupRaca4 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr4.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ' +
                   '  and tcr4.cod_raca = :codraca4  ' +
                   '  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ');
  end;
  if IndAgrupRaca1 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca1 ' +
                   ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ');
  end;
  if IndAgrupRaca2 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca2 ' +
                   ' and   tcr.cod_pessoa_produtor =:CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ');
  end;
  if IndAgrupRaca3 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca3 ' +
                   ' and   tcr.cod_pessoa_produtor =:CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ');
  end;
  if IndAgrupRaca4 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca4 ' +
                   ' and   tcr.cod_pessoa_produtor =:CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ');
  end;

{$ENDIF}

  Qry.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;
  if (CodManejoInicial <> '') and (CodManejoFinal <> '') then
      begin
        Qry.ParamByName('CodManejoInicio').AsString := CodManejoInicial;
        Qry.ParamByName('CodManejoFim').AsString := CodManejoFinal;
       end;
  if (CodFazendaManejo <> -1) then
        Qry.ParamByName('CodFazendaManejo').AsInteger := CodFazendaManejo;
  if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
      begin
        Qry.ParamByName('DtaNascimentoInicio').AsDateTime := DtaNascimentoInicio;
        Qry.ParamByName('DtaNascimentoFim').AsDateTime := DtaNascimentoFim;
       end;
  if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then
      begin
        Qry.ParamByName('DtaCompraInicio').AsDateTime := DtaCompraInicio;
        Qry.ParamByName('DtaCompraFim').AsDateTime := DtaCompraFim;
       end;
  if (CodPessoaSecundaria <> -1) then
        Qry.ParamByName('CodPessoaSecundariaCriador').AsInteger := CodPessoaSecundaria;
  if (Aptidao <> -1) then
        Qry.ParamByName('CodAptidao').AsInteger := Aptidao;
  if (Sexo = 'F') or (Sexo = 'M') then
        Qry.ParamByName('IndSexo').AsString := Sexo;
  if (SglFazendaPai <> '') or (CodAnimalPai <> '') or (DesApelidoPai <> '') then
        Qry.ParamByName('CodPessoaProdutor1').AsInteger := Conexao.CodProdutorTrabalho;
  if (SglFazendaPai <> '') then
        Qry.ParamByName('SglFazendaPai').AsString := SglFazendaPai;
  if (CodAnimalPai <> '') then
        Qry.ParamByName('CodAnimalPai').AsString := CodAnimalPai;
  if (DesApelidoPai <> '') then
        Qry.ParamByName('DesApelidoPai').AsString := DesApelidoPai;
  if (SglFazendaMae <> '') or (CodAnimalMae <> '') then
        Qry.ParamByName('CodPessoaProdutor2').AsInteger := Conexao.CodProdutorTrabalho;
  if (SglFazendaMae <> '') then
        Qry.ParamByName('SglFazendaMae').AsString := SglFazendaMae;
  if (CodAnimalMae <> '') then
        Qry.ParamByName('CodAnimalMae').AsString := CodAnimalMae;
  if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then
        Qry.ParamByName('IndAnimalCastrado').AsString := IndAnimalCastrado;
  if (CodRegimeAlimentar <> -1) then
        Qry.ParamByName('CodRegimeAlimentar').AsInteger := CodRegimeAlimentar;
  if (CodTipoLugar <> -1) then
        Qry.ParamByName('CodTipoLugar').AsInteger := CodTipoLugar;
  if (Origem <> -1) then
        Qry.ParamByName('CodOrigem').AsInteger := Origem;
  if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
      Qry.ParamByName('codraca1').AsInteger := CodRaca1;
      Qry.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
      Qry.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
  end;
  if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
      Qry.ParamByName('codraca2').AsInteger := CodRaca2;
      Qry.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
      Qry.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
  end;
  if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
      Qry.ParamByName('codraca3').AsInteger := CodRaca3;
      Qry.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
      Qry.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
  end;
  if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
      Qry.ParamByName('codraca4').AsInteger := CodRaca4;
      Qry.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
      Qry.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
  end;
  if (Conexao.CodPapelUsuario = 3) then begin
      Qry.ParamByName('cod_pessoa_tecnico').AsInteger := Conexao.CodPessoa;;
  end;
                                                                             
  Qry.ExecSQL;

 if not bPersonalizavel or (IntRelatorios.CampoAssociado(25) = 1) then begin
  Qry.SQL.Clear;
{$IFDEF MSSQL}
  Qry.SQL.Add('update #tmp_relatorio_peso_ajustado '+
                 #13#10'  set CodAnimalManejoMae = tf.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
                 #13#10'  from '+
                 #13#10'    tab_fazenda tf '+
                 #13#10'    , tab_animal ta '+
                 #13#10'  where '+
                 #13#10'    tf.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                 #13#10'    and tf.cod_fazenda = ta.cod_fazenda_manejo '+
                 #13#10'    and ta.cod_pessoa_produtor = #tmp_relatorio_peso_ajustado.CodPessoaProdutor '+
                 #13#10'    and ta.cod_animal = #tmp_relatorio_peso_ajustado.codanimalmae '+
                 #13#10'    and #tmp_relatorio_peso_ajustado.codanimalmae is not null ');
{$ENDIF}
  Qry.ExecSQL;
 end;

  Qry.Close;

  // Prepara temporárias a serem usadas no processo
  Qry.SQL.Clear;
 if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) or (IntRelatorios.CampoAssociado(15) = 1) or (IntRelatorios.CampoAssociado(29) = 1) then
    calc1 := 1;
 if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) or (IntRelatorios.CampoAssociado(16) = 1) or (IntRelatorios.CampoAssociado(30) = 1) then
    calc2 := 1;
 if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) or (IntRelatorios.CampoAssociado(17) = 1) or (IntRelatorios.CampoAssociado(31) = 1) then
    calc3 := 1;
 if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) or (IntRelatorios.CampoAssociado(18) = 1) or (IntRelatorios.CampoAssociado(32) = 1) then
    calc4 := 1;
 if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) or (IntRelatorios.CampoAssociado(19) = 1) or (IntRelatorios.CampoAssociado(33) = 1) then
    calc5 := 1;

{$IFDEF MSSQL}
   Qry.SQL.Add (' exec spt_peso_ajustado :CodPessoaProdutor, :calc1, :calc2, :calc3, :calc4, :calc5 ');
{$ENDIF}

 Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
 try
   Rel.TipoDoArquvio := Tipo;

   {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
   if CodTarefa > 0 then begin
     Rel.CodTarefa := CodTarefa;
   end;

   Retorno := Rel.CarregarRelatorio(CodRelatorio);
   if Retorno < 0 then Exit;

   {Desabilita a apresentação dos campos selecionados para quebra}
   Rel.Campos.IrAoPrimeiro;
   cOrderby := '';
   for iAux := 1 to QtdQuebraRelatorio do begin
      Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
       cGroupby := cGroupby + Rel.campos.campo.NomField + ', ';
      Rel.Campos.IrAoProximo;
   end;

   if cGroupby <> '' then
      delete(cGroupby,length(cGroupby)-1,2);

   Rel.Campos.IrAoPrimeiro;
   for iAux := 1 to  Rel.Campos.NumCampos do begin
       cOrderby := cOrderby + Rel.campos.campo.NomField + ', ';
       Rel.Campos.IrAoProximo;
   end;

   if cOrderby <> '' then
      delete(cOrderby,length(cOrderby)-1,2);

  Qry.ParamByName('calc1').asInteger := calc1;
  Qry.ParamByName('calc2').asInteger := calc2;
  Qry.ParamByName('calc3').asInteger := calc3;
  Qry.ParamByName('calc4').asInteger := calc4;
  Qry.ParamByName('calc5').asInteger := calc5;
  Qry.ParamByName('CodPessoaProdutor').asInteger := conexao.CodProdutorTrabalho;
  Qry.open;
  Qry.SQL.Clear;

{$IFDEF MSSQL}
  Qry.SQL.Add(' select *  ');
//  if not bPersonalizavel or (IntRelatorios.CampoAssociado(42) = 1) then begin
//     Query.SQL.Add(' , dbo.fnt_composicao_racial(CodAnimal, CodPessoaProdutor) as DesComposicaoRacial  ');
//  end;
  Qry.SQL.Add(' from #tmp_relatorio_peso_ajustado ');
  Qry.SQL.Add(' where CodAnimal is not null ');
  if (calc1 = 1) or (calc2 = 1) or (calc3 = 1) or (calc4 = 1) or (calc5 = 1) then begin
     Qry.SQL.Add(' and (1=2 '); //condição falsa pra auxiliar na motagens das demais
     if calc1 = 1 then
        Qry.SQL.Add('or QtdGPD1 is not null or QtdPeso1 is not null or QtdGPM1 is not null ');
     if calc2 = 1 then
        Qry.SQL.Add('or QtdGPD2 is not null or QtdPeso2 is not null or QtdGPM2 is not null ');
     if calc3 = 1 then
        Qry.SQL.Add('or QtdGPD3 is not null or QtdPeso3 is not null or QtdGPM3 is not null ');
     if calc4 = 1 then
        Qry.SQL.Add('or QtdGPD4 is not null or QtdPeso4 is not null or QtdGPM4 is not null ');
     if calc5 = 1 then
        Qry.SQL.Add('or QtdGPD5 is not null or QtdPeso5 is not null or QtdGPM5 is not null ');
     Qry.SQL.Add(' ) ');
  end;
  if NumIdadePadrao > 0 then begin
     case NumIdadePadrao of
     1:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Qry.SQL.Add(' and QtdPeso1 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Qry.SQL.Add(' and QtdGPD1 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Qry.SQL.Add(' and QtdGPM1 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     2:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Qry.SQL.Add(' and QtdPeso2 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Qry.SQL.Add(' and QtdGPD2 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Qry.SQL.Add(' and QtdGPM2 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     3:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Qry.SQL.Add(' and QtdPeso3 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Qry.SQL.Add(' and QtdGPD3 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Qry.SQL.Add(' and QtdGPM3 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     4:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Qry.SQL.Add(' and QtdPeso4 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Qry.SQL.Add(' and QtdGPD4 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Qry.SQL.Add(' and QtdGPM4 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     5:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Qry.SQL.Add(' and QtdPeso5 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Qry.SQL.Add(' and QtdGPD5 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Qry.SQL.Add(' and QtdGPM5 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     end;
     if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then begin
        Qry.Parambyname('qtdpesominimo').asfloat:=QtdPesoMinimo;
        Qry.Parambyname('qtdpesomaximo').asfloat:=QtdPesoMaximo;
     end;
     if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then begin
        Qry.Parambyname('qtdgpdminimo').asfloat:=QtdGPDMinimo;
        Qry.Parambyname('qtdgpdmaximo').asfloat:=QtdGPDMaximo;
     end;
     if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then begin
        Qry.Parambyname('qtdgpmminimo').asfloat:=QtdGPMMinimo;
        Qry.Parambyname('qtdgpmmaximo').asfloat:=QtdGPMMaximo;
     end;
  end;
  if cOrderBy <> '' then
     Qry.SQL.Add(' order by '+ cOrderby);
{$ENDIF}
  Qry.open;
  if Qry.IsEmpty then begin
    Mensagens.Adicionar(1015, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  //Query usada para calcular os totalizadores por quebra (caso exista)
  if cGroupby <> '' then begin
  Q.SQL.clear;
{$IFDEF MSSQL}
  Q.SQL.Add(' select ' +
            ' cast(avg(qtdgpd1) as decimal(6,2)) as qtdgpd1 ' +
            ' ,cast(avg(qtdgpd2) as decimal(6,2)) as qtdgpd2 ' +
            ' ,cast(avg(qtdgpd3) as decimal(6,2)) as qtdgpd3 ' +
            ' ,cast(avg(qtdgpd4) as decimal(6,2)) as qtdgpd4 ' +
            ' ,cast(avg(qtdgpd5) as decimal(6,2)) as qtdgpd5 ' +
            ' ,cast(avg(qtdgpm1) as decimal(6,2)) as qtdgpm1 ' +
            ' ,cast(avg(qtdgpm2) as decimal(6,2)) as qtdgpm2 ' +
            ' ,cast(avg(qtdgpm3) as decimal(6,2)) as qtdgpm3 ' +
            ' ,cast(avg(qtdgpm4) as decimal(6,2)) as qtdgpm4 ' +
            ' ,cast(avg(qtdgpm5) as decimal(6,2)) as qtdgpm5 ' +
            ' ,cast(avg(qtdpeso1) as decimal(4,0)) as qtdpeso1 ' +
            ' ,cast(avg(qtdpeso2) as decimal(4,0)) as qtdpeso2 ' +
            ' ,cast(avg(qtdpeso3) as decimal(4,0)) as qtdpeso3 ' +
            ' ,cast(avg(qtdpeso4) as decimal(4,0)) as qtdpeso4 ' +
            ' ,cast(avg(qtdpeso5) as decimal(4,0)) as qtdpeso5 ' +
            ' ,cast(avg(qtdpesonascimento) as decimal(4,0)) as qtdpesonascimento ');
  if (Pos('DesApelido',cGroupby) > 0)  and (not(Pos('DesApelidoPai',cGroupby) >0) or (cGroupBy = 'DesApelidoPai, DesApelido') or (cGroupBy = 'DesApelido, DesApelidoPai') )
     then Q.SQL.Add(' , DesApelido ')
     else Q.SQL.Add(' , null as DesApelido ');
  if (Pos('CodAnimalManejo',cGroupby) >0) and (not(Pos('CodAnimalManejoPai',cGroupby) >0) or (cGroupBy = 'CodAnimalManejoPai, CodAnimaManejo') or (cGroupBy = 'CodAnimalManejo, CodAnimaManejoPai') )
     then Q.SQL.Add(' , CodAnimalManejo ')
     else Q.SQL.Add(' , null as CodAnimalManejo ');
  if Pos('CodAnimalSisBov',cGroupby) > 0
     then Q.SQL.Add(' , CodAnimalSisBov ')
     else Q.SQL.Add(' , null as CodAnimalSisBov ');
  if Pos('IndAnimalCastrado',cGroupby) > 0
     then Q.SQL.Add(' , IndAnimalCastrado ')
     else Q.SQL.Add(' , null as IndAnimalCastrado ');
  if Pos('SglCategoria',cGroupby) > 0
     then Q.SQL.Add(' , SglCategoria ')
     else Q.SQL.Add(' , null as SglCategoria ');
  if Pos('DesCategoria',cGroupby) > 0
     then Q.SQL.Add(' , DesCategoria ')
     else Q.SQL.Add(' , null as DesCategoria ');
  if Pos('DtaNascimento',cGroupby) > 0
     then Q.SQL.Add(' , DtaNascimento ')
     else Q.SQL.Add(' , null as DtaNascimento ');
  if Pos('SglFazendaCorrente',cGroupby) > 0
     then Q.SQL.Add(' , SglFazendaCorrente ')
     else Q.SQL.Add(' , null as SglFazendaCorrente ');
  if Pos('NomFazendaCorrente',cGroupby) > 0
     then Q.SQL.Add(' , NomFazendaCorrente ')
     else Q.SQL.Add(' , null as NomFazendaCorrente ');
  if Pos('Idade',cGroupby) > 0
     then Q.SQL.Add(' , Idade ')
     else Q.SQL.Add(' , null as Idade ');
  if Pos('SglLocal',cGroupby) > 0
     then Q.SQL.Add(' , SglLocal ')
     else Q.SQL.Add(' , null as SglLocal ');
  if Pos('DesLocal',cGroupby) > 0
     then Q.SQL.Add(' , DesLocal ')
     else Q.SQL.Add(' , null as DesLocal ');
  if Pos('SglLote',cGroupby) > 0
     then Q.SQL.Add(' , SglLote ')
     else Q.SQL.Add(' , null as SglLote ');
  if Pos('DesLote',cGroupby) > 0
     then Q.SQL.Add(' , DesLote ')
     else Q.SQL.Add(' , null as DesLote ');
  if Pos('CodAnimalManejoMae',cGroupby) > 0
     then Q.SQL.Add(' , CodAnimalManejoMae ')
     else Q.SQL.Add(' , null as CodAnimalManejoMae ');
  if Pos('SglOrigem',cGroupby) > 0
     then Q.SQL.Add(' , SglOrigem ')
     else Q.SQL.Add(' , null as SglOrigem ');
  if Pos('DesOrigem',cGroupby) > 0
     then Q.SQL.Add(' , DesOrigem ')
     else Q.SQL.Add(' , null as DesOrigem ');
  if Pos('CodAnimalManejoPai',cGroupby) > 0
     then Q.SQL.Add(' , CodAnimalManejoPai ')
     else Q.SQL.Add(' , null as CodAnimalManejoPai ');
  if Pos('SglRaca',cGroupby) > 0
     then Q.SQL.Add(' , SglRaca ')
     else Q.SQL.Add(' , null as SglRaca ');
  if Pos('DesRaca',cGroupby) > 0
     then Q.SQL.Add(' , DesRaca ')
     else Q.SQL.Add(' , null as DesRaca ');
  if Pos('SglRegimeAlimentar',cGroupby) > 0
     then Q.SQL.Add(' , SglRegimeAlimentar ')
     else Q.SQL.Add(' , null as SglRegimeAlimentar ');
  if Pos('DesRegimeAlimentar',cGroupby) > 0
     then Q.SQL.Add(' , DesRegimeAlimentar ')
     else Q.SQL.Add(' , null as DesRegimeAlimentar ');
  if Pos('IndSexo',cGroupby) > 0
     then Q.SQL.Add(' , IndSexo ')
     else Q.SQL.Add(' , null as IndSexo ');
  if Pos('SglTipoLugar',cGroupby) > 0
     then Q.SQL.Add(' , SglTipoLugar ')
     else Q.SQL.Add(' , null as SglTipoLugar ');
  if Pos('DesTipoLugar',cGroupby) > 0
     then Q.SQL.Add(' , DesTipoLugar ')
     else Q.SQL.Add(' , null as DesTipoLugar ');
  if Pos('DesComposicaoRacial',cGroupby) > 0
     then Q.SQL.Add(' , DesComposicaoRacial ')
     else Q.SQL.Add(' , null as DesComposicaoRacial ');
  Q.SQL.Add(' from #tmp_relatorio_peso_ajustado ');
  Q.SQL.Add(' where CodAnimal is not null ');
  if (calc1 = 1) or (calc2 = 1) or (calc3 = 1) or (calc4 = 1) or (calc5 = 1) then begin
     Q.SQL.Add(' and (1=2 '); //condição falsa pra auxiliar na motagens das demais
     if calc1 = 1 then
        Q.SQL.Add('or QtdGPD1 is not null or QtdPeso1 is not null or QtdGPM1 is not null ');
     if calc2 = 1 then
        Q.SQL.Add('or QtdGPD2 is not null or QtdPeso2 is not null or QtdGPM2 is not null ');
     if calc3 = 1 then
        Q.SQL.Add('or QtdGPD3 is not null or QtdPeso3 is not null or QtdGPM3 is not null ');
     if calc4 = 1 then
        Q.SQL.Add('or QtdGPD4 is not null or QtdPeso4 is not null or QtdGPM4 is not null ');
     if calc5 = 1 then
        Q.SQL.Add('or QtdGPD5 is not null or QtdPeso5 is not null or QtdGPM5 is not null ');
     Q.SQL.Add(' ) ');
  end;
  if NumIdadePadrao > 0 then begin
     case NumIdadePadrao of
     1:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q.SQL.Add(' and QtdPeso1 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q.SQL.Add(' and QtdGPD1 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q.SQL.Add(' and QtdGPM1 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     2:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q.SQL.Add(' and QtdPeso2 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q.SQL.Add(' and QtdGPD2 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q.SQL.Add(' and QtdGPM2 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     3:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q.SQL.Add(' and QtdPeso3 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q.SQL.Add(' and QtdGPD3 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q.SQL.Add(' and QtdGPM3 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     4:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q.SQL.Add(' and QtdPeso4 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q.SQL.Add(' and QtdGPD4 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q.SQL.Add(' and QtdGPM4 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     5:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q.SQL.Add(' and QtdPeso5 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q.SQL.Add(' and QtdGPD5 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q.SQL.Add(' and QtdGPM5 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     end;
     if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then begin
        Q.Parambyname('qtdpesominimo').asfloat:=QtdPesoMinimo;
        Q.Parambyname('qtdpesomaximo').asfloat:=QtdPesoMaximo;
     end;
     if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then begin
        Q.Parambyname('qtdgpdminimo').asfloat:=QtdGPDMinimo;
        Q.Parambyname('qtdgpdmaximo').asfloat:=QtdGPDMaximo;
     end;
     if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then begin
        Q.Parambyname('qtdgpmminimo').asfloat:=QtdGPMMinimo;
        Q.Parambyname('qtdgpmmaximo').asfloat:=QtdGPMMaximo;
     end;
  end;
  if cGroupBy <> '' then
     Q.SQL.Add(' group by '+ cGroupby + ' order by ' + cGroupby);
{$ENDIF}
  Q.open;
end;

  //calcula a média geral do relatório
  // cria uma temporária para auxiliar no calculo do desvio padrão
  Q2.SQL.Add('if object_id(''tempdb..#tmp_media_peso'') is null '+
        #13#10'  create table #tmp_media_peso '+
        #13#10'  ( '+
        #13#10'     MQtdGPD1 decimal(6,2) null '+
        #13#10'    , MQtdGPD2 decimal(6,2) null '+
        #13#10'    , MQtdGPD3 decimal(6,2) null '+
        #13#10'    , MQtdGPD4 decimal(6,2) null '+
        #13#10'    , MQtdGPD5 decimal(6,2) null '+
        #13#10'    , MQtdGPM1 decimal(6,2) null '+
        #13#10'    , MQtdGPM2 decimal(6,2) null '+
        #13#10'    , MQtdGPM3 decimal(6,2) null '+
        #13#10'    , MQtdGPM4 decimal(6,2) null '+
        #13#10'    , MQtdGPM5 decimal(6,2) null '+
        #13#10'    , MQtdPeso1 decimal (6,1) null '+
        #13#10'    , MQtdPeso2 decimal (6,1) null '+
        #13#10'    , MQtdPeso3 decimal (6,1) null '+
        #13#10'    , MQtdPeso4 decimal (6,1) null '+
        #13#10'    , MQtdPeso5 decimal (6,1) null '+
        #13#10'    , MQtdPesoNascimento decimal (6,1) null '+
        #13#10'  ) ');
  Q2.ExecSQL;

  Q2.SQL.Clear;
{$IFDEF MSSQL}
  Q2.SQL.Add('truncate table #tmp_media_peso');
{$ENDIF}
  Q2.ExecSQL;

  Q1.SQL.clear;
{$IFDEF MSSQL}
  Q1.SQL.Add(' select ' +
            ' cast(avg(qtdgpd1) as decimal(6,2)) as qtdgpd1 ' +
            ' ,cast(avg(qtdgpd2) as decimal(6,2)) as qtdgpd2 ' +
            ' ,cast(avg(qtdgpd3) as decimal(6,2)) as qtdgpd3 ' +
            ' ,cast(avg(qtdgpd4) as decimal(6,2)) as qtdgpd4 ' +
            ' ,cast(avg(qtdgpd5) as decimal(6,2)) as qtdgpd5 ' +
            ' ,cast(avg(qtdgpm1) as decimal(6,2)) as qtdgpm1 ' +
            ' ,cast(avg(qtdgpm2) as decimal(6,2)) as qtdgpm2 ' +
            ' ,cast(avg(qtdgpm3) as decimal(6,2)) as qtdgpm3 ' +
            ' ,cast(avg(qtdgpm4) as decimal(6,2)) as qtdgpm4 ' +
            ' ,cast(avg(qtdgpm5) as decimal(6,2)) as qtdgpm5 ' +
            ' ,cast(avg(qtdpeso1) as decimal(4,0)) as qtdpeso1 ' +
            ' ,cast(avg(qtdpeso2) as decimal(4,0)) as qtdpeso2 ' +
            ' ,cast(avg(qtdpeso3) as decimal(4,0)) as qtdpeso3 ' +
            ' ,cast(avg(qtdpeso4) as decimal(4,0)) as qtdpeso4 ' +
            ' ,cast(avg(qtdpeso5) as decimal(4,0)) as qtdpeso5 ' +
            ' ,cast(avg(qtdpesonascimento) as decimal(4,0)) as qtdpesonascimento ' +
            ' , null as DesApelido '+
            ' , null as CodAnimalManejo '+
            ' , null as CodAnimalSisBov  '+
            ' , null as IndAnimalCastrado '+
            ' , null as SglCategoria '+
            ' , null as DesCategoria '+
            ' , null as DtaNascimento '+
            ' , null as SglFazendaCorrente '+
            ' , null as NomFazendaCorrente '+
            ' , null as Idade '+
            ' , null as SglLocal '+
            ' , null as DesLocal '+
            ' , null as SglLote '+
            ' , null as DesLote '+
            ' , null as CodAnimalManejoMae '+
            ' , null as SglOrigem  '+
            ' , null as DesOrigem '+
            ' , null as CodAnimalManejoPai '+
            ' , null as SglRaca '+
            ' , null as DesRaca  '+
            ' , null as SglRegimeAlimentar '+
            ' , null as DesRegimeAlimentar '+
            ' , null as IndSexo '+
            ' , null as SglTipoLugar '+
            ' , null as DesTipoLugar '+
            ' , null as DesComposicaoRacial ' +
            ' from #tmp_relatorio_peso_ajustado ');
  Q1.SQL.Add(' where CodAnimal is not null ');
  if (calc1 = 1) or (calc2 = 1) or (calc3 = 1) or (calc4 = 1) or (calc5 = 1) then begin
     Q1.SQL.Add(' and (1=2 '); //condição falsa pra auxiliar na motagens das demais
     if calc1 = 1 then
        Q1.SQL.Add('or QtdGPD1 is not null or QtdPeso1 is not null or QtdGPM1 is not null ');
     if calc2 = 1 then
        Q1.SQL.Add('or QtdGPD2 is not null or QtdPeso2 is not null or QtdGPM2 is not null ');
     if calc3 = 1 then
        Q1.SQL.Add('or QtdGPD3 is not null or QtdPeso3 is not null or QtdGPM3 is not null ');
     if calc4 = 1 then
        Q1.SQL.Add('or QtdGPD4 is not null or QtdPeso4 is not null or QtdGPM4 is not null ');
     if calc5 = 1 then
        Q1.SQL.Add('or QtdGPD5 is not null or QtdPeso5 is not null or QtdGPM5 is not null ');
     Q1.SQL.Add(' ) ');
  end;
  if NumIdadePadrao > 0 then begin
     case NumIdadePadrao of
     1:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q1.SQL.Add(' and QtdPeso1 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q1.SQL.Add(' and QtdGPD1 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q1.SQL.Add(' and QtdGPM1 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     2:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q1.SQL.Add(' and QtdPeso2 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q1.SQL.Add(' and QtdGPD2 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q1.SQL.Add(' and QtdGPM2 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     3:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q1.SQL.Add(' and QtdPeso3 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q1.SQL.Add(' and QtdGPD3 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q1.SQL.Add(' and QtdGPM3 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     4:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q1.SQL.Add(' and QtdPeso4 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q1.SQL.Add(' and QtdGPD4 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q1.SQL.Add(' and QtdGPM4 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     5:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q1.SQL.Add(' and QtdPeso5 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q1.SQL.Add(' and QtdGPD5 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q1.SQL.Add(' and QtdGPM5 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     end;
     if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then begin
        Q1.Parambyname('qtdpesominimo').asfloat:=QtdPesoMinimo;
        Q1.Parambyname('qtdpesomaximo').asfloat:=QtdPesoMaximo;
     end;
     if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then begin
        Q1.Parambyname('qtdgpdminimo').asfloat:=QtdGPDMinimo;
        Q1.Parambyname('qtdgpdmaximo').asfloat:=QtdGPDMaximo;
     end;
     if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then begin
        Q1.Parambyname('qtdgpmminimo').asfloat:=QtdGPMMinimo;
        Q1.Parambyname('qtdgpmmaximo').asfloat:=QtdGPMMaximo;
     end;
  end;
{$ENDIF}
  Q1.open;

  if not Q1.IsEmpty then begin
     Q2.SQL.Clear;
     Q2.SQL.Add('insert into #tmp_media_peso values '+
                ' (:MQtdGPD1  '+
                '  ,:MQtdGPD2 '+
                '  ,:MQtdGPD3 '+
                '  ,:MQtdGPD4 '+
                '  ,:MQtdGPD5 '+
                '  ,:MQtdGPM1 '+
                '  ,:MQtdGPM2 '+
                '  ,:MQtdGPM3 '+
                '  ,:MQtdGPM4 '+
                '  ,:MQtdGPM5 '+
                '  ,:MQtdPeso1 '+
                '  ,:MQtdPeso2 '+
                '  ,:MQtdPeso3 '+
                '  ,:MQtdPeso4 '+
                '  ,:MQtdPeso5 '+
                '  ,:MQtdPesoNascimento) ');
     Q2.ParambyName('MQtdGPD1').asfloat := Q1.FieldbyName('QtdGpd1').asfloat;
     Q2.ParambyName('MQtdGPD2').asfloat := Q1.FieldbyName('QtdGpd2').asfloat;
     Q2.ParambyName('MQtdGPD3').asfloat := Q1.FieldbyName('QtdGpd3').asfloat;
     Q2.ParambyName('MQtdGPD4').asfloat := Q1.FieldbyName('QtdGpd4').asfloat;
     Q2.ParambyName('MQtdGPD5').asfloat := Q1.FieldbyName('QtdGpd5').asfloat;
     Q2.ParambyName('MQtdGPM1').asfloat := Q1.FieldbyName('QtdGpM1').asfloat;
     Q2.ParambyName('MQtdGPM2').asfloat := Q1.FieldbyName('QtdGpM2').asfloat;
     Q2.ParambyName('MQtdGPM3').asfloat := Q1.FieldbyName('QtdGpM3').asfloat;
     Q2.ParambyName('MQtdGPM4').asfloat := Q1.FieldbyName('QtdGpM4').asfloat;
     Q2.ParambyName('MQtdGPM5').asfloat := Q1.FieldbyName('QtdGpM5').asfloat;
     Q2.ParambyName('MQtdPeso1').asfloat := Q1.FieldbyName('QtdPeso1').asfloat;
     Q2.ParambyName('MQtdPeso2').asfloat := Q1.FieldbyName('QtdPeso3').asfloat;
     Q2.ParambyName('MQtdPeso3').asfloat := Q1.FieldbyName('QtdPeso3').asfloat;
     Q2.ParambyName('MQtdPeso4').asfloat := Q1.FieldbyName('QtdPeso4').asfloat;
     Q2.ParambyName('MQtdPeso5').asfloat := Q1.FieldbyName('QtdPeso5').asfloat;
     Q2.ParambyName('MQtdPesoNascimento').asfloat := Q1.FieldbyName('QtdPesoNascimento').asfloat;
     Q2.ExecSQL;
  end;

  Q2.SQL.clear;
{$IFDEF MSSQL}
  Q2.SQL.Add(' select ' +
            ' cast(case when count(qtdgpd1)-1 = 0 then null else sqrt(sum(power(qtdgpd1-mqtdgpd1,2))/(count(qtdgpd1)-1)) end as decimal(6,2)) as qtdgpd1 ' +
            ' ,cast(case when count(qtdgpd2)-1 = 0 then null else sqrt(sum(power(qtdgpd2-mqtdgpd2,2))/(count(qtdgpd2)-1)) end as decimal(6,2)) as qtdgpd2 ' +
            ' ,cast(case when count(qtdgpd3)-1 = 0 then null else sqrt(sum(power(qtdgpd3-mqtdgpd3,2))/(count(qtdgpd3)-1)) end as decimal(6,2)) as qtdgpd3 ' +
            ' ,cast(case when count(qtdgpd4)-1 = 0 then null else sqrt(sum(power(qtdgpd4-mqtdgpd4,2))/(count(qtdgpd4)-1)) end as decimal(6,2)) as qtdgpd4 ' +
            ' ,cast(case when count(qtdgpd5)-1 = 0 then null else sqrt(sum(power(qtdgpd5-mqtdgpd5,2))/(count(qtdgpd5)-1)) end as decimal(6,2)) as qtdgpd5 ' +
            ' ,cast(case when count(qtdgpm1)-1 = 0 then null else sqrt(sum(power(qtdgpm1-mqtdgpm1,2))/(count(qtdgpm1)-1)) end as decimal(6,2)) as qtdgpm1 ' +
            ' ,cast(case when count(qtdgpm2)-1 = 0 then null else sqrt(sum(power(qtdgpm2-mqtdgpm2,2))/(count(qtdgpm2)-1)) end as decimal(6,2)) as qtdgpm2 ' +
            ' ,cast(case when count(qtdgpm3)-1 = 0 then null else sqrt(sum(power(qtdgpm3-mqtdgpm3,2))/(count(qtdgpm3)-1)) end as decimal(6,2)) as qtdgpm3 ' +
            ' ,cast(case when count(qtdgpm4)-1 = 0 then null else sqrt(sum(power(qtdgpm4-mqtdgpm4,2))/(count(qtdgpm4)-1)) end as decimal(6,2)) as qtdgpm4 ' +
            ' ,cast(case when count(qtdgpm5)-1 = 0 then null else sqrt(sum(power(qtdgpm5-mqtdgpm5,2))/(count(qtdgpm5)-1)) end as decimal(6,2)) as qtdgpm5 ' +
            ' ,cast(case when count(qtdpeso1)-1 = 0 then null else sqrt(sum(power(qtdpeso1-mqtdpeso1,2))/(count(qtdpeso1)-1)) end as decimal(4,0)) as qtdpeso1 ' +
            ' ,cast(case when count(qtdpeso2)-1 = 0 then null else sqrt(sum(power(qtdpeso2-mqtdpeso2,2))/(count(qtdpeso2)-1)) end as decimal(4,0)) as qtdpeso2 ' +
            ' ,cast(case when count(qtdpeso3)-1 = 0 then null else sqrt(sum(power(qtdpeso3-mqtdpeso3,2))/(count(qtdpeso3)-1)) end as decimal(4,0)) as qtdpeso3 ' +
            ' ,cast(case when count(qtdpeso4)-1 = 0 then null else sqrt(sum(power(qtdpeso4-mqtdpeso4,2))/(count(qtdpeso4)-1)) end as decimal(4,0)) as qtdpeso4 ' +
            ' ,cast(case when count(qtdpeso5)-1 = 0 then null else sqrt(sum(power(qtdpeso5-mqtdpeso5,2))/(count(qtdpeso5)-1)) end as decimal(4,0)) as qtdpeso5 ' +
            ' ,cast(case when count(qtdpesonascimento)-1 = 0 then null else sqrt(sum(power(qtdpesonascimento-mqtdpesonascimento,2))/(count(qtdpesonascimento)-1)) end as decimal(4,0)) as qtdpesonascimento ' +
            ' , null as DesApelido '+
            ' , null as CodAnimalManejo '+
            ' , null as CodAnimalSisBov  '+
            ' , null as IndAnimalCastrado '+
            ' , null as SglCategoria '+
            ' , null as DesCategoria '+
            ' , null as DtaNascimento '+
            ' , null as SglFazendaCorrente '+
            ' , null as NomFazendaCorrente '+
            ' , null as Idade '+
            ' , null as SglLocal '+
            ' , null as DesLocal '+
            ' , null as SglLote '+
            ' , null as DesLote '+
            ' , null as CodAnimalManejoMae '+
            ' , null as SglOrigem  '+
            ' , null as DesOrigem '+
            ' , null as CodAnimalManejoPai '+
            ' , null as SglRaca '+
            ' , null as DesRaca  '+
            ' , null as SglRegimeAlimentar '+
            ' , null as DesRegimeAlimentar '+
            ' , null as IndSexo '+
            ' , null as SglTipoLugar '+
            ' , null as DesTipoLugar '+
            ' , null as DesComposicaoRacial ' +
            ' from #tmp_relatorio_peso_ajustado,#tmp_media_peso  ');
  Q2.SQL.Add(' where CodAnimal is not null ');
  if (calc1 = 1) or (calc2 = 1) or (calc3 = 1) or (calc4 = 1) or (calc5 = 1) then begin
     Q2.SQL.Add(' and (1=2 '); //condição falsa pra auxiliar na motagens das demais
     if calc1 = 1 then
        Q2.SQL.Add('or QtdGPD1 is not null or QtdPeso1 is not null or QtdGPM1 is not null ');
     if calc2 = 1 then
        Q2.SQL.Add('or QtdGPD2 is not null or QtdPeso2 is not null or QtdGPM2 is not null ');
     if calc3 = 1 then
        Q2.SQL.Add('or QtdGPD3 is not null or QtdPeso3 is not null or QtdGPM3 is not null ');
     if calc4 = 1 then
        Q2.SQL.Add('or QtdGPD4 is not null or QtdPeso4 is not null or QtdGPM4 is not null ');
     if calc5 = 1 then
        Q2.SQL.Add('or QtdGPD5 is not null or QtdPeso5 is not null or QtdGPM5 is not null ');
     Q2.SQL.Add(' ) ');
  end;
  if NumIdadePadrao > 0 then begin
     case NumIdadePadrao of
     1:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q2.SQL.Add(' and QtdPeso1 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q2.SQL.Add(' and QtdGPD1 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q2.SQL.Add(' and QtdGPM1 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     2:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q2.SQL.Add(' and QtdPeso2 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q2.SQL.Add(' and QtdGPD2 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q2.SQL.Add(' and QtdGPM2 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     3:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q2.SQL.Add(' and QtdPeso3 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q2.SQL.Add(' and QtdGPD3 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q2.SQL.Add(' and QtdGPM3 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     4:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q2.SQL.Add(' and QtdPeso4 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q2.SQL.Add(' and QtdGPD4 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q2.SQL.Add(' and QtdGPM4 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     5:begin
       if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
          Q2.SQL.Add(' and QtdPeso5 between :qtdpesominimo and :qtdpesomaximo ');
       if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
          Q2.SQL.Add(' and QtdGPD5 between :qtdgpdminimo and :qtdgpdmaximo ');
       if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
          Q2.SQL.Add(' and QtdGPM5 between :qtdgpmminimo and :qtdgpmmaximo ');
     end;
     end;
     if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then begin
        Q2.Parambyname('qtdpesominimo').asfloat:=QtdPesoMinimo;
        Q2.Parambyname('qtdpesomaximo').asfloat:=QtdPesoMaximo;
     end;
     if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then begin
        Q2.Parambyname('qtdgpdminimo').asfloat:=QtdGPDMinimo;
        Q2.Parambyname('qtdgpdmaximo').asfloat:=QtdGPDMaximo;
     end;
     if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then begin
        Q2.Parambyname('qtdgpmminimo').asfloat:=QtdGPMMinimo;
        Q2.Parambyname('qtdgpmmaximo').asfloat:=QtdGPMMaximo;
     end;
  end;
{$ENDIF}
  Q2.open;

  //coloca os dias nos campos gpd, peso e gpm
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(10) = 1) then
       Rel.Campos.TextoTitulo['QtdGPD1'] := format(Rel.Campos.TextoTitulo['QtdGPD1'], [id1]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(11) = 1) then
       Rel.Campos.TextoTitulo['QtdGPD2'] := format(Rel.Campos.TextoTitulo['QtdGPD2'], [id2]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(12) = 1) then
       Rel.Campos.TextoTitulo['QtdGPD3'] := format(Rel.Campos.TextoTitulo['QtdGPD3'], [id3]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(13) = 1) then
       Rel.Campos.TextoTitulo['QtdGPD4'] := format(Rel.Campos.TextoTitulo['QtdGPD4'], [id4]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(14) = 1) then
       Rel.Campos.TextoTitulo['QtdGPD5'] := format(Rel.Campos.TextoTitulo['QtdGPD5'], [id5]);

  if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then
       Rel.Campos.TextoTitulo['QtdGPM1'] := format(Rel.Campos.TextoTitulo['QtdGPM1'], [id1]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(16) = 1) then
       Rel.Campos.TextoTitulo['QtdGPM2'] := format(Rel.Campos.TextoTitulo['QtdGPM2'], [id2]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(17) = 1) then
       Rel.Campos.TextoTitulo['QtdGPM3'] := format(Rel.Campos.TextoTitulo['QtdGPM3'], [id3]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(18) = 1) then
       Rel.Campos.TextoTitulo['QtdGPM4'] := format(Rel.Campos.TextoTitulo['QtdGPM4'], [id4]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(19) = 1) then
       Rel.Campos.TextoTitulo['QtdGPM5'] := format(Rel.Campos.TextoTitulo['QtdGPM5'], [id5]);

  if not bPersonalizavel or (IntRelatorios.CampoAssociado(29) = 1) then
       Rel.Campos.TextoTitulo['QtdPeso1'] := format(Rel.Campos.TextoTitulo['QtdPeso1'], [id1]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(30) = 1) then
       Rel.Campos.TextoTitulo['QtdPeso2'] := format(Rel.Campos.TextoTitulo['QtdPeso2'], [id2]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(31) = 1) then
       Rel.Campos.TextoTitulo['QtdPeso3'] := format(Rel.Campos.TextoTitulo['QtdPeso3'], [id3]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(32) = 1) then
       Rel.Campos.TextoTitulo['QtdPeso4'] := format(Rel.Campos.TextoTitulo['QtdPeso4'], [id4]);
  if not bPersonalizavel or (IntRelatorios.CampoAssociado(33) = 1) then
       Rel.Campos.TextoTitulo['QtdPeso5'] := format(Rel.Campos.TextoTitulo['QtdPeso5'], [id5]);

    TotalAnimais := Qry.RecordCount;
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    sQuebra := '';
    icont := 0;
    Qry.First;
    QtdAnimaisQuebra := 0;
    while not Qry.Eof do
    begin
      if QtdQuebraRelatorio > 0 then
      begin
        {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
        Rel.Campos.CarregarValores(Qry);
        {Percorre o(s) campo(s) informado(s) para quebra}
        Rel.Campos.IrAoPrimeiro;
        sAux := '';
        for iAux := 1 to QtdQuebraRelatorio do
        begin
          {Concatena o valor dos campos de quebra, montando o título}
          sAux := SE(sAux = '', sAux, sAux + ' / ') +
            TrataQuebra(Rel.Campos.Campo.TxtTitulo) + ': ' +
            Rel.Campos.Campo.Valor;
          Rel.Campos.IrAoProximo;
        end;
        if (sAux <> sQuebra) then
        begin
          {Se ocorreu mudança na quebra atual ou é a primeira ('')}
          sQuebra := sAux;
          if Rel.LinhasRestantes <= 3 then
          begin
            {Se ñ couber uma linha de registro na pag. atual, quebra página}
            Rel.NovaPagina;
          end
          else
          if Rel.LinhasRestantes < Rel.LinhasPorPagina then
          begin
            {Salta uma linha antes da quebra}
            Rel.NovaLinha;
          end;
          if cGroupby <> '' then
          begin
             if icont > 0 then
             begin
                if Rel.LinhasRestantes <= 4 then
                begin
                  {Se ñ couber uma linha de registro na pag. atual, quebra página}
                  Rel.NovaPagina;
                end;
                {imprimir os totalizadores da quebra caso exista}
                //Rel.NovaLinha;
                Rel.Campos.LimparValores;
                if (IntRelatorios.CampoAssociado(10) = 1) then
                  Rel.Campos.ValorCampo['QtdGPD1'] := Q.fieldbyname('QtdGPD1').asfloat;
                if (IntRelatorios.CampoAssociado(11) = 1) then
                  Rel.Campos.ValorCampo['QtdGPD2'] := Q.fieldbyname('QtdGPD2').asfloat;
                if (IntRelatorios.CampoAssociado(12) = 1) then
                  Rel.Campos.ValorCampo['QtdGPD3'] := Q.fieldbyname('QtdGPD3').asfloat;
                if (IntRelatorios.CampoAssociado(13) = 1) then
                  Rel.Campos.ValorCampo['QtdGPD4'] := Q.fieldbyname('QtdGPD4').asfloat;
                if (IntRelatorios.CampoAssociado(14) = 1) then
                  Rel.Campos.ValorCampo['QtdGPD5'] := Q.fieldbyname('QtdGPD5').asfloat;
                if (IntRelatorios.CampoAssociado(15) = 1) then
                  Rel.Campos.ValorCampo['QtdGPM1'] := Q.fieldbyname('QtdGPM1').asfloat;
                if (IntRelatorios.CampoAssociado(16) = 1) then
                  Rel.Campos.ValorCampo['QtdGPM2'] := Q.fieldbyname('QtdGPM2').asfloat;
                if (IntRelatorios.CampoAssociado(17) = 1) then
                  Rel.Campos.ValorCampo['QtdGPM3'] := Q.fieldbyname('QtdGPM3').asfloat;
                if (IntRelatorios.CampoAssociado(18) = 1) then
                  Rel.Campos.ValorCampo['QtdGPM4'] := Q.fieldbyname('QtdGPM4').asfloat;
                if (IntRelatorios.CampoAssociado(19) = 1) then
                  Rel.Campos.ValorCampo['QtdGPM5'] := Q.fieldbyname('QtdGPM5').asfloat;
                if (IntRelatorios.CampoAssociado(29) = 1) then
                  Rel.Campos.ValorCampo['QtdPeso1'] := Q.fieldbyname('QtdPeso1').asfloat;
                if (IntRelatorios.CampoAssociado(30) = 1) then
                  Rel.Campos.ValorCampo['QtdPeso2'] := Q.fieldbyname('QtdPeso2').asfloat;
                if (IntRelatorios.CampoAssociado(31) = 1) then
                  Rel.Campos.ValorCampo['QtdPeso3'] := Q.fieldbyname('QtdPeso3').asfloat;
                if (IntRelatorios.CampoAssociado(32) = 1) then
                  Rel.Campos.ValorCampo['QtdPeso4'] := Q.fieldbyname('QtdPeso4').asfloat;
                if (IntRelatorios.CampoAssociado(33) = 1) then
                  Rel.Campos.ValorCampo['QtdPeso5'] := Q.fieldbyname('QtdPeso5').asfloat;
                if (IntRelatorios.CampoAssociado(34) = 1) then
                  Rel.Campos.ValorCampo['QtdPesoNascimento'] := Q.fieldbyname('QtdPesoNascimento').asfloat;
                Rel.ImprimirTextoTotalizador('Média: ');
                Rel.ImprimirTexto(0,'Sub-total de animais: '+InttoStr(QtdAnimaisQuebra));
                QtdAnimaisQuebra := 0;
                Rel.NovaLinha;                
                Q.Next;
             end;
          end;
          {Imprime título da quebra}
          Rel.FonteNegrito;
          Rel.ImprimirTexto(0, sQuebra);
          Rel.FonteNormal;
          inc(icont);
        end
        else if (Rel.LinhasRestantes = Rel.LinhasPorPagina) then
        begin
          // Repete o título da quebra no topo da nova pág. qdo ocorrer quebra de pág.
          Rel.FonteNegrito;
          Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
          Rel.FonteNormal;
        end;
      end;
      Inc(QtdAnimaisQuebra);
      Rel.ImprimirColunasResultSet(Qry);
      Qry.Next;
    end;
    {imprimir os totalizadores da quebra}
    if cGroupby <> '' then begin
       if Rel.LinhasRestantes <= 3 then begin
         {Se ñ couber uma linha de registro na pag. atual, quebra página}
         Rel.NovaPagina;
       end;
       Rel.NovaLinha;
       Rel.Campos.LimparValores;
       if (IntRelatorios.CampoAssociado(10) = 1) then
          Rel.Campos.ValorCampo['QtdGPD1'] := Q.fieldbyname('QtdGPD1').asfloat;
       if (IntRelatorios.CampoAssociado(11) = 1) then
          Rel.Campos.ValorCampo['QtdGPD2'] := Q.fieldbyname('QtdGPD2').asfloat;
       if (IntRelatorios.CampoAssociado(12) = 1) then
          Rel.Campos.ValorCampo['QtdGPD3'] := Q.fieldbyname('QtdGPD3').asfloat;
       if (IntRelatorios.CampoAssociado(13) = 1) then
          Rel.Campos.ValorCampo['QtdGPD4'] := Q.fieldbyname('QtdGPD4').asfloat;
       if (IntRelatorios.CampoAssociado(14) = 1) then
          Rel.Campos.ValorCampo['QtdGPD5'] := Q.fieldbyname('QtdGPD5').asfloat;
       if (IntRelatorios.CampoAssociado(15) = 1) then
          Rel.Campos.ValorCampo['QtdGPM1'] := Q.fieldbyname('QtdGPM1').asfloat;
       if (IntRelatorios.CampoAssociado(16) = 1) then
          Rel.Campos.ValorCampo['QtdGPM2'] := Q.fieldbyname('QtdGPM2').asfloat;
       if (IntRelatorios.CampoAssociado(17) = 1) then
          Rel.Campos.ValorCampo['QtdGPM3'] := Q.fieldbyname('QtdGPM3').asfloat;
       if (IntRelatorios.CampoAssociado(18) = 1) then
          Rel.Campos.ValorCampo['QtdGPM4'] := Q.fieldbyname('QtdGPM4').asfloat;
       if (IntRelatorios.CampoAssociado(19) = 1) then
          Rel.Campos.ValorCampo['QtdGPM5'] := Q.fieldbyname('QtdGPM5').asfloat;
       if (IntRelatorios.CampoAssociado(29) = 1) then
          Rel.Campos.ValorCampo['QtdPeso1'] := Q.fieldbyname('QtdPeso1').asfloat;
       if (IntRelatorios.CampoAssociado(30) = 1) then
          Rel.Campos.ValorCampo['QtdPeso2'] := Q.fieldbyname('QtdPeso2').asfloat;
       if (IntRelatorios.CampoAssociado(31) = 1) then
          Rel.Campos.ValorCampo['QtdPeso3'] := Q.fieldbyname('QtdPeso3').asfloat;
       if (IntRelatorios.CampoAssociado(32) = 1) then
          Rel.Campos.ValorCampo['QtdPeso4'] := Q.fieldbyname('QtdPeso4').asfloat;
       if (IntRelatorios.CampoAssociado(33) = 1) then
          Rel.Campos.ValorCampo['QtdPeso5'] := Q.fieldbyname('QtdPeso5').asfloat;
       if (IntRelatorios.CampoAssociado(34) = 1) then
          Rel.Campos.ValorCampo['QtdPesoNascimento'] := Q.fieldbyname('QtdPesoNascimento').asfloat;
       Rel.ImprimirTextoTotalizador('Média: ');
       Rel.ImprimirTexto(0,'Sub-total de animais: '+InttoStr(QtdAnimaisQuebra));
       Rel.NovaLinha;
       Q.next;
     end;
    {imprimir os totalizadores do relatório}
    if Rel.LinhasRestantes <= 3 then begin
      {Se ñ couber uma linha de registro na pag. atual, quebra página}
      Rel.NovaPagina;
    end;
    Rel.NovaLinha;
    Rel.Campos.LimparValores;
    if (IntRelatorios.CampoAssociado(10) = 1) then
       Rel.Campos.ValorCampo['QtdGPD1'] := Q1.fieldbyname('QtdGPD1').asfloat;
    if (IntRelatorios.CampoAssociado(11) = 1) then
       Rel.Campos.ValorCampo['QtdGPD2'] := Q1.fieldbyname('QtdGPD2').asfloat;
    if (IntRelatorios.CampoAssociado(12) = 1) then
       Rel.Campos.ValorCampo['QtdGPD3'] := Q1.fieldbyname('QtdGPD3').asfloat;
    if (IntRelatorios.CampoAssociado(13) = 1) then
       Rel.Campos.ValorCampo['QtdGPD4'] := Q1.fieldbyname('QtdGPD4').asfloat;
    if (IntRelatorios.CampoAssociado(14) = 1) then
       Rel.Campos.ValorCampo['QtdGPD5'] := Q1.fieldbyname('QtdGPD5').asfloat;
    if (IntRelatorios.CampoAssociado(15) = 1) then
       Rel.Campos.ValorCampo['QtdGPM1'] := Q1.fieldbyname('QtdGPM1').asfloat;
    if (IntRelatorios.CampoAssociado(16) = 1) then
       Rel.Campos.ValorCampo['QtdGPM2'] := Q1.fieldbyname('QtdGPM2').asfloat;
    if (IntRelatorios.CampoAssociado(17) = 1) then
       Rel.Campos.ValorCampo['QtdGPM3'] := Q1.fieldbyname('QtdGPM3').asfloat;
    if (IntRelatorios.CampoAssociado(18) = 1) then
       Rel.Campos.ValorCampo['QtdGPM4'] := Q1.fieldbyname('QtdGPM4').asfloat;
    if (IntRelatorios.CampoAssociado(19) = 1) then
       Rel.Campos.ValorCampo['QtdGPM5'] := Q1.fieldbyname('QtdGPM5').asfloat;
    if (IntRelatorios.CampoAssociado(29) = 1) then
       Rel.Campos.ValorCampo['QtdPeso1'] := Q1.fieldbyname('QtdPeso1').asfloat;
    if (IntRelatorios.CampoAssociado(30) = 1) then
       Rel.Campos.ValorCampo['QtdPeso2'] := Q1.fieldbyname('QtdPeso2').asfloat;
    if (IntRelatorios.CampoAssociado(31) = 1) then
       Rel.Campos.ValorCampo['QtdPeso3'] := Q1.fieldbyname('QtdPeso3').asfloat;
    if (IntRelatorios.CampoAssociado(32) = 1) then
       Rel.Campos.ValorCampo['QtdPeso4'] := Q1.fieldbyname('QtdPeso4').asfloat;
    if (IntRelatorios.CampoAssociado(33) = 1) then
       Rel.Campos.ValorCampo['QtdPeso5'] := Q1.fieldbyname('QtdPeso5').asfloat;
    if (IntRelatorios.CampoAssociado(34) = 1) then
       Rel.Campos.ValorCampo['QtdPesoNascimento'] := Q1.fieldbyname('QtdPesoNascimento').asfloat;
    Rel.ImprimirTextoTotalizador('Média geral: ');

    {imprimir os desvios padrões do relatório}
    if Rel.LinhasRestantes <= 3 then begin
      {Se ñ couber uma linha de registro na pag. atual, quebra página}
      Rel.NovaPagina;
    end;
    Rel.Campos.LimparValores;
    if (IntRelatorios.CampoAssociado(10) = 1) then
       Rel.Campos.ValorCampo['QtdGPD1'] := Q2.fieldbyname('QtdGPD1').asfloat;
    if (IntRelatorios.CampoAssociado(11) = 1) then
       Rel.Campos.ValorCampo['QtdGPD2'] := Q2.fieldbyname('QtdGPD2').asfloat;
    if (IntRelatorios.CampoAssociado(12) = 1) then
       Rel.Campos.ValorCampo['QtdGPD3'] := Q2.fieldbyname('QtdGPD3').asfloat;
    if (IntRelatorios.CampoAssociado(13) = 1) then
       Rel.Campos.ValorCampo['QtdGPD4'] := Q2.fieldbyname('QtdGPD4').asfloat;
    if (IntRelatorios.CampoAssociado(14) = 1) then
       Rel.Campos.ValorCampo['QtdGPD5'] := Q2.fieldbyname('QtdGPD5').asfloat;
    if (IntRelatorios.CampoAssociado(15) = 1) then
       Rel.Campos.ValorCampo['QtdGPM1'] := Q2.fieldbyname('QtdGPM1').asfloat;
    if (IntRelatorios.CampoAssociado(16) = 1) then
       Rel.Campos.ValorCampo['QtdGPM2'] := Q2.fieldbyname('QtdGPM2').asfloat;
    if (IntRelatorios.CampoAssociado(17) = 1) then
       Rel.Campos.ValorCampo['QtdGPM3'] := Q2.fieldbyname('QtdGPM3').asfloat;
    if (IntRelatorios.CampoAssociado(18) = 1) then
       Rel.Campos.ValorCampo['QtdGPM4'] := Q2.fieldbyname('QtdGPM4').asfloat;
    if (IntRelatorios.CampoAssociado(19) = 1) then
       Rel.Campos.ValorCampo['QtdGPM5'] := Q2.fieldbyname('QtdGPM5').asfloat;
    if (IntRelatorios.CampoAssociado(29) = 1) then
       Rel.Campos.ValorCampo['QtdPeso1'] := Q2.fieldbyname('QtdPeso1').asfloat;
    if (IntRelatorios.CampoAssociado(30) = 1) then
       Rel.Campos.ValorCampo['QtdPeso2'] := Q2.fieldbyname('QtdPeso2').asfloat;
    if (IntRelatorios.CampoAssociado(31) = 1) then
       Rel.Campos.ValorCampo['QtdPeso3'] := Q2.fieldbyname('QtdPeso3').asfloat;
    if (IntRelatorios.CampoAssociado(32) = 1) then
       Rel.Campos.ValorCampo['QtdPeso4'] := Q2.fieldbyname('QtdPeso4').asfloat;
    if (IntRelatorios.CampoAssociado(33) = 1) then
       Rel.Campos.ValorCampo['QtdPeso5'] := Q2.fieldbyname('QtdPeso5').asfloat;
    if (IntRelatorios.CampoAssociado(34) = 1) then
       Rel.Campos.ValorCampo['QtdPesoNascimento'] := Q2.fieldbyname('QtdPesoNascimento').asfloat;
    Rel.ImprimirTextoTotalizador('Desvio Padrão: ');

    {imprimir o total de animais}
    if Rel.LinhasRestantes <= 3 then begin
      {Se ñ couber uma linha de registro na pag. atual, quebra página}
      Rel.NovaPagina;
    end;
    Rel.NovaLinha;
    Rel.ImprimirTexto(0,'Total de animais: '+InttoStr(TotalAnimais));

    Retorno := Rel.FinalizarRelatorio;
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
    Q.Free;
    Q1.Free;
    Q2.Free;
    Qry.Free;
  end;
  except
    on E: Exception do
    begin
      Rollback;
      iAux := Length(strExceedsTheConfiguredThreshold);
      if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then
      begin
        Result := IntToStr(idExceedsTheConfiguredThreshold);
      end
      else
      begin
        Mensagens.Adicionar(1209, Self.ClassName, 'GerarRelatorioPesoAjustado', [E.Message]);
        Result := '';
      end;
      Exit;
    end;
  end;
 finally
  IntRelatorios.Free;
 end;
end;

function TIntAnimais.PesquisarRelatorioPesagem(CodOrigem: Integer;
  IndSexoAnimal: String; CodAptidao, CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim, CodRaca, SglFazendaPai,
  CodAnimalManejoPai, DesApelidoPai, SglFazendaMae,
  CodAnimalManejoMae: String; DtaNascimentoInicio, DtaNascimentoFim,
  DtaCompraInicio, DtaCompraFim: TDateTime; CodPessoaSecundaria: Integer;
  CodCategoria, IndAnimalCastrado: String; CodRegimeAlimentar: Integer;
  CodLote, CodLocal: String; CodTipoLugar: Integer; DtaPesagemInicio,
  DtaPesagemFim: TDateTime; QtdPesoMinimo, QtdPesoMaximo, QtdGPDMinimo,
  QtdGPDMaximo, QtdGPMMinimo, QtdGPMMaximo: Double;
  QtdUltimasPesagens: Integer; IndAgrupRaca1: String; CodRaca1: Integer;
  QtdCompRacialInicio1, QtdCompRacialFim1: Double; IndAgrupRaca2: String;
  CodRaca2: Integer; QtdCompRacialInicio2, QtdCompRacialFim2: Double;
  IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
  QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer;
  QtdCompRacialInicio4, QtdCompRacialFim4: Double; Tipo,
  QtdQuebraRelatorio, CodTarefa: Integer): String;
const
  CodRelatorio: Integer = 11;
  NomeMetodo: String = 'PesquisarRelatorioPesagem';
var
  Rel: TRelatorioPadrao;
  Retorno, Max, X, iAux, icont: Integer;
  IntRelatorios: TIntRelatorios;
  bPersonalizavel : boolean;
  IndTipo, squebra, saux, cOrderby, sumario: string;
  linhasumario : String;
  Q, Qry: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  Qry := THerdomQuery.Create(Conexao, nil);
   // Obtem parâmetro com o máximo número de animais para pesquisa
  try
    Max := StrToInt(ValorParametro(35));
  except
    Exit;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Retorno := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Buscar(CodRelatorio);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Pesquisar(CodRelatorio);
    if Retorno < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');
 try
  Qry.Close;
  Qry.SQL.Clear;
{$IFDEF MSSQL}
  Qry.SQL.Add('if object_id(''tempdb..#tmp_relatorio_pesagem'') is null '+
        #13#10'  create table #tmp_relatorio_pesagem '+
        #13#10'  ( '+
        #13#10'    CodPessoaProdutor int '+
        #13#10'    , CodAnimal int '+
        #13#10'    , CodRaca int '+
        #13#10'    , CodAnimalPai int null '+
        #13#10'    , CodAnimalMae int null '+
        #13#10'    , DesApelido varchar(20) null '+
        #13#10'    , CodAnimalManejo varchar(11) null '+
        #13#10'    , CodAnimalSisBov varchar(17) null '+
        #13#10'    , IndAnimalCastrado varchar(1) null '+
        #13#10'    , SglCategoria char(3) null '+
        #13#10'    , DesCategoria varchar(25) null '+
        #13#10'    , DtaNascimento smalldatetime null '+
        #13#10'    , SglFazendaCorrente char(2) null '+
        #13#10'    , NomFazendaCorrente varchar(50) null '+
        #13#10'    , Idade varchar(7) null '+
        #13#10'    , SglLocal char(2) null '+
        #13#10'    , DesLocal varchar(30) null '+
        #13#10'    , SglLote char(2) null '+
        #13#10'    , DesLote varchar(30) null '+
        #13#10'    , CodAnimalManejoMae varchar(11) null '+
        #13#10'    , SglOrigem char(3) null '+
        #13#10'    , DesOrigem varchar(10) null '+
        #13#10'    , CodAnimalManejoPai varchar(11) null '+
        #13#10'    , NomAnimalPai varchar(60) null '+
        #13#10'    , DesApelidoPai varchar(20) null '+
        #13#10'    , QtdPesoNascimento decimal (6,1) null '+
        #13#10'    , SglRaca char(3) null '+
        #13#10'    , DesRaca varchar(35) null '+
        #13#10'    , SglRegimeAlimentar char(6) null '+
        #13#10'    , DesRegimeAlimentar varchar(50) null '+
        #13#10'    , IndSexo char(1) null '+
        #13#10'    , SglTipoLugar char(3) null '+
        #13#10'    , DesTipoLugar varchar(25) null '+
        #13#10'    , DtaPesagem smalldatetime null '+
        #13#10'    , QtdPeso decimal(6,1) null '+
        #13#10'    , QtdGPD decimal(6,2) null '+
        #13#10'    , QtdGPM decimal(6,2) null '+
        #13#10'    , NumSequencia int null '+
        #13#10'    , NumIdade varchar(7) null '+
        #13#10'    , QtdDiasUltimaPesagem decimal(6,0) null '+
        #13#10'    , DesComposicaoRacial varchar(40) null '+
        #13#10'  ) ');
{$ENDIF}
      Qry.ExecSQL;

      Qry.SQL.Clear;
{$IFDEF MSSQL}
      Qry.SQL.Add('truncate table #tmp_relatorio_pesagem');
{$ENDIF}
      Qry.ExecSQL;

     Qry.SQL.Clear;
{$IFDEF MSSQL}
     Qry.SQL.Add('if object_id(''tempdb..#tmp_relatorio_pesagem1'') is null '+
       'create table #tmp_relatorio_pesagem1 ( '+
       'CodPessoaProdutor int '+
       ', CodAnimal int '+
       ', CodRaca int '+
       ', CodAnimalPai int null '+
       ', CodAnimalMae int null '+
       ', DesApelido varchar(20) null '+
       ', CodAnimalManejo varchar(11) null '+
       ', CodAnimalSisBov varchar(17) null '+
       ', IndAnimalCastrado varchar(1) null '+
       ', SglCategoria char(3) null '+
       ', DesCategoria varchar(25) null '+
       ', DtaNascimento smalldatetime null '+
       ', SglFazendaCorrente char(2) null '+
       ', NomFazendaCorrente varchar(50) null '+
       ', Idade varchar(7) null '+
       ', SglLocal char(2) null '+
       ', DesLocal varchar(30) null '+
       ', SglLote char(2) null '+
       ', DesLote varchar(30) null '+
       ', CodAnimalManejoMae varchar(11) null '+
       ', SglOrigem char(3) null '+
       ', DesOrigem varchar(10) null '+
       ', CodAnimalManejoPai varchar(11) null '+
       ', NomAnimalPai varchar(60) null '+
       ', DesApelidoPai varchar(20) null '+
       ', SglRaca char(3) null '+
       ', DesRaca varchar(35) null '+
       ', SglRegimeAlimentar char(6) null '+
       ', DesRegimeAlimentar varchar(50) null '+
       ', IndSexo char(1) null '+
       ', SglTipoLugar char(3) null '+
       ', DesTipoLugar varchar(25) null '+
       ', DtaPesagem smalldatetime null '+
       ', QtdPeso decimal(6,1) null '+
       ', QtdPesoNascimento decimal (6,1) null '+
       ', QtdGPD decimal(6,2) null '+
       ', QtdGPM decimal(6,2) null '+
       ', NumSequencia int null '+
       ', NumIdade varchar(7) null '+
       ', QtdDiasUltimaPesagem decimal(6,0) null '+
       ', DesComposicaoRacial varchar(40) null) ');
{$ENDIF}
     Qry.ExecSQL;
     Qry.SQL.Clear;
{$IFDEF MSSQL}
     Qry.SQL.Add('truncate table #tmp_relatorio_pesagem1');
{$ENDIF}
     Qry.ExecSQL;
     Qry.SQL.Clear;
     {$IFDEF MSSQL}
     Qry.SQL.Add('insert into #tmp_relatorio_pesagem '+
                'select distinct top ' + IntToStr(Max) + ' ta.cod_pessoa_produtor as CodPessoaProdutor '+
                '     , ta.cod_animal as CodAnimal '+
                '     , ta.cod_raca as CodRaca '+
                '     , null as CodAnimalPai '+
                '     , ta.cod_animal_mae as CodAnimalMae '+
                '     , ta.des_apelido as DesApelido '+
                '     , tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                '     , case isnull(ta.cod_animal_sisbov, 0) '+
                '       when 0 then null ' +
                '       else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '+
                '       case ta.cod_micro_regiao_sisbov when -1 then '''' ' +
                '            else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end + ' +
                '       right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '+
                '       right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov '+
                '     , ta.ind_animal_castrado as IndAnimalCastrado '+
                '     , tc.sgl_categoria_animal as SglCategoria '+
                '     , tc.des_categoria_animal as DesCategoria '+
                '     , ta.dta_nascimento as DtaNascimento ' +
                '     , tfc.sgl_fazenda as SglFazendaCorrente '+
                '     , tfc.nom_fazenda as NomFazendaCorrente '+
                '     , dbo.fnt_idade(ta.dta_nascimento, isnull(ta.dta_desativacao, getdate())) as Idade ' +
                '     , tl.sgl_local as SglLocal '+
                '     , tl.des_local as DesLocal '+
                '     , tlt.sgl_lote as SglLote '+
                '     , tlt.des_lote as DesLote '+
                '     , null as CodAnimalManejoMae ' +
                '     , tto.sgl_tipo_origem as SglOrigem '+
                '     , tto.des_tipo_origem as DesOrigem '+
                '     , case isnull(ta.cod_animal_pai, 0) ' +
                '       when 0 then case isnull(ta.cod_reprodutor_multiplo, 0) '+
                '            when 0 then null '+
                '            else dbo.fnt_buscar_pai(ta.cod_reprodutor_multiplo, ta.cod_pessoa_produtor, ''R'') '+
                '            end ' +
                '       else dbo.fnt_buscar_pai(ta.cod_animal_pai, ta.cod_pessoa_produtor, ''T'') end as CodAnimalManejoPai ');
                if (not bPersonalizavel) or ((IntRelatorios.CampoAssociado(35) = 1) or (IntRelatorios.CampoAssociado(36) = 1)) then
                   Qry.SQL.Add(' , taa.nom_animal as NomAnimalPai, taa.des_apelido as DesApelidoPai ')
                else
                   Qry.SQL.Add(' , null as NomAnimalPai, null as DesApelidoPai ');
                Qry.SQL.Add('     , null as QtdPesoNascimento ' +
                '     , tr.sgl_raca as SglRaca '+
                '     , tr.des_raca as DesRaca '+
                '     , tra.sgl_regime_alimentar as SglRegimeAlimentar ' +
                '     , tra.des_regime_alimentar as DesRegimeAlimentar ' +
                '     , ta.ind_sexo as IndSexo '+
                '     , tlu.sgl_tipo_lugar as SglTipoLugar ' +
                '     , tlu.des_tipo_lugar as DesTipoLugar ' +
                '     , null as DtaPesagem ' +
                '     , null as QtdPeso ' +
                '     , null as QtdGPD ' +
                '     , null as QtdGPM ' +
                '     , null as NumSequencia ' +
                '     , null as NumIdade ' +
                '     , null as QtdDiasUltimaPesagem '+
                '     , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ');
                Qry.SQL.Add('  from tab_animal as ta '+
                '       ,tab_fazenda as tfc '+
                '       ,tab_fazenda as tfm '+
                '       ,tab_raca as tr '+
                '       ,tab_tipo_origem as tto '+
                '       ,tab_pessoa_secundaria as ts '+
                '       ,tab_categoria_animal as tc '+
                '       ,tab_local as tl '+
                '       ,tab_lote as tlt '+
                '       ,tab_regime_alimentar as tra ');
                if not bPersonalizavel or ((IntRelatorios.CampoAssociado(35) = 1) or (IntRelatorios.CampoAssociado(36) = 1)) then
                   Qry.SQL.Add('       ,tab_animal taa ');
                Qry.SQL.Add('       ,tab_animal_evento tae '+
                '       ,tab_tipo_lugar as tlu ');
                if IndAgrupRaca1 = 'N' then
                   Qry.SQL.Add('  , tab_composicao_racial as tcr ');
                if IndAgrupRaca2 = 'N' then
                   Qry.SQL.Add('  , tab_composicao_racial as tcr2 ');
                if IndAgrupRaca3 = 'N' then
                   Qry.SQL.Add('  , tab_composicao_racial as tcr3 ');
                if IndAgrupRaca4 = 'N' then
                   Qry.SQL.Add('  , tab_composicao_racial as tcr4 ');
                Qry.SQL.Add(' where ta.dta_fim_validade is null '+
                '          and ta.cod_pessoa_produtor = :CodPessoaProdutor '+
                '          and ta.cod_fazenda_corrente *= tfc.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tfc.cod_pessoa_produtor '+
                '          and ta.cod_fazenda_manejo *= tfm.cod_fazenda '+
                '          and ta.cod_pessoa_produtor *= tfm.cod_pessoa_produtor '+
                '          and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                '          and ta.cod_animal = tae.cod_animal '+
                '          and tae.qtd_peso_animal is not null '+
                '          and ta.cod_raca = tr.cod_raca '+
                '          and ta.cod_tipo_origem = tto.cod_tipo_origem '+
                '          and ta.cod_pessoa_secundaria_criador *= ts.cod_pessoa_produtor ' +
                '          and ta.cod_categoria_animal *= tc.cod_categoria_animal ' +
                '          and ta.cod_regime_alimentar *= tra.cod_regime_alimentar ');
                if not bPersonalizavel or ((IntRelatorios.CampoAssociado(35) = 1) or (IntRelatorios.CampoAssociado(36) = 1)) then
                   Qry.SQL.Add(' and ta.cod_animal_pai *= taa.cod_animal '+
                                 ' and ta.cod_pessoa_produtor *= taa.cod_pessoa_produtor ');
  if (CodLocal <> '') then begin
    Qry.SQL.Add('          and ta.cod_local_corrente = tl.cod_local ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor = tl.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente = tl.cod_fazenda ');
  end else begin
    Qry.SQL.Add('          and ta.cod_local_corrente *= tl.cod_local ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor *= tl.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente *= tl.cod_fazenda ');
  end;

  if (CodLote <> '') then begin
    Qry.SQL.Add('          and ta.cod_lote_corrente = tlt.cod_lote ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor = tlt.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente = tlt.cod_fazenda ');
  end else begin
    Qry.SQL.Add('          and ta.cod_lote_corrente *= tlt.cod_lote ');
    Qry.SQL.Add('          and ta.cod_pessoa_produtor *= tlt.cod_pessoa_produtor ');
    Qry.SQL.Add('          and ta.cod_fazenda_corrente *= tlt.cod_fazenda ');
  end;

  if (CodTipoLugar <> -1) then begin
    Qry.SQL.Add('          and ta.cod_tipo_lugar = tlu.cod_tipo_lugar ');
  end else begin
    Qry.SQL.Add('          and ta.cod_tipo_lugar *= tlu.cod_tipo_lugar ');
  end;

  if (CodFazendaManejo <> -1) then begin
    Qry.SQL.Add('          and ta.cod_fazenda_manejo = :CodFazendaManejo ');
  end;

  if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
    Qry.SQL.Add('          and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim');
  end;

  if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then begin
    Qry.SQL.Add('          and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim');
  end;

  if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then begin
    Qry.SQL.Add('          and ta.dta_compra between :DtaCompraInicio and :DtaCompraFim');
  end;

  if (CodPessoaSecundaria <> -1) then begin
    Qry.SQL.Add('          and ta.cod_pessoa_secundaria_criador = :CodPessoaSecundariaCriador');
  end;

  if (CodAptidao <> -1) then begin
    Qry.SQL.Add('          and ta.cod_aptidao = :CodAptidao');
  end;

  if (CodRaca <> '') then begin
    Qry.SQL.Add('          and ta.cod_raca in (' + CodRaca + ')');
  end;

  if (IndSexoAnimal = 'M') or (IndSexoAnimal = 'F') then begin
    Qry.SQL.Add('          and ta.ind_sexo =:IndSexo');
  end;

  if (CodOrigem <> -1) then begin
    Qry.SQL.Add('          and ta.cod_tipo_origem = :CodOrigem ');
  end;

  // Se foram informados dados de manejo do pai, verifica se trata-se de um touro ou de um RM
  // para posteriormente montar a condição correta no SQL. Se foi informado o apelido, assume-se
  // que o pai é um touro
  if (SglFazendaPai <> '') or (CodAnimalManejoPai <> '') or (DesApelidoPai <> '') then begin
//  if DesApelidoPai = '' then begin
      Retorno := VerificaTipoPai(SglFazendaPai, CodAnimalManejoPai, IndTipo);
      if Retorno < 0 then Exit;
//  end else begin
//    IndTipo := 'T';
//  end;

    if IndTipo = 'T' then begin
      Qry.SQL.Add('          and ta.cod_animal_pai in');
      Qry.SQL.Add('              (select cod_animal ');
      Qry.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      Qry.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Qry.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
      Qry.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');
      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;
      if (CodAnimalManejoPai <> '') then begin
        Qry.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
      end;
      if (DesApelidoPai <> '') then begin
        Qry.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
      end;
      Qry.SQL.Add(') ');

    end else if IndTipo = 'E' then begin
      Qry.SQL.Add('          and ta.cod_animal_pai in');
      Qry.SQL.Add('              (select cod_animal ');

      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
      end
      else begin
        Qry.SQL.Add('              from tab_animal as ta ');
      end;

      Qry.SQL.Add('              where ta.cod_tipo_origem = 4 ');
      Qry.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor1 ');
      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('                and ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
        Qry.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
        Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;
      if (CodAnimalManejoPai <> '') then begin
        Qry.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalPai ');
      end;
      if (DesApelidoPai <> '') then begin
        Qry.SQL.Add('                and ta.des_apelido =:DesApelidoPai ');
      end;
      Qry.SQL.Add(') ');

    end else begin
      Qry.SQL.Add('          and ta.cod_reprodutor_multiplo in');
      Qry.SQL.Add('              (select cod_reprodutor_multiplo ');
      Qry.SQL.Add('              from tab_reprodutor_multiplo as trm, tab_fazenda as tf ');
      Qry.SQL.Add('              where trm.cod_pessoa_produtor = tf.cod_pessoa_produtor');
      Qry.SQL.Add('                and trm.cod_fazenda_manejo = tf.cod_fazenda ');
      Qry.SQL.Add('                and trm.cod_pessoa_produtor = :CodPessoaProdutor1 ');
      if (SglFazendaPai <> '') then begin
        Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaPai ');
      end;
      if (CodAnimalManejoPai <> '') then begin
        Qry.SQL.Add('                and trm.cod_reprodutor_multiplo_manejo =:CodAnimalPai ');
      end;
      Qry.SQL.Add(') ');
    end;
  end;

  if (SglFazendaMae <> '') or (CodAnimalManejoMae <> '') then begin
    Qry.SQL.Add('          and ta.cod_animal_mae in');
    Qry.SQL.Add('              (select cod_animal ');
    Qry.SQL.Add('              from tab_animal as ta, tab_fazenda as tf ');
    Qry.SQL.Add('              where ta.cod_pessoa_produtor = tf.cod_pessoa_produtor');
    Qry.SQL.Add('                and ta.cod_fazenda_manejo = tf.cod_fazenda ');
    Qry.SQL.Add('                and ta.cod_pessoa_produtor = :CodPessoaProdutor2 ');
    if (SglFazendaMae <> '') then begin
      Qry.SQL.Add('                and tf.sgl_fazenda =:SglFazendaMae ');
    end;
    if (CodAnimalManejoMae <> '') then begin
      Qry.SQL.Add('                and ta.cod_animal_manejo =:CodAnimalMae ');
    end;
    Qry.SQL.Add(') ');
  end;

  if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then begin
    Qry.SQL.Add('          and ta.ind_animal_castrado =:IndAnimalCastrado');
  end;

  if (CodRegimeAlimentar <> -1) then begin
    Qry.SQL.Add('          and ta.cod_regime_alimentar = :CodRegimeAlimentar');
  end;

  if (CodCategoria <> '') then begin
    Qry.SQL.Add('          and ta.cod_categoria_animal in (' + CodCategoria + ')');
  end;

  if (CodTipoLugar <> -1) then begin
    Qry.SQL.Add('          and ta.cod_tipo_lugar = :CodTipoLugar');
  end;

  if (CodLocal <> '') then begin
    Qry.SQL.Add('          and ta.cod_local_corrente in (' + CodLocal + ')');
  end;

  if (CodLote <> '') then begin
    Qry.SQL.Add('          and ta.cod_lote_corrente in (' + CodLote + ')');
  end;

  if IndAgrupRaca1 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ' +
                   '  and tcr.cod_raca = :codraca1  ' +
                   '  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ');
  end;
  if IndAgrupRaca2 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr2.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ' +
                   '  and tcr2.cod_raca = :codraca2  ' +
                   '  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ');
  end;
  if IndAgrupRaca3 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr3.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ' +
                   '  and tcr3.cod_raca = :codraca3  ' +
                   '  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ');
  end;
  if IndAgrupRaca4 = 'N' then begin
     Qry.SQL.Add('  and ta.cod_animal = tcr4.cod_animal  ' +
                   '  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ' +
                   '  and tcr4.cod_raca = :codraca4  ' +
                   '  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ');
  end;
  if IndAgrupRaca1 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca1 ' +
                   ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ');
  end;
  if IndAgrupRaca2 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca2 ' +
                   ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ');
  end;
  if IndAgrupRaca3 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca3 ' +
                   ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ');
  end;
  if IndAgrupRaca4 = 'S' then begin
     Qry.SQL.Add(' and ta.cod_animal in (select cod_animal ' +
                   ' from tab_composicao_racial as tcr, ' +
                   ' tab_composicao_agrup_racas as tacr ' +
                   ' where tacr.cod_agrupamento_racas = :codraca4 ' +
                   ' and   tcr.cod_pessoa_produtor = :CodPessoaProdutor ' +
                   ' and   tacr.cod_raca = tcr.cod_raca ' +
                   ' group by cod_animal ' +
                   ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ');
  end;

{$ENDIF}

  Qry.ParamByName('CodPessoaProdutor').AsInteger := Conexao.CodProdutorTrabalho;
  if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then
      begin
        Qry.ParamByName('CodManejoInicio').AsString := CodAnimalManejoInicio;
        Qry.ParamByName('CodManejoFim').AsString := CodAnimalManejoFim;
       end;
  if (CodFazendaManejo <> -1) then
        Qry.ParamByName('CodFazendaManejo').AsInteger := CodFazendaManejo;
  if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
      begin
        Qry.ParamByName('DtaNascimentoInicio').AsDateTime := DtaNascimentoInicio;
        Qry.ParamByName('DtaNascimentoFim').AsDateTime := DtaNascimentoFim;
       end;
  if (DtaCompraInicio <> 0) and (DtaCompraFim <> 0) then
      begin
        Qry.ParamByName('DtaCompraInicio').AsDateTime := DtaCompraInicio;
        Qry.ParamByName('DtaCompraFim').AsDateTime := DtaCompraFim;
       end;
  if (CodPessoaSecundaria <> -1) then
        Qry.ParamByName('CodPessoaSecundariaCriador').AsInteger := CodPessoaSecundaria;
  if (CodAptidao <> -1) then
        Qry.ParamByName('CodAptidao').AsInteger := CodAptidao;
  if (IndSexoAnimal = 'F') or (IndSexoAnimal = 'M') then
        Qry.ParamByName('IndSexo').AsString := IndSexoAnimal;
  if (SglFazendaPai <> '') or (CodAnimalManejoPai <> '') or (DesApelidoPai <> '') then
        Qry.ParamByName('CodPessoaProdutor1').AsInteger := Conexao.CodProdutorTrabalho;
  if (SglFazendaPai <> '') then
        Qry.ParamByName('SglFazendaPai').AsString := SglFazendaPai;
  if (CodAnimalManejoPai <> '') then
        Qry.ParamByName('CodAnimalPai').AsString := CodAnimalManejoPai;
  if (DesApelidoPai <> '') then
        Qry.ParamByName('DesApelidoPai').AsString := DesApelidoPai;
  if (SglFazendaMae <> '') or (CodAnimalManejoMae <> '') then
        Qry.ParamByName('CodPessoaProdutor2').AsInteger := Conexao.CodProdutorTrabalho;
  if (SglFazendaMae <> '') then
        Qry.ParamByName('SglFazendaMae').AsString := SglFazendaMae;
  if (CodAnimalManejoMae <> '') then
        Qry.ParamByName('CodAnimalMae').AsString := CodAnimalManejoMae;
  if (IndAnimalCastrado = 'S') or (IndAnimalCastrado = 'N') then
        Qry.ParamByName('IndAnimalCastrado').AsString := IndAnimalCastrado;
  if (CodRegimeAlimentar <> -1) then
        Qry.ParamByName('CodRegimeAlimentar').AsInteger := CodRegimeAlimentar;
  if (CodTipoLugar <> -1) then
        Qry.ParamByName('CodTipoLugar').AsInteger := CodTipoLugar;
  if (CodOrigem <> -1) then
        Qry.ParamByName('CodOrigem').AsInteger := CodOrigem;
  if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
        Qry.ParamByName('codraca1').AsInteger := CodRaca1;
        Qry.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
        Qry.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
  end;
  if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
        Qry.ParamByName('codraca2').AsInteger := CodRaca2;
        Qry.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
        Qry.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
  end;
  if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
        Qry.ParamByName('codraca3').AsInteger := CodRaca3;
        Qry.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
        Qry.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
  end;
  if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
        Qry.ParamByName('codraca4').AsInteger := CodRaca4;
        Qry.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
        Qry.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
  end;
  Qry.ExecSQL;

 if not bPersonalizavel or (IntRelatorios.CampoAssociado(15) = 1) then begin
  Qry.SQL.Clear;
{$IFDEF MSSQL}
  Qry.SQL.Add('update #tmp_relatorio_pesagem '+
                 #13#10'  set CodAnimalManejoMae = tf.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
                 #13#10'  from '+
                 #13#10'    tab_fazenda tf '+
                 #13#10'    , tab_animal ta '+
                 #13#10'  where '+
                 #13#10'    tf.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                 #13#10'    and tf.cod_fazenda = ta.cod_fazenda_manejo '+
                 #13#10'    and ta.cod_pessoa_produtor = #tmp_relatorio_pesagem.CodPessoaProdutor '+
                 #13#10'    and ta.cod_animal = #tmp_relatorio_pesagem.codanimalmae '+
                 #13#10'    and #tmp_relatorio_pesagem.codanimalmae is not null ');
{$ENDIF}
  Qry.ExecSQL;
 end;
  Qry.Close;
  Qry.SQL.Clear;

{$IFDEF MSSQL}
   Qry.SQL.Add (' exec spt_pesagem :QtdUltimasPesagens ');
{$ENDIF}

 Qry.Parambyname('QtdUltimasPesagens').asinteger := QtdUltimasPesagens;
 Qry.ExecSQL;

 Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
 try
   Rel.TipoDoArquvio := Tipo;

   {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
   if CodTarefa > 0 then begin
     Rel.CodTarefa := CodTarefa;
   end;

   Retorno := Rel.CarregarRelatorio(CodRelatorio);
   if Retorno < 0 then Exit;

   {Desabilita a apresentação dos campos selecionados para quebra}
   Rel.Campos.IrAoPrimeiro;
   cOrderby := '';
   for iAux := 1 to QtdQuebraRelatorio do begin
      Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
      Rel.Campos.IrAoProximo;
   end;

   Rel.Campos.IrAoPrimeiro;
   for iAux := 1 to  Rel.Campos.NumCampos do begin
       cOrderby := cOrderby + Rel.campos.campo.NomField + ', ';
       Rel.Campos.IrAoProximo;
   end;

   if cOrderby <> '' then
      delete(cOrderby,length(cOrderby)-1,2);

  Qry.Close;
  Qry.SQL.Clear;
{$IFDEF MSSQL}
  Qry.SQL.Add(' select *  ');
  Qry.SQL.Add(' from #tmp_relatorio_pesagem1 ');
  Qry.SQL.Add(' where CodAnimal is not null  ');
  if (DtaPesagemInicio > 0) and (DtaPesagemFim > 0) then
     Qry.SQL.Add(' and DtaPesagem between :DtaPesagemInicio and :DtaPesagemFim ');
  if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
     Qry.SQL.Add(' and QtdPeso between :QtdPesoMinimo and :QtdPesoMaximo ');
  if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
     Qry.SQL.Add(' and QtdGPD between :QtdGPDMinimo and :QtdGPDMaximo ');
  if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
     Qry.SQL.Add(' and QtdGPM between :QtdGPMMinimo and :QtdGPMMaximo ');
  if cOrderBy <> '' then
     Qry.SQL.Add(' order by '+ cOrderby);
{$ENDIF}
  if (DtaPesagemInicio > 0) and (DtaPesagemFim > 0) then begin
     Qry.ParamByName('DtaPesagemInicio').asdatetime := DtaPesagemInicio;
     Qry.ParamByName('DtaPesagemFim').asdatetime := DtaPesagemFim;
  end;
  if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then begin
     Qry.ParamByName('QtdPesoMinimo').asfloat := QtdPesoMinimo;
     Qry.ParamByName('QtdPesoMaximo').asfloat := QtdPesoMaximo;
  end;
  if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then begin
     Qry.ParamByName('QtdGPDMinimo').asfloat := QtdGPDMinimo;
     Qry.ParamByName('QtdGPDMaximo').asfloat := QtdGPDMaximo;
  end;
  if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then begin
     Qry.ParamByName('QtdGPMMinimo').asfloat := QtdGPMMinimo;
     Qry.ParamByName('QtdGPMMaximo').asfloat := QtdGPMMaximo;
  end;
  Qry.open;
  if Qry.IsEmpty then begin
    Mensagens.Adicionar(1015, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Q.Close;
  Q.SQL.Clear;
{$IFDEF MSSQL}
  Q.SQL.Add(' select count(distinct CodAnimal) as Quantidade ');
//  if not bPersonalizavel or (IntRelatorios.CampoAssociado(34) = 1) then begin
//     Q.SQL.Add(' , dbo.fnt_composicao_racial(CodAnimal, CodPessoaProdutor) as DesComposicaoRacial  ');
//  end;
  Q.SQL.Add(' from #tmp_relatorio_pesagem1 ');
  Q.SQL.Add(' where CodAnimal is not null  ');
  if (DtaPesagemInicio > 0) and (DtaPesagemFim > 0) then
     Q.SQL.Add(' and DtaPesagem between :DtaPesagemInicio and :DtaPesagemFim ');
  if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then
     Q.SQL.Add(' and QtdPeso between :QtdPesoMinimo and :QtdPesoMaximo ');
  if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then
     Q.SQL.Add(' and QtdGPD between :QtdGPDMinimo and :QtdGPDMaximo ');
  if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then
     Q.SQL.Add(' and QtdGPM between :QtdGPMMinimo and :QtdGPMMaximo ');
{$ENDIF}
  if (DtaPesagemInicio > 0) and (DtaPesagemFim > 0) then begin
     Q.ParamByName('DtaPesagemInicio').asdatetime := DtaPesagemInicio;
     Q.ParamByName('DtaPesagemFim').asdatetime := DtaPesagemFim;
  end;
  if (QtdPesoMinimo > 0) and (QtdPesoMaximo > 0) then begin
     Q.ParamByName('QtdPesoMinimo').asfloat := QtdPesoMinimo;
     Q.ParamByName('QtdPesoMaximo').asfloat := QtdPesoMaximo;
  end;
  if (QtdGPDMinimo > -100) and (QtdGPDMaximo > -100) then begin
     Q.ParamByName('QtdGPDMinimo').asfloat := QtdGPDMinimo;
     Q.ParamByName('QtdGPDMaximo').asfloat := QtdGPDMaximo;
  end;
  if (QtdGPMMinimo > -100) and (QtdGPMMaximo > -100) then begin
     Q.ParamByName('QtdGPMMinimo').asfloat := QtdGPMMinimo;
     Q.ParamByName('QtdGPMMaximo').asfloat := QtdGPMMaximo;
  end;
  Q.open;

    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    sQuebra := '';
    icont := 0;
    Qry.First;
    while not Qry.EOF do begin
      if QtdQuebraRelatorio > 0 then begin
        //Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query
        Rel.Campos.CarregarValores(Qry);
        //Percorre o(s) campo(s) informado(s) para quebra
        Rel.Campos.IrAoPrimeiro;
        sAux := '';
        for iAux := 1 to QtdQuebraRelatorio do begin
          //Concatena o valor dos campos de quebra, montando o título
          sAux := SE(sAux = '', sAux, sAux + ' / ') +
            TrataQuebra(Rel.Campos.Campo.TxtTitulo) + ': ' +
            Rel.Campos.Campo.Valor;
          Rel.Campos.IrAoProximo;
        end;
        if (sAux <> sQuebra) then begin
          //Se ocorreu mudança na quebra atual ou é a primeira ('')
          sQuebra := sAux;
          if Rel.LinhasRestantes <= 2 then begin
            //Se ñ couber uma linha de registro na pag. atual, quebra página
            Rel.NovaPagina;
          end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
            //Salta uma linha antes da quebra
            Rel.NovaLinha;
          end;
          //Imprime título da quebra
          Rel.ImprimirTexto(0, sQuebra);
        end else if (Rel.LinhasRestantes = Rel.LinhasPorPagina) then begin
          // Repete o título da quebra no topo da nova pág. qdo ocorrer quebra de pág.
          Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
        end;
      end;
      Rel.ImprimirColunasResultSet(Qry);
      Qry.Next;
    end;

    {imprimir o total de animais}
    if Rel.LinhasRestantes <= 3 then begin
      {Se ñ couber uma linha de registro na pag. atual, quebra página}
      Rel.NovaPagina;
    end;
    Rel.NovaLinha;
    Rel.ImprimirTexto(0,'Total de animais: ' + Q.Fieldbyname('Quantidade').asstring);

    Retorno := Rel.FinalizarRelatorio;
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
  end;
  except
    on E: Exception do
    begin
      Rollback;
      iAux := Length(strExceedsTheConfiguredThreshold);
      if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then
      begin
        Result := IntToStr(idExceedsTheConfiguredThreshold);
      end
      else
      begin
        Mensagens.Adicionar(1216, Self.ClassName, 'GerarRelatorioPesagem', [E.Message]);
        Result := '';
      end;
      Exit;
    end;
  end;
 finally
  IntRelatorios.Free;
  Q.Free;
  Qry.Free;
 end;
end;

function TIntAnimais.ValidaIdentificadoresAnimalNaoEspecificado(
  var CodTipoIdentificador1, CodPosicaoIdentificador1,
  CodTipoIdentificador2, CodPosicaoIdentificador2, CodTipoIdentificador3,
  CodPosicaoIdentificador3: Integer): Integer;
const
  NomMetodo: String = 'ValidaIdentificadoresAnimalNaoEspecificado';
var
  Qry: THerdomQuery;
  NumIdentificadorCorpo: Integer;
  IndTrocarIdentificador1: Boolean;
begin
  Qry := THerdomQuery.Create(Conexao, nil);

  CodTipoIdentificador3    := -1;
  CodPosicaoIdentificador3 := -1;
  NumIdentificadorCorpo    := 0;
  IndTrocarIdentificador1  := False;
  
  try
    try
      with Qry do
      begin
        if CodTipoIdentificador1 > 0 then
        begin
          SQL.Clear;
          SQL.Add('select tgpi.cod_grupo_identificador ');
          SQL.Add('  from tab_tipo_identificador tti, ');
          if CodPosicaoIdentificador1 > 0 then
          begin
            SQL.Add('       tab_posicao_identificador tpi, ');
          end;
          SQL.Add('       tab_grupo_posicao_ident tgpi ');
          SQL.Add(' where tti.cod_tipo_identificador = :cod_tipo_identificador ');
          if CodPosicaoIdentificador1 > 0 then
          begin
            SQL.Add('   and tgpi.cod_posicao_identificador = tpi.cod_posicao_identificador ');
          end;
          SQL.Add('   and tgpi.cod_grupo_identificador = tti.cod_grupo_identificador ');
          if CodPosicaoIdentificador1 > 0 then
          begin
            SQL.Add('   and tpi.cod_posicao_identificador = :cod_posicao_identificador ');
            SQL.Add('   and tpi.dta_fim_validade is null ');
          end;
          ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador1;
          if CodPosicaoIdentificador1 > 0 then
          begin
            ParamByName('cod_posicao_identificador').AsInteger := CodPosicaoIdentificador1;
          end;
          Open;
          if IsEmpty then begin
            Mensagens.Adicionar(630, Self.ClassName, NomMetodo, []);
            Result := -630;
            Exit;
          end;

          if (UpperCase(FieldByName('cod_grupo_identificador').AsString) = 'C') then
          begin
            CodTipoIdentificador3    := CodTipoIdentificador1;
            CodPosicaoIdentificador3 := CodPosicaoIdentificador1;
            CodTipoIdentificador1    := -1;
            CodPosicaoIdentificador1 := -1;
            Inc(NumIdentificadorCorpo);
            IndTrocarIdentificador1 := True;
          end;
        end;

        if CodTipoIdentificador2 > 0 then
        begin
          SQL.Clear;
          SQL.Add('select tgpi.cod_grupo_identificador ');
          SQL.Add('  from tab_tipo_identificador tti, ');
          if CodPosicaoIdentificador2 > 0 then
          begin
            SQL.Add('       tab_posicao_identificador tpi, ');
          end;
          SQL.Add('       tab_grupo_posicao_ident tgpi ');
          SQL.Add(' where tti.cod_tipo_identificador = :cod_tipo_identificador ');
          if CodPosicaoIdentificador2 > 0 then
          begin
            SQL.Add('   and tgpi.cod_posicao_identificador = tpi.cod_posicao_identificador ');
          end;
          SQL.Add('   and tgpi.cod_grupo_identificador = tti.cod_grupo_identificador ');
          if CodPosicaoIdentificador2 > 0 then
          begin
            SQL.Add('   and tpi.cod_posicao_identificador = :cod_posicao_identificador ');
            SQL.Add('   and tpi.dta_fim_validade is null ');
          end;
          ParamByName('cod_tipo_identificador').AsInteger := CodTipoIdentificador2;
          if CodPosicaoIdentificador2 > 0 then
          begin
            ParamByName('cod_posicao_identificador').AsInteger := CodPosicaoIdentificador2;
          end;
          Open;
          if IsEmpty then
          begin
            Mensagens.Adicionar(630, Self.ClassName, NomMetodo, []);
            Result := -630;
            Exit;
          end;

          if (UpperCase(FieldByName('cod_grupo_identificador').AsString) = 'C') and
             ((CodTipoIdentificador3 = -1) and (CodPosicaoIdentificador3 = -1)) then
          begin
            CodTipoIdentificador3    := CodTipoIdentificador2;
            CodPosicaoIdentificador3 := CodPosicaoIdentificador2;
            CodTipoIdentificador2    := -1;
            CodPosicaoIdentificador2 := -1;
            Inc(NumIdentificadorCorpo);
          end;
        end;
      end;

      if (NumIdentificadorCorpo >= 2) then
      begin
        Mensagens.Adicionar(2221, Self.ClassName, NomMetodo, []);
        Result := -2221;
        Exit;
      end;

      if IndTrocarIdentificador1 then
      begin
        CodTipoIdentificador1    := CodTipoIdentificador2;
        CodPosicaoIdentificador1 := CodPosicaoIdentificador2;
        CodTipoIdentificador2    := -1;
        CodPosicaoIdentificador2 := -1;
      end;

      Result := 0;
    except
      on E:Exception do
      begin
        Mensagens.Adicionar(2222, Self.ClassName, NomMetodo, [E.Message]);
        Result := -2222;
        Exit;
      end;
    end;
  finally
    Qry.Free;
  end;
end;

function TIntAnimais.GerarRelatorioConsolidacaoCodigosSISBOV(ECodProdutor,
                                                             ENumCNPJCPFProdutor,
                                                             ENomProdutor,
                                                             ENumImovelReceitaFederal: String;
                                                             ECodExportacao: Integer;
                                                             ENomPropriedadeRural,
                                                             ENomMunicipioPropriedade: String;
                                                             ECodEstadoPropriedade: Integer;
                                                             EDtaInicioIdentificacaoAnimal,
                                                             EDtaFimIdentificacaoAnimal: TDateTime;
                                                             ENomPessoaTecnico: String;
                                                             ENumCNPJCPFTecnico: String;
                                                             ECodTipoRelatorio: Integer;
                                                             ECodTarefa: Integer): String;
const
  NomMetodo: String = 'GerarRelatorioConsolidacaoCodigosSISBOV';
  CodMetodo: Integer = 643;
  CodRelatorio: Integer = 29;
  CodTipoTarefa: Integer = 5;
var
  Qry: THerdomQuery;
  qAux,
  qryRelatorio: THerdomQuery;

  strLinha,
  Codigo1, Codigo2,
  Codigo3, Codigo4,
  Codigo5, Codigo6,
  Codigo7,
  CodPropriedadeRural: String;

  Retorno,
  LarguraLinhaRelatorio,
  NumColunasCodigosSISBOV,
  QtdTotalCodigos,
  CodPessoaProdutor:   Integer;

  IntRelatorios:   TIntRelatorios;
  Relatorio:       TRelatorioPadrao;

  NomProdutor,
  NumCNPJCPFProdutor,
  NomPropriedade,
  NomMunicipio,
  SglEstado,
  NumImovelReceitaFederal: String;


{ ---------------------  FUNÇÕES AUXILIARES AO MÉTODO ------------------------ }
  function VerificaCampoSelecionados(ENomField: String): Boolean;
  begin
    Result := False;
    Relatorio.Campos.IrAoPrimeiro;
    while not Relatorio.Campos.EOF do
    begin
      if UpperCase(Relatorio.Campos.Campo.NomField) = UpperCase(ENomField) then
      begin
        Result := True;
        Exit;
      end;
      Relatorio.Campos.IrAoProximo;
    end;
  end;

  procedure ImprimirCabecalhoRelatorio(IndImprimirCabecalhoResultSet: Boolean);
  begin
    // Realiza a impressão do cabeçalho do relatório
    Relatorio.InicializarQuadro('N');
    Relatorio.FonteNegrito;
    // Informações do produtor / propriedade
    strLinha := 'Produtor:          ' + PadR(RedimensionaString(NomProdutor, 40), ' ', 40);

    if VerificaCampoSelecionados('NumCNPJCPFFormatado') = True then
    begin
      if Length(Trim(Qry.FieldByName('num_cnpj_cpf').AsString)) = 11 then
      begin
        strLinha := strLinha + 'CPF: ' + NumCNPJCPFProdutor;
      end
      else
      begin
        strLinha := strLinha + 'CNPJ: ' + NumCNPJCPFProdutor;
      end;
    end;
    Relatorio.ImprimirTexto(01, strLinha);

    strLinha := 'Propriedade rural: ' + RedimensionaString(NomPropriedade, 65);
    if VerificaCampoSelecionados('NumImovelReceitaFederal') = True then
    begin
      if Length(Trim(Qry.FieldByName('NumImovelReceitaFederal').AsString)) = 8 then
      begin
        strLinha := strLinha + ' - NIRF: ' + NumImovelReceitaFederal;
      end
      else if Length(Trim(Qry.FieldByName('NumImovelReceitaFederal').AsString)) = 13 then
      begin
        strLinha := strLinha + ' - INCRA: ' + NumImovelReceitaFederal;
      end;
    end;
    Relatorio.ImprimirTexto(01, strLinha);

    if (VerificaCampoSelecionados('NomMunicipioPropriedadeRural') = True) then
    begin
      strLinha := 'Município:         ' + RedimensionaString(NomMunicipio, 65);
    end;
    if (VerificaCampoSelecionados('NomMunicipioPropriedadeRural') = False) and (VerificaCampoSelecionados('SglEstadoPropriedadeRural') = True) then
    begin
      strLinha := 'Estado:            ' + SglEstado;
    end;
    if (VerificaCampoSelecionados('NomMunicipioPropriedadeRural') = True) and (VerificaCampoSelecionados('SglEstadoPropriedadeRural') = True) then
    begin
      strLinha := strLinha + ' - ' + SglEstado;
    end;
    if (VerificaCampoSelecionados('NomMunicipioPropriedadeRural') = True) or (VerificaCampoSelecionados('SglEstadoPropriedadeRural') = True) then
    begin
      Relatorio.ImprimirTexto(01, strLinha);
    end;

    Relatorio.FinalizarQuadro;

    if IndImprimirCabecalhoResultSet then
    begin
      strLinha := 'ATENÇÃO: ';
      if LarguraLinhaRelatorio <= 96 then
      begin
        if LarguraLinhaRelatorio < 96 then
        begin
          strLinha := strLinha + 'Favor assinalar somente os códigos SISBOV referentes aos animais VIVOS';
          Relatorio.ImprimirTexto(01, strLinha);
          strLinha := 'que estejam sob sua propriedade.';
          Relatorio.ImprimirTexto(01, strLinha);
        end
        else
        begin
          strLinha := strLinha + 'Favor assinalar somente os códigos SISBOV referentes aos animais VIVOS que estejam';
          Relatorio.ImprimirTexto(01, strLinha);
          strLinha := 'sob sua propriedade.';
          Relatorio.ImprimirTexto(01, strLinha);
        end;
      end
      else
      begin
        strLinha := strLinha +  'Favor assinalar somente os códigos SISBOV referentes aos animais VIVOS que estejam sob sua propriedade.';
        Relatorio.ImprimirTexto(01, strLinha);
      end;

      Relatorio.NovaLinha;
      Relatorio.InicializarQuadro('S');
      strLinha := PadR('Código SISBOV', ' ', 23);
      strLinha := strLinha + PadR('Código SISBOV', ' ', 24);
      strLinha := strLinha + PadR('Código SISBOV', ' ', 24);
      if NumColunasCodigosSISBOV >= 4 then
      begin
        strLinha := strLinha + PadR('Código SISBOV', ' ', 24);
        if NumColunasCodigosSISBOV >= 5 then
        begin
          strLinha := strLinha + PadR('Código SISBOV', ' ', 24);
          if NumColunasCodigosSISBOV >= 6 then
          begin
            strLinha := strLinha + PadR('Código SISBOV', ' ', 24);
            if NumColunasCodigosSISBOV >= 7 then
            begin
              strLinha := strLinha + PadR('Código SISBOV', ' ', 24);
            end;
          end;
        end;
      end;
      Relatorio.ImprimirTexto(01, strLinha);
      Relatorio.FinalizarQuadro;
    end;
    Relatorio.FonteNormal;    
  end;

  function BuscarNomCertificadora(): String;
  begin
    qAux.SQL.Clear;
    qAux.SQL.Add(' select nom_pessoa from tab_pessoa ');
    qAux.SQL.Add('  where cod_pessoa = :cod_pessoa ');
    qAux.ParamByName('cod_pessoa').AsInteger := StrToIntDef(ValorParametro(4), -1);
    qAux.Open;

    Result := qAux.FieldByName('nom_pessoa').AsString;
  end;

  procedure ImprimirRodapeRelatorio();
  begin
    Relatorio.NovaLinha;
    Relatorio.NovaLinha;
    Relatorio.InicializarQuadro('S');
    Relatorio.FonteNegrito;
    strLinha := 'Total de animais ATIVOS na propriedade: ' + IntToStr(QtdTotalCodigos);
    Relatorio.ImprimirTexto(Round((LarguraLinhaRelatorio - Length(strLinha)) / 2), strLinha);
    Relatorio.FonteNormal;
    QtdTotalCodigos := 0;
    Relatorio.NovaLinha;
    if LarguraLinhaRelatorio < 110 then
    begin
      strLinha := '[  ] Não possuo nenhum animal (Rastreado) relacionado acima, na certificadora ';
      Relatorio.ImprimirTexto(01, strLinha);
      strLinha := '(' + BuscarNomCertificadora() + ').';
      Relatorio.ImprimirTexto(01, strLinha);
    end
    else
    begin
      strLinha := '[  ] Não possuo nenhum animal (Rastreado) relacionado acima, na certificadora ' +
                  '(' + BuscarNomCertificadora() + ').';
      Relatorio.ImprimirTexto(01, strLinha);
    end;
    Relatorio.NovaLinha;
    Relatorio.NovaLinha;
    Relatorio.ImprimirTexto(5, '____________________________________________     Data inventário: ___/___/____');
    Relatorio.NovaLinha;
    if Length(Trim(NumCNPJCPFProdutor)) = 14 then
    begin
      Relatorio.ImprimirTexto(5, RedimensionaString(NomProdutor, 70) + ' - CPF: ' + NumCNPJCPFProdutor);
    end
    else
    begin
      Relatorio.ImprimirTexto(5, RedimensionaString(NomProdutor, 70) + ' - CNPJ: ' + NumCNPJCPFProdutor);
    end;
    Relatorio.FinalizarQuadro;
  end;

  procedure ImprimirCorpoRelatorio();
  begin
    // Realiza a impressão da relação dos códigos SISBOV do produtor/propriedade
    // dos animais ativos
    qAux.SQL.Clear;
    {$IFDEF MSSQL}
    qAux.SQL.Add('select * from #tmp_relatorio_consolidacao_codigo_sisbov ');
   {$ENDIF}
    qAux.Open;

    if qAux.IsEmpty then
    begin
      Mensagens.Adicionar(1307, Self.ClassName, NomMetodo, []);
      Exit;
    end;
    Relatorio.Campos.CarregarValores(qAux);
    while not qAux.Eof do
    begin
      Relatorio.ImprimirColunasResultSet(qAux);
      qAux.Next;

      if Relatorio.LinhasRestantes = 0 then
      begin
        Relatorio.NovaPagina;
        ImprimirCabecalhoRelatorio(True);
      end;
    end;

    // Realizar a impressão do rodapé do relatório produtor/propriedade
    // e iniciar uma nova página para o novo produtor/propriedade.
    if (Relatorio.LinhasRestantes <= 12) then
    begin
      Relatorio.NovaPagina;
      ImprimirCabecalhoRelatorio(False);
    end;

    ImprimirRodapeRelatorio;

    CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
    CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;

    NomProdutor             := Qry.FieldByName('NomPessoaProdutor').AsString;
    NumCNPJCPFProdutor      := Qry.FieldByName('NumCNPJCPFFormatado').AsString;
    NomPropriedade          := Qry.FieldByName('NomPropriedadeRural').AsString;
    NumImovelReceitaFederal := Qry.FieldByName('NumImovelReceitaFederal').AsString;
    NomMunicipio            := Qry.FieldByName('NomMunicipioPropriedadeRural').AsString;
    SglEstado               := Qry.FieldByName('SglEstadoPropriedadeRural').AsString;

    // Novo produtor/propriedade
    if not Qry.Eof then
    begin
      Relatorio.NovaPagina;
      ImprimirCabecalhoRelatorio(True);
    end;
  end;

begin
  Result := '';

  // Prepara as variáveis para a inserção dos códigos na tabela temporária
  Codigo1 := '';
  Codigo2 := '';
  Codigo3 := '';
  Codigo4 := '';
  Codigo5 := '';
  Codigo6 := '';
  Codigo7 := '';

  QtdTotalCodigos := 0;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(CodMetodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Exit;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);
  IntRelatorios := TIntRelatorios.Create;  
  try
    { Realiza pesquisa de consolidação de códigos SISBOV }
    Retorno := PesquisarRelatorioConsolidacaoCodigosSISBOV(Qry,
                                                           ECodProdutor,
                                                           ENumCNPJCPFProdutor,
                                                           ENomProdutor,
                                                           ENumImovelReceitaFederal,
                                                           ECodExportacao,
                                                           ENomPropriedadeRural,
                                                           ENomMunicipioPropriedade,
                                                           ECodEstadoPropriedade,
                                                           EDtaInicioIdentificacaoAnimal,
                                                           EDtaFimIdentificacaoAnimal,
                                                           ENomPessoaTecnico,
                                                           ENumCNPJCPFTecnico,
                                                           ECodTipoRelatorio,
                                                           ECodTarefa);
    if Retorno < 0 then begin
      if Retorno = idExceedsTheConfiguredThreshold then
      begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio,
                                                              ECodProdutor,
                                                              ENumCNPJCPFProdutor,
                                                              ENomProdutor,
                                                              ENumImovelReceitaFederal,
                                                              ECodExportacao,
                                                              ENomPropriedadeRural,
                                                              ENomMunicipioPropriedade,
                                                              ECodEstadoPropriedade,
                                                              EDtaInicioIdentificacaoAnimal,
                                                              EDtaFimIdentificacaoAnimal,
                                                              ENomPessoaTecnico,
                                                              ENumCNPJCPFTecnico,
                                                              ECodTipoRelatorio]);
        if Retorno <= 0 then
        begin
          if Retorno = 0 then
          begin
            Mensagens.Adicionar(1994, Self.ClassName, NomMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio,
                                                              ECodProdutor,
                                                              ENumCNPJCPFProdutor,
                                                              ENomProdutor,
                                                              ENumImovelReceitaFederal,
                                                              ECodExportacao,
                                                              ENomPropriedadeRural,
                                                              ENomMunicipioPropriedade,
                                                              ECodEstadoPropriedade,
                                                              EDtaInicioIdentificacaoAnimal,
                                                              EDtaFimIdentificacaoAnimal,
                                                              ENomPessoaTecnico,
                                                              ENumCNPJCPFTecnico,
                                                              ECodTipoRelatorio], DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then
    begin
      Mensagens.Adicionar(2225, Self.ClassName, NomMetodo, []);
      Exit;
    end;    

    Retorno := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Retorno < 0 then
    begin
      Exit;
    end;

    Retorno := IntRelatorios.Buscar(CodRelatorio);
    if Retorno < 0 then
    begin
      Exit;
    end;

    Retorno := IntRelatorios.Pesquisar(CodRelatorio);
    if Retorno < 0 then
    begin
      Exit;
    end;

    Relatorio := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    qryRelatorio := THerdomQuery.Create(Conexao, nil);
    qAux := THerdomQuery.Create(Conexao, nil);
    try
      try
        Relatorio.TipoDoArquvio := ECodTipoRelatorio;
        // Caso seja um arquivo PDF
        if ECodTipoRelatorio = 1 then
        begin
          Relatorio.CodTamanhoFonteTxtDados := 2;
          Relatorio.PrimeiraLinhaNegritoTxtDados := True;
          Relatorio.FormatarTxtDados := False;
          Relatorio.TxtDados := '';
          Relatorio.UsaCabecalhoColunas := False;

          {Define o relatório em questão e carrega os seus dados específicos}
          Retorno := Relatorio.CarregarRelatorio(CodRelatorio);
          if Retorno < 0 then
          begin
            Exit;
          end;

          {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
          if ECodTarefa > 0 then
          begin
            Relatorio.CodTarefa := ECodTarefa;
          end;

          {Inicializa o procedimento de geração do arquivo de relatório}
          Retorno := Relatorio.InicializarRelatorio;
          if Retorno < 0 then
          begin
            Exit;
          end;

          // Desabilita campos que não serão utilizados na impressão do result set
          // principal
          Relatorio.Campos.DesabilitarCampo('NomPessoaProdutor');
          Relatorio.Campos.DesabilitarCampo('NomPropriedadeRural');
          Relatorio.Campos.DesabilitarCampo('NumCNPJCPFFormatado');
          Relatorio.Campos.DesabilitarCampo('NumImovelReceitaFederal');
          Relatorio.Campos.DesabilitarCampo('CodAnimalSISBOV');
          if not (Qry.FindField('NomMunicipioPropriedadeRural') = nil) then
          begin
            Relatorio.Campos.DesabilitarCampo('NomMunicipioPropriedadeRural');
          end;
          if not (Qry.FindField('SglEstadoPropriedadeRural') = nil) then
          begin
            Relatorio.Campos.DesabilitarCampo('SglEstadoPropriedadeRural');
          end;

          CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
          CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;

          NomProdutor        := Qry.FieldByName('NomPessoaProdutor').AsString;
          NumCNPJCPFProdutor := Qry.FieldByName('NumCNPJCPFFormatado').AsString;
          NomPropriedade     := Qry.FieldByName('NomPropriedadeRural').AsString;
          NumImovelReceitaFederal := Qry.FieldByName('NumImovelReceitaFederal').AsString;
          NomMunicipio     := Qry.FieldByName('NomMunicipioPropriedadeRural').AsString;
          SglEstado        := Qry.FieldByName('SglEstadoPropriedadeRural').AsString;

          qryRelatorio.SQL.Clear;
          qryRelatorio.SQL.Add(' select qtd_largura from tab_largura_linha_relatorio ');
          qryRelatorio.SQL.Add('  where cod_orientacao    = :cod_orientacao ');
          qryRelatorio.SQL.Add('    and cod_tamanho_fonte = :cod_tamanho_fonte ');
          qryRelatorio.ParamByName('cod_tamanho_fonte').AsInteger := Relatorio.CodTamanhoFonte;
          qryRelatorio.ParamByName('cod_orientacao').AsInteger    := Relatorio.CodOrientacao;
          qryRelatorio.Open;

          LarguraLinhaRelatorio := qryRelatorio.FieldByName('qtd_largura').AsInteger;

          {$IFDEF MSSQL}
          qryRelatorio.SQL.Text := 'if object_id(''tempdb..#tmp_relatorio_consolidacao_codigo_sisbov'') is null ' +
                             #13#10'  create table #tmp_relatorio_consolidacao_codigo_sisbov ' +
                             #13#10'  ( '+
                             #13#10'      CodAnimalSisbov1  varchar(25) ' +
                             #13#10'    , CodAnimalSisbov2 varchar(25) ' +
                             #13#10'    , CodAnimalSisbov3 varchar(25) ';
          NumColunasCodigosSISBOV := 3;
          if LarguraLinhaRelatorio > 92 then
          begin
            qryRelatorio.SQL.Text := qryRelatorio.SQL.Text + #13#10'    , CodAnimalSisbov4 varchar(25) ';
            NumColunasCodigosSISBOV := 4;
            if LarguraLinhaRelatorio > 115 then
            begin
              qryRelatorio.SQL.Text := qryRelatorio.SQL.Text + #13#10'    , CodAnimalSisbov5 varchar(25) ';
              NumColunasCodigosSISBOV := 5;
              if LarguraLinhaRelatorio > 138 then
              begin
                qryRelatorio.SQL.Text := qryRelatorio.SQL.Text + #13#10'    , CodAnimalSisbov6 varchar(25) ';
                NumColunasCodigosSISBOV := 6;
                if LarguraLinhaRelatorio > 161 then
                begin
                  qryRelatorio.SQL.Text := qryRelatorio.SQL.Text + #13#10'    , CodAnimalSisbov7 varchar(25) ';
                  NumColunasCodigosSISBOV := 7;
                end;
              end;
            end;
          end;
          qryRelatorio.SQL.Text := qryRelatorio.SQL.Text + #13#10'  ) ';
          {$ENDIF}
          qryRelatorio.ExecSQL;

          qryRelatorio.SQL.Clear;
          {$IFDEF MSSQL}
          qryRelatorio.SQL.Add('truncate table #tmp_relatorio_consolidacao_codigo_sisbov');
          {$ENDIF}
          qryRelatorio.ExecSQL;

          // Monta query de inserção dos códigos SISBOV na tabela temporária.
          qryRelatorio.SQL.Clear;
          qryRelatorio.SQL.Add('insert into #tmp_relatorio_consolidacao_codigo_sisbov ');
          qryRelatorio.SQL.Add('   values ( :Codigo1 ');
          qryRelatorio.SQL.Add('          , :Codigo2 ');
          qryRelatorio.SQL.Add('          , :Codigo3 ');
          if NumColunasCodigosSISBOV >= 4 then
          begin
            qryRelatorio.SQL.Add('          , :Codigo4 ');
            if NumColunasCodigosSISBOV >= 5 then
            begin
              qryRelatorio.SQL.Add('          , :Codigo5 ');
              if NumColunasCodigosSISBOV >= 6 then
              begin
                qryRelatorio.SQL.Add('          , :Codigo6 ');
                if NumColunasCodigosSISBOV >= 7 then
                begin
                  qryRelatorio.SQL.Add('          , :Codigo7 ');
                end;
              end;
            end;
          end;
          qryRelatorio.SQL.Add('   ) ');

          // Adiciona os campos que estao contidos no result set dos códigos SISBOV
          Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV1', 23, 0, 0, 1, 1);
          Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV2', 23, 0, 0, 1, 1);
          Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV3', 23, 0, 0, 1, 1);
          if NumColunasCodigosSISBOV >= 4 then
          begin
            Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV4', 23, 0, 0, 1, 1);
            if NumColunasCodigosSISBOV >= 5 then
            begin
              Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV5', 23, 0, 0, 1, 1);
              if NumColunasCodigosSISBOV >= 6 then
              begin
                Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV6', 23, 0, 0, 1, 1);
                if NumColunasCodigosSISBOV >= 7 then
                begin
                  Relatorio.Campos.Adicionar('Código SISBOV', 'CodAnimalSISBOV7', 23, 0, 0, 1, 1);
                end;
              end;
            end;
          end;

          ImprimirCabecalhoRelatorio(True);
          while not Qry.Eof do
          begin
            if ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
               (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
            begin
              // Prepara as variáveis referentes aos códigos SISBOV para inseri-los
              // na tabela auxiliar
              Codigo1 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                         PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                         SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                         PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                         PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                         ' [  ]';
              CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
              CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
              Inc(QtdTotalCodigos);
              Qry.Next;
              if not Qry.Eof and
                 ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
                  (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
              begin
                Codigo2 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                           PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                           SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                           PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                           PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                           ' [  ]';
                CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
                CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
                Inc(QtdTotalCodigos);
                Qry.Next;
                if not Qry.Eof and
                   ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
                    (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
                begin
                  Codigo3 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                             PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                             SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                             PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                             PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                             ' [  ]';
                  CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
                  CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
                  Inc(QtdTotalCodigos);
                  Qry.Next;
                  if (NumColunasCodigosSISBOV >= 4) and
                     ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
                      (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
                  begin
                    if not Qry.Eof then
                    begin
                      Codigo4 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                                 PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                 SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                                 PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                 PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                                 ' [  ]';
                      CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
                      CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
                      Inc(QtdTotalCodigos);
                      Qry.Next;
                      if (NumColunasCodigosSISBOV >= 5) and
                         ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
                          (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
                      begin
                        if not Qry.Eof then
                        begin
                          Codigo5 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                                     PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                     SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                                     PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                     PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                                     ' [  ]';
                          CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
                          CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
                          Inc(QtdTotalCodigos);
                          Qry.Next;
                          if (NumColunasCodigosSISBOV >= 6) and
                             ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
                              (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
                          begin
                            if not Qry.Eof then
                            begin
                              Codigo6 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                                         PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                         SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                                         PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                         PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                                         ' [  ]';
                              CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
                              CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
                              Inc(QtdTotalCodigos);
                              Qry.Next;
                              if (NumColunasCodigosSISBOV >= 7) and
                                 ((CodPessoaProdutor = Qry.FieldByName('cod_pessoa').AsInteger) and
                                  (CodPropriedadeRural = Qry.FieldByName('NomPropriedadeRural').AsString)) then
                              begin
                                if not Qry.Eof then
                                  begin
                                    Codigo7 := PadL(Qry.FieldByName('cod_pais_sisbov').AsString, '0', 3) +
                                               PadL(Qry.FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                               SE(Qry.FieldByName('cod_micro_regiao_sisbov').AsInteger >= 0, PadL(Qry.FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2), '') +
                                               PadL(Qry.FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                               PadL(Qry.FieldByName('num_dv_sisbov').AsString, '0', 1) +
                                               ' [  ]';
                                    CodPessoaProdutor   := Qry.FieldByName('cod_pessoa').AsInteger;
                                    CodPropriedadeRural := Qry.FieldByName('NomPropriedadeRural').AsString;
                                    Inc(QtdTotalCodigos);
                                    Qry.Next;
                                end;
                              end;
                            end;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;

              // Insere os códigos na tabela auxiliar!
              qryRelatorio.ParamByName('Codigo1').AsString := Codigo1;
              qryRelatorio.ParamByName('Codigo2').AsString := Codigo2;
              qryRelatorio.ParamByName('Codigo3').AsString := Codigo3;
              if NumColunasCodigosSISBOV >= 4 then
              begin
                qryRelatorio.ParamByName('Codigo4').AsString := Codigo4;
                if NumColunasCodigosSISBOV >= 5 then
                begin
                  qryRelatorio.ParamByName('Codigo5').AsString := Codigo5;
                  if NumColunasCodigosSISBOV >= 6 then
                  begin
                    qryRelatorio.ParamByName('Codigo6').AsString := Codigo6;
                    if NumColunasCodigosSISBOV >= 7 then
                    begin
                      qryRelatorio.ParamByName('Codigo7').AsString := Codigo7;
                    end;
                  end;
                end;
              end;
              qryRelatorio.ExecSQL;

              // Limpa as variáveis para a próxima inserção.
              Codigo1 := '';
              Codigo2 := '';
              Codigo3 := '';
              Codigo4 := '';
              Codigo5 := '';
              Codigo6 := '';
              Codigo7 := '';
            end
            else
            begin
              ImprimirCorpoRelatorio();

              qAux.SQL.Clear;
              {$IFDEF MSSQL}
              qAux.SQL.Add('truncate table #tmp_relatorio_consolidacao_codigo_sisbov');
              {$ENDIF}
              qAux.ExecSQL;
            end;
          end;

          if Qry.Eof then
          begin
            // Imprime ultima relação produtor/propriedade, caso exista mais de uma!
            ImprimirCorpoRelatorio();
          end;

          qAux.SQL.Clear;
          {$IFDEF MSSQL}
          qAux.SQL.Add('drop table #tmp_relatorio_consolidacao_codigo_sisbov');
          {$ENDIF}
          qAux.ExecSQL;


          if Relatorio.FinalizarRelatorio < 0 then
          begin
            Exit;
          end;

          Result := Relatorio.NomeArquivo;
        end
        // Caso seja um arquivo CSV
        else if ECodTipoRelatorio = 2 then
        begin
          {Define o relatório em questão e carrega os seus dados específicos}
          Retorno := Relatorio.CarregarRelatorio(CodRelatorio);
          if Retorno < 0 then
          begin
            Exit;
          end;

          {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
          if ECodTarefa > 0 then
          begin
            Relatorio.CodTarefa := ECodTarefa;
          end;

          {Inicializa o procedimento de geração do arquivo de relatório}
          Retorno := Relatorio.InicializarRelatorio;
          if Retorno < 0 then
          begin
            Exit;
          end;

          while not Qry.Eof do
          begin
            Retorno := Relatorio.ImprimirColunasResultSet(Qry);
            if Retorno < 0 then
            begin
              Exit;
            end;
            Qry.Next;
          end;

          if Relatorio.FinalizarRelatorio < 0 then
          begin
            Exit;
          end;

          Result := Relatorio.NomeArquivo;
        end;
        begin

        end;
      finally
        Relatorio.Free;
        qAux.Free;
      end;
    except
      on E:Exception do
      begin
        Mensagens.Adicionar(2224, Self.ClassName, NomMetodo, [E.Message]);
        Exit;
      end;
    end;
  finally
    Qry.Free;
    IntRelatorios.Free;
  end;
end;

function TIntAnimais.PesquisarRelatorioConsolidacaoCodigosSISBOV(EQuery: THerdomQuery;
                                                                 ECodProdutor,
                                                                 ENumCNPJCPFProdutor,
                                                                 ENomProdutor,
                                                                 ENumImovelReceitaFederal: String;
                                                                 ECodExportacao: Integer;
                                                                 ENomPropriedadeRural,
                                                                 ENomMunicipioPropriedade: String;
                                                                 ECodEstadoPropriedade: Integer;
                                                                 EDtaInicioIdentificacaoAnimal,
                                                                 EDtaFimIdentificacaoAnimal: TDateTime;
                                                                 ENomTecnico,
                                                                 ENumCNPJCPFTecnico: String;
                                                                 ECodTipoRelatorio,
                                                                 ECodTarefa: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioConsolidacaoCodigosSISBOV';

  // Listagens dos campos da tab_campo_relatorio
  fCodAnimalSISBOV:              Integer = 1;
  fCodAnimalSISBOV1:             Integer = 1;
  fCodAnimalSISBOV2:             Integer = 2;
  fCodAnimalSISBOV3:             Integer = 3;
  fCodAnimalSISBOV4:             Integer = 4;
  fCodAnimalSISBOV5:             Integer = 5;
  fCodAnimalSISBOV6:             Integer = 6;
  fCodAnimalSISBOV7:             Integer = 7;
  fNomPessoaProdutor:            Integer = 8;
  fNomPropriedadeRural:          Integer = 9;
  fNumCPFCNPJProdutor:           Integer = 10;
  fNumImovelReceitaFederal:      Integer = 11;
  fNomMunicipioPropriedadeRural: Integer = 12;
  fSglEstadoPropriedadeRural:    Integer = 13;

var
  bPersonalizavel: Boolean;
  IntRelatorios: TIntRelatorios;
  iAux: Integer;
   
  function CamposAssociados(VerificaCampos: Array Of Integer): Boolean;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do
    begin
      Result := (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
  end;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        EQuery.SQL.Text := EQuery.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}

begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se a query passada como parâmetro foi criada!
  if EQuery = nil then
  begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  try
    EQuery.SQL.Clear;
    SQL(' select tp.cod_pessoa ', 0);
    SQL('      , tp.nom_pessoa as NomPessoaProdutor ', fNomPessoaProdutor);
    SQL('      , tp.num_cnpj_cpf ', fNumCPFCNPJProdutor);
    SQL('      , case tp.cod_natureza_pessoa ' +
        '          when ''F'' then convert(varchar(18), ' +
        '                              substring(tp.num_cnpj_cpf, 1, 3) + ''.'' + ' +
        '                              substring(tp.num_cnpj_cpf, 4, 3) + ''.'' + ' +
        '                              substring(tp.num_cnpj_cpf, 7, 3) + ''-'' + ' +
        '                              substring(tp.num_cnpj_cpf, 10, 2)) ' +
        '          when ''J'' then convert(varchar(18), ' +
        '                              substring(tp.num_cnpj_cpf, 1, 2) + ''.'' + ' +
        '                              substring(tp.num_cnpj_cpf, 3, 3) + ''.'' + ' +
        '                              substring(tp.num_cnpj_cpf, 6, 3) + ''/'' + ' +
        '                              substring(tp.num_cnpj_cpf, 9, 4) + ''-'' + ' +
        '                              substring(tp.num_cnpj_cpf, 13, 2)) ' +
        '        end as NumCNPJCPFFormatado ', fNumCPFCNPJProdutor);

    // Se somente o nome da propriedade rural foi selecionado
    SQL('      , case ' +
        '          when ta.cod_fazenda_corrente is not null then ' +
        '            ( select tpr.nom_propriedade_rural ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '               where tf.cod_pessoa_produtor   = ta.cod_pessoa_produtor ' +
        '                 and tf.cod_fazenda           = ta.cod_fazenda_corrente ' +
        '                 and tf.cod_propriedade_rural = tpr.cod_propriedade_rural ' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.cod_propriedade_corrente is not null then ' +
        '            ( select tpr.nom_propriedade_rural ' +
        '                from tab_propriedade_rural tpr ' +
        '               where tpr.cod_propriedade_rural = ta.cod_propriedade_corrente ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.num_imovel_corrente is not null then ' +
        '            ( select tpr.nom_propriedade_rural ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '               where tpr.num_imovel_receita_federal = ta.num_imovel_corrente ' +
        '                 and tpr.cod_propriedade_rural      = tf.cod_propriedade_rural ' +
        '                 and tf.cod_pessoa_produtor         = ta.cod_pessoa_produtor ' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          end as NomPropriedadeRural ', fNomPropriedadeRural);

    // Se somente o NIRF/INCRA da propriedade foi selecionado
    SQL('      , case ' +
        '          when ta.cod_fazenda_corrente is not null then ' +
        '            ( select tpr.num_imovel_receita_federal ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '               where tf.cod_pessoa_produtor   = ta.cod_pessoa_produtor ' +
        '                 and tf.cod_fazenda           = ta.cod_fazenda_corrente ' +
        '                 and tf.cod_propriedade_rural = tpr.cod_propriedade_rural ' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.cod_propriedade_corrente is not null then ' +
        '            ( select tpr.num_imovel_receita_federal ' +
        '                from tab_propriedade_rural tpr ' +
        '               where tpr.cod_propriedade_rural = ta.cod_propriedade_corrente ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.num_imovel_corrente is not null then ' +
        '            ( select tpr.num_imovel_receita_federal ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '               where tpr.num_imovel_receita_federal = ta.num_imovel_corrente ' +
        '                 and tpr.cod_propriedade_rural      = tf.cod_propriedade_rural ' +
        '                 and tf.cod_pessoa_produtor         = ta.cod_pessoa_produtor ' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          end as NumImovelReceitaFederal ', fNumImovelReceitaFederal);

    SQL('      , ta.cod_pais_sisbov ', fCodAnimalSISBOV);
    SQL('      , ta.cod_estado_sisbov ', fCodAnimalSISBOV);
    SQL('      , ta.cod_micro_regiao_sisbov ', fCodAnimalSISBOV);
    SQL('      , ta.cod_animal_sisbov ', fCodAnimalSISBOV);
    SQL('      , ta.num_dv_sisbov, ', fCodAnimalSISBOV);

    if ECodTipoRelatorio = 2 then
    begin
      SQL('   char(39) + ', 0);
    end;
    SQL('       convert(char(3), ta.cod_pais_sisbov) + ', 0);
    SQL('         right(''00'' + convert(varchar(2), ta.cod_estado_sisbov), 2) + ', 0);
    SQL('           CASE ta.cod_micro_regiao_sisbov WHEN 0 THEN  ', 0);
    SQL('             ''00''  ', 0);
    SQL('             WHEN -1 THEN  ', 0);
    SQL('             ''''  ', 0);
    SQL('             ELSE  ', 0);
    SQL('             right(''00'' + convert(varchar(2), ta.cod_micro_regiao_sisbov), 2) ', 0);
    SQL('           END + ', 0);
    SQL('         right(''000000000'' + convert(varchar(9), ta.cod_animal_sisbov), 9) + ', 0);
    SQL('         convert(varchar(1), ta.num_dv_sisbov) as CodAnimalSisbov ', 0);

    // Retorna o Nome do município
    SQL('      , case ' +
        '          when ta.cod_fazenda_corrente is not null then ' +
        '            ( select tm.nom_municipio ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '                   , tab_municipio tm ' +
        '               where tf.cod_pessoa_produtor    = ta.cod_pessoa_produtor ' +
        '                 and tf.cod_fazenda            = ta.cod_fazenda_corrente ' +
        '                 and tf.cod_propriedade_rural  = tpr.cod_propriedade_rural ' +
        '                 and tpr.cod_municipio         = tm.cod_municipio' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.cod_propriedade_corrente is not null then ' +
        '            ( select tm.nom_municipio ' +
        '                from tab_propriedade_rural tpr ' +
        '                   , tab_municipio tm ' +
        '               where tpr.cod_propriedade_rural = ta.cod_propriedade_corrente ' +
        '                 and tpr.cod_municipio         = tm.cod_municipio' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.num_imovel_corrente is not null then ' +
        '            ( select tm.nom_municipio ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '                   , tab_municipio tm ' +        
        '               where tpr.num_imovel_receita_federal = ta.num_imovel_corrente ' +
        '                 and tpr.cod_propriedade_rural      = tf.cod_propriedade_rural ' +
        '                 and tf.cod_pessoa_produtor         = ta.cod_pessoa_produtor ' +
        '                 and tpr.cod_municipio              = tm.cod_municipio' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          end as NomMunicipioPropriedadeRural ', fNomMunicipioPropriedadeRural);

    // Retorna a sigla do estado
    SQL('      , case ' +
        '          when ta.cod_fazenda_corrente is not null then ' +
        '            ( select te.sgl_estado ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '                   , tab_estado te ' +
        '               where tf.cod_pessoa_produtor    = ta.cod_pessoa_produtor ' +
        '                 and tf.cod_fazenda            = ta.cod_fazenda_corrente ' +
        '                 and tf.cod_propriedade_rural  = tpr.cod_propriedade_rural ' +
        '                 and tpr.cod_estado            = te.cod_estado ' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.cod_propriedade_corrente is not null then ' +
        '            ( select te.sgl_estado ' +
        '                from tab_propriedade_rural tpr ' +
        '                   , tab_estado te ' +
        '               where tpr.cod_propriedade_rural = ta.cod_propriedade_corrente ' +
        '                 and tpr.cod_estado            = te.cod_estado ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          when ta.num_imovel_corrente is not null then ' +
        '            ( select te.sgl_estado ' +
        '                from tab_fazenda tf ' +
        '                   , tab_propriedade_rural tpr ' +
        '                   , tab_estado te ' +
        '               where tpr.num_imovel_receita_federal = ta.num_imovel_corrente ' +
        '                 and tpr.cod_propriedade_rural      = tf.cod_propriedade_rural ' +
        '                 and tf.cod_pessoa_produtor         = ta.cod_pessoa_produtor ' +
        '                 and tpr.cod_estado                 = te.cod_estado ' +
        '                 and tf.dta_fim_validade is null ' +
        '                 and tpr.dta_fim_validade is null ' +
        '            ) ' +
        '          end as SglEstadoPropriedadeRural ', fSglEstadoPropriedadeRural);

    SQL('   from tab_animal ta ', 0);
    SQL('      , tab_pessoa tp ', 0);
    SQL('      , tab_produtor tpp ', SE(Length(Trim(ECodProdutor)) > 0, 0, -1));
    SQL('      , tab_tecnico_produtor ttp ', SE((Length(Trim(ENomTecnico)) > 0) or (Length(Trim(ENumCNPJCPFTecnico)) > 0), 0, -1));
    SQL('      , tab_pessoa tpt ', SE((Length(Trim(ENomTecnico)) > 0) or (Length(Trim(ENumCNPJCPFTecnico)) > 0), 0, -1));
    SQL('  where ta.cod_pessoa_produtor = tp.cod_pessoa ', 0);
    SQL('    and (ta.cod_fazenda_corrente is not null ', 0);
    SQL('     or  ta.cod_propriedade_corrente is not null ', 0);
    SQL('     or  ta.num_imovel_corrente is not null) ', 0);
    SQL('    and ta.dta_fim_validade is null ', 0);
    SQL('    and ta.cod_categoria_animal not in (12, 13, 14) ', 0);
    SQL('    and ta.cod_pais_sisbov is not null ', 0);
    SQL('    and ta.cod_estado_sisbov is not null ', 0);
    SQL('    and ta.cod_animal_sisbov is not null ', 0);
    SQL('    and ta.num_dv_sisbov is not null ', 0);

    if (Conexao.CodPapelUsuario = 9) then // Gestor
    begin
      SQL('   and ta.cod_pessoa_produtor in (select ttp.cod_pessoa_produtor from tab_tecnico_produtor ttp, tab_tecnico tt ', 0);
      SQL('                                   where ttp.cod_pessoa_tecnico = tt.cod_pessoa_tecnico and ttp.dta_fim_validade is null and tt.dta_fim_validade is null and tt.cod_pessoa_gestor = :cod_pessoa_gestor) ', 0);
      EQuery.ParamByName('cod_pessoa_gestor').AsInteger := Conexao.CodPessoa;
    end;

    if Length(Trim(ECodProdutor)) > 0 then
    begin
      SQL('  and tpp.cod_pessoa_produtor = tp.cod_pessoa ', 0);
      SQL('  and tpp.dta_fim_validade is null ', 0);
      SQL('  and tpp.sgl_produtor = :sgl_produtor ', 0);
      EQuery.ParamByName('sgl_produtor').AsString := ECodProdutor;
    end;

    if Length(Trim(ENomProdutor)) > 0 then
    begin
      SQL('  and tp.nom_pessoa like :nom_pessoa ', 0);
      EQuery.ParamByName('nom_pessoa').AsString := '%' + ENomProdutor +'%';
    end;

    if Length(Trim(ENumCNPJCPFProdutor)) > 0 then
    begin
      SQL('  and tp.num_cnpj_cpf = :num_cnpj_cpf ', 0);
      EQuery.ParamByName('num_cnpj_cpf').AsString := ENumCNPJCPFProdutor;
    end;

    if EDtaInicioIdentificacaoAnimal > 0 then
    begin
      SQL('  and ta.dta_identificacao_sisbov >= :dta_inicial ', 0);
      EQuery.ParamByName('dta_inicial').AsDateTime := EDtaInicioIdentificacaoAnimal;
    end;

    if EDtaFimIdentificacaoAnimal > 0 then
    begin
      SQL('  and ta.dta_identificacao_sisbov >= :dta_final ', 0);
      EQuery.ParamByName('dta_final').AsDateTime := EDtaFimIdentificacaoAnimal;
    end;

    if (Length(Trim(ENomTecnico)) > 0) or (Length(Trim(ENumCNPJCPFTecnico)) > 0) then
    begin
      SQL('  and ttp.cod_pessoa_produtor = ta.cod_pessoa_produtor ', 0);
      SQL('  and ttp.dta_fim_validade is null ', 0);
      SQL('  and tpt.cod_pessoa = ttp.cod_pessoa_tecnico ', 0);
      SQL('  and tpt.dta_fim_validade is null ', 0);
      if (Length(Trim(ENomTecnico)) > 0) then
      begin
        SQL('and tpt.nom_pessoa like :nom_pessoa_tecnico ', 0);
        EQuery.ParamByName('nom_pessoa_tecnico').AsString := '%' + ENomTecnico + '%';
      end;
      if (Length(Trim(ENumCNPJCPFTecnico)) > 0) then
      begin
        SQL('and tpt.num_cnpj_cpf = :num_cnpj_cpf_tecnico ', 0);
        EQuery.ParamByName('num_cnpj_cpf_tecnico').AsString := ENumCNPJCPFTecnico;
      end;
    end;

    SQL('  order by tp.nom_pessoa ', 0);
    SQL('      ,    NomPropriedadeRural ', 0);
    SQL('      ,    ta.cod_animal_sisbov ', 0);

    EQuery.Open;
    Result := 0;
  except
    on E: exception do begin
      iAux := Length(strExceedsTheConfiguredThreshold);
      if (ECodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
        Result := idExceedsTheConfiguredThreshold;
      end else begin
        Mensagens.Adicionar(2223, Self.ClassName, NomMetodo, [E.Message]);
        Result := -2223;
      end;
      Exit;
    end;
  end;
end;

function TIntAnimais.ExcluirAnimalComprado(ECodAnimal: Integer): Integer;
const
  NomeMetodo : String = 'ExcluirAnimalComprado';
  SQLVerificaEvento: String = ' select ' +
                              '        1 ' +
                              '   from ' +
                              '        tab_animal_evento tae ' +
                              '      , tab_evento te ' +
                              '      , tab_tipo_evento tte ' +
                              '  where ' +
                              '        tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                              '    and tae.cod_evento = te.cod_evento ' +
                              '    and te.cod_tipo_evento = tte.cod_tipo_evento ' +
                              '    and tte.ind_restrito_sistema = ''N''' +
                              '    and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                              '    and tae.cod_animal = :cod_animal ';

  SQLVerificaEventoRestritoSistema: String = ' select ' +
                                             '        1 ' +
                                             '   from ' +
                                             '        tab_animal_evento tae ' +
                                             '      , tab_evento te ' +
                                             '      , tab_tipo_evento tte ' +
                                             '  where ' +
                                             '        tae.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                                             '    and tae.cod_evento = te.cod_evento ' +
                                             '    and te.cod_tipo_evento = tte.cod_tipo_evento ' +
                                             '    and tte.ind_restrito_sistema = ''S''' +
                                             '    and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                                             '    and tae.cod_animal = :cod_animal ';

  SQLExcluiEventoRestritoSistema: String = ' delete tab_animal_evento ' +
                                           '  where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                                           '    and cod_animal = :cod_animal ';

  SQLExcluiAnimal: String = ' update tab_animal ' +
                            {$IFDEF MSSQL}
                            '   set dta_fim_validade = getdate() ' +
                            {$ENDIF}
                            ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                            '   and cod_animal = :cod_animal ';
var
  Q : THerdomQuery;
  DadosAnimal : TDadosAnimal;
  DtaSist : TDateTime;
  i: Integer;
begin
  Result := -1;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Seleciona os animais candidatos à operação
  Result := SelecionaAnimaisMultiplos(-1,
                                      '',
                                      '',
                                      IntToStr(ECodAnimal));
  if Result < 0 then
  begin
    Exit;
  end;

  DtaSist := DtaSistema;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Processa os animais
      while not FQueryAux.Eof do
      begin
        // Abre Transação
        BeginTran;

        // Obtem dados do animal atual
        ObtemAnimalSelecionado(DadosAnimal);

        // Monta comando que verifica se o animal sofreu algum evento
        Q.SQL.Text := SQLVerificaEvento;
        // Pesquisa se o animal em questão sofreu algum evento
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        if not Q.IsEmpty then
        begin
           Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, 'O animal está associado a algum evento.', 3, 1);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
          Q.Close;
          FQueryAux.Next;
          Commit;
          Continue;
        end;

        // Limpa possível mensagem de erro pré existente para o animal
        Result := LimparErrosOperacao(DadosAnimal.CodAnimal, 3);
        if Result < 0 then
        begin
          Rollback;
          Exit;
        end;

        Result := VerificaCadastroParto(DadosAnimal.CodAnimal);
        if Result < 0 then
        begin
          i := 0;
          while i < Mensagens.Count do
          begin
            if (Mensagens.Items[i].Codigo = 1588) or (Mensagens.Items[i].Codigo = 949) then
            begin
              Inc(i);
              Continue;
            end;
            Result := InserirErroOperacaoAnimal(DadosAnimal, DtaSist, Mensagens.Items[i].Texto, 3, 1);
            Inc(i);
            if Result < 0 then
            begin
              Rollback;
              Exit;
            end;
          end;
          Mensagens.Clear;
          Commit;
          FQueryAux.Next;
          Continue;
        end;

        // Monta comando de consulta para verificar se existem eventos restritos ao
        // sistema e que deverão ser excluídos
        Q.SQL.Text := SQLVerificaEventoRestritoSistema;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        if not Q.IsEmpty then
        begin
          //Exclui os eventos restritos ao sistema, impedindo que ocorra erro na exclusão
          Q.SQL.Text := SQLExcluiEventoRestritoSistema;
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
          Q.ExecSQL;
        end;

        // Monta comando de update da tab_animal
        Q.SQL.Text := SQLExcluiAnimal;

        // Altera o registro na tab_animal
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.ExecSQL;

        // Confirma transação
        Commit;
        FQueryAux.Next;
      end;

      ZerarValoresUltimaPesquisa;

      // Atualiza coleção de mensagens
      Mensagens.Clear;
      Result := 0;
    except
      on E: Exception do
      begin
        Rollback;
        Mensagens.Adicionar(852, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -852;
        Exit;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TIntAnimais.ConsisteRemoverTransferencia(var DadosAnimal: TDadosAnimal;
                                                  var DadosEvento: TDadosEvento;
                                                  var IndPodeRemover: Boolean): Integer;
const
  NomMetodo : String = 'ConsisteRemoverTransferencia';
var
  QueryLocal: THerdomQuery;
  CodTipoLugarAnimal: Integer;
begin
  IndPodeRemover := False;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add(' select cod_tipo_lugar ');
        SQL.Add('      , cod_pessoa_corrente ');
        SQL.Add('   from tab_animal ');
        SQL.Add('  where cod_animal = :cod_animal ');
        SQL.Add('    and cod_pessoa_produtor = :cod_pessoa_produtor ');
        SQL.Add('    and dta_fim_validade is null ');
        SQL.Add('    and cod_categoria_animal not in (select cod_categoria_animal ');
        SQL.Add('                                       from tab_categoria_animal ');
        SQL.Add('                                      where dta_fim_validade is null ');
        SQL.Add('                                        and ind_animal_ativo = ''N'') ');
        ParamByName('cod_animal').AsInteger          := DadosAnimal.CodAnimal;
        ParamByName('cod_pessoa_produtor').AsInteger := DadosAnimal.CodPessoaProdutor;
        Open;

        if IsEmpty then
        begin
          Mensagens.Adicionar(2258, Self.ClassName, NomMetodo, [DadosAnimal.SglFazendaManejo + ' ' + DadosAnimal.CodAnimalManejo]);
          Result := -2258;
          Exit;
        end;

        CodTipoLugarAnimal := FieldByName('cod_tipo_lugar').AsInteger;

        SQL.Clear;
        if CodTipoLugarAnimal = 1 then
        begin
          {$IFDEF MSSQL}
          SQL.Add(' select 1 ');
          SQL.Add('   from tab_animal_evento tae ');
          SQL.Add('      , tab_animal ta ');
          SQL.Add('  where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
          SQL.Add('    and tae.cod_animal         = ta.cod_animal ');
          SQL.Add('    and ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
          SQL.Add('    and ta.cod_animal          = :cod_animal ');
          {$ENDIF}
          ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          ParamByName('cod_animal').AsInteger          := DadosAnimal.CodAnimal;
        end
        else
        begin
          {$IFDEF MSSQL}
          SQL.Add(' select 1 ');
          SQL.Add('   from tab_animal_evento tae ');
          SQL.Add('      , tab_animal ta ');
          SQL.Add('  where ta.cod_pessoa_corrente = tae.cod_pessoa_produtor ');
          SQL.Add('    and tae.cod_animal         = ta.cod_animal ');
          SQL.Add('    and ta.cod_pessoa_corrente = :cod_pessoa_produtor ');
          SQL.Add('    and ta.cod_animal          = :cod_animal ');
          {$ENDIF}
          ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          ParamByName('cod_animal').AsInteger          := DadosAnimal.CodAnimal;
        end;
        Open;

        if not IsEmpty then
        begin
          Mensagens.Adicionar(2256, Self.ClassName, NomMetodo, [DadosAnimal.CodAnimalManejo]);
          Result := 2256;
          Exit;
        end;
      end;

      if DadosAnimal.CodPaisSisbov > 0 then
      begin
        // Verifica se existe outro animal ativo com o mesmo código SISBOV para
        // outro produtor na base
        with QueryLocal do
        begin
          SQL.Clear;
          {$IFDEF MSSQL}
          SQL.Add(' select cod_animal, cod_pessoa_produtor ');
          SQL.Add('   from tab_animal ');
          SQL.Add('  where cod_pais_sisbov = :cod_pais_sisbov ');
          SQL.Add('    and cod_estado_sisbov = :cod_estado_sisbov ');
          SQL.Add('    and cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ');
          SQL.Add('    and cod_animal_sisbov = :cod_animal_sisbov ');
          SQL.Add('    and cod_categoria_animal not in (select cod_categoria_animal ');
          SQL.Add('                                       from tab_categoria_animal ');
          SQL.Add('                                      where ind_animal_ativo = ''N'' ');
          SQL.Add('                                        and dta_fim_validade is null) ');
          SQL.Add('    and dta_fim_validade is null ');
          SQL.Add('    and cod_pessoa_produtor <> :cod_pessoa_produtor ');
          {$ENDIF}
          ParamByName('cod_pais_sisbov').AsInteger         := DadosAnimal.CodPaisSisbov;
          ParamByName('cod_estado_sisbov').AsInteger       := DadosAnimal.CodEstadoSisbov;
          ParamByName('cod_micro_regiao_sisbov').AsInteger := DadosAnimal.CodMicroRegiaoSisbov;
          ParamByName('cod_animal_sisbov').AsInteger       := DadosAnimal.CodAnimalSisbov;
          ParamByName('cod_pessoa_produtor').AsInteger     := Conexao.CodProdutorTrabalho;
          Open;

          if IsEmpty then
          begin
            IndPodeRemover := True;
          end
          else
          begin
            IndPodeRemover := False;
            Mensagens.Adicionar(2257, Self.ClassName, NomMetodo, [PadL(IntToStr(DadosAnimal.CodPaisSisbov), '0', 3) + ' ' +
                                                                   PadL(IntToStr(DadosAnimal.CodEstadoSisbov), '0', 2) + ' ' +
                                                                   SE(DadosAnimal.CodMicroRegiaoSisbov >= 0, PadL(IntToStr(DadosAnimal.CodMicroRegiaoSisbov), '0', 2), '') +
                                                                   PadL(IntToStr(DadosAnimal.CodAnimalSisBov), '0', 9) + ' ' +
                                                                   IntToStr(DadosAnimal.NumDVSisbov), DadosAnimal.CodAnimalManejo]);
            Result := -2257;
            Exit;
          end;
        end;
      end;
      Result := 0;
    finally
      QueryLocal.Free;
    end;
  except
    on E: Exception do
    begin
      Mensagens.Adicionar(2259, Self.ClassName, NomMetodo, [E.Message]);
      Result := -2259;
      Exit;
    end;
  end;
end;

function TIntAnimais.ConsisteRemoverParto(DadosAnimal: TDadosAnimal;
                                          DadosEvento: TDadosEvento;
                                          var IndPartoExcluido: Boolean): Integer;
const
  NomMetodo: String = 'ConsisteRemoverParto';
var
  Qry: THerdomQuery;

  CodAnimalCria,
  CodEventoPesagem: Integer;
  IntEventos: TIntEventos;
begin
  IndPartoExcluido := False;
  try
    Qry := THerdomQuery.Create(Conexao, nil);
    IntEventos := TIntEventos.Create;
    try
      Result := IntEventos.Inicializar(Conexao, Mensagens);
      if Result < 0 then
      begin
        Exit;
      end;

      with Qry do
      begin
        // Obtém a cria originada do evento de parto!
        SQL.Clear;
        SQL.Add(' select tac.cod_animal ');
        SQL.Add('   from tab_animal_cria tac ');
        SQL.Add('      , tab_animal_evento tae');
        SQL.Add('  where tac.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        SQL.Add('    and tac.cod_evento          = tae.cod_evento ');
        SQL.Add('    and tac.cod_pessoa_produtor = :cod_pessoa_produtor ');
        SQL.Add('    and tac.cod_evento          = :cod_evento ');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger          := DadosEvento.CodEvento;
        Open;

        if IsEmpty then
        begin
          Result := 0;
          Exit;
        end;

        CodAnimalCria := FieldByName('cod_animal').AsInteger;

        SQL.Clear;
        SQL.Add(' select tae.cod_evento ');
        SQL.Add('   from tab_evento te ');
        SQL.Add('      , tab_animal_evento tae ');
        SQL.Add('  where te.cod_evento          = tae.cod_evento ');
        SQL.Add('    and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ');
        SQL.Add('    and te.cod_tipo_evento     = 22 '); //Evento de pesagem
        SQL.Add('    and tae.cod_animal         = :cod_animal ');
        SQL.Add('    and te.cod_pessoa_produtor = :cod_pessoa_produtor ');
        ParamByName('cod_animal').AsInteger          := CodAnimalCria;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Open;

        CodEventoPesagem := FieldByName('cod_evento').AsInteger;

        BeginTran;

        // Remove o evento de pesagem da cria!
        if not IsEmpty then
        begin
          Result := IntEventos.Excluir(CodEventoPesagem);
          if Result < 0 then
          begin
            RollBack;
            Exit;
          end;
          Mensagens.Delete(Mensagens.Count - 1);
        end;

        // Exclui a cria 
        Result := Self.Excluir(-1,
                               '',
                               '',
                               IntToStr(CodAnimalCria));
        if Result < -1 then
        begin
          Rollback;
          Exit;
        end
        else
        begin
          Commit;
          Exit;
        end;
        Commit;

        IndPartoExcluido := True;        

        Result := 0;
      end;
    finally
      Qry.Free;
      IntEventos.Free; 
    end;
  except
    on E:Exception do
    begin
      Mensagens.Adicionar(1, Self.ClassName, NomMetodo, [E.Message]);
      Result := -1;
      Rollback;
      Exit;
    end;
  end;
end;

function TIntAnimais.InventariarAnimaisPesquisados(CodPessoaProdutor,
  CodPropriedadeRural: Integer): Integer;
begin
  FIntInventariosAnimais := TIntInventariosAnimais.Create;
  Try
    Result := FIntInventariosAnimais.Inicializar(Conexao, Mensagens);
    if Result >= 0 then begin
      Result := FIntInventariosAnimais.InserirAnimaisPesquisados(CodPessoaProdutor, CodPropriedadeRural, Query);
    end;
  Finally
    FIntInventariosAnimais.Free;
  End;
end;

function TIntAnimais.ExcluirInventarioAnimaisPesquisados(CodPessoaProdutor,
  CodPropriedadeRural: Integer): Integer;
begin
  FIntInventariosAnimais := TIntInventariosAnimais.Create;
  Try
    Result := FIntInventariosAnimais.Inicializar(Conexao, Mensagens);
    if Result >= 0 then begin
      Result := FIntInventariosAnimais.ExcluirAnimaisPesquisados(CodPessoaProdutor, CodPropriedadeRural, Query);
    end;
  Finally
    FIntInventariosAnimais.Free;
  End;
end;

function TIntAnimais.ObterDadosAnimalSisbov(
  var Animal: TDadosAnimal): Integer;
const
  NomeMetodo: String = 'ObterDadosAnimalSisbov';
var
  Q : THerdomQuery;
  StrNrSisBov : String;
  SoapSisbov: TIntSoapSisbov;
  Retorno: RetornoConsultarDadosAnimal;
begin
  Result := -1;
  Q := THerdomQuery.Create(Conexao, nil);
  Try
    SoapSisbov := TIntSoapSisbov.Create;
    Try
      // O tratamento de erros para esta rotina será genérico pois na ocorrência de qualquer erro, simplesmente
      // retornaremos -1. A mensagem de erro é retornada pela rotina externa
      Try
        // Conexão SOAP
        SoapSisbov.Inicializar(Conexao, Mensagens);
        if not SoapSisbov.conectado('Animais') then begin
          Result := -1;
          Exit;
        end;

        // Monta código SISBOV com 15 ou 17 dígitos para consultar autenticação
        if Animal.CodMicroRegiaoSisbov = -1 then begin
          StrNrSisBov := PadL(IntToStr(Animal.CodPaisSisbov), '0', 3) +
                         PadL(IntToStr(Animal.CodEstadoSisbov), '0', 2) +
                         PadL(IntToStr(Animal.CodAnimalSisbov), '0', 9) +
                         PadL(IntToStr(Animal.NumDVSisbov), '0', 1);
        end else begin
          StrNrSisBov := PadL(IntToStr(Animal.CodPaisSisbov), '0', 3) +
                         PadL(IntToStr(Animal.CodEstadoSisbov), '0', 2) +
                         PadL(IntToStr(Animal.CodMicroRegiaoSisbov), '0', 2) +
                         PadL(IntToStr(Animal.CodAnimalSisbov), '0', 9) +
                         PadL(IntToStr(Animal.NumDVSisbov), '0', 1);
        end;

        // Tenta obter autenticação no SISBOV
        Retorno := SoapSisbov.consultarDadosAnimal(Descriptografar(ValorParametro(118)),
                                                Descriptografar(ValorParametro(119)),
                                                StrNrSisBov);

        If Retorno <> nil then begin
          If Retorno.Status = 1 then begin
            If Trim(Retorno.dia) <> '' then begin
              Q.SQL.Clear;
              {$IFDEF MSSQL}
              Q.SQL.Add('update tab_animal ' +
                        '   set cod_autenticacao_sisbov = :cod_autenticacao_sisbov ' +
                        '    ,  dta_insercao_sisbov     = :dta_insercao_sisbov ' +
                        '    ,  cod_id_transacao_sisbov = :cod_id_transacao ' +
                        ' where cod_pessoa_produtor     = :cod_pessoa_produtor ' +
                        ' and   cod_animal              = :cod_animal ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger      := Animal.CodPessoaProdutor;
              Q.ParamByName('cod_animal').AsInteger               := Animal.CodAnimal;
              Q.ParamByName('cod_id_transacao').AsInteger         := Retorno.idTransacao;
              Q.ParamByName('cod_autenticacao_sisbov').AsString   := Retorno.dia;
              Q.ParamByName('dta_insercao_sisbov').AsString       := Retorno.dataInclusao;

              BeginTran;
              Q.ExecSQL;
              Commit;

              // Código retirado pela razão de que o Sisbov não mais retornará a data de abate
              // do animal e também porque a data de inserção no sisbov passou para tab_animal
//              Q.SQL.Clear;
//              {$IFDEF MSSQL}
//              Q.SQL.Add('update tab_codigo_sisbov ' +
//                        '   set dta_liberacao_abate     = :dta_liberacao_abate ' +
//                        ' where cod_pais_sisbov         = :cod_pais_sisbov ' +
//                        ' and   cod_estado_sisbov       = :cod_estado_sisbov ' +
//                        ' and   cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
//                        ' and   cod_animal_sisbov       = :cod_animal_sisbov ');
//              {$ENDIF}
//              Q.ParamByName('cod_pais_sisbov').AsInteger         := Animal.CodPaisSisbov;
//              Q.ParamByName('cod_estado_sisbov').AsInteger       := Animal.CodEstadoSisbov;
//              Q.ParamByName('cod_micro_regiao_sisbov').AsInteger := Animal.CodMicroRegiaoSisbov;
//              Q.ParamByName('cod_animal_sisbov').AsInteger       := Animal.CodAnimalSisbov;
//
//              if Length(Trim(Retorno.dataLiberacaoAbate)) > 0 then begin
//                Q.ParamByName('dta_liberacao_abate').AsString      := Retorno.dataLiberacaoAbate;
//              end else begin
//                Q.ParamByName('dta_liberacao_abate').DataType := ftDateTime;
//                Q.ParamByName('dta_liberacao_abate').Clear;
//              end;

//              Q.ExecSQL;

              Animal.CodAutenticacaoSisbov := Retorno.dia;
//              if Length(Trim(Retorno.dataLiberacaoAbate)) > 0 then begin
//                Animal.DtaLiberacaoabate   := EncodeDate(StrToInt(copy(Retorno.dataLiberacaoAbate,1,4)), StrToInt(copy(Retorno.dataLiberacaoAbate,6,2)), StrToInt(copy(Retorno.dataLiberacaoAbate,9,2)));
//              end else begin
//                Animal.DtaLiberacaoabate   := 0;
//              end;
              Animal.DtaInsercaoSisbov     := EncodeDate(StrToInt(copy(Retorno.dataInclusao,1,4)), StrToInt(copy(Retorno.dataInclusao,6,2)), StrToInt(copy(Retorno.dataInclusao,9,2)));

              Result := 0;
            End;
          End;
        End;
      Except
        Result := -1;
      End;
    Finally
      SoapSisbov.Free;
    End;
  Finally
    Q.Free;
  End;
end;

function TIntAnimais.AlterarAnimalSISBOV(DadosAnimal: TDadosAnimal;
  DtaIdentificacaoSisbov, DtaNascimento: TDateTime; NumRGD: String;
  CodPropriedadeNascimento, CodFazendaNascimento, CodPaisSISBOV,
  CodEstadoSISBOV, CodMicroRegiaoSISBOV, CodAnimalSISBOV, NumDVSISBOV,
  CodRaca, CodTipoIdentificador1, CodTipoIdentificador2,
  CodTipoIdentificador3, CodTipoIdentificador4: Integer; IndSexo: String;
  IndNaoTestarAtributos: Boolean): Integer;
var
  Q: THerdomQuery;
  CodIdentificadorSISBOV, CodIdPropriedadeSISBOV: Integer;
  IdentificacaoDuplaSisbov: String;
  StrCodigoSisbov, CodRacaSisbov: String;
  SoapSisbov: TIntSoapSisbov;
  Retorno: RetornoAlterarAnimal;
begin
  try
    Q := THerdomQuery.Create(conexao, nil);
    SoapSisbov := TIntSoapSisbov.Create;
    try
      // Alterar o animal no sisbov se ele for nascido, comprado, nao especificado
      // ou Carga Inicial e se o animal esta na nova base do sisbov
      if ((DadosAnimal.CodTipoOrigem in [1, 2, 5, 6]) and (DadosAnimal.IndTransmissaoSISBOV = 'S')) or
         ((DadosAnimal.CodTipoOrigem = 2) and (DadosAnimal.IndTransmissaoSISBOV = 'N')) or
         ((DadosAnimal.CodTipoOrigem = 2) and (DadosAnimal.IndTransmissaoSISBOV = ''))then
      begin
        // Buscar o ID da propriedade de nascimento
        CodIdPropriedadeSISBOV := -1;
        if CodPropriedadeNascimento > 0 then
        begin
          Q.Close;
          Q.SQL.Text :=
          {$IFDEF MSSQL}
            'select tpr.cod_id_propriedade_sisbov ' +
            '  from tab_propriedade_rural tpr' +
            ' where tpr.cod_propriedade_rural = :cod_propriedade_rural ';
          {$ENDIF}
          Q.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeNascimento;
        end else if CodFazendaNascimento > 0 then begin
          Q.Close;
          Q.SQL.Text :=
          {$IFDEF MSSQL}
            'select tpr.cod_id_propriedade_sisbov ' +
            '  from tab_propriedade_rural tpr, '+
            '       tab_fazenda tf ' +
            ' where tpr.cod_propriedade_rural = tf.cod_propriedade_rural ' +
            '   and tf.cod_fazenda = :cod_fazenda';
          {$ENDIF}
          Q.ParamByName('cod_fazenda').AsInteger := CodFazendaNascimento;
        end else begin
          Q.Close;
          Q.SQL.Text :=
          {$IFDEF MSSQL}
            'select tpr.cod_id_propriedade_sisbov ' +
            '  from tab_propriedade_rural tpr '+
            ' where tpr.num_imovel_receita_federal = :num_imovel_receita_federal ';
          {$ENDIF}
          Q.ParamByName('num_imovel_receita_federal').AsString := DadosAnimal.NumImovelNascimento;
        end;

        Q.Open;
        if not Q.IsEmpty then
        begin
          CodIdPropriedadeSISBOV := Q.FieldbyName('cod_id_propriedade_sisbov').AsInteger;
        end;

        // Busca a raca do animal
        Q.Close;
        Q.SQL.Text :=
        {$IFDEF MSSQL}
          'select cod_raca_sisbov ' +
          '  from tab_raca ' +
          ' where cod_raca = :cod_raca';
        {$ENDIF}
        Q.ParamByName('cod_raca').AsInteger := CodRaca;
        Q.Open;
        CodRacaSisbov := Q.FieldByName('cod_raca_sisbov').AsString;

        // Busca o tipo de identificacao SISBOV
        Q.Close;
        Q.SQL.Text :=
        {$IFDEF MSSQL}
          'select num_rgd, ' +
          '       cod_pais_sisbov, ' +
          '       cod_micro_regiao_sisbov, ' +
          '       cod_estado_sisbov, ' +
          '       cod_animal_sisbov, ' +
          '       num_dv_sisbov, ' +
          '       cod_tipo_identificador_1, ' +
          '       cod_tipo_identificador_2, ' +
          '       cod_tipo_identificador_3, ' +
          '       cod_tipo_identificador_4 ' +
          '  from tab_animal ' +
          ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
          '   and cod_animal = :cod_animal';
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;

        BuscaIdentificacaoDuplaSisbov(Q, DadosAnimal, 0, IdentificacaoDuplaSisbov, False);
        Q.Close;

//        if CodTipoIdentificador1 = -1 then begin
//          CodTipoIdentificador1 := 0;
//        end;
//        if CodTipoIdentificador2 = -1 then begin
//          CodTipoIdentificador2 := 0;
//        end;
//        if CodTipoIdentificador3 = -1 then begin
//          CodTipoIdentificador3 := 0;
//        end;
//        if CodTipoIdentificador4 = -1 then begin
//          CodTipoIdentificador4 := 0;
//        end;

//        if (DadosAnimal.DtaIdentificacaoSisbov <> DtaIdentificacaoSisbov) or
//           (DadosAnimal.DtaNascimento <> DtaNascimento) or
//           (DadosAnimal.CodPaisSisbov <> CodPaisSisBov) or
//           (DadosAnimal.CodEstadoSisbov <> CodEstadoSisBov) or
//           (DadosAnimal.CodMicroRegiaoSisbov <> CodMicroRegiaoSisBov) or
//           (DadosAnimal.CodAnimalSisbov <> CodAnimalSisbov) or
//           (DadosAnimal.CodRaca <> CodRaca) or
//           (DadosAnimal.CodTipoIdentificador1 <> CodTipoIdentificador1) or
//           (DadosAnimal.CodTipoIdentificador2 <> CodTipoIdentificador2) or
//           (DadosAnimal.CodTipoIdentificador3 <> CodTipoIdentificador3) or
//           (DadosAnimal.CodTipoIdentificador4 <> CodTipoIdentificador4) or
//           (DadosAnimal.IndSexo <> IndSexo) or
//           (DadosAnimal.NumRgd <> NumRGD) or
//           (IndNaoTestarAtributos = True) then
//        begin
          // Conexão SOAP
          SoapSisbov.Inicializar(Conexao, Mensagens);
          if not SoapSisbov.conectado('AlterarAnimais') then begin
            Result := -1;
            Exit;
          end;

          if (DadosAnimal.NumRgd <> NumRGD) then begin
            DadosAnimal.NumRgd := NumRGD;
          end;

          StrCodigoSisbov := '105';
          if CodMicroRegiaoSisBov <> -1 then begin
            StrCodigoSisbov := StrCodigoSisbov + PadL(IntToStr(CodEstadoSisbov), '0', 2) + PadL(IntToStr(CodMicroRegiaoSisBov), '0', 2);
          end else begin
            StrCodigoSisbov := StrCodigoSisbov + PadL(IntToStr(CodEstadoSisbov), '0', 2);
          end;

          StrCodigoSisbov := StrCodigoSisbov + PadL(IntToStr(CodAnimalSisbov), '0', 9);
          StrCodigoSisbov := StrCodigoSisbov + PadL(IntToStr(NumDVSisbov), '0', 1);

          CodIdentificadorSISBOV       := StrToIntDef(trim(IdentificacaoDuplaSisbov), -1);
          if CodIdPropriedadeSISBOV < 0 then begin
            CodIdPropriedadeSISBOV := 0;
          end;

          Retorno := nil;
          
          try
            Retorno := SoapSisbov.alterarAnimal(
                            Descriptografar(ValorParametro(118)),
                            Descriptografar(ValorParametro(119)),
                            FormatDateTime('dd/mm/yyyy', DtaIdentificacaoSisbov),
                            FormatDateTime('dd/mm/yyyy', DtaNascimento),
                            '',
                            DadosAnimal.NumRgd,
                            CodIdPropriedadeSISBOV,
                            StrCodigoSisbov,
                            CodRacaSisbov,
                            CodIdentificadorSISBOV,
                            DadosAnimal.IndSexo);
          except
            on E: Exception do
            begin
              Mensagens.Adicionar(699, Self.ClassName, 'Transmitir alteração animal', [E.Message]);
              Result := -699;
              Exit;
            end;
          end;

          If Retorno <> nil then begin
            If Retorno.Status = 0 then
            begin
              Mensagens.Adicionar(699, Self.ClassName, 'AlterarAnimalSISBOV', ['Mensagem do SISBOV: ' + TrataMensagemErroSISBOV(Retorno)]);
              Result := -699;
              Exit;
            end;
          end;
//        end;
      end;
    finally
      Q.Free;
      SoapSisbov.Free;
    end;
    Result := 0;
  except
    on E: Exception do
    begin
      Mensagens.Adicionar(699, Self.ClassName, 'AlterarAnimalSISBOV', [E.Message]);
      Result := -699;
      Exit;
    end;
  end;
end;




function TIntAnimais.AlterarAnimalTmp(PDtaIdentificacaoSisbov,
  PDtaNascimento, PNumRgd, PCodIdPropriedadeSISBOV, PStrCodigoSisbov,
  PCodRacaSisbov, PCodIdentificadorSISBOV, PSexo: string): Integer;
var retorno:RetornoAlterarAnimal;
SoapSisbov: TIntSoapSisbov;
DadosAnimal:TDadosAnimal;
CodIdentificadorSISBOV:int64;
IdentificacaoDuplaSisbov:string;
q:THerdomQuery;
begin
  Q := THerdomQuery.Create(conexao, nil);
  SoapSisbov  :=  TIntSoapSisbov.Create;
  SoapSisbov.Inicializar(Conexao, Mensagens);
  ObtemDadosAnimal(4837156,DadosAnimal);
        // Busca o tipo de identificacao SISBOV
        Q.Close;
        Q.SQL.Text :=
        {$IFDEF MSSQL}
          'select num_rgd, ' +
          '       cod_pais_sisbov, ' +
          '       cod_micro_regiao_sisbov, ' +
          '       cod_estado_sisbov, ' +
          '       cod_animal_sisbov, ' +
          '       num_dv_sisbov, ' +
          '       cod_tipo_identificador_1, ' +
          '       cod_tipo_identificador_2, ' +
          '       cod_tipo_identificador_3, ' +
          '       cod_tipo_identificador_4 ' +
          '  from tab_animal ' +
          ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
          '   and cod_animal = :cod_animal';
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;
        Q.Open;
  BuscaIdentificacaoDuplaSisbov(Q, DadosAnimal, 0, IdentificacaoDuplaSisbov, False);
  CodIdentificadorSISBOV       := StrToIntDef(trim(IdentificacaoDuplaSisbov), -1);
  try
    Retorno := SoapSisbov.alterarAnimal(   Descriptografar(ValorParametro(118)),
                            Descriptografar(ValorParametro(119)),
                            pDtaIdentificacaoSisbov,
                            pDtaNascimento,
                            '',
                            pNumRgd,
                            strtoint(pCodIdPropriedadeSISBOV),
                            PStrCodigoSisbov,
                            PCodRacaSisbov,
                            CodIdentificadorSISBOV,
                            PSexo);
  except
    on E: Exception do
    begin
      Mensagens.Adicionar(699, Self.ClassName, 'Transmitir alteração animal', [E.Message]);
      Result := -699;
      Exit;
    end;
  end;

  If Retorno <> nil then begin
    If Retorno.Status = 0 then
    begin
      Mensagens.Adicionar(699, Self.ClassName, 'AlterarAnimalSISBOV', ['Mensagem do SISBOV: ' + TrataMensagemErroSISBOV(Retorno)]);
      Result := -699;
      Exit;
    end;
  end;
end;

function TIntAnimais.AtualizarDataAbate(PCodPessoaProdutor, PCodFazenda: integer): integer;
const
  NomeMetodo: String = 'AtualizarDataAbate';
var
  Q : THerdomQuery;
  Q2: THerdomQuery;
  SoapSisbov: TIntSoapSisbov;
  Retorno: RetornoConsultarDadosAnimal;
begin
  Result := -1;
  Q  := THerdomQuery.Create(Conexao, nil);
  Q2 := THerdomQuery.Create(Conexao, nil);
  try
    q.SQL.Text  :=  'SELECT CAST (TA.COD_PAIS_SISBOV AS VARCHAR (3)) + RIGHT (''00'' + CAST ( '+
                    'TA.COD_ESTADO_SISBOV AS VARCHAR (2)), 2) + CASE TA.COD_MICRO_REGIAO_SISBOV '+
                    'WHEN 0 THEN ''00'' '+
                    'WHEN - 1 THEN '''' '+
                    'ELSE RIGHT (''00'' + CONVERT (VARCHAR (2), TA.COD_MICRO_REGIAO_SISBOV), 2) '+
                    'END + RIGHT (''000000000'' + CONVERT (VARCHAR (9), TA.COD_ANIMAL_SISBOV), 9) + '+
                    'CONVERT (VARCHAR (1), TA.NUM_DV_SISBOV) AS COD_ANIMAL_SISBOV, '+
                    'TP.NOM_PESSOA,TA.COD_SITUACAO_SISBOV,TA.COD_PROPRIEDADE_IDENTIFICACAO,TCS.DTA_LIBERACAO_ABATE, '+
                    'TCS.COD_PAIS_SISBOV,TCS.COD_MICRO_REGIAO_SISBOV,TCS.COD_ANIMAL_SISBOV COD_ANIMAL_SISBOV2,TCS.NUM_DV_SISBOV,TCS.COD_ESTADO_SISBOV, TCS.DTA_INSERCAO_SISBOV '+
                    'FROM TAB_ANIMAL TA,TAB_PESSOA TP,TAB_CATEGORIA_ANIMAL TC,TAB_CODIGO_SISBOV TCS '+
                    'WHERE TA.COD_PESSOA_PRODUTOR = TP.COD_PESSOA '+
                    'AND TA.COD_CATEGORIA_ANIMAL = TC.COD_CATEGORIA_ANIMAL '+
                    'AND TA.COD_PAIS_SISBOV = TCS.COD_PAIS_SISBOV '+
                    'AND TA.COD_ESTADO_SISBOV = TCS.COD_ESTADO_SISBOV '+
                    'AND TA.COD_MICRO_REGIAO_SISBOV = TCS.COD_MICRO_REGIAO_SISBOV '+
                    'AND TA.COD_ANIMAL_SISBOV = TCS.COD_ANIMAL_SISBOV '+
                    'AND TA.NUM_DV_SISBOV = TCS.NUM_DV_SISBOV '+
                    'AND TC.IND_ANIMAL_ATIVO = ''S'' '+
                    'AND TP.COD_PESSOA = :COD_PESSOA '+
                    'AND TA.DTA_FIM_VALIDADE IS NULL '+
                    'AND TA.COD_FAZENDA_CORRENTE = :COD_FAZENDA_CORRENTE ';

    q.ParamByName('cod_pessoa').AsInteger :=  PCodPessoaProdutor;
    q.ParamByName('cod_fazenda_corrente').AsInteger :=  PCodFazenda;

    q.Open;

    SoapSisbov := TIntSoapSisbov.Create;
    // Conexão SOAP
    SoapSisbov.Inicializar(Conexao, Mensagens);
    if not SoapSisbov.conectado('Animais') then begin
      Result := -1;
      Exit;
    end;
    while not q.Eof do
    begin
      Retorno := SoapSisbov.consultarDadosAnimal(Descriptografar(ValorParametro(118)),
                                                 Descriptografar(ValorParametro(119)),
                                                 q.fieldbyname('cod_animal_sisbov').AsString);
      if (retorno.status = 1) and (retorno.dataLiberacaoAbate <> '') then
      begin
      
        if q.FieldByName('DTA_INSERCAO_SISBOV').IsNull then
          begin
            q2.SQL.Text :=  'UPDATE TAB_CODIGO_SISBOV SET DTA_LIBERACAO_ABATE = :DTA_LIBERACAO_ABATE, '+
                            'DTA_INSERCAO_SISBOV = :DTA_INSERCAO_SISBOV ' +
                            'WHERE COD_PAIS_SISBOV   = :COD_PAIS_SISBOV         AND '+
                            'COD_ESTADO_SISBOV       = :COD_ESTADO_SISBOV       AND '+
                            'COD_MICRO_REGIAO_SISBOV = :COD_MICRO_REGIAO_SISBOV AND '+
                            'COD_ANIMAL_SISBOV       = :COD_ANIMAL_SISBOV       AND '+
                            'NUM_DV_SISBOV           = :NUM_DV_SISBOV ';
          end
        else
          begin
            q2.SQL.Text :=  'UPDATE TAB_CODIGO_SISBOV SET DTA_LIBERACAO_ABATE = :DTA_LIBERACAO_ABATE '+
                            'WHERE COD_PAIS_SISBOV   = :COD_PAIS_SISBOV         AND '+
                            'COD_ESTADO_SISBOV       = :COD_ESTADO_SISBOV       AND '+
                            'COD_MICRO_REGIAO_SISBOV = :COD_MICRO_REGIAO_SISBOV AND '+
                            'COD_ANIMAL_SISBOV       = :COD_ANIMAL_SISBOV       AND '+
                            'NUM_DV_SISBOV           = :NUM_DV_SISBOV ';
          end;

        try
          if q.FieldByName('DTA_INSERCAO_SISBOV').IsNull then
            begin
              q2.ParamByName('COD_PAIS_SISBOV').AsInteger         :=  q.fieldbyname('COD_PAIS_SISBOV').AsInteger;
              q2.ParamByName('COD_ESTADO_SISBOV').AsInteger       :=  q.fieldbyname('COD_ESTADO_SISBOV').AsInteger;
              q2.ParamByName('COD_MICRO_REGIAO_SISBOV').AsInteger :=  q.fieldbyname('COD_MICRO_REGIAO_SISBOV').AsInteger;
              q2.ParamByName('COD_ANIMAL_SISBOV').AsInteger       :=  q.fieldbyname('COD_ANIMAL_SISBOV2').AsInteger;
              q2.ParamByName('NUM_DV_SISBOV').AsInteger           :=  q.fieldbyname('NUM_DV_SISBOV').AsInteger;
              q2.ParamByName('DTA_LIBERACAO_ABATE').AsDate        :=  StrToDate(Format('%s/%s/%s',[copy(retorno.dataLiberacaoAbate,9,2),copy(retorno.dataLiberacaoAbate,6,2),copy(retorno.dataLiberacaoAbate,1,4)]));
              q2.ParamByName('DTA_INSERCAO_SISBOV').AsDate        :=  StrToDate(Format('%s/%s/%s',[copy(retorno.dataInclusao,9,2),copy(retorno.dataInclusao,6,2),copy(retorno.dataInclusao,1,4)]));
            end
          else
            begin
              q2.ParamByName('COD_PAIS_SISBOV').AsInteger         :=  q.fieldbyname('COD_PAIS_SISBOV').AsInteger;
              q2.ParamByName('COD_ESTADO_SISBOV').AsInteger       :=  q.fieldbyname('COD_ESTADO_SISBOV').AsInteger;
              q2.ParamByName('COD_MICRO_REGIAO_SISBOV').AsInteger :=  q.fieldbyname('COD_MICRO_REGIAO_SISBOV').AsInteger;
              q2.ParamByName('COD_ANIMAL_SISBOV').AsInteger       :=  q.fieldbyname('COD_ANIMAL_SISBOV2').AsInteger;
              q2.ParamByName('NUM_DV_SISBOV').AsInteger           :=  q.fieldbyname('NUM_DV_SISBOV').AsInteger;
              q2.ParamByName('DTA_LIBERACAO_ABATE').AsDate        :=  StrToDate(Format('%s/%s/%s',[copy(retorno.dataLiberacaoAbate,9,2),copy(retorno.dataLiberacaoAbate,6,2),copy(retorno.dataLiberacaoAbate,1,4)]));
            end;



          Begintran;
          q2.ExecSQL();
          Commit;
        except
          Rollback;
        end;
      end;
      q.Next;
    end;

  finally
    SoapSisbov.Free;
    q.Close;
    q.Free;
    q2.Free;
  end;

end;

function TIntAnimais.solicitarAlteracaoPosse(CodPropriedadeRural,
  CodProdutorOrigem, CodProdutorDestino, CodMotivoSolicitacao: integer;
  const justificativa, numeracaoEnvio: WideString): integer;
const
  NomeMetodo: String  = 'SolicitarAlteracaoPosse';
var
  SoapSisbov: TIntSoapSisbov;
  Conectado: boolean;
  RetornoSISBOV:RetornoAlteracaoPosse;
  Q:THerdomQuery;
  IDPropriedadeSISBOV:integer;
  Cont:Integer;
  DataAgendamento:string;
  CPFProdutorOrigem,CPFProdutorDestino:string;
  ListaAnimaisTMP:TStringList;
  ArrayAnimais:ArrayOf_xsd_string;
begin
  Result := -1;
  RetornoSisbov   := nil;
  Q := THerdomQuery.Create(Conexao, nil);
  try
    q.SQL.Text  :=  'SELECT A.NUM_CNPJ_CPF FROM TAB_PESSOA A WHERE A.COD_PESSOA = :COD_PESSOA';
    q.ParamByName('COD_PESSOA').AsInteger :=  CodProdutorOrigem;
    q.Open;
    //Verificando se encontrou o produtor de origem
    if q.IsEmpty  then
    begin
      Mensagens.Adicionar(CERRO_GERAL, Self.ClassName, NomeMetodo, ['Produtor de Origem não encontrado']);
      Result := -CERRO_GERAL;
      exit;
    end;
    CPFProdutorOrigem :=  q.FieldByName('NUM_CNPJ_CPF').AsString;
    q.ParamByName('COD_PESSOA').AsInteger :=  CodProdutorDestino;
    q.Refresh;
    //Verificando se encontrou o produtor de destino
    if q.IsEmpty  then
    begin
      Mensagens.Adicionar(CERRO_GERAL, Self.ClassName, NomeMetodo, ['Produtor de Destino não encontrado']);
      Result := -CERRO_GERAL;
      exit;
    end;
    CPFProdutorDestino :=  q.FieldByName('NUM_CNPJ_CPF').AsString;
    q.Close;
    //resgatando o ID da propriedade no SISBOV
    q.SQL.Text  :=  'SELECT COD_ID_PROPRIEDADE_SISBOV '+
                    'FROM TAB_PROPRIEDADE_RURAL '+
                    'WHERE COD_PROPRIEDADE_RURAL = :COD_PROPRIEDADE_RURAL';
    q.ParamByName('COD_PROPRIEDADE_RURAL').AsInteger  :=  CodPropriedadeRural;
    q.Open;
    if q.IsEmpty  then
    begin
      Mensagens.Adicionar(327, Self.ClassName, NomeMetodo, []);
      Result := -327;
      Exit;
    end;
    IDPropriedadeSISBOV :=  Q.FIELDBYNAME('COD_ID_PROPRIEDADE_SISBOV').AsInteger;
    //ListaAnimaisTMP :=  SplitString(numeracaoEnvio,',');

    SetLength(ArrayAnimais,ListaAnimaisTMP.Count);
{    for cont := 0 to ListaAnimaisTMP.Count-1 do
    begin
      ArrayAnimais[cont]  :=  ListaAnimaisTMP.Strings[cont];
    end;}

    ListaAnimaisTMP	:=	TStringList.Create;

    Assert(Assigned(ListaAnimaisTMP));
    ListaAnimaisTMP.Clear;
    ListaAnimaisTMP.Delimiter := ',';
    ListaAnimaisTMP.DelimitedText := numeracaoEnvio;

    SoapSisbov := TIntSoapSisbov.Create;
    // Conexão SOAP
    try
      SoapSisbov.Inicializar(Conexao, Mensagens);
      if not SoapSisbov.conectado('Animais') then begin
        Result := -1;
        Exit;
      end;
      for cont := 0 to ListaAnimaisTMP.Count -1 do
      begin
       RetornoSISBOV  :=  SoapSisbov.solicitarAlteracaoPosse(Descriptografar(ValorParametro(118)),
                                           Descriptografar(ValorParametro(119)),
                                           inttostr(IDPropriedadeSISBOV),CPFProdutorOrigem,CPFProdutorDestino,
                                           CodMotivoSolicitacao,justificativa,2,1,ListaAnimaisTMP.Strings[cont]
                                           );
        if RetornoSISBOV.status<>0 then
        begin

        end;
      end;
    finally
      SoapSisbov.Free;
      ListaAnimaisTMP.Free;
    end;
  finally
    q.Close;
    q.Free;
  end;

end;

function TIntAnimais.ConsultarAnimaisAbatidos(CodFrigorifico: integer;
  const data: WideString): integer;
const
  NomeMetodo: String  = 'ConsultarAnimaisAbatidos';
var
  q, q2, q3, qi, q4, q5, q6, q7:THerdomQuery;//query de consulta e query de insert
  NumDocumento,NOMPESSOA:string;
  SoapSisbov: TIntSoapSisbov;
  RetornoSisbov:RetornoConsultarAnimaisAbatidos;
  Conectado: boolean;
  cont, vCodEVento, CodRegistroLog :integer;
  CodPais,CodEstado,CodMicroRegiao,CodAnimalSISBOV,DigitoVerificador,CodEvento,CodLote:integer;
  Eventos:TIntEventos;
  Lotes:TIntLotes;
  StrAux:string;
  SQLGetProxCodEvento, SqlInsereEvento, SqlInsereEventoFrigorifico : String;
begin
  result  :=  -1;
  q :=  THerdomQuery.Create(Conexao,nil);
  try
    //Pega os dados do frigorifico
    q.SQL.Text  :=  'SELECT NUM_CNPJ_CPF,NOM_PESSOA FROM TAB_PESSOA WHERE COD_PESSOA=:COD_PESSOA';
    Q.ParamByName('COD_PESSOA').AsInteger :=  CodFrigorifico;
    Q.Open;
    if q.IsEmpty then
    begin
      Mensagens.Adicionar(10257, Self.ClassName, NomeMetodo, ['']);
      Result := -10257;
      exit;
    end;
    NumDocumento  :=  q.fieldbyname('NUM_CNPJ_CPF').AsString;
    NOMPESSOA     :=  q.fieldbyname('NOM_PESSOA').AsString;
    q.Close;

    SoapSisbov  :=  TIntSoapSisbov.Create;
    qi          :=  THerdomQuery.Create(Conexao,nil);
    q2          :=  THerdomQuery.Create(Conexao,nil);
    q3          :=  THerdomQuery.Create(Conexao,nil);
    q4          :=  THerdomQuery.Create(Conexao,nil);
    q5          :=  THerdomQuery.Create(Conexao,nil);
    q6          :=  THerdomQuery.Create(Conexao,nil);
    q7          :=  THerdomQuery.Create(Conexao,nil);
    eventos     :=  TIntEventos.Create;
    Eventos.Inicializar(Conexao,Mensagens);
    Lotes       :=  TIntLotes.Create;
    lotes.Inicializar(Conexao,Mensagens);
    try
      SoapSisbov.Inicializar(Conexao, Mensagens);
      if not SoapSisbov.conectado('Animais') then begin
        Result := -1;
        Exit;
      end;
      try
        RetornoSisbov :=  SoapSisbov.consultarAnimaisAbatidos(Descriptografar(ValorParametro(118)),
                                                              Descriptografar(ValorParametro(119)),
                                                              NumDocumento,data);
      except
        on e:Exception do
        begin
          Mensagens.Adicionar(CERRO_GERAL, Self.ClassName, NomeMetodo, ['Falha na comunicação com o SISBOV erro:'+e.Message ]);
          Result := -CERRO_GERAL;
          exit;
        end;
      end;

      if RetornoSisbov.status = 0 then
      begin
        Mensagens.Adicionar(10258, Self.ClassName, NomeMetodo, [NOMPESSOA,data]);
        Result := -10258;
        exit;
      end;
      SQLGetProxCodEvento :=  'SELECT ISNULL(MAX(COD_EVENTO), 0) + 1 AS COD_EVENTO ' +
                              '  FROM TAB_EVENTO ' +
                              ' WHERE COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR ';

      // Tenta Inserir Registro
      q5.SQL.Text  :=     'INSERT INTO TAB_EVENTO ' +
                          '  (COD_PESSOA_PRODUTOR ' +
                          '   , COD_EVENTO ' +
                          '   , COD_TIPO_EVENTO ' +
                          '   , DTA_INICIO ' +
                          '   , DTA_FIM ' +
                          '   , COD_FAZENDA ' +
                          '   , TXT_DADOS ' +
                          '   , TXT_OBSERVACAO ' +
                          '   , COD_SITUACAO_SISBOV ' +
                          '   , QTD_ANIMAIS ' +
                          '   , DTA_CADASTRAMENTO ' +
                          '   , DTA_EFETIVACAO_CADASTRO ' +
                          '   , COD_ARQUIVO_SISBOV ' +
                          '   , COD_REGISTRO_LOG) ' +
                          'VALUES ' +
                          '  (:COD_PESSOA_PRODUTOR ' +
                          '   , :COD_EVENTO ' +
                          '   , :COD_TIPO_EVENTO ' +
                          '   , :DTA_INICIO ' +
                          '   , :DTA_FIM ' +
                          '   , :COD_FAZENDA ' +
                          '   , :TXT_DADOS ' +
                          '   , :TXT_OBSERVACAO ' +
                          '   , ''P'' ' +
                          '   , 0 ' +
                          '   , GETDATE() ' +
                          '   , NULL ' +
                          '   , NULL ' +
                          '   , :COD_REGISTRO_LOG)';

      q6.SQL.Text := ' INSERT INTO TAB_EVENTO_VENDA_FRIGORIFICO (COD_PESSOA_PRODUTOR,   COD_EVENTO,  NUM_CNPJ_CPF_FRIGORIFICO,  COD_PESSOA) '+
                     '                                    VALUES(:COD_PESSOA_PRODUTOR, :COD_EVENTO, :NUM_CNPJ_CPF_FRIGORIFICO, :COD_PESSOA) ';


      //Mata os animais no Herdom
      q3.SQL.Text  := ' UPDATE TAB_ANIMAL SET DTA_ULTIMO_EVENTO = :DTA_ULTIMO_EVENTO, ' +
      								'											  DTA_APLICACAO_ULTIMO_EVENTO = :DTA_APLICACAO_ULTIMO_EVENTO, ' +
                      '											  DTA_DESATIVACAO = :DTA_DESATIVACAO, ' +
                      '												IND_APTO_COBERTURA = :IND_APTO_COBERTURA, ' +
                      '											  COD_CATEGORIA_ANIMAL = 12 ' +
                      ' WHERE COD_PAIS_SISBOV   		  = :COD_PAIS_SISBOV '+
                      ' AND   COD_ESTADO_SISBOV 		  = :COD_ESTADO_SISBOV '+
                      ' AND   COD_MICRO_REGIAO_SISBOV = :COD_MICRO_REGIAO_SISBOV '+
                      ' AND   COD_ANIMAL_SISBOV       = :COD_ANIMAL_SISBOV '+
                      ' AND   NUM_DV_SISBOV 				  = :NUM_DV_SISBOV ';


      qi.SQL.Text  := 'INSERT INTO TAB_RESGATA_ANIMAIS_ABATIDOS_TMP (COD_PESSOA_PRODUTOR,COD_ANIMAL,CNPJ_FRIGORIFICO,COD_PESSOA,DATA_ABATE)'+
                      'VALUES(:COD_PESSOA_PRODUTOR,:COD_ANIMAL,:CNPJ_FRIGORIFICO,:COD_PESSOA,:DATA_ABATE)';

      q.SQL.Text   := ' SELECT COD_PESSOA_PRODUTOR, COD_ANIMAL, COD_FAZENDA_MANEJO ' +
                      ' FROM TAB_ANIMAL '+
                      ' WHERE COD_PAIS_SISBOV = :COD_PAIS_SISBOV '+
                      ' AND COD_ESTADO_SISBOV = :COD_ESTADO_SISBOV '+
                      ' AND COD_MICRO_REGIAO_SISBOV = :COD_MICRO_REGIAO_SISBOV '+
                      ' AND COD_ANIMAL_SISBOV = :COD_ANIMAL_SISBOV '+
                      ' AND NUM_DV_SISBOV = :NUM_DV_SISBOV '; {+
                      ' AND DTA_DESATIVACAO IS NULL AND DTA_FIM_VALIDADE IS NULL '+
                      ' AND COD_CATEGORIA_ANIMAL NOT IN (SELECT COD_CATEGORIA_ANIMAL ' +
                      '                                  FROM TAB_CATEGORIA_ANIMAL ' +
                      '                                  WHERE IND_ANIMAL_ATIVO = ''N'')';}
      Begintran;
      for cont := 0  to High(RetornoSisbov.animais) do
      begin                             
        try
          //Mata os animais no Herdom
          q3.ParamByName('DTA_ULTIMO_EVENTO').AsDate              :=  StrToDate(data);
          q3.ParamByName('DTA_APLICACAO_ULTIMO_EVENTO').AsDate    :=  StrToDate(data);
          q3.ParamByName('DTA_DESATIVACAO').AsDate          	    :=  StrToDate(data);
          q3.ParamByName('IND_APTO_COBERTURA').AsString           :=  'N';
          q3.ParamByName('COD_PAIS_SISBOV').AsInteger             :=  strtoint(Copy(RetornoSisbov.animais[cont],1,3));
          q3.ParamByName('COD_ESTADO_SISBOV').AsInteger           :=  strtoint(Copy(RetornoSisbov.animais[cont],4,2));
          q3.ParamByName('COD_MICRO_REGIAO_SISBOV').AsInteger     :=  -1;
          q3.ParamByName('COD_ANIMAL_SISBOV').AsInteger           :=  strtoint(Copy(RetornoSisbov.animais[cont],7,8));
          q3.ParamByName('NUM_DV_SISBOV').AsInteger               :=  strtoint(Copy(RetornoSisbov.animais[cont],15,1));
          q3.ExecSQL();

          //Carrega os dados do produtor e do animal
          q.ParamByName('COD_PAIS_SISBOV').AsInteger              :=  strtoint(Copy(RetornoSisbov.animais[cont],1,3));
          q.ParamByName('COD_ESTADO_SISBOV').AsInteger            :=  strtoint(Copy(RetornoSisbov.animais[cont],4,2));
          q.ParamByName('COD_MICRO_REGIAO_SISBOV').AsInteger      :=  -1;
          q.ParamByName('COD_ANIMAL_SISBOV').AsInteger            :=  strtoint(Copy(RetornoSisbov.animais[cont],7,8));
          q.ParamByName('NUM_DV_SISBOV').AsInteger                :=  strtoint(Copy(RetornoSisbov.animais[cont],15,1));


          if q.Active then
            q.Refresh
          else
            q.Open;

          if not q.Eof then
            begin
              try
                //Insere na TAB_RESGATA_ANIMAIS_ABATIDOS_TMP
                qi.ParamByName('COD_PESSOA_PRODUTOR').AsInteger :=  q.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
                qi.ParamByName('COD_ANIMAL').AsInteger          :=  q.fieldbyname('COD_ANIMAL').AsInteger;
                qi.ParamByName('CNPJ_FRIGORIFICO').AsString     :=  NumDocumento;
                qi.ParamByName('COD_PESSOA').AsInteger          :=  CodFrigorifico;
                qi.ParamByName('DATA_ABATE').AsDate             :=  StrToDate(data);
                qi.ExecSQL();
              except

              end;



              //pega o proximo código do evento
              q4.Close;
              q4.SQL.Text  :=  (SQLGetProxCodEvento);
              q4.ParamByName('COD_PESSOA_PRODUTOR').AsInteger  :=  q.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
              q4.Open;

              vCodEVento                                       :=  q4.fieldbyname('COD_EVENTO').AsInteger;
              q4.Close;
              //**//

              CodRegistroLog       := ProximoCodRegistroLog;

              //Insere o evento na tabela de tab_evento
              q5.ParamByName('COD_EVENTO').AsInteger          :=  vCodEVento;
              q5.ParamByName('TXT_DADOS').AsString            :=  'Venda para o frigorífico: ' + NOMPESSOA + ' CNPJ: ' + NumDocumento;
              q5.ParamByName('COD_PESSOA_PRODUTOR').AsInteger :=  q.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
              q5.ParamByName('COD_TIPO_EVENTO').AsInteger     :=  10;  //Venda para frigorífico(VF)
              q5.ParamByName('DTA_INICIO').AsDate             :=  StrToDate(Data) - 2;
              q5.ParamByName('DTA_FIM').AsDate                :=  StrToDate(Data) - 2;
              q5.ParamByName('COD_FAZENDA').AsInteger         :=  q.fieldbyname('COD_FAZENDA_MANEJO').AsInteger;
              q5.ParamByName('TXT_OBSERVACAO').AsString       :=  'Gerado automáticamente';
              q5.ParamByName('COD_REGISTRO_LOG').AsInteger    :=  CodRegistroLog;
              q5.ExecSQL();

              //Insere na tabela tab_evento_venda_frigorifico
              q6.ParamByName('COD_PESSOA_PRODUTOR').AsInteger        := q.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
              q6.ParamByName('COD_EVENTO').AsInteger                 := vCodEvento;
              q6.ParamByName('NUM_CNPJ_CPF_FRIGORIFICO').AsString    := NumDocumento;
              q6.ParamByName('COD_PESSOA').AsInteger                 := CodFrigorifico;
              //q6.ParamByName('NUM_GTA').AsInteger                    := VCodCausaMorteAux;
              //q6.ParamByName('DTA_EMISSAO_GTA').AsInteger            := VCodCausaMorteAux;
              //q6.ParamByName('COD_SERIE_GTA').AsInteger              := VCodCausaMorteAux;
              //q6.ParamByName('COD_ESTADO_GTA').AsInteger             := VCodCausaMorteAux;
              //q6.ParamByName('DTA_VALIDADE_GTA').AsInteger           := VCodCausaMorteAux;
              //q6.ParamByName('COD_ID_MOVIMENTACAO_SISBOV').AsInteger := VCodCausaMorteAux;
              q6.ExecSQL;

              q7.SQL.Clear;
        {$IFDEF MSSQL}
              q7.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
              q7.Parambyname('cod_pessoa_produtor').asinteger := q.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
              q7.ParamByName('cod_evento').asinteger := vCodEVento;
              q7.ExecSQL;
        {$ENDIF}
            end;


        except
        end;
      end;
      Commit;
      q2.sql.text  :=  'SELECT COUNT(*) "TOTAL DE ANIMAIS", '  +
                      '       P.NOM_PESSOA, '  +
                      '       A.COD_PESSOA_PRODUTOR, '  +
                      '       A.COD_PESSOA COD_FRIGORIFICO, '  +
                      '       P2.NOM_PESSOA FRIGORIFICO, '  +
                      '       P2.NOM_REDUZIDO_PESSOA, '  +
                      '       A.DATA_ABATE, '  +
                      '       TA.COD_FAZENDA_MANEJO        '  +
                      'FROM TAB_RESGATA_ANIMAIS_ABATIDOS_TMP A, '  +
                      '     TAB_PESSOA P, '  +
                      '     TAB_PESSOA P2, '  +
                      '     TAB_ANIMAL TA '  +
                      'WHERE A.COD_PESSOA_PRODUTOR = P.COD_PESSOA '  +
                      '      AND A.COD_PESSOA = P2.COD_PESSOA '  +
                      '      AND TA.COD_ANIMAL=A.COD_ANIMAL '  +
                      '      AND TA.COD_PESSOA_PRODUTOR = A.COD_PESSOA_PRODUTOR '  +
                      '      AND A.COD_EVENTO IS NULL AND TA.DTA_DESATIVACAO IS NULL '  +
                      '      AND A.DATA_ABATE = :DATA_ABATE '  +
                      'GROUP BY P.NOM_PESSOA, '  +
                      '         A.COD_PESSOA, '  +
                      '         A.DATA_ABATE, '  +
                      '         P2.NOM_PESSOA, '  +
                      '         A.COD_PESSOA_PRODUTOR, '  +
                      '         P2.NOM_REDUZIDO_PESSOA, '  +
                      '         TA.COD_FAZENDA_MANEJO '  +
                      'ORDER BY A.DATA_ABATE, '  +
                      '         P.NOM_PESSOA';
      q2.ParamByName('DATA_ABATE').AsDate :=  StrToDate(data);
      q2.Open;
      q2.First;

      q.sql.text  :=  'SELECT A.COD_PESSOA, '  +
                      '        A.COD_ANIMAL '  +
                      ' FROM TAB_RESGATA_ANIMAIS_ABATIDOS_TMP A '  +
                      ' WHERE A.COD_PESSOA = :COD_PESSOA '  +
                      '       AND A.COD_EVENTO IS NULL '  +
                      '       AND A.COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR '  +
                      '       AND A.DATA_ABATE = :DATA_ABATE';



      while not q2.Eof do
      begin
        q.ParamByName('COD_PESSOA').AsInteger            :=  q2.fieldbyname('COD_FRIGORIFICO').AsInteger;
        q.ParamByName('COD_PESSOA_PRODUTOR').AsInteger   :=  q2.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
        q.ParamByName('DATA_ABATE').AsDate               :=  StrToDate(data);
        Conexao.CodProdutorTrabalho                      :=  q2.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
        qi.Close;
        qi.sql.text  :=  'SELECT COALESCE (MAX(CONVERT (INT, RIGHT (A.SGL_LOTE, 2))) + 1, 1) '  +
                         ' FROM TAB_LOTE A '  +
                         ' WHERE LEN(A.SGL_LOTE) = 5 '  +
                         '       AND A.COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR '  +
                         '       AND A.COD_FAZENDA = :COD_FAZENDA';
        qi.ParamByName('COD_PESSOA_PRODUTOR').AsInteger  :=  q2.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
        qi.ParamByName('COD_FAZENDA').AsInteger          :=  q2.fieldbyname('COD_FAZENDA_MANEJO').AsInteger;
        qi.Open;


        CodLote  := Lotes.Inserir(q2.fieldbyname('COD_FAZENDA_MANEJO').AsInteger,'ABT'+FormatFloat('00',qi.Fields[0].AsInteger),'Lote de animais abatidos do dia '+data+' Frigorífico:'+q2.FieldByName('FRIGORIFICO').AsString);
        if CodLote < 0 then
        begin
          lotes.Pesquisar(q2.fieldbyname('COD_FAZENDA_MANEJO').AsInteger,'D');
          while not lotes.EOF do
          begin
            if lotes.ValorCampo('DesLote')  = 'Lote de animais abatidos do dia '+data+' Frigorífico:'+q2.FieldByName('FRIGORIFICO').AsString then
            begin
              CodLote :=  lotes.ValorCampo('CodLote');
              break;
            end
            else
            begin
              lotes.IrAoProximo;
            end;
          end;
        end;
        //Eventos.inserir
        if q.Active then
          q.Refresh
        else
          q.Open;
        q.First;
        CodEvento  :=  eventos.InserirMudancaLote(StrToDate(data),'Evento gerado automáticamente para criação de lote de animais abatidos',q2.fieldbyname('COD_FAZENDA_MANEJO').AsInteger,CodLote);
        qi.Close;
        qi.sql.text  :=  'UPDATE TAB_RESGATA_ANIMAIS_ABATIDOS_TMP '  +
                         ' SET COD_EVENTO = :COD_EVENTO '  +
                         ' WHERE COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR '  +
                         '       AND COD_ANIMAL = :COD_ANIMAL ';
        while not q.Eof do
        begin
          Conexao.CodFazendaTrabalho  :=  q2.fieldbyname('COD_FAZENDA_MANEJO').AsInteger;
          RESULT  :=  AplicarEvento(q.fieldbyname('COD_ANIMAL').AsString,-1,'',-1,-1,CodEvento,'S');
          qi.ParamByName('COD_EVENTO').AsInteger           :=  CodEvento;
          qi.ParamByName('COD_PESSOA_PRODUTOR').AsInteger  :=  q2.fieldbyname('COD_PESSOA_PRODUTOR').AsInteger;
          qi.ParamByName('COD_ANIMAL').AsInteger           :=  q.fieldbyname('COD_ANIMAL').AsInteger;
          Begintran;
          try
            qi.ExecSQL();
            Commit;
          except
            Rollback;
          end;
          q.Next;
        end;
        q2.Next;
      end;
      q2.Close;
      q2.sql.text  :=  'SELECT COUNT(*) "TOTAL DE ANIMAIS", '  +
                       '        P.NOM_PESSOA, '  +
                       '        A.COD_PESSOA_PRODUTOR, '  +
                       '        A.COD_PESSOA COD_FRIGORIFICO, '  +
                       '        P2.NOM_PESSOA FRIGORIFICO, '  +
                       '        P2.NOM_REDUZIDO_PESSOA, '  +
                       '        A.DATA_ABATE, '  +
                       '        TA.COD_FAZENDA_MANEJO, '  +
                       '        TA.DTA_FIM_VALIDADE, '  +
                       '        TF.NOM_FAZENDA '  +
                       ' FROM TAB_RESGATA_ANIMAIS_ABATIDOS_TMP A, '  +
                       '      TAB_PESSOA P, '  +
                       '      TAB_PESSOA P2, '  +
                       '      TAB_ANIMAL TA, '  +
                       '      TAB_FAZENDA TF '  +
                       ' WHERE A.COD_PESSOA_PRODUTOR = P.COD_PESSOA '  +
                       '       AND A.COD_PESSOA = P2.COD_PESSOA '  +
                       '       AND TA.COD_ANIMAL = A.COD_ANIMAL '  +
                       '       AND TA.COD_PESSOA_PRODUTOR = A.COD_PESSOA_PRODUTOR '  +
                       '       AND TA.COD_FAZENDA_MANEJO = TF.COD_FAZENDA '  +
                       '       AND TA.COD_PESSOA_PRODUTOR = TF.COD_PESSOA_PRODUTOR '  +
                       '       AND A.DATA_ABATE = :DATA_ABATE '  +
                       ' GROUP BY P.NOM_PESSOA, '  +
                       '          A.COD_PESSOA, '  +
                       '          A.DATA_ABATE, '  +
                       '          P2.NOM_PESSOA, '  +
                       '          A.COD_PESSOA_PRODUTOR, '  +
                       '          P2.NOM_REDUZIDO_PESSOA, '  +
                       '          TA.COD_FAZENDA_MANEJO, '  +
                       '          TA.DTA_FIM_VALIDADE, '  +
                       '          TF.NOM_FAZENDA '  +
                       ' ORDER BY A.DATA_ABATE, '  +
                       '          P.NOM_PESSOA';

      q2.ParamByName('DATA_ABATE').AsDate :=  StrToDate(data);
      q2.Open;
      q2.First;
      Mensagens.Clear;
      StrAux  :=  '';
      while not q2.Eof do
      begin
        StrAux  :=  StrAux + 'Total de Animais:'+q2.fieldbyname('TOTAL DE ANIMAIS').AsString+
                    				 ' Produtor:' + q2.fieldbyname('NOM_PESSOA').AsString+
                    				 ' Fazenda:'  + q2.fieldbyname('NOM_FAZENDA').AsString+#10#13;
        q2.Next;
      end;
      Mensagens.Adicionar(10259, Self.ClassName, NomeMetodo, [StrAux]);
      result  :=  1;
    finally
      SoapSisbov.Free;
      qi.Free;
      q2.Free;
      Eventos.Free;
      lotes.Free;
    end;
  finally
    q.Free;

    if q3 <> Nil then
      q3.Free;

    if q4 <> Nil then
      q4.Free;

    if q5 <> Nil then
      q5.Free;

    if q6 <> Nil then
      q6.Free;

    if q7 <> Nil then
      q7.Free;
  end;
end;

end.