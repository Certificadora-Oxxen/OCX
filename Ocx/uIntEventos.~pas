unit uIntEventos;

{
  Os Eventos que podem ser cadastrados

  Cód.  Descrição
  ----  ---------------------------
   1	Mudança de regime alimentar
   2	Desmame
   3	Mudança de categoria
   4	Seleção para reprodução
   5	Castração
   6    Mudança de lote
   7    Mudança de local
   8    Transferência
   9    Venda para criador
  10    Venda para frigorífico
  11    Desaparecimento
  12    Morte
  13    Parto
  14    Aborto
  15    Manejo sanitário
  16    Emissão de certificado
  21    Abate de animal vendido
  22    Pesagem
  24    Estação de Monta

  Em 13/09/2002
}

{$DEFINE MSSQL}

interface

uses uIntClassesBasicas, uIntEvento, dbtables, sysutils, db, uFerramentas, uIntAnimais,
  uPrintPDF, FileCtrl, uColecoes, uIntRelatorios, Graphics, uIntEstoqueSemen,
  uCodigoDeBarras, Variants, DateUtils, WsSISBOV1, uIntSoapSisbov, InvokeRegistry, Rio, SOAPHTTPClient,DBClient;

type
  TInfoEvento = record
    CodEvento : Integer;
    CodTipoEvento : Integer;
    DesTipoEvento : String;
    IndEventoSisbov : String;
    DtaInicio : TDateTime;
    DtaFim : TDateTime;
    CodFazenda : Integer;
    NomFazenda : String;
    TxtDados : String;
    CodSituacaoSisbov : String;
    QtdAnimais : Integer;
    DtaEfetivacaoCadastro : TDateTime;
    CodRegistroLog : Integer;
    NomArquivoCertificado: String;
    CodEventoAssociado: Integer;
    EventoAssociado: Boolean;
  end;

  TInfoEntradaInsumo = record
    CodEntradaInsumo : Integer;
    CodInsumo : Integer;
    DesInsumo : String;
    CodTipoInsumo : Integer;
    DesTipoInsumo : String;
    CodSubTipoInsumo : Integer;
    DesSubTipoInsumo : String;
    CodTipoSubEventoSanitario: Integer;
    DesTipoSubEventoSanitario: String;
    DtaCompra: TDateTime;
  end;

  TDadosAnimal = record
    CodAnimal : Integer;
    CodFazendaManejo : Integer;
    CodAnimalManejo : String;
    CodAnimalCertificadora: String;
    CodPaisSisbov : Integer;
    CodEstadoSisbov : Integer;
    CodMicroRegiaoSisbov : Integer;
    CodAnimalSisbov : Integer;
    NumDVSisbov : Integer;
    CodSituacaoSisbov : String;
    DtaIdentificacaoSisbov : TDateTime;
    NumImovelIdentificacao : String;
    CodPropriedadeIdentificacao : Integer;
    CodFazendaIdentificacao : Integer;
    DtaNascimento : TDatetime;
    NumImovelNascimento : String;
    CodPropriedadeNascimento : Integer;
    CodFazendaNascimento : Integer;
    DtaCompra : TDateTime;
    CodPessoaSecundariaCriador : Integer;
    NomAnimal : String;
    DesApelido : String;
    CodAssociacaoRaca : Integer;
    CodGrauSangue : Integer;
    CodEspecie : Integer;
    CodAptidao : Integer;
    CodRaca : Integer;
    CodPelagem : Integer;
    IndSexo : String;
    CodTipoOrigem : Integer;
    CodAnimalPai : Integer;
    CodAnimalMae : Integer;
    CodAnimalReceptor : Integer;
    IndAnimalCastrado: String;
    CodRegimeAlimentar : Integer;
    CodCategoriaAnimal : Integer;
    CodTipoLugar : Integer;
    CodLoteCorrente : Integer;
    CodLocalCorrente : Integer;
    CodFazendaCorrente : Integer;
    NumImovelCorrente : String;
    CodPropriedadeCorrente : Integer;
    NumCNPJCPFCorrente : String;
    CodPessoaCorrente : Integer;
    CodPessoaSecundariaCorrente : Integer;
    DtaUltimoEvento : TDateTime;
    DtaUltimoEventoAnterior : TDateTime;
    DtaAplicacaoUltimoEvento : TDateTime;
    DtaAplicacaoUltimoEventoAnterior : TDateTime;
    CodRegistroLog: Integer;
    DtaEfetivacaoCadastro: TDatetime;
    CodArquivoSisbov : Integer;
    CodAnimalAssociado : Integer;
    QtdPesoAnimal : extended;
    NumTransponder: String;
    CodTipoIdentificador1: Integer;
    CodPosicaoIdentificador1: Integer;
    CodTipoIdentificador2: Integer;
    CodPosicaoIdentificador2: Integer;
    CodTipoIdentificador3: Integer;
    CodPosicaoIdentificador3: Integer;
    CodTipoIdentificador4: Integer;
    CodPosicaoIdentificador4: Integer;
    NumGta: String;
    CodSerieGta: String;
    CodEstadoGta: Integer;
    DtaEmissaoGta: TDateTime;
    NumnotaFiscal: Integer;
    IndAptoCobertura: String;
    IndTouroApto: String;
    IndVacaPrenha: String;
    DtaDesativacao: TDateTime;
    IndCodSisBovReservado: String;
    DtaValidadeGTA: TDateTime;
  end;

  TInfoEstacaoMonta = record
    CodEventoEstacaoMonta: Integer;
    CodFazenda: Integer;
    DtaInicio: TDatetime;
    DtaFim: TDateTime;
  end;

  TTotalizaEvento = record
    CodTipoEvento: Integer;
    DesTipoEvento: String;
    QtdAnimais: Integer;
  end;

  TArrayOfTotalizaEvento = Array of TTotalizaEvento;

  { TIntEventos }
  TIntEventos = class(TIntClasseBDNavegacaoBasica)
  private
    FIntEvento: TIntEvento;
    FQueryAux1 : THerdomQuery;
    FUltimoArquivoGerado : String;
    FDatasetTemporario:TClientDataSet;

{   function VerificaFazendaEfetivada(CodFazenda: Integer;
      var CodPropriedadeRural: Integer;
      var NumImovelReceitaFederal: String; var DtaInicioCertificacao: TDateTime;
      NomeCampo: String): Integer;
    function VerificaPropriedadeEfetivada(
      var CodPropriedadeRural: Integer; var NumImovelReceitaFederal: String;
      var DtaInicioCertificacao: TDateTime; NomeCampo: String): Integer; }
    function GravaCertificadoAnimal(DadosEvento: TInfoEvento): Integer;
    function InsereEventoEmissaoCert(var DadosEvento: TInfoEvento) : Integer;
    public
    function GeraCertificados(var DadosEvento: TInfoEvento;
      CodModeloCertificado: Integer) : Integer;
    private
    function InserirCertificadoAnimal(DadosEvento: TInfoEvento;
      CodAnimal: Integer): Integer;
    function VerificaEvento(CodEvento: Integer; Obrigatorio: Boolean;
      NomeCampo: String; var DadosEvento: TInfoEvento): Integer;
    function VerificaEntradaInsumo(CodEntradaInsumo: Integer; Obrigatorio: Boolean;
      NomeCampo: String; var DadosEntradaInsumo: TInfoEntradaInsumo): Integer;
    function VerificaPropriedadeRural(var CodPropriedade: Integer;
      Obrigatorio: Boolean; NomeCampo: String; var NIRF: String;
      CodLocalizacaoSISBOV: Integer; var NomPropriedade: String;
      CodPessoa: Integer): Integer;
    function VerificaPropriedadeNaoEras(CodPessoaProdutor, CodFazenda, CodLocalizacaoPropriedade: Integer): Integer;
    function VerificaPessoaSecundaria(CodPessoa, CodPapel: Integer; IndObrigatorio: Boolean;
      NomeCampo: String; var NomPessoa, CNPJCPF, CNPJCPFF: String): Integer;
//    function VerificaNumLetra(Valor: String; Tamanho: Integer;
//      NomParametro: String): Integer;
    function VerificaPessoa(CodPessoa, CodPapel: Integer; IndObrigatorio: Boolean;
      NomeCampo: String; var NomPessoa, CNPJCPF, CNPJCPFF: String): Integer;
    function VerificaModeloCertificado(CodModeloCertificado: Integer): Integer;
    //function VerificaAptidao(Codaptidao: Integer): Integer;
    function VerificaLocalRegAlimentar(CodFazenda, CodLocal,
      CodRegAlimentar: Integer; var DesRegimeAlimentar: String): Integer;
    function VerificaLugar(CodTipoLugar, CodLote, CodLocal,
      CodFazenda: Integer; var NumImovel: String; var CodLocalizacaoSISBOV: Integer;
      var NomPropriedade, NomPessoa, CNPJ, CNPJF, NomFazenda, DesLocal,
      DesLote: String; var CodPropriedade: Integer; NumCNPJCPF: String;
      var CodPessoa, CodPessoaSecundaria: Integer;
      DesTipo: String): Integer;
    function VerificaFazenda(Valor: Integer; Obrigatorio: Boolean; NomeCampo: String;
      var NomFazenda: String): Integer;
    function VerificaLocal(CodFazenda, CodLocal: Integer; var DesLocal: String): Integer;
    function VerificaLote(CodFazenda, CodLote: Integer; var DesLote: String): Integer;
    function VerificaCNPJCPF(NumCNPJCPF: String): Integer;
    function BuscarDesRegimeAlimentar(CodRegimeAlimentar: Integer;
      var DesRegimeAlimentar: String): Integer;
    function ConsistirMudancaRegimeAlimentar(CodAptidao,
      CodRegimeAlimentar: Integer): Integer;
    function ConsistirMudancaCategoriaAnimal(CodTipoEvento, CodAptidao,
      CodCategoriaOrigem, CodCategoriaDestino: Integer): Integer;
    function ConsistirTipoCausaMorte(CodTipoMorte, CodCausaMorte: Integer): Integer;
    function ConsistirLocal(CodLocal, CodFazenda: Integer): Integer;
    function ConsistirMudancaLocal(CodLocal, CodFazenda, CodAptidao,
         CodRegAlimentarMamando, CodRegAlimentarDesmamado: Integer): Integer;
    function ConsistirLote(CodLote, CodFazenda: Integer): Integer;
    function PesquisarRelatorioConsolidado(EQuery: THerdomQuery;SglProdutor, NomPessoaProdutor,
      CodSituacaoSisbov: String; CodGrupoEvento: Integer; CodTipoEvento: String;
      CodTipoSubEventoSanitario: Integer; DtaInicio, DtaFim: TDateTime;
      TxtDados: String; CodTarefa: Integer;
      DtaInicioCadastro, DtaFimCadastro,
      DtaInicioEfetivacao, DtaFimEfetivacao: TDateTime): Integer;
    function PesquisarRelatorioAnimaisAplicados(
      CodSituacaoSisbovEvento: String; CodGrupoEvento,
      CodTipoEvento, CodTipoSubEventoSanitario, CodEvento: Integer;
      DtaInicioEvento, DtaFimEvento: TDateTime; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String; CodPaisSisBov,
      CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbovInicio,
      CodAnimalSisbovFim: Integer; DtaNascimentoInicio, DtaNascimentoFim,
      DtaIdentificacaoInicio, DtaIdentificacaoFim: TDateTime; CodRaca, CodCategoria,
      IndSexo: String; CodTipoLugar: Integer; CodLocal, CodLote: String;
      IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; IndAnimaisNaoAssociados: String;
      var TotalizaEventos: TArrayOfTotalizaEvento;
      var QtdAnimais: Integer; SemTecnico: String; CodPessoaTecnico: Integer): Integer;
    function BuscarDesCriterioPesquisa(const NomCriterio: String;
      Chave: String): String;
    function EfetivarCadastroInt(CodEvento, CodModeloCertificado: Integer;
      DadosEvento: TInfoEvento): Integer;
    // function BuscarPropriedadeRural(NIRF: String): Integer;
    function BuscarFrigorifico(NumCNPJFrigorifico: String): Integer;
    function BuscarPessoaSecundaria(NumCNPJCPF: String;
      CodPapelSecundario: Integer): Integer;
    // function BuscarAglomeracao(CNPJCPF: String): Integer;
{    function ConsistirCriador(NumCNPJCPFPessoaSecundaria:String;
      CodEvento:Integer): Integer; }
    function ConsistirAglomeracao(NumCNPJCPFPessoaSecundaria:String;
      CodEvento:Integer): Integer;
    function VerificaDataEstacaoMonta(DtaInicio, DtaFim: TDateTime;
      CodFazenda: Integer; var CodEventoEstacaoMonta:Integer): Integer;
    function VerificaTouroRM(CodFazenda, CodAnimal: Integer; CodFazendaManejo: Integer;
      CodAnimalManejo:String;CodReprodutorMultiplo:Integer; var IndTouro:String): Integer;
    function VerificaAnimalReproducao(CodFazenda, CodAnimal: Integer; CodFazendaManejo: Integer;
      CodAnimalManejo, IndTouro:String; DtaEvento:TDateTime): Integer;

    function PesquisarRelatorioAvaliacao(EQuery: THerdomQuery; CodEvento: Integer;
      DtaInicioEvento, DtaFimEvento: TDateTime; CodTipoAvaliacao: Integer;
      CodCaracteristicas: String; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai, NomAnimalPai,
      DesApelidoPai: String; CodFazendaManejoMae: Integer;
      CodAnimalManejoMae: String; DtaNascimentoInicio,
      DtaNascimentoFim: TDateTime; IndSexo, CodRacas, CodCategorias, CodLocais,
      CodLotes, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; CodTarefa: Integer): Integer;
    function VerificaEstacaoMonta(
      var InfoEstacaoMonta: TInfoEstacaoMonta): Integer;
    function VerificaParticipacaoTouroRMRegimePasto(CodAnimal: Integer;
      IndTouro: String; DtaInicio, DtaFim: TDatetime): Integer;
    function VerificaParticipacaoFemeaRegimePasto(CodAnimal: Integer;
      DtaInicio, DtaFim: TDatetime): Integer;
    function VerificaFemeaEstacaoMonta(CodEventoEstacaoMonta,
      CodAnimal: Integer): Integer;
    function VerificaGrauDificuldade(CodGrauDificuldade:Integer): Integer;
    function VerificaSituacaoCria(CodSituacaoCria:Integer): Integer;
    {function InserirCoberturaAutomatica(DtaEvento: TDateTime;
      CodFazenda: Integer; TxtObservacao: String; CodAnimalTouro,
      CodReprodutorMultiplo, CodAnimalFemea, CodEventoEstacaoMonta: Integer): Integer;}
    function PesquisarRelatorioPrevisaoParto(EQuery: THerdomQuery;
      CodEventoEstacaoMonta: Integer; CodTipoEventosCobertura:
      String; DtaPrevistaPartoInicio, DtaPrevistaPartoFim: TDateTime; CodRacas,
      CodCategorias, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; NumOrdemInicio, NumOrdemFim: Integer;
      CodLotes, CodLocais: String; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
      IndDiagnosticoPrenhez: String; CodTarefa: Integer): Integer;
    function PesquisarRelatorioFemeasADiagnosticar(EQuery: THerdomQuery;
      CodEventoEstacaoMonta: Integer; CodTipoEventosCobertura: String;
      DtaDiagnosticoPrevisto: TDateTime; CodRacas, IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      NumOrdemInicio, NumOrdemFim: Integer; CodLotes, CodLocais,
      CodCategorias: String; CodFazendaManejo: Integer; CodAnimalManejoInicio,
      CodAnimalManejoFim: String; CodFazendaManejoPai: Integer;
      CodAnimalManejoPai: String; CodTarefa: Integer): Integer;
    function PesquisarRelatorioDesempenhoVacas(EQuery: THerdomQuery;
      CodFazendaManejo: Integer; CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
      CodFazendaManejoMae: Integer; CodAnimalManejoMae, CodRacas,
      CodCategorias, CodLocais, CodLotes, IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      NumPartoInicio, NumPartoFim, NumDiasIntervaloInicio, NumDiasIntervalorFim,
      QtdPesoDesmameInicio, QtdPesoDesmameFim, CodTarefa: Integer): Integer;
    function PesquisarRelatorioAvaliacaoInseminacao(CodEventoEstacaoMonta,
      CodFazendaManejoTouro: Integer; CodAnimalManejoTouroInicio,
      CodAnimalManejoTouroFim, NomAnimalTouro, DesApelidoTouro,
      NumPartida, CodRacas, CodCategorias: String; IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      NumOrdemPartoInicio, NumOrdemPartoFim: Integer;
      CodInseminadores: String): Integer;
    function PesquisarRelatorioConsultaReprodutiva(
      CodFazendaManejo: Integer; CodAnimalManejoInicio,
      CodAnimalManejoFim: String; CodFazenda: Integer; CodEstacoes,
      CodRacas, CodCategorias, CodLocais, CodLotes, IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; NumPartosInicio, NumPartosFim: Integer;
      CodTipoCoberturas: String; NumCoberturasInicio,
      NumCoberturasFim: Integer; DtaCoberturaInicio, DtaCoberturaFim,
      DtaDiagnosticoInicio, DtaDiagnosticoFim: TDateTime; IndVacaPrenha,
      CodInseminadores: String; CodFazendaManejoTouro: Integer;
      CodAnimalManejoTouro: String; DtaUltimoPartoInicio,
      DtaUltimoPartoFim: TDateTime): Integer;
    function InserirAnimalEvento(CodEvento: Integer; DtaAplicacaoEvento: TDateTime;
      DadosAnimal: TDadosAnimal): Integer;
    function BuscaDadosAnimal(CodAnimal:Integer; var DadosAnimal: TDadosAnimal): Integer;
    procedure MontaQueryInsertAnimalEvento;
    function InserirErroAplicacaoEvento(CodEvento: Integer;
      CodAnimal: Integer; DesApelido: String; CodFazendaManejo: Integer;
      CodAnimalManejo, CodAnimalCertificadora, CodSituacaoSisbov: String;
      CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodAnimalSisbov,
      NumDVSisbov, CodRaca: Integer; IndSexo: String; CodTipoOrigem,
      CodCategoriaAnimal, CodLocalCorrente, CodLoteCorrente, CodTipoLugar,
      QtdPesoAnimal: Integer; IndTouroApto, IndVacaPrenha, TxtMensagem,
      IndOperacaoRemocao: String; CodTipoMensagem: Integer): Integer;
  public
    constructor Create; override;
    destructor Destroy; override;

//------------------------------------------------------------------------------
//druzo 29/10/2009
//Rotinas para inclusao de eventos de morte em massa
//------------------------------------------------------------------------------
procedure LimpaListaMorteAnimais;
procedure InsereMorteAnimal(CodTipoMorte,CodCausaMorte:integer;CodAnimalManejo,DataMorteAnimal:string);
function EfetivaEventosMorte():integer;

//******************************************************************************
//Fim Rotinas para inclusao de eventos de morte em massa
//******************************************************************************


    function InserirEvento(CodPessoaProdutor,
                           CodTipoEvento: Integer;
                           DtaInicio,
                           DtaFim: TDateTime;
                           TxtDados,
                           TxtObservacao: String;
                           CodFazenda: Integer): Integer;

    function AlterarEvento(CodPessoaProdutor,
                           CodEvento: Integer;
                           DtaInicio,
                           DtaFim: TDateTime;
                           TxtDados: String): Integer;

    function Buscar(CodEvento: Integer;IndRetornaDetalhe:String): Integer;
    function InserirCastracao(DtaEvento: TDateTime;
      TxtObservacao: String; CodFazenda: Integer): Integer;

    function InserirDesmame(DtaEvento: TDateTime;
                            CodAptidao,
                            CodRegimeAlimentarDestino: Integer;
                            TxtObservacao: String;
                            CodFazenda: Integer): Integer; OverLoad;

    function InserirDesmame(EDtaEvento: TDateTime;
                            ECodAptidao,
                            ECodRegimeAlimentarDestino: Integer;
                            ETxtObservacao: String;
                            ECodFazenda,
                            ECodTarefa: Integer): Integer; OverLoad;

    function InserirMudCategoria(DtaEvento: TDateTime;
      TxtObservacao: String; CodAptidao, CodCategoriaOrigem,
      CodCategoriaDestino, CodFazenda: Integer): Integer;
    function InserirMudRegAlimentar(DtaEvento: TDateTime;
      TxtObservacao: String; CodAptidao, CodRegimeAlimentarOrigem,
      CodRegimeAlimentarDestino, CodFazenda: Integer): Integer;
    function InserirSelecaoReproducao(DtaEvento: TDateTime;
      TxtObservacao: String; CodFazenda: Integer): Integer;
    function AlterarObservacao(CodEvento: Integer;
      TxtObservacao: String): Integer;
    function InserirMudancaLote(DtaEvento: TDateTime;
      TxtObservacao: String; CodFazenda,
      CodLoteDestino: Integer): Integer;
    function InserirDesaparecimento(DtaEvento: TDateTime;
      TxtObservacao: String; CodFazenda: Integer): Integer;
    function InserirMorte(DtaEvento: TDateTime;
      TxtObservacao: String; CodTipoMorte,
      CodCausaMorte: Integer; CodFazenda: Integer): Integer;
    function InserirMudancaLocal(DtaEvento: TDateTime;
      TxtObservacao: String; CodAptidao, CodFazenda, CodLocalDestino,
      CodRegAlimentarMamando, CodRegAlimentarDesmamado: Integer): Integer;
    function InserirEnvioCertificado(CodPessoaProdutor: Integer;
      NomServicoEnvio, NumConhecimento: String): Integer;
    function Pesquisar(CodEvento, CodTipoEvento: Integer; DtaInicio,
      DtaFim: TDateTime; TxtDados, CodSituacaoSisBov: String;
      CodFazenda: Integer; IndAplicadoAnimais, CodOrdenacao,
      IndOrdenacaoCrescente: String; CodGrupoEvento: Integer): Integer;

    function InserirVendaCriador(DtaSaidaOrigem,
                                 DtaChegadaDestino: TDateTime;
                                 TxtObservacao,
                                 NumImovelReceitaFederal: String;
                                 CodLocalizacaoSISBOV: String;
                                 CodPropriedadeRural,
                                 CodPessoa,
                                 CodPessoaSecundaria: Integer;
                                 NumCNPJCPFPessoaSecundaria: String;
                                 DtaEmissaoGTA: TDateTime;
                                 NumGTA: String;
                                 CodFazenda: Integer;
                                 IndEventoCertTerceira, CodSerieGta: String;
                                 CodEstadoGta: Integer;
                                 IndMovNErasEras: String;
                                 DtaValidadeGTA: TDateTime): Integer;

    function InserirVendaFrigorifico(DtaSaidaOrigem,
      DtaChegadaDestino: TDateTime; TxtObservacao,
      NumCNPJCPFPessoa: String; CodPessoa: Integer;
      DtaEmissaoGTA: TDateTime; NumGTA: String; CodFazenda: Integer;
      CodSerieGta: String; CodEstadoGta: Integer; DtaValidadeGTA: TDateTime): Integer;
    function InserirRetornoFrigorifico(DtaSaidaOrigem,
      DtaChegadaDestino: TDateTime; TxtObservacao,
      NumCNPJCPFPessoa: String; CodPessoa: Integer;
      DtaEmissaoGTA: TDateTime; NumGTA: String; CodFazenda: Integer;
      CodSerieGta: String; CodEstadoGta: Integer; DtaValidadeGTA: TDateTime): Integer;
    function InserirTransferencia(DtaSaidaOrigem, DtaChegadaDestino: TDateTime;
      TxtObservacao: String; CodAptidao, CodTipoLugarOrigem,
      CodFazendaOrigem: Integer; NumImovelOrigem: String; CodLocalizacaoOrigem,
      CodPropriedadeOrigem: Integer; NumCNPJCPFOrigem: String;
      CodPessoaOrigem, CodPessoaSecundariaOrigem, CodTipoLugarDestino,
      CodFazendaDestino, CodLocalDestino, CodLoteDestino: Integer;
      NumImovelDestino: String; CodLocalizacaoDestino,
      CodPropriedadeDestino: Integer; NumCNPJCPFDestino: String;
      CodPessoaDestino, CodPessoaSecundariaDestino, CodRegAlimentarMamando,
      CodRegAlimentarDesmamado: Integer; NumGTA: String;
      DtaEmissaoGTA: TDateTime; CodSerieGta: String; CodEstadoGta: Integer; DtaValidadeGTA: TDateTime;
      IndMovNErasEras, IndMigrarAnimal: String): Integer;
    function EfetivarCadastro(CodEvento: Integer): Integer;
    function CancelarEfetivacao(CodEvento: Integer): Integer;
    function Excluir(CodEvento: Integer): Integer;
    function MarcarNaoGravadoSisbov(CodEvento: Integer): Integer;
    function AlterarGTA(CodEvento: Integer; NumGTA: String;
      DtaEmissaoGTA: TDateTime; CodSerieGta: String; CodEstadoGta: Integer; DtaValidadeGTA: TDateTime): Integer;
    function InserirAbateAnimalVendido(DtaEvento: TDateTime;
      TxtObservacao: String; CodFazenda: Integer): Integer;
    function InserirSanitario(DtaInicio, DtaFim: TDateTime;
      TxtObservacao: String; CodFazenda: Integer): Integer;
    function AdicionarSubEventoSanitario(CodEvento,
      CodEntradaInsumo: Integer): Integer;
    function RemoverSubEventoSanitario(CodEvento,
      CodEntradaInsumo: Integer): Integer;
    function PesquisarSubEventosSanitarios(CodEvento: Integer): Integer;
    function InserirEmissaoCertificado(DtaEvento: TDateTime;
      TxtObservacao: String;CodFazenda: Integer): Integer;
    function PossuiMensagemOcorrenciaAplicacao(CodEvento: Integer): Integer;

    function GerarRelatorioConsolidado(SglProdutor,
                                       NomPessoaProdutor,
                                       CodSituacaoSisbov: String;
                                       CodGrupoEvento: Integer;
                                       CodTipoEvento: String;
                                       CodTipoSubEventoSanitario: Integer;
                                       DtaInicio,
                                       DtaFim: TDateTime;
                                       TxtDados: String;
                                       Tipo,
                                       QtdQuebraRelatorio,
                                       CodTarefa: Integer;
                                       DtaInicioCadastro, DtaFimCadastro,
                                       DtaInicioEfetivacao, DtaFimEfetivacao: TDateTime): String;

    function GerarRelatorioAnimaisAplicados(
      CodSituacaoSisbovEvento: String; CodGrupoEvento,
      CodTipoEvento, CodTipoSubEventoSanitario, CodEvento: Integer;
      DtaInicioEvento, DtaFimEvento: TDateTime; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String; CodPaisSisBov,
      CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbovInicio,
      CodAnimalSisbovFim: Integer; DtaNascimentoInicio, DtaNascimentoFim,
      DtaIdentificacaoInicio, DtaIdentificacaoFim: TDateTime; CodRaca, CodCategoria,
      IndSexo: String; CodTipoLugar: Integer; CodLocal, CodLote,
      IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; Tipo: Integer; IndMostrarCriteriosPesquisa,
      IndAnimaisNaoAssociados, SemTecnico: String; CodPessoaTecnico: Integer): String;
    function InserirPesagem(DtaEvento: TDateTime; TxtObservacao: String;CodFazenda: Integer): Integer;
    function EmitirCertificado(CodEvento, CodModeloCertificado: Integer): Integer;
    function InserirEstacaoMonta(DtaInicio, DtaFim: TDateTime;
     TxtObservacao: String; CodFazenda: Integer; SglEstacaoMonta,
     DesEstacaoMonta: String): Integer;

    function AlterarVendaCriador(CodEvento: Integer;
                                 NumImovelReceitaFederal: String;
                                 CodLocalizacaoSISBOV: String;
                                 CodPropriedadeRural: Integer;
                                 NumCNPJCPFPessoaSecundaria: String;
                                 CodPessoa,
                                 CodPessoaSecundaria: Integer;
                                 NumGTA: String;
                                 DtaEmissaoGTA: TDateTime;
                                 IndVendaCertTerceira,
                                 CodSerieGta: String;
                                 CodEstadoGta: Integer;
                                 IndMovNErasEras: String;
                                 DtaValidadeGTA,
                                 DtaSaidaOrigem,
                                 DtaChegadaDestino: TDateTime): Integer;

    function AlterarTransferencia(CodEvento: Integer;
                                  NumGTA: String;
                                  DtaEmissaoGta: TDateTime;
                                  CodSerieGta: String;
                                  CodEstadoGta: Integer;
                                  IndMovNErasEras: String;
                                  DtaValidadeGta,
                                  DtaSaidaOrigem,
                                  DtaChegadaDestino: TDateTime;
                                  IndMigrarAnimal: String): Integer;

    function AlterarVendaFrigorifico(CodEvento: Integer;
     NumCNPJCPFFrigorifico: String; CodPessoaFrigorifico: Integer;
     NumGTA: String; DtaEmissaoGTA: TDateTime; CodSerieGta: String;
     CodEstadoGta: Integer; DtaValidadeGTA, DtaSaidaOrigem, DtaChegadaDestino: TDateTime): Integer;
    function AlterarRetornoFrigorifico(CodEvento: Integer;
     NumCNPJCPFFrigorifico: String; CodPessoaFrigorifico: Integer;
     NumGTA: String; DtaEmissaoGTA: TDateTime; CodSerieGta: String; CodEstadoGta: Integer;
     DtaValidadeGTA: TDateTime): Integer;
    function InserirCoberturaRegimePasto(DtaInicio, DtaFim: TDateTime;
     CodFazenda: Integer; TxtObservacao: String;
     CodFazendaManejo: Integer; CodAnimalManejo: String;
     CodAnimalTouro, CodReprodutorMultiplo,
     CodEventoEstacaoMonta: Integer): Integer;
    function AlterarCoberturaRegimePasto(CodEvento: Integer; DtaFim: TDateTime;
     CodFazendaManejo: Integer; CodAnimalManejo: String;
     CodAnimalTouro, CodReprodutorMultiplo: Integer): Integer;
    function InserirDiagnosticoPrenhez(DtaEvento: TDateTime;
     CodFazenda: Integer; TxtObservacao: String;
     CodEventoEstacaoMonta: Integer): Integer;
    function InserirExameAndrologico(DtaEvento: TDateTime;
     CodFazenda: Integer; TxtObservacao: String): Integer;
    function InserirCoberturaMontaControlada(DtaEvento: TDateTime;
     CodFazenda: Integer; TxtObservacao: String; CodAnimalTouro,
     CodFazendaManejoTouro: Integer; CodAnimalManejoTouro: String;
     CodAnimalFemea, CodFazendaManejoFemea: Integer;
     CodAnimalManejoFemea: String; CodEventoEstacaoMonta: Integer): Integer;
    function InserirCoberturaInseminacaoArtificial(DtaEvento,
     HraEvento: TDateTime; CodFazenda: Integer;
     TxtObservacao: String; CodAnimalTouro: Integer;
     NumPartida: String; CodAnimalFemea,
     CodFazendaManejoFemea: Integer; CodAnimalManejoFemea: String;
     QtdDoses, CodPessoaSecundariaInseminador,
     CodEventoEstacaoMonta: Integer): Integer;
    function InserirAvaliacao(DtaEvento: TDateTime;
     CodFazenda: Integer; TxtObservacao: String; CodTipoAvaliacao,
     CodPessoaSecAvaliador: Integer): Integer;
    function AlterarAvaliacao(CodEvento: Integer;
     DtaEvento: TDateTime; CodPessoaSecAvaliador: Integer): Integer;
    function GerarRelatorioAvaliacao(CodEvento: Integer;
      DtaInicioEvento, DtaFimEvento: TDateTime; CodTipoAvaliacao: Integer;
      CodCaracteristicas: String; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai, NomAnimalPai,
      DesApelidoPai: String; CodFazendaManejoMae: Integer;
      CodAnimalManejoMae: String; DtaNascimentoInicio,
      DtaNascimentoFim: TDateTime; IndSexo, CodRacas, CodCategorias, CodLocais,
      CodLotes, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; Tipo, QtdQuebraRelatorio, CodTarefa,
      CodPessoaProdutor: Integer): String;
    function InserirParto(DtaEvento: TDateTime; CodFazenda: Integer;
      TxtObservacao: String; CodGrauDificuldade, CodSituacaoCria,
      CodEstacaoMonta: Integer; CodAnimalManejoCria,
      IndSexoCria: String; CodPelagemCria: Integer; QtdPesagemCria: Double;
      CodAnimalManejoGemeo, IndSexoGemeo: String; CodPelagemGemeo:Integer;
      QtdPesagemGemeo:Double; CodAnimalFemea, CodFazendaManejoFemea: Integer;
      CodAnimalManejoFemea: String; IndCodSisBovReservado:String): String;
    function AlterarParto(CodEvento: Integer; DtaEvento: TDateTime;
      CodGrauDificuldade, CodCobertura: Integer): Integer;
    function PesquisarEstacoesMonta(NumMaxEventos, CodFazenda: Integer): Integer;
    function GerarRelatorioPrevisaoParto(CodEventoEstacaoMonta: Integer;
      CodTipoEventosCobertura: String; DtaPrevistaPartoInicio,
      DtaPrevistaPartoFim: TDateTime; CodRacas, CodCategorias,
      IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; NumOrdemInicio, NumOrdemFim: Integer;
      CodLotes, CodLocais: String; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
      Tipo, CodTarefa, CodPessoaProdutor: Integer; IndDiagnosticoPrenhez: String): String;
    {function AlterarMontaAutomatica(CodEvento, CodAnimalPai: Integer): Integer;}
    function PesquisarMontasParto(CodEventoParto: Integer): Integer;
    function GerarRelatorioFemeasADiagnosticar(CodEventoEstacaoMonta: Integer;
      CodTipoEventosCobertura: String; DtaDiagnosticoPrevisto: TDateTime;
      CodRacas, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
      QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
      QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; NumOrdemInicio, NumOrdemFim: Integer; CodLotes,
      CodLocais, CodCategorias: String; CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
      Tipo, CodTarefa, CodPessoaProdutor: Integer): String;

    function GerarRelatorioDesempenhoVacas(CodFazendaManejo: Integer;
      CodAnimalManejoInicio, CodAnimalManejoFim: String;
      CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
      CodFazendaManejoMae: Integer; CodAnimalManejoMae, CodRacas,
      CodCategorias, CodLocais, CodLotes, IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      NumPartoInicio, NumPartoFim, NumDiasIntervaloInicio, NumDiasIntervalorFim,
      QtdPesoDesmameInicio, QtdPesoDesmameFim, Tipo, CodTarefa, CodPessoaProdutor: Integer): String;

    function PesquisarResumoEstacaoMonta(EQuery: THerdomQuery;
                                         ECodEventoEstacaoMonta,
                                         ECodPessoaProdutor,
                                         ECodTarefa: Integer): Integer;

    function GerarRelatorioResumoEstacaoMonta(ECodEventoEstacaoMonta,
                                              ECodProdutorTrabalho,
                                              ECodTarefa: Integer): String;


    function GerarRelatorioAvaliacaoInseminacao(CodEventoEstacaoMonta,
      CodFazendaManejoTouro: Integer; CodAnimalManejoTouroInicio,
      CodAnimalManejoTouroFim, NomAnimalTouro, DesApelidoTouro,
      NumPartida, CodRacas, CodCategorias: String; IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
      QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
      CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
      NumOrdemPartoInicio, NumOrdemPartoFim: Integer; CodInseminadores: String;
      Tipo, QtdQuebraRelatorio: Integer): String;

    function GerarRelatorioConsultaReprodutiva(
      CodFazendaManejo: Integer; CodAnimalManejoInicio,
      CodAnimalManejoFim: String; CodFazenda: Integer; CodEstacoes,
      CodRacas, CodCategorias, CodLocais, CodLotes, IndAgrupRaca1: String;
      CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
      IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
      QtdCompRacialFim2: Double; IndAgrupRaca3: String;
      CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
      IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
      QtdCompRacialFim4: Double; NumPartosInicio, NumPartosFim: Integer;
      CodTipoCoberturas: String; NumCoberturasInicio,
      NumCoberturasFim: Integer; DtaCoberturaInicio, DtaCoberturaFim,
      DtaDiagnosticoInicio, DtaDiagnosticoFim: TDateTime; IndVacaPrenha,
      CodInseminadores: String; CodFazendaManejoTouro: Integer;
      CodAnimalManejoTouro: String; DtaUltimoPartoInicio,
      DtaUltimoPartoFim: TDateTime; Tipo: Integer): String;
    function InserirDescarte(DtaEvento: TDateTime; TxtObservacao: String;
      CodFazenda,CodMotivoDescarte: Integer): Integer;
    function InserirAnimaisVendidos(CodEvento: Integer): Integer;

    ///////////////////////////////
    // Métodos da carga inicial
    procedure ObtemLugarCargaInicial(CsLugar, TipoInscricaoLugar,
      IdLugar: String; var CodTipoLugar: Integer; var CNPJ, NIRF: String;
      var CodLocalizacaoSISBOV, CodPropriedade, CodFazenda: Integer);
    function InserirMorteCargaInicial(StrDtaEvento, TipoMorte,
      CausaMorte: String; CodFazenda: Integer): Integer;
    function InserirVendaCriadorCargaInicial(StrDtaSaidaOrigem,
      StrDtaChegadaDestino, StrDtaEmissaoGTA, TipoInscricaoDestino,
      IDDestino: String; CodFazenda: Integer): Integer;
    function InserirVendaFrigorificoCargaInicial(StrDtaSaidaOrigem,
      StrDtaChegadaDestino, StrDtaEmissaoGTA, IDDestino: String;
      CodFazenda: Integer): Integer;
    function InserirTransferenciaCargaInicial(StrDtaSaidaOrigem,
      StrDtaChegadaDestino, StrDtaEmissaoGTA: String; CodAptidao: Integer;
      CsOrigem, TipoInscricaoOrigem, IdOrigem, CsDestino, TipoInscricaoDestino,
      IdDestino: String): Integer;
    function InserirEventoCargaInicial(StrDtaSaidaOrigem, StrDtaChegadaDestino,
      StrDtaEmissaoGTA: String; CsOrigem, TipoInscricaoOrigem, IdOrigem,
      CsDestino, TipoInscricaoDestino, IdDestino, DtaMorte, TipoMorte,
      CausaMorte: String; CodFazenda, CodAptidao: Integer): Integer;
    function EfetivarEventosCargaInicial(CodArquivoSISBOV: Integer): Integer;
    function RelatorioFormularioSaidaAnimal(CodEvento: Integer): String;
    function RelatorioFormularioAnexoXI(CodFazenda, CodEvento: Integer; const CodAnimais: WideString; VerificaSISBOV: Integer): WideString;
    function ExportarAnimaisAbcz(const CodAnimais: WideString; CodPaisSisbov,
                                 CodEstadoSisbov, CodMicroRegiaoSisbov, CodSisbovInicio,
                                 CodSisbovFim: Integer; DtaNascimentoInicio,
                                 DtaNascimentoFim: TDateTime; const CodRaca, CodCategoria: WideString;
                                 CodTipoLugar: Integer; const CodLocal, CodLote, CodManejoInicio, CodManejoFim,
                                 IndSexo: WideString; CodProdutor, CodTarefa: Integer): WideString;
    function RelatorioFormularioAnexoVI(CodProdutor, CodPropriedade: Integer): WideString;
    function PossuiCodigosSemelhantes(CodEvento: Integer): Integer; safecall;

    ///////////////////////////////

    property IntEvento : TIntEvento read FIntEvento write FIntEvento;
    property UltimoArquivoGerado : String read FUltimoArquivoGerado write FUltimoArquivoGerado;
  end;

const
  QuebraLinha: String = #13+#10;

implementation

uses uConexao, SqlExpr, uIntPessoas, uIntFazendas, uIntPropriedadesRurais,
  Math, Classes;

{ TIntEventos }

constructor TIntEventos.Create;
begin
  inherited;
  FIntEvento          :=  TIntEvento.Create;
  FQueryAux1          :=  THerdomQuery.Create(nil);
  FDatasetTemporario  :=  TClientDataSet.Create(nil);
  FDatasetTemporario.FieldDefs.Add('COD_TIPO_MORTE',ftInteger,0,true);
  FDatasetTemporario.FieldDefs.Add('COD_CAUSA_MORTE',ftInteger,0,true);
  FDatasetTemporario.FieldDefs.Add('COD_ANIMAL_MANEJO',ftString,8,true);
  FDatasetTemporario.FieldDefs.Add('DTA_APLICACAO_EVENTO',ftDateTime,0,true);
  FDatasetTemporario.IndexFieldNames  :=  'DTA_APLICACAO_EVENTO;COD_TIPO_MORTE;COD_CAUSA_MORTE';
  FDatasetTemporario.CreateDataSet;
end;

destructor TIntEventos.Destroy;
begin
  FIntEvento.Free;
  FQueryAux1.Free;
  FDatasetTemporario.Free;
  inherited;
end;

{ Esta rotina não abre uma transação para o registro que é inserido, pois
  foi criada para ser chamada por outras funções principais, nas quais a
  transação necessária é inicializada/confirmada.
  Sendo bem sucedida, esta função retorna um valor inteiro positivo
  correspondente ao cod_evento do registro inserido. }
function TIntEventos.InserirEvento(CodPessoaProdutor, CodTipoEvento: Integer;
  DtaInicio, DtaFim: TDateTime; TxtDados, TxtObservacao: String;
  CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'InserirEvento';
var
  Q: THerdomQuery;
  CodEvento, CodRegistroLog: Integer;
begin
  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Trata campo TxtDados
  //  Result := TrataString(TxtDados, 255, 'Texto de Dados');
  //  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Pega próximo código
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select isnull(max(cod_evento), 0) + 1 as cod_evento ' +
                '  from tab_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := CodPessoaProdutor;
      Q.Open;
      CodEvento := Q.FieldByName('cod_evento').AsInteger;

      // Pega próximo CodRegistroLog
      CodRegistroLog := ProximoCodRegistroLog;
      if CodRegistroLog < 0 then begin
        Rollback;
        Result := CodRegistroLog;
        Exit;
      end;

      // Tenta Inserir Registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_tipo_evento ' +
                '   , dta_inicio ' +
                '   , dta_fim ' +
                '   , cod_fazenda ' +
                '   , txt_dados ' +
                '   , txt_observacao ' +
                '   , cod_situacao_sisbov ' +
                '   , qtd_animais ' +
                '   , dta_cadastramento ' +
                '   , dta_efetivacao_cadastro ' +
                '   , cod_arquivo_sisbov ' +
                '   , cod_registro_log) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_tipo_evento ' +
                '   , :dta_inicio ' +
                '   , :dta_fim ' +
                '   , :cod_fazenda ' +
                '   , :txt_dados ' +
                '   , :txt_observacao ' +
                '   , ''N'' ' +
                '   , 0 ' +
                '   , getdate() ' +
                '   , null ' +
                '   , null ' +
                '   , :cod_registro_log)');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := CodPessoaProdutor;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_tipo_evento').AsInteger := CodTipoEvento;
      Q.ParamByName('dta_inicio').AsDateTime := DtaInicio;
      Q.ParamByName('dta_fim').AsDateTime := DtaFim;
      if CodFazenda > 0 then begin
        Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      end Else begin
        Q.ParamByName('cod_fazenda').DataType := ftInteger;
        Q.ParamByName('cod_fazenda').Clear;
      end;
      Q.ParamByName('cod_registro_log').AsInteger := CodRegistroLog;
      Q.ParamByName('txt_dados').DataType := ftMemo;
      Q.ParamByName('txt_observacao').DataType := ftString;
      AtribuiValorParametro(Q.ParamByName('txt_dados'), TxtDados);
      AtribuiValorParametro(Q.ParamByName('txt_observacao'), TxtObservacao);
      Q.ExecSQL;

(*
      A partir de 19/10/2004 o procedimento de atualização de grandezas será
      realizado a partir da execução de processo batch por intervalos configuráveis
      e não mais a partir da execução de cada operação como anteriormente.
      Result := AtualizaGrandeza(5, Conexao.CodProdutorTrabalho, 1);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;
*)

      Result := CodEvento;

    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(845, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -845;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

{ Esta rotina não abre uma transação para o registro que é inserido, pois
  foi criada para ser chamada por outras funções principais, nas quais a
  transação necessária é inicializada/confirmada.
  Sendo bem sucedida, esta função retorna um valor inteiro positivo
  correspondente ao cod_evento do registro inserido. }
function TIntEventos.AlterarEvento(CodPessoaProdutor, CodEvento: Integer;
  DtaInicio, DtaFim: TDateTime; TxtDados: String): Integer;
const
  NomeMetodo: String = 'AlterarEvento';
var
  Q: THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Tenta Inserir Registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                ' set dta_inicio = :dta_inicio ' +
                '   , dta_fim    = :dta_fim ' +
                '   , txt_dados  = null ' +
                ' where ' +
                '      cod_pessoa_produtor = :cod_pessoa_produtor' +
                '  and cod_evento  = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := CodPessoaProdutor;
      Q.ParamByName('cod_evento').AsInteger          := CodEvento;
      Q.ParamByName('dta_inicio').AsDateTime := DtaInicio;
      Q.ParamByName('dta_fim').AsDateTime := DtaFim;
      Q.ExecSQL;

    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(2386, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -2386;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.BuscarDesRegimeAlimentar(CodRegimeAlimentar: Integer;
  var DesRegimeAlimentar: String): Integer;
const
  NomeMetodo: String = 'BuscarDesRegimeAlimentar';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select des_regime_alimentar from tab_regime_alimentar ' +
                ' where cod_regime_alimentar = :cod_regime_alimentar ' +
                '   and dta_fim_validade is null ');
      Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegimeAlimentar;
      Q.Open;
      if not Q.IsEmpty then begin
        DesRegimeAlimentar := Q.FieldByName('des_regime_alimentar').AsString;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(877, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -877;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

{
function TIntEventos.VerificaAptidao(Codaptidao: Integer): Integer;
const
  NomeMetodo: String = 'VerificaAptidao';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  1 ' +
                'from ' +
                '  tab_aptidao ' +
                'where ' +
                '  cod_aptidao = :cod_aptidao ' +
                '  and dta_fim_validade is null ');
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(543, Self.ClassName, NomeMetodo, []);
         Result := -543;
         Exit;
      end;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(490, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -490;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;
}

function TIntEventos.VerificaLocalRegAlimentar(CodFazenda, CodLocal,
  CodRegAlimentar: Integer; var DesRegimeAlimentar: String): Integer;
const
  NomeMetodo: String = 'VerificaLocalRegAlimentar';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select tra.des_regime_alimentar ' +
                '  from tab_local_regime_alimentar tlra, tab_regime_alimentar tra' +
                ' where tra.cod_regime_alimentar = tlra.cod_regime_alimentar ' +
                '   and tlra.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and tlra.cod_fazenda = :cod_fazenda ' +
                '   and tlra.cod_local = :cod_local ' +
                '   and tlra.cod_regime_alimentar = :cod_regime_alimentar ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local').AsInteger := CodLocal;
      Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegAlimentar;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(671, Self.ClassName, NomeMetodo, []);
         Result := -671;
         Exit;
      end;

      DesRegimeAlimentar := Q.FieldByName('des_regime_alimentar').AsString;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1016, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1016;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.ConsistirMudancaRegimeAlimentar(CodAptidao,
  CodRegimeAlimentar: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirMudancaRegimeAlimentar';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  1 ' +
                'from ' +
                '  tab_aptidao ta ' +
                '  , tab_regime_alimentar tra ' +
                '  , tab_regime_alimentar_aptidao traa ' +
                'where ' +
                '  traa.cod_regime_alimentar = :cod_regime_alimentar ' +
                '  and traa.cod_aptidao = :cod_aptidao ' +
                '  and traa.cod_regime_alimentar = tra.cod_regime_alimentar ' +
                '  and tra.dta_fim_validade is null ' +
                '  and traa.cod_aptidao = ta.cod_aptidao ' +
                '  and ta.dta_fim_validade is null ');
      Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegimeAlimentar;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(878, Self.ClassName, NomeMetodo, []);
        Result := -878;
        Exit;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(879, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -879;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.ConsistirLote(CodLote, CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirMudancaLote';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      if CodLote <= 0
         then begin
              Q.SQL.Add('select ' +
                        '  1 ' +
                        'from ' +
                        '  tab_fazenda tf ' +
                        'where ' +
                        '      tf.cod_fazenda = :cod_fazenda ' +
                        '  and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '  and tf.dta_fim_validade is null ');
              Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.Open;
              if Q.IsEmpty then begin
                 Mensagens.Adicionar(912, Self.ClassName, NomeMetodo, []);
                 Result := -912;
                 Exit;
              end;
         end
         else begin
              Q.SQL.Add('select ' +
                        '  1 ' +
                        'from ' +
                        '  tab_fazenda tf ' +
                        '  , tab_lote tl ' +
                        'where ' +
                        '  tf.cod_fazenda = tl.cod_fazenda ' +
                        '  and tf.cod_pessoa_produtor = tl.cod_pessoa_produtor ' +
                        '  and tf.cod_fazenda = :cod_fazenda ' +
                        '  and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                        '  and tl.cod_lote = :cod_lote ' +
                        '  and tl.cod_lote = tl.cod_lote ' +
                        '  and tf.dta_fim_validade is null ' +
                        '  and tl.dta_fim_validade is null ');
              Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
              Q.ParamByName('cod_lote').AsInteger := CodLote;
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.Open;
              if Q.IsEmpty then begin
                 Mensagens.Adicionar(911, Self.ClassName, NomeMetodo, []);
                 Result := -911;
                 Exit;
              end;
         end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(913, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -913;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.ConsistirLocal(CodLocal, CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirLocal';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  1 ' +
                'from ' +
                '  tab_fazenda tf, tab_local as tl ' +
                'where ' +
                '      tf.cod_fazenda = :cod_fazenda ' +
                '  and tl.cod_local = :cod_local ' +
                '  and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '  and tf.cod_pessoa_produtor = tl.cod_pessoa_produtor ' +
                '  and tf.cod_fazenda = tl.cod_fazenda ' +
                '  and tf.dta_fim_validade is null ' +
                '  and tl.dta_fim_validade is null ');
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local').AsInteger := CodLocal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(945, Self.ClassName, NomeMetodo, []);
         Result := -945;
         Exit;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(946, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -946;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

(* 20/01/2005 - Fábio - Este método não é mais utilizado.

function TIntEventos.ConsistirCriador(NumCNPJCPFPessoaSecundaria:String;
  CodEvento:Integer): Integer;
const
  NomeMetodo: String = 'ConsistirCriador';
var
  Q: THerdomQuery;
  CodPessoa: Integer;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  tp.cod_pessoa, ' +
                '  tpr.dta_efetivacao_cadastro ' +
                'from ' +
                '  tab_pessoa tp, tab_produtor as tpr ' +
                'where ' +
                '      tp.cod_pessoa = tpr.cod_pessoa_produtor ' +
                '  and tp.num_cnpj_cpf = :num_cnpj_cpf ' +
                '  and tp.dta_fim_validade is null ' +
                '  and tpr.dta_fim_validade is null ');
      Q.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoaSecundaria;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(1386, Self.ClassName, NomeMetodo, []);
         Result := -1386;
         Exit;
      end;
      CodPessoa := Q.fieldbyname('cod_pessoa').asinteger;
      if Q.fieldbyname('dta_efetivacao_cadastro').isnull then begin
         Mensagens.Adicionar(1387, Self.ClassName, NomeMetodo, []);
         Result := -1387;
         Exit;
      end;
      Q.SQL.clear;
      Q.SQL.Add('update tab_evento_venda_criador ' +
                ' set cod_pessoa = :cod_pessoa ' +
                ' where cod_evento =:cod_evento ' +
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.ParamByName('cod_evento').Asinteger := CodEvento;
      Q.ParamByName('cod_pessoa').asinteger := CodPessoa;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ExecSql;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1388, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1388;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;
*)

function TIntEventos.ConsistirAglomeracao(NumCNPJCPFPessoaSecundaria:String;
  CodEvento:Integer): Integer;
const
  NomeMetodo: String = 'ConsistirAglomeracao';
var
  Q: THerdomQuery;
  CodPessoa: Integer;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  tp.cod_pessoa ' +
                'from ' +
                '  tab_pessoa tp, tab_pessoa_papel as tpp ' +
                'where tpp.cod_pessoa = tp.cod_pessoa ' +
                '  and tpp.cod_papel = 7 ' +
                '  and tp.num_cnpj_cpf = :num_cnpj_cpf ' +
                '  and tp.dta_fim_validade is null ' +
                '  and tpp.dta_fim_validade is null ');
      Q.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoaSecundaria;
      Q.Open;

      if Q.IsEmpty then begin
         Mensagens.Adicionar(1443, Self.ClassName, NomeMetodo, []);
         Result := -1443;
         Exit;
      end;
      CodPessoa := Q.fieldbyname('cod_pessoa').asinteger;

      Q.SQL.clear;
      Q.SQL.Add('update tab_evento_transferencia ' +
                ' set cod_pessoa_destino = :cod_pessoa ' +
                ' where cod_evento =:cod_evento ' +
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.ParamByName('cod_evento').Asinteger := CodEvento;
      Q.ParamByName('cod_pessoa').asinteger := CodPessoa;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ExecSql;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1444, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1444;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.ConsistirMudancaLocal(CodLocal, CodFazenda, Codaptidao,
         CodRegAlimentarMamando, CodRegAlimentarDesmamado: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirMudancaLocal';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  1 ' +
                'from ' +
                '  tab_aptidao ' +
                'where ' +
                '  cod_aptidao = :cod_aptidao ' +
                '  and dta_fim_validade is null ');
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(543, Self.ClassName, NomeMetodo, []);
         Result := -543;
         Exit;
      end;

      Q.SQL.Clear;
      Q.SQL.Add('select 1 ');
      Q.SQL.Add(' from ');
      Q.SQL.Add('       tab_regime_alimentar as tr, ');
      Q.SQL.Add('       tab_local as tl, ');
      Q.SQL.Add('       tab_aptidao as ta, ');
      Q.SQL.Add('       tab_regime_alimentar_aptidao as tra, ');
      Q.SQL.Add('       tab_local_regime_alimentar as tlr ');
      Q.SQL.Add(' where tl.cod_fazenda = :cod_fazenda ');
      Q.SQL.Add(' and   tl.cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add(' and   tl.cod_local = :cod_local ');
      Q.SQL.Add(' and   ta.cod_aptidao = :cod_aptidao ');
      Q.SQL.Add(' and   tr.cod_regime_alimentar = :cod_regime_alimentar ');
      Q.SQL.Add(' and   tl.cod_local = tlr.cod_local ');
      Q.SQL.Add(' and   tl.cod_fazenda = tlr.cod_fazenda ');
      Q.SQL.Add(' and   tl.cod_pessoa_produtor = tlr.cod_pessoa_produtor ');
      Q.SQL.Add(' and   tr.cod_regime_alimentar = tlr.cod_regime_alimentar ');
      Q.SQL.Add(' and   tr.cod_regime_alimentar = tra.cod_regime_alimentar ');
      Q.SQL.Add(' and   ta.cod_aptidao = tra.cod_aptidao ');
      Q.SQL.Add(' and   tr.ind_animal_mamando in (''N'',''A'') ');
      Q.SQL.Add(' and   tl.dta_fim_validade is null ');
      Q.SQL.Add(' and   tr.dta_fim_validade is null ');
      Q.SQL.Add(' and   ta.dta_fim_validade is null ');
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local').AsInteger := CodLocal;
      Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegAlimentarDesmamado;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(947, Self.ClassName, NomeMetodo, []);
         Result := -947;
         Exit;
      end;

      if CodRegAlimentarMamando > 0 then begin
        Q.SQL.Clear;
        Q.SQL.Add('select 1 ');
        Q.SQL.Add(' from ');
        Q.SQL.Add('       tab_regime_alimentar as tr, ');
        Q.SQL.Add('       tab_local as tl, ');
        Q.SQL.Add('       tab_aptidao as ta, ');
        Q.SQL.Add('       tab_regime_alimentar_aptidao as tra, ');
        Q.SQL.Add('       tab_local_regime_alimentar as tlr ');
        Q.SQL.Add(' where tl.cod_fazenda = :cod_fazenda ');
        Q.SQL.Add(' and   tl.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add(' and   tl.cod_local = :cod_local ');
        Q.SQL.Add(' and   ta.cod_aptidao = :cod_aptidao ');
        Q.SQL.Add(' and   tr.cod_regime_alimentar = :cod_regime_alimentar ');
        Q.SQL.Add(' and   tl.cod_local = tlr.cod_local ');
        Q.SQL.Add(' and   tl.cod_fazenda = tlr.cod_fazenda ');
        Q.SQL.Add(' and   tl.cod_pessoa_produtor = tlr.cod_pessoa_produtor ');
        Q.SQL.Add(' and   tr.cod_regime_alimentar = tlr.cod_regime_alimentar ');
        Q.SQL.Add(' and   tr.cod_regime_alimentar = tra.cod_regime_alimentar ');
        Q.SQL.Add(' and   ta.cod_aptidao = tra.cod_aptidao ');
        Q.SQL.Add(' and   tr.ind_animal_mamando in (''S'',''A'') ');
        Q.SQL.Add(' and   tl.dta_fim_validade is null ');
        Q.SQL.Add(' and   tr.dta_fim_validade is null ');
        Q.SQL.Add(' and   ta.dta_fim_validade is null ');
        Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
        Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
        Q.ParamByName('cod_local').AsInteger := CodLocal;
        Q.ParamByName('cod_regime_alimentar').AsInteger := CodRegAlimentarMamando;
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.Open;
        if Q.IsEmpty then begin
           Mensagens.Adicionar(948, Self.ClassName, NomeMetodo, []);
           Result := -948;
           Exit;
        end;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(946, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -946;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.ConsistirTipoCausaMorte(CodTipoMorte, CodCausaMorte: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirTipoCausaMorte';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                 '  1 ' +
                 'from ' +
                 '  tab_tipo_morte as ttm, ' +
                 '  tab_causa_morte as tcm, ' +
                 '  tab_tipo_causa_morte as ttcm ' +
                 'where ' +
                 '      ttm.cod_tipo_morte = :cod_tipo_morte ' +
                 '  and tcm.cod_causa_morte = :cod_causa_morte ' +
                 '  and tcm.cod_causa_morte = ttcm.cod_causa_morte ' +
                 '  and ttm.cod_tipo_morte = ttcm.cod_tipo_morte ' +
                 '  and ttm.dta_fim_validade is null ');
      Q.ParamByName('cod_tipo_morte').AsInteger := CodTipoMorte;
      Q.ParamByName('cod_causa_morte').AsInteger := CodCausaMorte;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(939, Self.ClassName, NomeMetodo, []);
         Result := -939;
         Exit;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(940, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -940;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.ConsistirMudancaCategoriaAnimal(CodTipoEvento, CodAptidao,
  CodCategoriaOrigem, CodCategoriaDestino: Integer): Integer;
const
  NomeMetodo: String = 'ConsistirMudancaCategoriaAnimal';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  1 ' +
                'from ' +
                '  tab_aptidao ta ' +
                '  , tab_categoria_animal tcao ' +
                '  , tab_categoria_animal tcad ' +
                '  , tab_tipo_evento tte ' +
                '  , tab_mudanca_categoria_animal tmca ' +
                'where ' +
                '  tmca.cod_tipo_evento = :cod_tipo_evento ' +
                '  and tmca.cod_aptidao = :cod_aptidao ' +
                '  and tmca.cod_categoria_origem = :cod_categoria_origem ' +
                '  and tmca.cod_categoria_destino = :cod_categoria_destino ' +
                '  and ta.cod_aptidao = tmca.cod_aptidao ' +
                '  and ta.cod_aptidao = tmca.cod_aptidao ' +
                '  and ta.dta_fim_validade is null ' +
                '  and tcao.cod_categoria_animal = tmca.cod_categoria_origem ' +
                '  and tcao.dta_fim_validade is null ' +
                '  and tcad.cod_categoria_animal = tmca.cod_categoria_destino ' +
                '  and tcad.dta_fim_validade is null ' +
                '  and tte.cod_tipo_evento = tmca.cod_tipo_evento ' +
                '  and tte.dta_fim_validade is null ');
      Q.ParamByName('cod_tipo_evento').AsInteger := CodTipoEvento;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_categoria_origem').AsInteger := CodCategoriaOrigem;
      Q.ParamByName('cod_categoria_destino').AsInteger := CodCategoriaDestino;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(841, Self.ClassName, NomeMetodo, []);
        Result := -841;
        Exit;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(840, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -840;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.PesquisarRelatorioConsolidado(EQuery: THerdomQuery; SglProdutor,
  NomPessoaProdutor, CodSituacaoSisbov: String; CodGrupoEvento: Integer;
  CodTipoEvento: String; CodTipoSubEventoSanitario: Integer; DtaInicio,
  DtaFim: TDateTime; TxtDados: String; CodTarefa: Integer;
  DtaInicioCadastro, DtaFimCadastro,
  DtaInicioEfetivacao, DtaFimEfetivacao: TDateTime): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioConsolidado';
  CodRelatorio: Integer = 4;
var
  sAux: String;
  iAux: Integer;  
  IntRelatorios: TIntRelatorios;
  bPersonalizavel, bGroupBy, bAux: Boolean;
  Param : TValoresParametro;
  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then
    begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then
      begin
        EQuery.SQL.Text := EQuery.SQL.Text + Linha;
      end;
    end;
  end;
  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do
    begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then
    begin
      SQL(Linha, 0);
    end;
  end;
begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    Param.Clear;
    if CodTipoEvento <> '' then begin
      Result := VerificaParametroMultiValor(CodTipoEvento, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

{$IFDEF MSSQL}
    EQuery.SQL.Clear;

    { Cria temporária caso não exista }
    EQuery.SQL.Text :=
      #13#10'if object_id(''tempdb..#tmp_eventos_rel_consolidado'') is null '+
      #13#10'  create table #tmp_eventos_rel_consolidado '+
      #13#10'  ( '+
      #13#10'    CodPessoaProdutor int not null '+
      #13#10'    , SglProdutor char(5) null '+
      #13#10'    , NomPessoaProdutor varchar(50) null '+
      #13#10'    , CodSituacaoSisbov char(1) null '+
      #13#10'    , DesSituacaoSisbov varchar(15) null '+
      #13#10'    , DiaInicio smalldatetime null '+
      #13#10'    , DiaFim smalldatetime null '+
      #13#10'    , MesInicio smalldatetime null '+
      #13#10'    , MesFim smalldatetime null '+
      #13#10'    , AnoInicio smalldatetime null '+
      #13#10'    , AnoFim smalldatetime null '+
      #13#10'    , SglGrupoEvento char(2) null '+
      #13#10'    , DesGrupoEvento varchar(15) null '+
      #13#10'    , SglTipoEvento char(2) null '+
      #13#10'    , DesTipoEvento varchar(30) null '+
      #13#10'    , cod_entrada_insumo int null '+
      #13#10'    , cod_tipo_sub_evento_sanitario int null '+
      #13#10'    , SglTipoSubEventoSanitario char(2) null '+
      #13#10'    , DesTipoSubEventoSanitario varchar(30) null '+
      #13#10'    , TxtDados text null '+
      #13#10'    , cod_fazenda int null '+
      #13#10'    , NomLugar varchar(75) null '+
      #13#10'    , QtdAnimais int not null '+
      #13#10'  ) ';
    EQuery.ExecSQL;

    { Garantindo que a tabela não possui registros, caso ela já existisse }
    EQuery.SQL.Text :=
      #13#10'truncate table #tmp_eventos_rel_consolidado ';

    { Insere registros que atendem aos critérios }
    EQuery.ExecSQL;
    EQuery.SQL.Clear;
    SQL('insert into #tmp_eventos_rel_consolidado ', 0);
    SQL('  ( ', 0);
    SQL('    CodPessoaProdutor ', 0);
    SQL('    , SglProdutor ', 1);
    SQL('    , NomPessoaProdutor ', 2);
    SQL('    , CodSituacaoSisbov ', 3);
    SQL('    , DesSituacaoSisbov ', 4);
    SQL('    , DiaInicio ', 5);
    SQL('    , DiaFim ', 6);
    SQL('    , MesInicio ', 7);
    SQL('    , MesFim ', 8);
    SQL('    , AnoInicio ', 9);
    SQL('    , AnoFim ', 10);
    SQL('    , SglGrupoEvento ', 11);
    SQL('    , DesGrupoEvento ', 12);
    SQL('    , SglTipoEvento ', 13);
    SQL('    , DesTipoEvento ', 14);

    if CodTipoSubEventoSanitario <> -1 then
    begin
      SQL('    , cod_entrada_insumo ', 0);
    end
    else
    begin
      SQL('    , cod_entrada_insumo ', [15, 16]);
    end;
    
    SQL('    , TxtDados ', 17);
    SQL('    , cod_fazenda ', 18);
    SQL('    , QtdAnimais', 19);
    SQL('   ) ', 0);
    { Seleciona os registros que atendem aos critérios de pesquisa }
    SQL('select ', 0);
    SQL('  te.cod_pessoa_produtor as CodPessoaProdutor ', 0);
    SQL('  , tp.sgl_produtor as SglProdutor', 1);
    SQL('  ,   case when len(tpp.nom_pessoa) > 50 then '+
        '    left(tpp.nom_pessoa, 47) + ''...'' '+
        '  else '+
        '    left(tpp.nom_pessoa, 50) '+
        '  end as NomPessoaProdutor ', 2);
    SQL('  , te.cod_situacao_sisbov as CodSituacaoSisbov', 3);
    SQL('  , tss.des_situacao_sisbov as DesSituacaoSisbov', 4);
    SQL('  , te.dta_inicio as DiaInicio', 5);
    SQL('  , te.dta_fim as DiaFim', 6);
    SQL('  , te.dta_inicio as MesInicio', 7);
    SQL('  , te.dta_fim as MesFim', 8);
    SQL('  , te.dta_inicio as AnoInicio', 9);
    SQL('  , te.dta_fim as AnoFim', 10);
    SQL('  , tge.sgl_grupo_evento as SglGrupoEvento', 11);
    SQL('  , tge.des_grupo_evento as DesGrupoEvento', 12);
    SQL('  , tte.sgl_tipo_evento as SglTipoEvento', 13);
    SQL('  , tte.des_tipo_evento as DesTipoEvento', 14);

    if CodTipoSubEventoSanitario <> -1 then
    begin
      SQL('  , tes.cod_entrada_insumo as cod_entrada_insumo', 0);
    end
    else
    begin
      SQL('  , tes.cod_entrada_insumo as cod_entrada_insumo', [15, 16]);
    end;

    SQL('  , te.txt_dados as TxtDados', 17);
    SQL('  , te.cod_fazenda as cod_fazenda', 18);
    SQL('  , te.qtd_animais ', 19);
    SQL('from', 0);
    SQL('  tab_evento te with (nolock) ', 0);
    SQL('  , tab_produtor tp with (nolock) ', SE(SglProdutor <> '', 0, 1));
    SQL('  , tab_pessoa tpp with (nolock) ', SE(NomPessoaProdutor <> '', 0, 2));
    SQL('  , tab_situacao_sisbov tss', 4);
    SQL('  , tab_grupo_evento tge', [11, 12]);

    if CodGrupoEvento <> -1 then
    begin
      SQL('  , tab_tipo_evento tte', 0);
    end
    else
    begin
      SQL('  , tab_tipo_evento tte', [11, 12, 13, 14]);
    end;

    if CodTipoSubEventoSanitario <> -1 then
    begin
      SQL('  , tab_evento_sanitario tes with (nolock) ', 0);
    end
    else
    begin
      SQL('  , tab_evento_sanitario tes with (nolock) ', [15, 16]);
    end;

    SQL('where ', 0);
    SQL('  te.cod_evento is not null ', 0);

    if CodTipoSubEventoSanitario <> -1 then
    begin
      SQL('  and tes.cod_pessoa_produtor = te.cod_pessoa_produtor', 0);
      SQL('  and tes.cod_evento = te.cod_evento', 0);
    end
    else
    begin
      SQL('  and tes.cod_pessoa_produtor =* te.cod_pessoa_produtor', [15, 16]);
      SQL('  and tes.cod_evento =* te.cod_evento', [15, 16]);
    end;

    SQL('  and tge.cod_grupo_evento = tte.cod_grupo_evento', [11, 12]);

    if CodGrupoEvento <> -1 then
    begin
      SQL('  and tte.cod_tipo_evento = te.cod_tipo_evento ', 0);
    end
    else
    begin
      SQL('  and tte.cod_tipo_evento = te.cod_tipo_evento ', [11, 12, 13, 14]);
    end;

    SQL('  and te.cod_tipo_evento in ('+ CodTipoEvento +') ', SE(CodTipoEvento <> '', 0, -1));
    SQL('  and tss.cod_situacao_sisbov = te.cod_situacao_sisbov', 4);
    SQL('  and tpp.cod_pessoa = te.cod_pessoa_produtor', SE(NomPessoaProdutor <> '' ,0 ,2));
    SQL('  and tp.cod_pessoa_produtor = te.cod_pessoa_produtor', SE(SglProdutor <> '', 0, 1));
    SQL('  and tp.sgl_produtor like :sgl_produtor ', SE(SglProdutor <> '', 0, -1));
    SQL('  and tpp.nom_pessoa like :nom_pessoa_produtor ', SE(NomPessoaProdutor <> '', 0, -1));
    SQL('  and te.cod_situacao_sisbov = :cod_situacao_sisbov ', SE(CodSituacaoSisbov <> '', 0, -1));
    SQL('  and tte.cod_grupo_evento = :cod_grupo_evento ', SE(CodGrupoEvento <> -1, 0, -1));
    SQL('  and ((te.dta_inicio >= :dta_inicio and te.dta_inicio < :dta_fim ) '+
        '   or (te.dta_fim >= :dta_inicio and te.dta_fim < :dta_fim )) ', SE((DtaInicio > 0) and (DtaFim > 0), 0, -1));

    if (DtaInicioCadastro > 0) and (DtaFimCadastro > 0) then
      SQL('  and (te.dta_cadastramento >= :dta_inicio_cadastramento and te.dta_cadastramento < :dta_fim_cadastramento ) ', SE((DtaInicioCadastro > 0) and (DtaFimCadastro > 0), 0, -1));
    if (DtaInicioEfetivacao > 0) and (DtaFimEfetivacao > 0) then
      SQL('  and (te.dta_efetivacao_cadastro >= :dta_inicio_efetivacao and te.dta_efetivacao_cadastro < :dta_fim_efetivacao ) ', SE((DtaInicioEfetivacao > 0) and (DtaFimEfetivacao > 0), 0, -1));

    SQL('  and te.txt_dados like :txt_dados ', SE(TxtDados <> '', 0, -1));
    { Aplica restrições quanto ao tipo de acesso do usuário }

    if (Conexao.CodPapelUsuario = 1) and (Conexao.CodTipoAcesso = 'C') then // Associacao
    begin
      SQL('   and te.cod_pessoa_produtor in (select Cod_pessoa_produtor from tab_associacao_produtor where cod_pessoa_associacao = :cod_pessoa ) ', 0);
    end
    else if (Conexao.CodPapelUsuario = 3) and (Conexao.CodTipoAcesso = 'C') then // Tecnico
    begin
      SQL('   and te.cod_pessoa_produtor in (select Cod_pessoa_produtor from tab_tecnico_produtor where cod_pessoa_tecnico = :cod_pessoa and dta_fim_validade is null ) ', 0)
    end
    else if (Conexao.CodPapelUsuario = 4) and (Conexao.CodTipoAcesso ='P') then // Produtor
    begin
      SQL('   and te.cod_pessoa_produtor = :cod_pessoa ', 0)
    end
    else if (Conexao.CodPapelUsuario = 9) and (Conexao.CodTipoAcesso = 'C') then // Gestor
    begin
      SQL('   and te.cod_pessoa_produtor in (select ttp.cod_pessoa_produtor from tab_tecnico_produtor ttp, tab_tecnico tt ', 0);
      SQL('                                   where ttp.cod_pessoa_tecnico = tt.cod_pessoa_tecnico and ttp.dta_fim_validade is null and tt.dta_fim_validade is null and tt.cod_pessoa_gestor = :cod_pessoa) ', 0);
    end
    else if Conexao.CodTipoAcesso = 'N' then // Não tem acesso
    begin
      SQL('   and te.cod_pessoa_produtor = :cod_pessoa ', 0);
    end;
    {$ENDIF}

    { Atribuição de valores dos critérios de pesquisa informados }
    if SglProdutor <> '' then
    begin
      EQuery.ParamByName('sgl_produtor').AsString := SglProdutor + '%';
    end;
    if NomPessoaProdutor <> '' then
    begin
      EQuery.ParamByName('nom_pessoa_produtor').AsString := NomPessoaProdutor + '%';
    end;
    if CodSituacaoSisbov <> '' then
    begin
      EQuery.ParamByName('cod_situacao_sisbov').AsString := CodSituacaoSisbov;
    end;
    if CodGrupoEvento <> -1 then
    begin
      EQuery.ParamByName('cod_grupo_evento').AsInteger := CodGrupoEvento
    end;
    if (DtaInicio > 0) and (DtaFim > 0) then
    begin
      EQuery.ParamByName('dta_inicio').AsDateTime := Trunc(DtaInicio);
      EQuery.ParamByName('dta_fim').AsDateTime := Trunc(DtaFim)+1;
    end;

    if (DtaInicioCadastro > 0) and (DtaFimCadastro > 0) then
    begin
      EQuery.ParamByName('dta_inicio_cadastramento').AsDateTime := Trunc(DtaInicioCadastro);
      EQuery.ParamByName('dta_fim_cadastramento').AsDateTime := Trunc(DtaFimCadastro)+1;
    end;
    if (DtaInicioEfetivacao > 0) and (DtaFimEfetivacao > 0) then
    begin
      EQuery.ParamByName('dta_inicio_efetivacao').AsDateTime := Trunc(DtaInicioEfetivacao);
      EQuery.ParamByName('dta_fim_efetivacao').AsDateTime := Trunc(DtaFimEfetivacao)+1;
    end;

    if TxtDados <> '' then
    begin
      EQuery.ParamByName('txt_dados').AsString := '%' + TxtDados + '%';
    end;
    if ((Conexao.CodPapelUsuario = 1) and (Conexao.CodTipoAcesso = 'C')) // Associacao
    or ((Conexao.CodPapelUsuario = 3) and (Conexao.CodTipoAcesso = 'C')) // Tecnico
    or ((Conexao.CodPapelUsuario = 4) and (Conexao.CodTipoAcesso = 'P')) //Produtor
    or ((Conexao.CodPapelUsuario = 9) and (Conexao.CodTipoAcesso = 'C')) //Produtor
    then begin
      EQuery.ParamByName('cod_pessoa').AsInteger := Conexao.CodPessoa;
    end else if (Conexao.CodTipoAcesso = 'N') then begin
      EQuery.ParamByName('cod_pessoa').AsInteger := -1;
    end;
    try

{$IFDEF MSSQL}
      EQuery.ExecSQL;
      { Atualiza campos referentes ao tipo do sub evento sanitario}
      if (IntRelatorios.CampoAssociado(15) = 1)
      or (IntRelatorios.CampoAssociado(16) = 1)
      or (CodTipoSubEventoSanitario <> -1) then begin
        Query.SQL.Clear;
        SQL('update #tmp_eventos_rel_consolidado '+
            '  set '+
            '    cod_tipo_sub_evento_sanitario = ttses.cod_tipo_sub_evento_sanitario '+
            '    , SglTipoSubEventoSanitario = ttses.sgl_tipo_sub_evento_sanitario '+
            '    , DesTipoSubEventoSanitario = ttses.des_tipo_sub_evento_sanitario '+
            '  from '+
            '    tab_entrada_insumo tei '+
            '    , tab_tipo_insumo tti '+
            '    , tab_tipo_sub_evento_sanitario ttses '+
            '  where '+
            '    ttses.cod_tipo_sub_evento_sanitario = tti.cod_tipo_sub_evento_sanitario '+
            '    and tti.cod_tipo_insumo = tei.cod_tipo_insumo '+
            '    and tei.cod_pessoa_produtor = #tmp_eventos_rel_consolidado.CodPessoaProdutor '+
            '    and tei.cod_entrada_insumo = #tmp_eventos_rel_consolidado.cod_entrada_insumo ', 0);
        EQuery.ExecSQL;
      end;
      { Atualiza campo lugar }
      if IntRelatorios.CampoAssociado(18) = 1 then begin
        EQuery.SQL.Clear;
        SQL('update #tmp_eventos_rel_consolidado '+
            '  set '+
            '    NomLugar = '+
            '      case when tf.cod_propriedade_rural is null then '+
            '        tf.nom_fazenda '+
            '      else '+
            '        tpr.nom_propriedade_rural + '' '' + tpr.num_imovel_receita_federal '+
            '        + '' '' + IsNull(CAST(tls.cod_localizacao_sisbov AS VARCHAR(10)), '''') '+
            '      end '+
            '  from '+
            '    tab_fazenda tf '+
            '      left join tab_localizacao_sisbov tls '+
            '        on  tf.cod_propriedade_rural = tls.cod_propriedade_rural '+
            '        and tf.cod_pessoa_produtor = tls.cod_pessoa_produtor '+
            '    , tab_propriedade_rural tpr '+
            '  where '+
            '    tpr.cod_propriedade_rural = tf.cod_propriedade_rural '+
            '    and tf.cod_fazenda = #tmp_eventos_rel_consolidado.cod_fazenda '+
            '    and tf.cod_pessoa_produtor = #tmp_eventos_rel_consolidado.CodPessoaProdutor ', 0);
//        Query.SQL.SaveToFile('C:\Tmp\Update.sql');
        EQuery.ExecSQL;
      end;
      EQuery.SQL.Clear;
      SQL('select ', 0);
      SQL('  null ', 0);
      bGroupBy := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        if (IntRelatorios.ValorCampo('NomField') <> 'QtdAnimais') then begin
          sAux := '  , '+
              SE(IntRelatorios.ValorCampo('NomField') = 'TxtDados'
//                 , 'CAST('+IntRelatorios.ValorCampo('NomField')+' as VARCHAR(8000)) as TxtDados'

                 , 'CONVERT(VARCHAR(8000), '+IntRelatorios.ValorCampo('NomField')+') as TxtDados'

                 , IntRelatorios.ValorCampo('NomField'));
          if SQL(sAux, SE(not bPersonalizavel
            or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
            or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
            and not(bGroupBy) then bGroupBy := True;
        end;
        IntRelatorios.IrAoProximo;
      end;
      SQL('  , sum(QtdAnimais) as QtdAnimais ', 0);
      SQL('from ', 0);
      SQL('  #tmp_eventos_rel_consolidado ', 0);
      SQL('where ', 0);
      SQL('  CodPessoaProdutor is not null ', 0);
      SQL('  and cod_tipo_sub_evento_sanitario = :cod_tipo_sub_evento_sanitario ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      if bGroupBy then begin
        SQL('group by ', 0);
        bAux := False;
        IntRelatorios.IrAoPrimeiro;
        while not IntRelatorios.EOF do begin
          if (IntRelatorios.ValorCampo('NomField') <> 'QtdAnimais') then begin
            sAux := SE(bAux, '  , ', '  ')+
              SE(IntRelatorios.ValorCampo('NomField') = 'TxtDados'
//                 , 'CAST('+IntRelatorios.ValorCampo('NomField')+' as VARCHAR(8000))'

                 , 'CONVERT(VARCHAR(8000), '+IntRelatorios.ValorCampo('NomField')+')'

                 , IntRelatorios.ValorCampo('NomField'));
            if SQL(sAux, SE(not bPersonalizavel
              or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
              or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
              and not(bAux) then bAux := True;
          end;
          IntRelatorios.IrAoProximo;
        end;
        SQL('order by ', 0);
        bAux := False;
        IntRelatorios.IrAoPrimeiro;
        while not IntRelatorios.EOF do begin
          if (IntRelatorios.ValorCampo('NomField') <> 'QtdAnimais') then begin
            sAux := SE(bAux, '  , ', '  ')+
              SE(IntRelatorios.ValorCampo('NomField') = 'TxtDados'
//                 , 'CAST('+IntRelatorios.ValorCampo('NomField')+' as VARCHAR(8000))'

                 , 'CONVERT(VARCHAR(8000), '+IntRelatorios.ValorCampo('NomField')+')'

                 , IntRelatorios.ValorCampo('NomField'));
            if SQL(sAux, SE(not bPersonalizavel
              or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
              or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
              and not(bAux) then bAux := True;
          end;
          IntRelatorios.IrAoProximo;
        end;
      end;
{$ENDIF}
      if CodTipoSubEventoSanitario <> -1 then begin
        EQuery.ParamByName('cod_tipo_sub_evento_sanitario').AsInteger := CodTipoSubEventoSanitario;
      end;

      EQuery.Open;
      Result := 0;
    except
      on E: exception do begin
        Rollback;
        iAux := Length(strExceedsTheConfiguredThreshold);
        if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
          Result := idExceedsTheConfiguredThreshold;
        end else begin
          Mensagens.Adicionar(1113, Self.ClassName, NomMetodo, [E.Message]);
          Result := -1113;
        end;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.PesquisarRelatorioAnimaisAplicados(
  CodSituacaoSisbovEvento: String; CodGrupoEvento,
  CodTipoEvento, CodTipoSubEventoSanitario, CodEvento: Integer;
  DtaInicioEvento, DtaFimEvento: TDateTime; CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim: String; CodPaisSisBov,
  CodEstadoSisBov: Integer; CodMicroRegiaoSisBov, CodAnimalSisbovInicio,
  CodAnimalSisbovFim: Integer; DtaNascimentoInicio, DtaNascimentoFim,
  DtaIdentificacaoInicio, DtaIdentificacaoFim: TDateTime; CodRaca, CodCategoria,
  IndSexo: String; CodTipoLugar: Integer; CodLocal, CodLote: String;
  IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; IndAnimaisNaoAssociados: String;
  var TotalizaEventos: TArrayOfTotalizaEvento;
  var QtdAnimais: Integer; SemTecnico: String; CodPessoaTecnico: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioAnimaisAplicados';
  CodRelatorio: Integer = 7;
var
  X: Integer;
  sAux: String;
  IntRelatorios: TIntRelatorios;
  bPersonalizavel: Boolean;
  Param : TValoresParametro;
  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        Query.SQL.Text := Query.SQL.Text + Linha;
      end;
    end;
  end;
  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;
begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodRaca <> '' then begin
      Result := VerificaParametroMultiValor(CodRaca, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategoria <> '' then begin
      Result := VerificaParametroMultiValor(CodCategoria, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLocal <> '' then begin
      Result := VerificaParametroMultiValor(CodLocal, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLote <> '' then begin
      Result := VerificaParametroMultiValor(CodLote, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    {$IFDEF MSSQL}
    Query.SQL.Clear;
    { Cria temporária caso não exista }
    Query.SQL.Text :=
      #13#10'if object_id(''tempdb..#tmp_eventos_aplicados_animais'') is null '+
      #13#10'  create table #tmp_eventos_aplicados_animais '+
      #13#10'  ( '+
      #13#10'    CodPessoaProdutor int '+
      #13#10'    , CodAnimal int '+
      #13#10'    , CodTipoEvento int null '+
      #13#10'    , CodEvento int null '+
      #13#10'    , CodSituacaoSisbovEvento char(1) null '+
      #13#10'    , DesSituacaoSisbovEvento varchar(15) null '+
      #13#10'    , DtaEvento smalldatetime null '+
      #13#10'    , MesEvento smalldatetime null '+
      #13#10'    , AnoEvento smalldatetime null '+
      #13#10'    , SglGrupoEvento char(2) null '+
      #13#10'    , DesGrupoEvento varchar(15) null '+
      #13#10'    , SglTipoEvento char(2) null '+
      #13#10'    , DesTipoEvento varchar(30) null '+
      #13#10'    , cod_entrada_insumo int null '+
      #13#10'    , cod_tipo_sub_evento_sanitario int null '+
      #13#10'    , SglTipoSubEventoSanitario char(2) null '+
      #13#10'    , DesTipoSubEventoSanitario varchar(30) null '+
      #13#10'    , CodAnimalManejo varchar(11) null '+
      #13#10'    , CodCertificadora varchar(20) null '+
      #13#10'    , CodAnimalSisBov varchar(17) null '+
      #13#10'    , DtaIdentificacaoSisbov smalldatetime null '+
      #13#10'    , DtaNascimento smalldatetime null '+
      #13#10'    , NomAnimal varchar(60) null '+
      #13#10'    , DesApelido varchar(20) null '+
      #13#10'    , SglRaca char(3) null '+
      #13#10'    , DesRaca varchar(35) null '+
      #13#10'    , IndSexo char(1) null '+
      #13#10'    , SglOrigem char(3) null '+
      #13#10'    , DesOrigem varchar(20) null '+
      #13#10'    , SglTipoLugar char(3) null '+
      #13#10'    , DesTipoLugar varchar(25) null '+
      #13#10'    , SglLote char(2) null '+
      #13#10'    , DesLote varchar(30) null '+
      #13#10'    , SglLocal char(2) null '+
      #13#10'    , DesLocal varchar(30) null '+
      #13#10'    , SglCategoria char(3) null '+
      #13#10'    , DesCategoria varchar(25) null '+
      #13#10'    , cod_fazenda_corrente int null '+
      #13#10'    , NomLugarCorrente varchar(69) null '+
      #13#10'    , Idade varchar(7) null '+
      #13#10'    , DesComposicaoRacial varchar(50) null '+
      #13#10'    , TxtDados varchar(8000) null '+
      #13#10'    , CodExportacaoEvento integer null '+
      #13#10'    , DtaEfetivacaoEvento smalldatetime null '+
      #13#10'    , DtaCadastramento smalldatetime null '+
      #13#10'  ) ';
    Query.ExecSQL;
    { Garantindo que a tabela não possui registros, caso ela já existisse }
    Query.SQL.Text :=
      #13#10'truncate table #tmp_eventos_aplicados_animais ';
    { Insere registros que atendem aos critérios }
    Query.ExecSQL;
    Query.SQL.Clear;
    SQL('insert into #tmp_eventos_aplicados_animais ', 0);
    SQL('  ( ', 0);
    SQL('    CodPessoaProdutor', 0);
    SQL('    , CodAnimal', 0);
    SQL('    , CodTipoEvento', 0);
    SQL('    , CodEvento', 12);
    SQL('    , CodSituacaoSisbovEvento', 1);
    SQL('    , DesSituacaoSisbovEvento', 2);
    SQL('    , DtaEvento', 3);
    SQL('    , MesEvento', 4);
    SQL('    , AnoEvento', 5);
    SQL('    , SglGrupoEvento', 6);
    SQL('    , DesGrupoEvento', 7);
    SQL('    , SglTipoEvento', 8);
    SQL('    , DesTipoEvento', 9);
    if CodTipoSubEventoSanitario <> -1 then begin
      SQL('    , cod_entrada_insumo', 0);
    end else begin
      SQL('    , cod_entrada_insumo', [10, 11]);
    end;
    SQL('    , CodAnimalManejo', 13);
    SQL('    , CodCertificadora', 14);
    SQL('    , CodAnimalSisBov', 15);
    SQL('    , DtaIdentificacaoSisbov', 16);
    SQL('    , DtaNascimento', 17);
    SQL('    , NomAnimal', 18);
    SQL('    , DesApelido', 19);
    SQL('    , SglRaca', 20);
    SQL('    , DesRaca', 21);
    SQL('    , IndSexo', 22);
    SQL('    , SglOrigem', 23);
    SQL('    , DesOrigem', 24);
    SQL('    , SglTipoLugar', 25);
    SQL('    , DesTipoLugar', 26);
    SQL('    , SglLote', 28);
    SQL('    , DesLote', 29);
    SQL('    , SglLocal', 30);
    SQL('    , DesLocal', 31);
    SQL('    , SglCategoria', 32);
    SQL('    , DesCategoria', 33);
    SQL('    , cod_fazenda_corrente', 27);
    SQL('    , NomLugarCorrente', 27);
    SQL('    , Idade', 34);
    SQL('    , DesComposicaoRacial ', 35);
    SQL('    , TxtDados ', 36);
    SQL('    , CodExportacaoEvento ', 37);
    SQL('    , DtaEfetivacaoEvento ', 38);
    SQL('    , DtaCadastramento ', 39);
    SQL('   ) ', 0);

    if IndAnimaisNaoAssociados <> 'S' then begin
      { Seleciona os animais associados ao(s) evento(s) identificado(s),
        ambos segundo o critério de pesquisa }
      SQL('select ', 0);
      SQL('  te.cod_pessoa_produtor as CodPessoaProdutor ', 0);
      SQL('  , ta.cod_animal as CodAnimal ', 0);
      SQL('  , te.cod_tipo_evento as CodTipoEvento ', 0);
      SQL('  , te.cod_evento as CodEvento ', 12);
      SQL('  , te.cod_situacao_sisbov as CodSituacaoSisbovEvento ', 1);
      SQL('  , tss.des_situacao_sisbov as DesSituacaoSisbovEvento ', 2);
      SQL('  , te.dta_inicio as DtaEvento ', 3);
      SQL('  , te.dta_inicio as MesEvento ', 4);
      SQL('  , te.dta_inicio as AnoEvento ', 5);
      SQL('  , tge.sgl_grupo_evento as SglGrupoEvento ', 6);
      SQL('  , tge.des_grupo_evento as DesGrupoEvento ', 7);
      SQL('  , tte.sgl_tipo_evento as SglTipoEvento ', 8);
      SQL('  , tte.des_tipo_evento as DesTipoEvento ', 9);
      if CodTipoSubEventoSanitario <> -1 then begin
        SQL('  , tes.cod_entrada_insumo ', 0);
      end else begin
        SQL('  , tes.cod_entrada_insumo ', [10, 11]);
      end;
      SQL('  , isnull(tfm.sgl_fazenda, '''') + '' '' + isnull(ta.cod_animal_manejo, '''') as CodAnimalManejo ', 13);
      SQL('  , ta.cod_animal_certificadora as CodCertificadora ', 14);

      SQL('  , convert(char(3), ta.cod_pais_sisbov) + ' +
                '   right(''00'' + convert(varchar(2), ta.cod_estado_sisbov), 2) + ' +
                '   CASE ta.cod_micro_regiao_sisbov WHEN 0 THEN  ' +
                '   ''00''  ' +
                '   WHEN -1 THEN  ' +
                '   ''''  ' +
                '   ELSE  ' +
                '   right(''00'' + convert(varchar(2), ta.cod_micro_regiao_sisbov), 2) ' +
                '   END + ' +
                '   right(''000000000'' + convert(varchar(9), ta.cod_animal_sisbov), 9) + ' +
                '   convert(varchar(1), ta.num_dv_sisbov) as CodAnimalSisbov ', 15);

      SQL('  , ta.dta_identificacao_sisbov as DtaIdentificacaoSisbov ', 16);
      SQL('  , ta.dta_nascimento as DtaNascimento ', 17);
      SQL('  , ta.nom_animal as NomAnimal ', 18);
      SQL('  , ta.des_apelido as DesApelido ', 19);
      SQL('  , tr.sgl_raca as SglRaca ', 20);
      SQL('  , tr.des_raca as DesRaca ', 21);
      SQL('  , ta.ind_sexo as IndSexo ', 22);
      SQL('  , tto.sgl_tipo_origem as SglOrigem ', 23);
      SQL('  , tto.des_tipo_origem as DesOrigem ', 24);
      SQL('  , ttl.sgl_tipo_lugar as SglTipoLugar ', 25);
      SQL('  , ttl.des_tipo_lugar as DesTipoLugar ', 26);
      SQL('  , tlt.sgl_lote as SglLote ', 28);
      SQL('  , tlt.des_lote as DesLote ', 29);
      SQL('  , tlc.sgl_local as SglLocal ', 30);
      SQL('  , tlc.des_local as DesLocal ', 31);
      SQL('  , tca.sgl_categoria_animal as SglCategoria ', 32);
      SQL('  , tca.des_categoria_animal as DesCategoria ', 33);
      SQL('  , case when ta.cod_tipo_lugar = 1 then ' +
          '      ta.cod_fazenda_corrente ' +
          '    else ' +
          '      null ' +
          '    end as cod_fazenda_corrente ', 27);
      SQL('  , case when ta.cod_tipo_lugar = 1 then ' +
          '      null ' +
          '    when ta.cod_tipo_lugar = 2 then ' +
          '      case when ta.cod_propriedade_corrente is null then ' +
          '        ta.num_imovel_corrente ' +
          '      else ' +
          '        tprc.nom_propriedade_rural + '' '' + IsNull(tprc.num_imovel_receita_federal, '''') ' +
          '      end ' +
          '    when ta.cod_tipo_lugar = 3 then ' +
          '      case when ta.cod_pessoa_corrente is not null then ' +
          '        rtrim(left(tpc.nom_pessoa, 49)) + '' '' + ' +
          '        case tpc.cod_natureza_pessoa when ''F'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
          '          substring(tpc.num_cnpj_cpf, 10, 2)) ' +
          '        when ''J'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
          '          substring(tpc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
          '          substring(tpc.num_cnpj_cpf, 13, 2)) ' +
          '        else ' +
          '          tpc.num_cnpj_cpf ' +
          '        end ' +
          '      when ta.cod_pessoa_secundaria_corrente is not null then ' +
          '        tpsc.nom_pessoa_secundaria + '' '' + ' +
          '        case tpsc.cod_natureza_pessoa when ''F'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpsc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 10, 2)) ' +
          '        when ''J'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpsc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 13, 2)) ' +
          '        else ' +
          '          tpsc.num_cnpj_cpf ' +
          '        end ' +
          '      else ' +
          '        case len(ta.num_cnpj_cpf_corrente) when 11 then ' +
          '          convert(varchar(18), ' +
          '          substring(ta.num_cnpj_cpf_corrente, 1, 3) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 4, 3) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 7, 3) + ''-'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 10, 2)) ' +
          '        when 14 then ' +
          '          convert(varchar(18), ' +
          '          substring(ta.num_cnpj_cpf_corrente, 1, 2) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 3, 3) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 6, 3) + ''/'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 9, 4) + ''-'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 13, 2)) ' +
          '        else ' +
          '          ta.num_cnpj_cpf_corrente ' +
          '        end ' +
          '      end ' +
          '    else ' +
          '      null ' +
          '    end as NomLugarCorrente ', 27);
      SQL('  , dbo.fnt_idade(ta.dta_nascimento, getdate()) as Idade ', 34);
      SQL('  , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ',35);
      SQL('  , replace(convert(varchar(8000), te.txt_dados),char(13)+char(10),'' '') as TxtDados ', 36);
      SQL('  , tae.cod_arquivo_sisbov as CodExportacaoEvento ', 37);
      SQL('  , cast(te.dta_efetivacao_cadastro as smalldatetime) as DtaEfetivacaoEvento ', 38);
      SQL('  , cast(tae.dta_aplicacao_evento as smalldatetime) as DtaCadastramento ', 39);      
      SQL('from ', 0);
      SQL('  tab_evento te with (nolock) ', 0);
      SQL('  , tab_situacao_sisbov tss', 2);
      SQL('  , tab_grupo_evento tge ', [6, 7]);
      if CodGrupoEvento <> -1 then begin
        SQL('  , tab_tipo_evento tte ', 0);
      end else begin
        SQL('  , tab_tipo_evento tte ', [6, 7, 8, 9]);
      end;
      if CodTipoSubEventoSanitario <> -1 then begin
        SQL('  , tab_evento_sanitario tes with (nolock) ', 0);
      end else begin
        SQL('  , tab_evento_sanitario tes with (nolock) ', [10, 11]);
      end;
      SQL('  , tab_animal_evento tae with (nolock) ', 0);
      SQL('  , tab_animal ta with (nolock) ', 0);
      SQL('  , tab_fazenda tfm with (nolock) ', 13);
      SQL('  , tab_raca tr ', [20, 21]);
      SQL('  , tab_tipo_origem tto ', [23, 24]);
      SQL('  , tab_tipo_lugar ttl ', [25, 26]);
      SQL('  , tab_lote tlt with (nolock) ', [28, 29]);
      SQL('  , tab_local tlc with (nolock) ', [30, 31]);
      SQL('  , tab_categoria_animal tca ', [32, 33]);
      SQL('  , tab_propriedade_rural tprc with (nolock) ', 27);
      SQL('  , tab_pessoa_secundaria tpsc with (nolock) ', 27);
      SQL('  , tab_pessoa tpc with (nolock) ', 27);
      if IndAgrupRaca1 = 'N' then
         SQL('  , tab_composicao_racial as tcr with (nolock) ', 0);
      if IndAgrupRaca2 = 'N' then
         SQL('  , tab_composicao_racial as tcr2 with (nolock) ', 0);
      if IndAgrupRaca3 = 'N' then
         SQL('  , tab_composicao_racial as tcr3 with (nolock) ', 0);
      if IndAgrupRaca4 = 'N' then
         SQL('  , tab_composicao_racial as tcr4 with (nolock) ', 0);
      SQL('where ', 0);
      SQL('  te.cod_pessoa_produtor is not null ', 0);
      SQL('  and tss.cod_situacao_sisbov = te.cod_situacao_sisbov ', 2);
      SQL('  and tge.cod_grupo_evento = tte.cod_grupo_evento ', [6, 7]);
      if CodGrupoEvento <> -1 then begin
        SQL('  and tte.cod_tipo_evento = te.cod_tipo_evento ', 0);
      end else begin
        SQL('  and tte.cod_tipo_evento = te.cod_tipo_evento ', [6, 7, 8, 9]);
      end;
      if CodTipoSubEventoSanitario <> -1 then begin
        SQL('  and tes.cod_pessoa_produtor =* te.cod_pessoa_produtor ', 0);
        SQL('  and tes.cod_evento =* te.cod_evento ', 0);
      end else begin
        SQL('  and tes.cod_pessoa_produtor =* te.cod_pessoa_produtor ', [10, 11]);
        SQL('  and tes.cod_evento =* te.cod_evento ', [10, 11]);
      end;
      SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ', 0);
      SQL('  and tae.cod_evento = te.cod_evento ', 0);
      SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ', 0);
      SQL('  and ta.cod_animal = tae.cod_animal ', 0);
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', 13);
      SQL('  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ', 13);
      SQL('  and tr.cod_raca = ta.cod_raca ', [20, 21]);
      SQL('  and tto.cod_tipo_origem = ta.cod_tipo_origem ', [23, 24]);
      SQL('  and ttl.cod_tipo_lugar =* ta.cod_tipo_lugar ', [25, 26]);
      SQL('  and tlt.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', [28, 29]);
      SQL('  and tlt.cod_fazenda =* ta.cod_fazenda_corrente ', [28, 29]);
      SQL('  and tlt.cod_lote =* ta.cod_lote_corrente ', [28, 29]);
      SQL('  and tlc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', [30, 31]);
      SQL('  and tlc.cod_fazenda =* ta.cod_fazenda_corrente ', [30, 31]);
      SQL('  and tlc.cod_local =* ta.cod_local_corrente ', [30, 31]);
      SQL('  and tca.cod_categoria_animal =* ta.cod_categoria_animal ', [32, 33]);
      SQL('  and tprc.cod_propriedade_rural =* ta.cod_propriedade_corrente ', 27);
      SQL('  and tpsc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', 27);
      SQL('  and tpsc.cod_pessoa_secundaria =* ta.cod_pessoa_secundaria_corrente ', 27);
      SQL('  and tpc.cod_pessoa =* ta.cod_pessoa_corrente ', 27);
      SQL('  and te.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and te.cod_situacao_sisbov = :cod_situacao_sisbov ', SE(CodSituacaoSisbovEvento <> '', 0, -1));
      SQL('  and tte.cod_grupo_evento = :cod_grupo_evento ', SE(CodGrupoEvento <> -1, 0, -1));
      SQL('  and tte.cod_tipo_evento = :cod_tipo_evento ', SE(CodTipoEvento <> -1, 0, -1));
      SQL('  and te.cod_evento = :cod_evento ', SE(CodEvento <> -1, 0, -1));
      SQL('  and ((te.dta_inicio >= :dta_inicio_evento and te.dta_inicio < :dta_fim_evento ) ' +
          '        or (te.dta_fim >= :dta_inicio_evento and te.dta_fim < :dta_fim_evento )) ', SE((DtaInicioEvento > 0) and (DtaFimEvento > 0), 0, -1));
      SQL('  and ta.cod_fazenda_manejo = :cod_fazenda_manejo ', SE(CodFazendaManejo <> -1, 0, -1));
      SQL('  and ta.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', SE((CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> ''), 0, -1));
      SQL('  and ta.cod_pais_sisbov = :cod_pais_sisbov ', SE(CodPaisSisbov <> -1, 0, -1));
      SQL('  and ta.cod_estado_sisbov = :cod_estado_sisbov ', SE(CodEstadoSisbov <> -1, 0, -1));
      SQL('  and ta.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ', SE(CodMicroRegiaoSisbov <> -1, 0, -1));
      SQL('  and ta.cod_animal_sisbov between :cod_animal_sisbov_inicio and :cod_animal_sisbov_fim ', SE((CodAnimalSisbovInicio > 0) and (CodAnimalSisbovFim > 0), 0, -1));
      SQL('  and ta.dta_nascimento >= :dta_nascimento_inicio and ta.dta_nascimento < :dta_nascimento_fim ', SE((DtaNascimentoInicio > 0) and (DtaNascimentoFim > 0), 0, -1));
      SQL('  and ta.dta_identificacao_sisbov >= :dta_identificacao_sisbov_inicio and ta.dta_identificacao_sisbov < :dta_identificacao_sisbov_fim ', SE((DtaIdentificacaoInicio > 0) and (DtaIdentificacaoFim > 0), 0, -1));
      SQL('  and ta.cod_raca in ( ' + CodRaca + ' ) ', SE(CodRaca <> '', 0, -1));
      SQL('  and ta.cod_categoria_animal in ( ' + CodCategoria + ' ) ', SE(CodCategoria <> '', 0, -1));
      SQL('  and ta.ind_sexo = :ind_sexo ', SE(IndSexo <> '', 0, -1));
      SQL('  and ta.cod_tipo_lugar in (2, 3) ', SE(CodTipoLugar = 23, 0, -1));
      SQL('  and ta.cod_tipo_lugar = :cod_tipo_lugar ', SE((CodTipoLugar <> -1) and (CodTipoLugar <> 23), 0, -1));
      SQL('  and ta.cod_local_corrente in ( ' + CodLocal + ' )', SE(CodLocal <> '', 0, -1));
      SQL('  and ta.cod_lote_corrente in ( ' + CodLote + ' )', SE(CodLote <> '', 0, -1));
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and ta.cod_animal = tcr.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and ta.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and ta.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and ta.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;
      
      if SemTecnico    = 'S' then begin
         SQL('  and ta.cod_pessoa_tecnico is null ', 0);
      end else begin
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico or ta.cod_pessoa_tecnico is null) ', 0);
        end else if CodPessoaTecnico > 0 then begin
          SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico) ', 0);
        end;
      end;

      if IndAgrupRaca1 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
    end else begin
      { Seleciona os animais que não foram associados ao(s) evento(s)
        identificado(s), ambos segundo o critério de pesquisa }
      SQL('select ', 0);
      SQL('  ta.cod_pessoa_produtor as CodPessoaProdutor ', 0);
      SQL('  , ta.cod_animal as CodAnimal ', 0);
      SQL('  , NULL as CodTipoEvento ', 0);
      SQL('  , NULL as CodEvento ', 12);
      SQL('  , NULL as CodSituacaoSisbovEvento ', 1);
      SQL('  , NULL as DesSituacaoSisbovEvento ', 2);
      SQL('  , NULL as DtaEvento ', 3);
      SQL('  , NULL as MesEvento ', 4);
      SQL('  , NULL as AnoEvento ', 5);
      SQL('  , NULL as SglGrupoEvento ', 6);
      SQL('  , NULL as DesGrupoEvento ', 7);
      SQL('  , NULL as SglTipoEvento ', 8);
      SQL('  , NULL as DesTipoEvento ', 9);
      SQL('  , NULL as SglTipoSubEventoSanitario ', 10);
      SQL('  , NULL as DesTipoSubEventoSanitario  ', 11);
      SQL('  , isnull(tfm.sgl_fazenda, '''') + '' '' + isnull(ta.cod_animal_manejo, '''') as CodAnimalManejo ', 13);
      SQL('  , ta.cod_animal_certificadora as CodCertificadora ', 14);

      SQL('  , case ta.cod_animal_sisbov ' +
          '      when null then null '+
          '      else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + ' +
          '   CASE ta.cod_micro_regiao_sisbov WHEN 0 THEN  ' +
          '   ''00''  ' +
          '   WHEN -1 THEN  ' +
          '   ''''  ' +
          '   ELSE  ' +
          '   right(''00'' + convert(varchar(2), ta.cod_micro_regiao_sisbov), 2) ' +
          '   END + ' +
          '   right(''000000000'' + convert(varchar(9), ta.cod_animal_sisbov), 9) + ' +
          '   convert(varchar(1), ta.num_dv_sisbov) end as CodAnimalSisbov ', 15);

{      SQL('  , case ta.cod_animal_sisbov '+
          '      when null then null '+
          '      else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + '' '' + ' +
          '      right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) + '' '' + ' +
          '      right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + '' '' + ' +
          '      right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) ' +
          '    end as CodAnimalSisBov ', 15); }

      SQL('  , ta.dta_identificacao_sisbov as DtaIdentificacaoSisbov ', 16);
      SQL('  , ta.dta_nascimento as DtaNascimento ', 17);
      SQL('  , ta.nom_animal as NomAnimal ', 18);
      SQL('  , ta.des_apelido as DesApelido ', 19);
      SQL('  , tr.sgl_raca as SglRaca ', 20);
      SQL('  , tr.des_raca as DesRaca ', 21);
      SQL('  , ta.ind_sexo as IndSexo ', 22);
      SQL('  , tto.sgl_tipo_origem as SglOrigem ', 23);
      SQL('  , tto.des_tipo_origem as DesOrigem ', 24);
      SQL('  , ttl.sgl_tipo_lugar as SglTipoLugar ', 25);
      SQL('  , ttl.des_tipo_lugar as DesTipoLugar ', 26);
      SQL('  , tlt.sgl_lote as SglLote ', 28);
      SQL('  , tlt.des_lote as DesLote ', 29);
      SQL('  , tlc.sgl_local as SglLocal ', 30);
      SQL('  , tlc.des_local as DesLocal ', 31);
      SQL('  , tca.sgl_categoria_animal as SglCategoria ', 32);
      SQL('  , tca.des_categoria_animal as DesCategoria ', 33);
      SQL('  , case when ta.cod_tipo_lugar = 1 then ' +
          '      ta.cod_fazenda_corrente ' +
          '    else ' +
          '      null ' +
          '    end as cod_fazenda_corrente ', 27);
      SQL('  , case when ta.cod_tipo_lugar = 1 then ' +
          '      null ' +
          '    when ta.cod_tipo_lugar = 2 then ' +
          '      case when ta.cod_propriedade_corrente is null then ' +
          '        ta.num_imovel_corrente ' +
          '      else ' +
          '        tprc.nom_propriedade_rural + '' '' + IsNull(tprc.num_imovel_receita_federal, '''') ' +
          '      end ' +
          '    when ta.cod_tipo_lugar = 3 then ' +
          '      case when ta.cod_pessoa_corrente is not null then ' +
          '        rtrim(left(tpc.nom_pessoa, 49)) + '' '' + ' +
          '        case tpc.cod_natureza_pessoa when ''F'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
          '          substring(tpc.num_cnpj_cpf, 10, 2)) ' +
          '        when ''J'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
          '          substring(tpc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
          '          substring(tpc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
          '          substring(tpc.num_cnpj_cpf, 13, 2)) ' +
          '        else ' +
          '          tpc.num_cnpj_cpf ' +
          '        end ' +
          '      when ta.cod_pessoa_secundaria_corrente is not null then ' +
          '        tpsc.nom_pessoa_secundaria + '' '' + ' +
          '        case tpsc.cod_natureza_pessoa when ''F'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpsc.num_cnpj_cpf, 1, 3) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 4, 3) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 7, 3) + ''-'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 10, 2)) ' +
          '        when ''J'' then ' +
          '          convert(varchar(18), ' +
          '          substring(tpsc.num_cnpj_cpf, 1, 2) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 3, 3) + ''.'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 6, 3) + ''/'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 9, 4) + ''-'' + ' +
          '          substring(tpsc.num_cnpj_cpf, 13, 2)) ' +
          '        else ' +
          '          tpsc.num_cnpj_cpf ' +
          '        end ' +
          '      else ' +
          '        case len(ta.num_cnpj_cpf_corrente) when 11 then ' +
          '          convert(varchar(18), ' +
          '          substring(ta.num_cnpj_cpf_corrente, 1, 3) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 4, 3) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 7, 3) + ''-'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 10, 2)) ' +
          '        when 14 then ' +
          '          convert(varchar(18), ' +
          '          substring(ta.num_cnpj_cpf_corrente, 1, 2) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 3, 3) + ''.'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 6, 3) + ''/'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 9, 4) + ''-'' + ' +
          '          substring(ta.num_cnpj_cpf_corrente, 13, 2)) ' +
          '        else ' +
          '          ta.num_cnpj_cpf_corrente ' +
          '        end ' +
          '      end ' +
          '    else ' +
          '      null ' +
          '    end as NomLugarCorrente ', 27);
      SQL('  , dbo.fnt_idade(ta.dta_nascimento, getdate()) as Idade ', 34);
      SQL('  , dbo.fnt_composicao_racial(ta.cod_animal, ta.cod_pessoa_produtor) as DesComposicaoRacial ',35);
      SQL('  , NULL as TxtDados ', 36);
      SQL('from ', 0);
      SQL('  tab_animal ta with (nolock) ', 0);
      SQL('  , tab_fazenda tfm with (nolock) ', 13);
      SQL('  , tab_raca tr ', [20, 21]);
      SQL('  , tab_tipo_origem tto ', [23, 24]);
      SQL('  , tab_tipo_lugar ttl ', [25, 26]);
      SQL('  , tab_lote tlt with (nolock) ', [28, 29]);
      SQL('  , tab_local tlc with (nolock) ', [30, 31]);
      SQL('  , tab_categoria_animal tca ', [32, 33]);
      SQL('  , tab_propriedade_rural tprc with (nolock) ', 27);
      SQL('  , tab_pessoa_secundaria tpsc with (nolock) ', 27);
      SQL('  , tab_pessoa tpc with (nolock) ', 27);
      if IndAgrupRaca1 = 'N' then
         SQL('  , tab_composicao_racial as tcr with (nolock) ', 0);
      if IndAgrupRaca2 = 'N' then
         SQL('  , tab_composicao_racial as tcr2 with (nolock) ', 0);
      if IndAgrupRaca3 = 'N' then
         SQL('  , tab_composicao_racial as tcr3 with (nolock) ', 0);
      if IndAgrupRaca4 = 'N' then
         SQL('  , tab_composicao_racial as tcr4 with (nolock) ', 0);
      SQL('where ', 0);
      SQL('  ta.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and ta.cod_animal not in ', 0);
      SQL('      ( ', 0);
      SQL('        select ', 0);
      SQL('          distinct ', 0);
      SQL('          tae.cod_animal ', 0);
      SQL('        from ', 0);
      SQL('          tab_evento te with (nolock) ', 0);
      SQL('          , tab_tipo_evento tte ', SE(CodGrupoEvento <> -1, 0, -1));
      SQL('          , tab_evento_sanitario tes with (nolock) ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          , tab_entrada_insumo tei with (nolock) ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          , tab_tipo_insumo tti ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          , tab_animal_evento tae with (nolock) ', 0);
      SQL('        where ', 0);
      SQL('          tae.cod_pessoa_produtor = te.cod_pessoa_produtor ', 0);
      SQL('          and tae.cod_evento = te.cod_evento ', 0);
      SQL('          and tes.cod_pessoa_produtor = te.cod_pessoa_produtor ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          and tes.cod_evento = te.cod_evento ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          and tte.cod_tipo_evento = te.cod_tipo_evento ', SE(CodGrupoEvento <> -1, 0, -1));
      SQL('          and tei.cod_pessoa_produtor = tes.cod_pessoa_produtor ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          and tei.cod_entrada_insumo = tes.cod_entrada_insumo ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          and tti.cod_tipo_insumo = tei.cod_tipo_insumo ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          and tti.cod_tipo_sub_evento_sanitario = :cod_tipo_sub_evento_sanitario ', SE(CodTipoSubEventoSanitario <> -1, 0, -1));
      SQL('          and ((te.dta_inicio >= :dta_inicio_evento and te.dta_inicio < :dta_fim_evento ) '+
          '                or (te.dta_fim >= :dta_inicio_evento and te.dta_fim < :dta_fim_evento )) ', SE((DtaInicioEvento > 0) and (DtaFimEvento > 0), 0, -1));
      SQL('          and tte.cod_grupo_evento = :cod_grupo_evento ', SE(CodGrupoEvento <> -1, 0, -1));
      SQL('          and te.cod_tipo_evento = :cod_tipo_evento ', SE(CodTipoEvento <> -1, 0, -1));
      SQL('          and te.cod_situacao_sisbov = :cod_situacao_sisbov ', SE(CodSituacaoSisbovEvento <> '', 0, -1));
      SQL('          and te.cod_evento = :cod_evento ', SE(CodEvento <> -1, 0, -1));
      SQL('          and te.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('      ) ', 0);
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', 13);
      SQL('  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ', 13);
      SQL('  and tr.cod_raca = ta.cod_raca ', [20, 21]);
      SQL('  and tto.cod_tipo_origem = ta.cod_tipo_origem ', [23, 24]);
      SQL('  and ttl.cod_tipo_lugar =* ta.cod_tipo_lugar ', [25, 26]);
      SQL('  and tlt.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', [28, 29]);
      SQL('  and tlt.cod_fazenda =* ta.cod_fazenda_corrente ', [28, 29]);
      SQL('  and tlt.cod_lote =* ta.cod_lote_corrente ', [28, 29]);
      SQL('  and tlc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', [30, 31]);
      SQL('  and tlc.cod_fazenda =* ta.cod_fazenda_corrente ', [30, 31]);
      SQL('  and tlc.cod_local =* ta.cod_local_corrente ', [30, 31]);
      SQL('  and tca.cod_categoria_animal =* ta.cod_categoria_animal ', [32, 33]);
      SQL('  and tprc.cod_propriedade_rural =* ta.cod_propriedade_corrente ', 27);
      SQL('  and tpsc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ', 27);
      SQL('  and tpsc.cod_pessoa_secundaria =* ta.cod_pessoa_secundaria_corrente ', 27);
      SQL('  and tpc.cod_pessoa =* ta.cod_pessoa_corrente ', 27);
      SQL('  and ta.cod_fazenda_manejo = :cod_fazenda_manejo ', SE(CodFazendaManejo <> -1, 0, -1));
      SQL('  and ta.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', SE((CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> ''), 0, -1));
      SQL('  and ta.cod_pais_sisbov = :cod_pais_sisbov ', SE(CodPaisSisbov <> -1, 0, -1));
      SQL('  and ta.cod_estado_sisbov = :cod_estado_sisbov ', SE(CodEstadoSisbov <> -1, 0, -1));
      SQL('  and ta.cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ', SE(CodMicroRegiaoSisbov <> -1, 0, -1));
      SQL('  and ta.cod_animal_sisbov between :cod_animal_sisbov_inicio and :cod_animal_sisbov_fim ', SE((CodAnimalSisbovInicio > 0) and (CodAnimalSisbovFim > 0), 0, -1));
      SQL('  and ta.dta_nascimento >= :dta_nascimento_inicio and ta.dta_nascimento < :dta_nascimento_fim ', SE((DtaNascimentoInicio > 0) and (DtaNascimentoFim > 0), 0, -1));
      SQL('  and ta.dta_identificacao_sisbov >= :dta_identificacao_sisbov_inicio and ta.dta_identificacao_sisbov < :dta_identificacao_sisbov_fim ', SE((DtaIdentificacaoInicio > 0) and (DtaIdentificacaoFim > 0), 0, -1));
      SQL('  and ta.cod_raca in ( ' + CodRaca + ' ) ', SE(CodRaca <> '', 0, -1));
      SQL('  and ta.cod_categoria_animal in ( ' + CodCategoria + ' ) ', SE(CodCategoria <> '', 0, -1));
      SQL('  and ta.ind_sexo = :ind_sexo ', SE(IndSexo <> '', 0, -1));
      SQL('  and ta.cod_tipo_lugar in (2, 3) ', SE(CodTipoLugar = 23, 0, -1));
      SQL('  and ta.cod_tipo_lugar = :cod_tipo_lugar ', SE((CodTipoLugar <> -1) and (CodTipoLugar <> 23), 0, -1));
      SQL('  and ta.cod_local_corrente in ( ' + CodLocal + ' )', SE(CodLocal <> '', 0, -1));
      SQL('  and ta.cod_lote_corrente in ( ' + CodLote + ' )', SE(CodLote <> '', 0, -1));
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and ta.cod_animal = tcr.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and ta.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and ta.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and ta.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;

      if SemTecnico    = 'S' then begin
         SQL('  and ta.cod_pessoa_tecnico is null ', 0);
      end else begin
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico or ta.cod_pessoa_tecnico is null) ', 0);
        end else if CodPessoaTecnico > 0 then begin
          SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico) ', 0);
        end;
      end;
      
      if IndAgrupRaca1 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
      end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
    end;
    { Atribuição de valores dos critérios de pesquisa informados }
    Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    if CodSituacaoSisbovEvento <> '' then begin
      Query.ParamByName('cod_situacao_sisbov').AsString := CodSituacaoSisbovEvento;
    end;
    if CodGrupoEvento <> -1 then begin
      Query.ParamByName('cod_grupo_evento').AsInteger := CodGrupoEvento;
    end;
    if CodTipoEvento <> -1 then begin
      Query.ParamByName('cod_tipo_evento').AsInteger := CodTipoEvento;
    end;
    if CodEvento <> -1 then begin
      Query.ParamByName('cod_evento').AsInteger := CodEvento;
    end;
    if (DtaInicioEvento > 0) and (DtaFimEvento > 0) then begin
      Query.ParamByName('dta_inicio_evento').AsDateTime := Trunc(DtaInicioEvento);
      Query.ParamByName('dta_fim_evento').AsDateTime := Trunc(DtaFimEvento)+1;
    end;
    if CodFazendaManejo <> -1 then begin
      Query.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
    end;
    if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
      Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoInicio;
      Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoFim;
    end;
    if CodPaisSisbov <> -1 then begin
      Query.ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisBov;
    end;
    if CodEstadoSisbov <> -1 then begin
      Query.ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisBov;
    end;
    if CodMicroRegiaoSisbov <> -1 then begin
      if CodMicroRegiaoSisbov <> 88 then // 88 indica que irá filtrar por códigos SISBOV de micro região -1!
         Query.ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisBov
      else
         Query.ParamByName('cod_micro_regiao_sisbov').AsInteger := -1;
    end;
    if (CodAnimalSisbovInicio > 0) and (CodAnimalSisbovFim > 0) then begin
      Query.ParamByName('cod_animal_sisbov_inicio').AsInteger := CodAnimalSisbovInicio;
      Query.ParamByName('cod_animal_sisbov_fim').AsInteger := CodAnimalSisbovFim;
    end;
    if (DtaNascimentoInicio > 0) and (DtaNascimentoFim > 0) then begin
      Query.ParamByName('dta_nascimento_inicio').AsDateTime := Trunc(DtaNascimentoInicio);
      Query.ParamByName('dta_nascimento_fim').AsDateTime := Trunc(DtaNascimentoFim)+1;
    end;
    if (DtaIdentificacaoInicio > 0) and (DtaIdentificacaoFim > 0) then begin
      Query.ParamByName('dta_identificacao_sisbov_inicio').AsDateTime := Trunc(DtaIdentificacaoInicio);
      Query.ParamByName('dta_identificacao_sisbov_fim').AsDateTime := Trunc(DtaIdentificacaoFim)+1;
    end;
    if IndSexo <> '' then begin
      Query.ParamByName('ind_sexo').AsString := IndSexo;
    end;
    if (CodTipoLugar <> -1) and (CodTipoLugar <> 23) then begin
      Query.ParamByName('cod_tipo_lugar').AsInteger := CodTipoLugar;
    end;
    if (IndAnimaisNaoAssociados = 'S') and (CodTipoSubEventoSanitario <> -1) then begin
      Query.ParamByName('cod_tipo_sub_evento_sanitario').AsInteger := CodTipoSubEventoSanitario;
    end;
    if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
        Query.ParamByName('codraca1').AsInteger := CodRaca1;
        Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
        Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
    end;
    if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
        Query.ParamByName('codraca2').AsInteger := CodRaca2;
        Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
        Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
    end;
    if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
        Query.ParamByName('codraca3').AsInteger := CodRaca3;
        Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
        Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
    end;
    if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
        Query.ParamByName('codraca4').AsInteger := CodRaca4;
        Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
        Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
    end;

    if Conexao.CodPapelUsuario = 3 then begin
      Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
    end else if CodPessoaTecnico > 0 then begin
      Query.ParamByName('CodPessoaTecnico').AsInteger := CodPessoaTecnico;
    end;


    try
      Query.ExecSQL;
      { Atualiza campos referentes ao tipo do sub evento sanitario
        * Somente se o escopo for "Animais associados ao evento" }
      if IndAnimaisNaoAssociados <> 'S' then begin
        if (IntRelatorios.CampoAssociado(10) = 1)
        or (IntRelatorios.CampoAssociado(11) = 1)
        or (CodTipoSubEventoSanitario <> -1) then begin
          Query.SQL.Clear;
          SQL('update #tmp_eventos_aplicados_animais '+
              '  set '+
              '    cod_tipo_sub_evento_sanitario = ttses.cod_tipo_sub_evento_sanitario '+
              '    , SglTipoSubEventoSanitario = ttses.sgl_tipo_sub_evento_sanitario '+
              '    , DesTipoSubEventoSanitario = ttses.des_tipo_sub_evento_sanitario '+
              '  from '+
              '    tab_entrada_insumo tei '+
              '    , tab_tipo_insumo tti '+
              '    , tab_tipo_sub_evento_sanitario ttses '+
              '  where '+
              '    ttses.cod_tipo_sub_evento_sanitario = tti.cod_tipo_sub_evento_sanitario '+
              '    and tti.cod_tipo_insumo = tei.cod_tipo_insumo '+
              '    and tei.cod_pessoa_produtor = #tmp_eventos_aplicados_animais.CodPessoaProdutor '+
              '    and tei.cod_entrada_insumo = #tmp_eventos_aplicados_animais.cod_entrada_insumo ', 0);
          Query.ExecSQL;
        end;
      end;
      { Atualiza campo NomLugarCorrente segundo regras de obtenção do mesmo}
      if (IntRelatorios.CampoAssociado(27) = 1) then begin
        Query.SQL.Clear;
        SQL('update #tmp_eventos_aplicados_animais '+
            '  set '+
            '    NomLugarCorrente = tfc.nom_fazenda + '' '' + IsNull(tpr.num_imovel_receita_federal, '''') '+
            '  from '+
            '    tab_propriedade_rural tpr '+
            '    , tab_fazenda tfc '+
            '  where '+
            '    tpr.cod_propriedade_rural =* tfc.cod_propriedade_rural '+
            '    and tfc.cod_fazenda = #tmp_eventos_aplicados_animais.cod_fazenda_corrente '+
            '    and tfc.cod_pessoa_produtor = #tmp_eventos_aplicados_animais.CodPessoaProdutor '+
            '    and #tmp_eventos_aplicados_animais.cod_fazenda_corrente is not null ', 0);
        Query.ExecSQL;
      end;
      if IndAnimaisNaoAssociados <> 'S' then begin
        { Obtem o número de animais que sofreram o(s) evento(s) selecionado(s) }
        Query.SQL.Clear;
        Query.SQL.Text :=
          'select '+
          '  tte.num_ordem '+
          '  , tte.cod_tipo_evento as CodTipoEvento '+
          '  , tte.des_tipo_evento as DesTipoEvento '+
          '  , count(CodAnimal) as QtdAnimais '+
          'from '+
          '  #tmp_eventos_aplicados_animais tmp '+
          '  , tab_tipo_evento tte '+
          'where '+
          '  tte.cod_tipo_evento = tmp.CodTipoEvento '+
          'group by '+
          '  tte.num_ordem '+
          '  , tte.cod_tipo_evento '+
          '  , tte.des_tipo_evento '+
          'order by '+
          '  tte.num_ordem ';
        Query.Open;
        if not Query.IsEmpty then begin
          Query.First;
          SetLength(TotalizaEventos, Query.RecordCount);
          for X := Low(TotalizaEventos) to High(TotalizaEventos) do begin
            TotalizaEventos[X].CodTipoEvento := Query.FieldByName('CodTipoEvento').AsInteger;
            TotalizaEventos[X].DesTipoEvento := Query.FieldByName('DesTipoEvento').AsString;
            TotalizaEventos[X].QtdAnimais := Query.FieldByName('QtdAnimais').AsInteger;
            Query.Next;
          end;
        end;
      end;
      { Obtem o número total de animais que atenderam aos critérios informados }
      Query.SQL.Clear;
      Query.SQL.Text :=
        'select count(CodAnimal) as QtdAnimais from #tmp_eventos_aplicados_animais ';
      Query.Open;
      QtdAnimais := Query.FieldByName('QtdAnimais').AsInteger;

      { Refaz a query de pesquisa sobre os dados filtrados pelo procedimento }
      Query.SQL.Clear;
      SQL('select ', 0);
      SQL('  distinct ', 0);
      SQL('  null ', 0);
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := '  , '+
          SE(IntRelatorios.ValorCampo('NomField') = 'TxtDados'

//            , 'CAST('+IntRelatorios.ValorCampo('NomField')+' as VARCHAR(8000)) as TxtDados '
            , 'CONVERT(VARCHAR(8000), '+IntRelatorios.ValorCampo('NomField')+') as TxtDados '

            , IntRelatorios.ValorCampo('NomField'));
        SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1));
        IntRelatorios.IrAoProximo;
      end;
      SQL('from ', 0);
      SQL('  #tmp_eventos_aplicados_animais ', 0);
      SQL('where ', 0);
      SQL('  CodPessoaProdutor is not null ', 0);
      if (IndAnimaisNaoAssociados <> 'S') and (CodTipoSubEventoSanitario <> -1) then begin
        SQL('  and cod_tipo_sub_evento_sanitario = :cod_tipo_sub_evento_sanitario ', 0);
        Query.ParamByName('cod_tipo_sub_evento_sanitario').AsInteger := CodTipoSubEventoSanitario;
      end;
{$ENDIF}
//      Query.SQL.SaveToFile('C:\Tmp\Query.sql');
      Query.Open;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1143, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1143;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.BuscarDesCriterioPesquisa(const NomCriterio: String; Chave: String): String;
const
  NomeMetodo: String = 'BuscarDesCriterioPesquisa';
var
  Q: THerdomQuery;
begin
  Result := '';
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;
      if NomCriterio = 'CodSituacaoSisbovEvento' then begin
        Q.SQL.Text :=
          'select des_situacao_sisbov as descricao from tab_situacao_sisbov '+
          ' where cod_situacao_sisbov = :chave ';
      end else if NomCriterio = 'CodGrupoEvento' then begin
        Q.SQL.Text :=
          'select des_grupo_evento as descricao from tab_grupo_evento '+
          ' where cod_grupo_evento = :chave ';
      end else if NomCriterio = 'CodTipoEvento' then begin
        Q.SQL.Text :=
          'select des_tipo_evento as descricao from tab_tipo_evento '+
          ' where cod_tipo_evento = :chave ';
      end else if NomCriterio = 'CodTipoSubEventoSanitario' then begin
        Q.SQL.Text :=
          'select des_tipo_sub_evento_sanitario as descricao from tab_tipo_sub_evento_sanitario '+
          ' where cod_tipo_sub_evento_sanitario = :chave ';
      end else if NomCriterio = 'CodFazendaManejo' then begin
        Q.SQL.Text :=
          'select nom_fazenda as descricao from tab_fazenda '+
          ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
          '   and cod_fazenda = :chave ';
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      end else if NomCriterio = 'CodTipoLugar' then begin
        if Chave = '23' then begin
          Q.SQL.Text :=
            'select ''Propriedade de terceiros ou Aglomeração de animais'' as descricao '+
            ' where :chave = :chave ';
        end else begin
          Q.SQL.Text :=
            'select des_tipo_lugar as descricao from tab_tipo_lugar '+
            ' where cod_tipo_lugar = :chave ';
        end;
      end;
      if StrToIntDef(Chave, -1) = -1 then begin
        Q.ParamByName('chave').AsString := Chave;
      end else begin
        Q.ParamByName('chave').AsInteger := StrToInt(Chave);
      end;
      Q.Open;
      if not Q.IsEmpty then begin
        Result := Q.FieldByName('descricao').AsString;
      end;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1147, Self.ClassName, NomeMetodo, [E.Message, NomCriterio]);
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.Buscar(CodEvento: Integer;IndRetornaDetalhe:String): Integer;
const
  Metodo: Integer = 284;
  NomeMetodo: String = 'Buscar';
var
  Q: THerdomQuery;
  CodAnimalRM: Integer;
  IndTouro: String;
  CodEventoCobertura, Cont: Integer;
begin
  Result := -1;
  CodEventoCobertura := 0;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Tenta Buscar Registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select ' +
                '  te.cod_pessoa_produtor ' +
                '  , te.cod_evento ' +
                '  , tte.cod_tipo_evento ' +
                '  , tte.sgl_tipo_evento ' +
                '  , tte.des_tipo_evento ' +
                '  , tge.cod_grupo_evento ' +
                '  , tge.sgl_grupo_evento ' +
                '  , tge.des_grupo_evento ' +
                '  , te.dta_inicio ' +
                '  , te.dta_fim ' +
                '  , te.cod_fazenda ' +
                '  , te.txt_dados ' +
                '  , te.txt_observacao ' +
                '  , te.qtd_animais ' +
                '  , te.dta_cadastramento ' +
                '  , te.cod_evento_associado ' +
                '  , te.cod_situacao_sisbov ' +
                '  , te.dta_efetivacao_cadastro ' +
                '  , tas.cod_arquivo_sisbov ' +
                '  , tas.nom_arquivo_sisbov ' +
                '  , tas.dta_criacao_arquivo ' +
                'from ' +
                '  tab_evento te ' +
                '  , tab_tipo_evento tte ' +
                '  , tab_grupo_evento tge ' +
                '  , tab_arquivo_sisbov tas ' +
                'where ' +
                '  te.cod_evento = :cod_evento ' +
                '  and te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '  and te.cod_tipo_evento = tte.cod_tipo_evento ' +
                '  and tte.cod_grupo_evento = tge.cod_grupo_evento ' +
                '  and te.cod_arquivo_sisbov *= tas.cod_arquivo_sisbov ');
{$ENDIF}
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      // Verifica se existe registro para busca
      if Q.IsEmpty then begin
        Mensagens.Adicionar(837, Self.ClassName, NomeMetodo, []);
        Result := -837;
        Exit;
      end;

      // Obtem informações do registro
      IntEvento.CodEvento := Q.FieldByName('cod_evento').AsInteger;
      IntEvento.CodArquivoSisbov := Q.FieldByName('cod_arquivo_sisbov').AsInteger;
      IntEvento.CodEvento := Q.FieldByName('cod_evento').AsInteger;
      IntEvento.CodGrupoEvento := Q.FieldByName('cod_grupo_evento').AsInteger;
      IntEvento.CodPessoaProdutor := Q.FieldByName('cod_pessoa_produtor').AsInteger;
      IntEvento.CodTipoEvento := Q.FieldByName('cod_tipo_evento').AsInteger;
      IntEvento.DesGrupoEvento := Q.FieldByName('des_grupo_evento').AsString;
      IntEvento.DesTipoEvento := Q.FieldByName('des_tipo_evento').AsString;
      IntEvento.DtaCadastramento := Q.FieldByName('dta_cadastramento').AsDateTime;
      IntEvento.DtaEfetivacaoCadastro := Q.FieldByName('dta_efetivacao_cadastro').AsDateTime;
      IntEvento.DtaFim := Q.FieldByName('dta_fim').AsDateTime;
      IntEvento.CodFazenda := Q.FieldByName('cod_fazenda').AsInteger;
      IntEvento.DtaGravacaoSisbov := Q.FieldByName('dta_criacao_arquivo').AsDateTime;
      IntEvento.DtaInicio := Q.FieldByName('dta_inicio').AsDateTime;
      IntEvento.NomArquivoSisbov := Q.FieldByName('nom_arquivo_sisbov').AsString;
      IntEvento.QtdAnimais := Q.FieldByName('qtd_animais').AsInteger;
      IntEvento.SglGrupoEvento := Q.FieldByName('sgl_grupo_evento').AsString;
      IntEvento.SglTipoEvento := Q.FieldByName('sgl_tipo_evento').AsString;
      IntEvento.TxtDados := Q.FieldByName('txt_dados').AsString;
      IntEvento.TxtObservacao := Q.FieldByName('txt_observacao').AsString;
      IntEvento.CodSituacaoSisbov := Q.FieldByName('cod_situacao_sisbov').AsString;
      IntEvento.CodEventoAssociado := Q.FieldByName('cod_evento_associado').AsInteger;
      IntEvento.CodAptidao := 0;
      IntEvento.CodCategoria := 0;
      IntEvento.CNPJAglomeracao := '';
      IntEvento.NIRF := '';
      IntEvento.CodLocalizacaoSISBOV := -1;
      IntEvento.NomArquivoCertificado := '';
      IntEvento.CodPropriedadeRural := 0;
      IntEvento.NomPropriedadeRural := '';
      IntEvento.NumCNPJCPFPessoa := '';
      IntEvento.CodPessoa := 0;
      IntEvento.NomPessoa := '';
      IntEvento.NumCNPJCPFPessoaSecundaria := '';
      IntEvento.CodPessoaSecundaria := 0;
      IntEvento.NomPessoaSecundaria := '';
      IntEvento.NumGTA := '';
      IntEvento.CodSerieGta := '';
      IntEvento.CodEstadoGta := 0;
      IntEvento.DtaEmissaoGTA := 0;
      IntEvento.DtaValidadeGTA := 0;
      IntEvento.CodFazendaManejo := 0;
      IntEvento.CodAnimalRMManejo := '';
      IntEvento.CodPessoaSecAvaliador := 0;
      IntEvento.CodGrauDificuldade := 0;
      IntEvento.CodEventoCobertura := 0;
      IntEvento.DesSituacaoCria := '';
      IntEvento.DtaEventoCobertura := 0;
      IntEvento.QtdDiasGestacao := 0;
      IntEvento.NumOrdemParto := 0;
      IntEvento.CodAnimalManejoCria := '';
      IntEvento.CodAnimalManejoGemeo := '';
      IntEvento.CodAnimalManejoTouro := '';
      IntEvento.CodAnimalManejoFemea := '';
      IntEvento.CodEstacaoMonta := 0;
      IntEvento.CodAnimalTouro := 0;
      IntEvento.CodAnimalFemea := 0;
      IntEvento.CodPessoaOrigem := 0;
      IntEvento.CodPessoaDestino := 0;

      //retorna os detalhes específicos caso sejam solicitados
      if (IndRetornaDetalhe = 'S') then begin
         case Q.fieldbyname('cod_tipo_evento').asinteger of
         3:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_categoria_origem, cod_aptidao from tab_evento_mud_categoria ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodAptidao := Q.FieldByName('cod_aptidao').AsInteger;
              IntEvento.CodCategoria := Q.FieldByName('cod_categoria_origem').AsInteger;
            end;
           end;
         1:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_aptidao from tab_evento_mud_reg_alimentar ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodAptidao := Q.FieldByName('cod_aptidao').AsInteger;
            end;
           end;
         2:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_aptidao from tab_evento_desmame ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodAptidao := Q.FieldByName('cod_aptidao').AsInteger;
            end;
           end;
         7:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_aptidao from tab_evento_mudanca_local ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodAptidao := Q.FieldByName('cod_aptidao').AsInteger;
            end;
           end;
         8:begin
            Q.SQL.clear;
            Q.SQL.Add('SELECT dta_emissao_gta, ' +
                      '       dta_validade_gta, ' +
                      '       num_gta, ' +
                      '       cod_serie_gta, ' +
                      '       cod_estado_gta, ' +
                      '       num_imovel_origem, ' +
                      '       cod_localizacao_origem, ' +
                      '       num_cnpj_cpf_origem,' +
                      '       cod_aptidao,' +
                      '       cod_pessoa_origem,' +
                      '       cod_pessoa_destino,' +
                      '       ind_mov_naoeras_eras, ' +
                      '       ind_migrar_animal_sisbov ' +
                      '  FROM tab_evento_transferencia' +
                      ' WHERE cod_evento = :cod_evento' +
                      '   AND cod_pessoa_produtor = :cod_pessoa_produtor');

            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger :=
              Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then
            begin
              IntEvento.CNPJAglomeracao      := Q.FieldByName('num_cnpj_cpf_origem').AsString;
              IntEvento.CodLocalizacaoSISBOV := Q.FieldByName('cod_localizacao_origem').AsInteger;
              IntEvento.NIRF                 := Q.FieldByName('num_imovel_origem').AsString;
              IntEvento.CodAptidao           := Q.FieldByName('cod_aptidao').AsInteger;
              IntEvento.CodPessoaOrigem      := Q.FieldByName('cod_pessoa_origem').AsInteger;
              IntEvento.CodPessoaDestino     := Q.FieldByName('cod_pessoa_destino').AsInteger;
              IntEvento.IndMovNErasEras      := Q.FieldByName('ind_mov_naoeras_eras').AsString;
              IntEvento.IndMigrarAnimal      := Q.FieldByName('ind_migrar_animal_sisbov').AsString;
              IntEvento.NumGTA               := Q.FieldByName('num_gta').AsString;
              IntEvento.CodSerieGTA          := Q.FieldByName('cod_serie_gta').AsString;
              IntEvento.CodEstadoGTA         := Q.FieldByName('cod_estado_gta').AsInteger;
              IntEvento.DtaEmissaoGTA        := Q.FieldByName('dta_emissao_gta').AsDateTime;
              IntEvento.DtaValidadeGTA       := Q.FieldByName('dta_validade_gta').AsDateTime;
            end;
           end;
        9 :begin
            Q.SQL.clear;
            Q.SQL.Add('select  tvc.dta_emissao_gta, ' +
                      '        tvc.dta_validade_gta, ' +
                      '        tvc.num_gta, ' +
                      '        tvc.cod_serie_gta, ' +
                      '        tvc.cod_estado_gta, ' +
                      '        tpr.cod_propriedade_rural, ' +
                      '        tvc.num_imovel_receita_federal, ' +
                      '        tvc.cod_localizacao_sisbov, ' +
                      '        tpr.nom_propriedade_rural, ' +
                      '        tps.cod_pessoa_secundaria, ' +
                      '        tvc.num_cnpj_cpf_pessoa_secundaria, ' +
                      '        tps.nom_pessoa_secundaria, ' +
                      '        tp.cod_pessoa, ' +
                      '        tp.nom_pessoa, ' +
                      '        tp.num_cnpj_cpf, ' +
                      '        tvc.ind_venda_certif_terceira, ' +
                      '        tvc.cod_exportacao_propriedade, ' +
                      '        tvc.ind_mov_naoeras_eras ' +
                      ' from tab_evento_venda_criador tvc, ' +
                      '      tab_propriedade_rural tpr, ' +
                      '      tab_pessoa tp, ' +
                      '      tab_pessoa_secundaria tps ' +
                      ' where tvc.cod_pessoa *= tp.cod_pessoa ' +
                      ' and   tvc.cod_pessoa_secundaria *= tps.cod_pessoa_secundaria ' +
                      ' and   tvc.cod_propriedade_rural *= tpr.cod_propriedade_rural ' +
                      ' and   tvc.cod_evento = :cod_evento ' +
                      ' and   tvc.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      ' and   tpr.dta_fim_validade is null ' +
                      ' and   tps.dta_fim_validade is null ' +
                      ' and   tp.dta_fim_validade is null ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.NIRF := Q.FieldByName('num_imovel_receita_federal').AsString;
              IntEvento.CodLocalizacaoSISBOV := Q.FieldByName('cod_localizacao_sisbov').AsInteger;
              IntEvento.CodPropriedadeRural := Q.FieldByName('cod_propriedade_rural').AsInteger;
              IntEvento.NomPropriedadeRural := Q.FieldByName('nom_propriedade_rural').AsString;
              IntEvento.NumCNPJCPFPessoa := Q.FieldByName('num_cnpj_cpf').AsString;
              IntEvento.CodPessoa := Q.FieldByName('cod_pessoa').AsInteger;
              IntEvento.NomPessoa := Q.FieldByName('nom_pessoa').AsString;
              IntEvento.NumCNPJCPFPessoaSecundaria := Q.FieldByName('num_cnpj_cpf_pessoa_secundaria').AsString;
              IntEvento.CodPessoaSecundaria := Q.FieldByName('cod_pessoa_secundaria').AsInteger;
              IntEvento.NomPessoaSecundaria := Q.FieldByName('nom_pessoa_secundaria').AsString;
              IntEvento.NumGTA := Q.FieldByName('num_gta').AsString;
              IntEvento.CodSerieGTA := Q.FieldByName('cod_serie_gta').AsString;
              IntEvento.CodEstadoGTA := Q.FieldByName('cod_estado_gta').AsInteger;
              IntEvento.DtaEmissaoGTA := Q.FieldByName('dta_emissao_gta').AsDateTime;
              IntEvento.DtaValidadeGTA := Q.FieldByName('dta_validade_gta').AsDateTime;
              IntEvento.IndVendaCertifTerceira := Q.FieldByName('ind_venda_certif_terceira').AsString;
              IntEvento.CodExportacaoPropriedade := Q.FieldByName('cod_exportacao_propriedade').AsString;
              IntEvento.IndMovNErasEras := Q.FieldByName('ind_mov_naoeras_eras').AsString;
            end;
           end;
        10:begin
            Q.SQL.clear;
            Q.SQL.Add('select  tvc.dta_emissao_gta, ' +
                      '        tvc.dta_validade_gta, ' +
                      '        tvc.num_gta, ' +
                      '        tvc.cod_serie_gta, ' +
                      '        tvc.cod_estado_gta, ' +
                      '        tp.cod_pessoa, ' +
                      '        tp.nom_pessoa, ' +
                      '        tvc.num_cnpj_cpf_frigorifico ' +
                      ' from tab_evento_venda_frigorifico tvc, ' +
                      '      tab_pessoa tp ' +
                      ' where tvc.cod_pessoa *= tp.cod_pessoa ' +
                      ' and   tvc.cod_evento = :cod_evento ' +
                      ' and   tvc.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      ' and   tp.dta_fim_validade is null ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.NumCNPJCPFPessoa := Q.FieldByName('num_cnpj_cpf_frigorifico').AsString;
              IntEvento.CodPessoa := Q.FieldByName('cod_pessoa').AsInteger;
              IntEvento.NomPessoa := Q.FieldByName('nom_pessoa').AsString;
              IntEvento.NumGTA := Q.FieldByName('num_gta').AsString;
              IntEvento.CodSerieGTA := Q.FieldByName('cod_serie_gta').AsString;
              IntEvento.CodEstadoGTA := Q.FieldByName('cod_estado_gta').AsInteger;
              IntEvento.DtaEmissaoGTA := Q.FieldByName('dta_emissao_gta').AsDateTime;
              IntEvento.DtaValidadeGTA := Q.FieldByName('dta_validade_gta').AsDateTime;
            end;
           end;
        36:begin
            Q.SQL.clear;
            Q.SQL.Add('select  tvc.dta_emissao_gta, ' +
                      '        tvc.dta_validade_gta, ' +
                      '        tvc.num_gta, ' +
                      '        tvc.cod_serie_gta, ' +
                      '        tvc.cod_estado_gta, ' +
                      '        tp.cod_pessoa, ' +
                      '        tp.nom_pessoa, ' +
                      '        tvc.num_cnpj_cpf_frigorifico ' +
                      ' from tab_evento_retorno_frigorifico tvc, ' +
                      '      tab_pessoa tp ' +
                      ' where tvc.cod_pessoa *= tp.cod_pessoa ' +
                      ' and   tvc.cod_evento = :cod_evento ' +
                      ' and   tvc.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      ' and   tp.dta_fim_validade is null ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.NumCNPJCPFPessoa := Q.FieldByName('num_cnpj_cpf_frigorifico').AsString;
              IntEvento.CodPessoa := Q.FieldByName('cod_pessoa').AsInteger;
              IntEvento.NomPessoa := Q.FieldByName('nom_pessoa').AsString;
              IntEvento.NumGTA := Q.FieldByName('num_gta').AsString;
              IntEvento.CodSerieGTA := Q.FieldByName('cod_serie_gta').AsString;
              IntEvento.CodEstadoGTA := Q.FieldByName('cod_estado_gta').AsInteger;
              IntEvento.DtaEmissaoGTA := Q.FieldByName('dta_emissao_gta').AsDateTime;
              IntEvento.DtaValidadeGTA := Q.FieldByName('dta_validade_gta').AsDateTime;
            end;
           end;
        16:begin
            Q.SQL.clear;
            Q.SQL.Add('select nom_arquivo_certificado from tab_evento_emissao_cert ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.NomArquivoCertificado := Q.FieldByName('nom_arquivo_certificado').AsString;
            end;
           end;
        28:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_evento_associado from tab_evento ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodEstacaoMonta := Q.FieldByName('cod_evento_associado').AsInteger;
            end;
           end;
        31:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_pessoa_avaliador, cod_tipo_avaliacao from tab_evento_avaliacao ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodPessoaSecAvaliador := Q.FieldByName('cod_pessoa_avaliador').AsInteger;
              IntEvento.CodTipoAvaliacao := Q.FieldByName('cod_tipo_avaliacao').AsInteger;
            end;
           end;
        32:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_evento_associado from tab_evento ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodEstacaoMonta := Q.FieldByName('cod_evento_associado').AsInteger;
            end;
            Q.SQL.clear;
            Q.SQL.Add('select cod_animal_touro, cod_reprodutor_multiplo from tab_evento_monta_automatica ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              if not Q.Fieldbyname('cod_animal_touro').isnull then
                 IntEvento.CodAnimalTouro := Q.FieldByName('cod_animal_touro').AsInteger;
              if not Q.Fieldbyname('cod_reprodutor_multiplo').isnull then
                 IntEvento.CodAnimalTouro := Q.FieldByName('cod_reprodutor_multiplo').AsInteger;
            end;
            Q.SQL.clear;
            Q.SQL.Add('select cod_animal from tab_animal_evento ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
               IntEvento.CodAnimalFemea := Q.FieldByName('cod_animal').AsInteger;
            end;
           end;
        30:begin
            Q.SQL.clear;
            Q.SQL.Add('select tep.cod_grau_dificuldade_parto, '+
                      '       tsc.des_situacao_cria, '+
                      '       te.dta_inicio, '+
                      '       te.cod_evento, '+
                      '       tep.qtd_dias_gestacao, '+
                      '       tep.ind_ordem_parto, '+
                      '       te.cod_evento_associado '+
                      ' from tab_evento_parto tep, '+
                      '      tab_evento te, '+
                      '      tab_situacao_cria tsc '+
                      ' where tep.cod_evento =:cod_evento '+
                      ' and   tep.cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and   tep.cod_evento_cobertura *= te.cod_evento '+
                      ' and   tep.cod_pessoa_produtor *= te.cod_pessoa_produtor '+
                      ' and   tep.cod_situacao_cria = tsc.cod_situacao_cria ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then begin
              IntEvento.CodGrauDificuldade := Q.FieldByName('cod_grau_dificuldade_parto').AsInteger;
              IntEvento.DesSituacaoCria := Q.FieldByName('des_situacao_cria').AsString;
              IntEvento.DtaEventoCobertura := Q.FieldByName('dta_inicio').AsDateTime;
              IntEvento.QtdDiasGestacao := Q.FieldByName('qtd_dias_gestacao').AsInteger;
              IntEvento.NumOrdemParto := Q.FieldByName('ind_ordem_parto').AsInteger;
              IntEvento.CodEventoCobertura := Q.FieldByName('cod_evento').AsInteger;
              IntEvento.CodEstacaoMonta := Q.FieldByName('cod_evento_associado').AsInteger;
              CodEventoCobertura := Q.FieldByName('cod_evento').AsInteger;
            end;
            Q.SQL.clear;
            Q.SQL.Add('select tf.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                      ' from tab_animal_evento tae, '+
                      '      tab_animal ta, '+
                      '      tab_fazenda tf '+
                      ' where tae.cod_evento =:cod_evento '+
                      ' and   tae.cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and   tae.cod_animal = ta.cod_animal '+
                      ' and   tae.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                      ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                      ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if not Q.IsEmpty then
               IntEvento.CodAnimalManejoFemea := Q.Fieldbyname('CodAnimalManejo').asstring;
            Q.SQL.clear;
            Q.SQL.Add('select tf.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                      ' from tab_animal_cria tac, '+
                      '      tab_animal ta, '+
                      '      tab_fazenda tf '+
                      ' where tac.cod_evento =:cod_evento '+
                      ' and   tac.cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and   tac.cod_animal = ta.cod_animal '+
                      ' and   tac.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                      ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                      ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            Cont:= 1;
            while not Q.Eof do begin
               if Cont = 1
                  then IntEvento.CodAnimalManejoCria := Q.Fieldbyname('CodAnimalManejo').asstring
                  else IntEvento.CodAnimalManejoGemeo := Q.Fieldbyname('CodAnimalManejo').asstring;
               Q.Next;
               Inc(Cont);
            end;
            Q.SQL.clear;
            Q.SQL.Add('select tf.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                      ' from tab_evento_cobertura_reg_pasto tem, '+
                      '      tab_animal ta, '+
                      '      tab_fazenda tf '+
                      ' where tem.cod_evento =:cod_evento '+
                      ' and   tem.cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and   tem.cod_animal_touro = ta.cod_animal '+
                      ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                      ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                      ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                      ' and   tem.cod_animal_touro is not null ');
            Q.ParamByName('cod_evento').AsInteger := CodEventoCobertura;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if Q.IsEmpty then begin
              Q.SQL.clear;
              Q.SQL.Add('select tf.sgl_fazenda + '' '' + ta.cod_reprodutor_multiplo_manejo as CodAnimalManejo '+
                        ' from tab_evento_cobertura_reg_pasto tem, '+
                        '      tab_reprodutor_multiplo ta, '+
                        '      tab_fazenda tf '+
                        ' where tem.cod_evento =:cod_evento '+
                        ' and   tem.cod_pessoa_produtor = :cod_pessoa_produtor '+
                        ' and   tem.cod_reprodutor_multiplo = ta.cod_reprodutor_multiplo '+
                        ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                        ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                        ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                        ' and   tem.cod_animal_touro is null ');
              Q.ParamByName('cod_evento').AsInteger := CodEventoCobertura;
              Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              Q.open;
              if Q.IsEmpty then begin
                Q.SQL.clear;
                Q.SQL.Add('select tf.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                          ' from tab_evento_monta_controlada tem, '+
                          '      tab_animal ta, '+
                          '      tab_fazenda tf '+
                          ' where tem.cod_evento =:cod_evento '+
                          ' and   tem.cod_pessoa_produtor = :cod_pessoa_produtor '+
                          ' and   tem.cod_animal_touro = ta.cod_animal '+
                          ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                          ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                          ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ');
                Q.ParamByName('cod_evento').AsInteger := CodEventoCobertura;
                Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                Q.open;
                if Q.IsEmpty then begin
                  Q.SQL.clear;
                  Q.SQL.Add('select tf.sgl_fazenda + '' '' + ta.cod_animal_manejo as CodAnimalManejo '+
                            ' from tab_evento_insemin_artificial tem, '+
                            '      tab_animal ta, '+
                            '      tab_fazenda tf '+
                            ' where tem.cod_evento =:cod_evento '+
                            ' and   tem.cod_pessoa_produtor = :cod_pessoa_produtor '+
                            ' and   tem.cod_animal = ta.cod_animal '+
                            ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                            ' and   ta.cod_fazenda_manejo = tf.cod_fazenda '+
                            ' and   ta.cod_pessoa_produtor = tf.cod_pessoa_produtor ');
                  Q.ParamByName('cod_evento').AsInteger := CodEventoCobertura;
                  Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                  Q.open;
                end;
              end;
            end;
            if not Q.IsEmpty then
               IntEvento.CodAnimalManejoTouro := Q.Fieldbyname('CodAnimalManejo').asstring;
           end;
        23:begin
            Q.SQL.clear;
            Q.SQL.Add('select cod_animal_touro, cod_reprodutor_multiplo ');
            Q.SQL.Add(' from tab_evento_cobertura_reg_pasto ');
            Q.SQL.Add(' where cod_evento = :cod_evento and cod_pessoa_produtor = :cod_pessoa_produtor ');
            Q.ParamByName('cod_evento').AsInteger := CodEvento;
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.open;
            if Q.FieldByName('cod_animal_touro').isnull then begin
               CodAnimalRM := Q.FieldByName('cod_reprodutor_multiplo').asinteger;
               IndTouro := 'N';
            end else begin
               CodAnimalRM := Q.FieldByName('cod_animal_touro').asinteger;
               IndTouro := 'S';
            end;
            if IndTouro = 'S' then begin
               Q.SQL.clear;
               Q.SQL.Add('select ta.cod_animal_manejo, ta.cod_fazenda_manejo ');
               Q.SQL.Add(' from tab_animal ta ');
               Q.SQL.Add(' where ta.cod_animal = :cod_animal ');
               Q.SQL.Add(' and   ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
               Q.ParamByName('cod_animal').AsInteger := CodAnimalRM;
               Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
               Q.Open;
               if not Q.IsEmpty then begin
                 IntEvento.CodFazendaManejo := Q.FieldByName('cod_fazenda_manejo').AsInteger;
                 IntEvento.CodAnimalRMManejo := Q.FieldByName('cod_animal_manejo').AsString;
               end;
            end else begin
               Q.SQL.clear;
               Q.SQL.Add('select trm.cod_reprodutor_multiplo_manejo, trm.cod_fazenda_manejo ');
               Q.SQL.Add(' from tab_reprodutor_multiplo trm ');
               Q.SQL.Add(' where trm.cod_reprodutor_multiplo = :cod_rm ');
               Q.SQL.Add(' and   trm.cod_pessoa_produtor = :cod_pessoa_produtor ');
               Q.ParamByName('cod_rm').AsInteger := CodAnimalRM;
               Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
               Q.Open;
               if not Q.IsEmpty then begin
                 IntEvento.CodFazendaManejo := Q.FieldByName('cod_fazenda_manejo').AsInteger;
                 IntEvento.CodAnimalRMManejo := Q.FieldByName('cod_reprodutor_multiplo_manejo').AsString;
               end;
           end;
         end;
       end;
      end;
      //Verifica se o arquivo gerado não possui log's de erro
      if IntEvento.CodArquivoSisbov > 0 then begin
         Q.SQL.Clear;
         Q.SQL.Add(' select ind_possui_log_erro from tab_arquivo_sisbov ' +
                   ' where cod_arquivo_sisbov = :cod_arquivo_sisbov ');
         Q.ParamByName('cod_arquivo_sisbov').asinteger := IntEvento.CodArquivoSisbov;
         Q.Open;
         if Q.FieldByName('ind_possui_log_erro').asstring = 'S' then begin
            IntEvento.CodArquivoSisbov := 0;
            IntEvento.DtaGravacaoSisbov := 0;
            IntEvento.NomArquivoSisbov := '';
         end;
      end;
      // Retorna status "ok" do método
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(838, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -838;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirCastracao(DtaEvento: TDateTime;
  TxtObservacao: String; CodFazenda: Integer): Integer;
const
  Metodo: Integer = 295;
  NomeMetodo: String = 'InserirCastracao';
  CodTipoEvento: Integer = 5;
var
  CodEvento: Integer;
  TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

  try
    // Abre transação
    beginTran;

    // -------------------------------------------------------------------
    // Insere dados comuns a todos os tipos de eventos, recebendo o número
    // do evento inserido (capa do evento)
    // -------------------------------------------------------------------
    CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
      DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

    if CodEvento < 0 then begin
      Rollback;
      Exit;
    end;

    // Cofirma transação
    Commit;

    // Retorna código do registro inserido
    Result := CodEvento;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(882, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -882;
      Exit;
    end;
  end;
end;

function TIntEventos.InserirDesmame(DtaEvento: TDateTime; CodAptidao,
  CodRegimeAlimentarDestino: Integer; TxtObservacao: String;
  CodFazenda: Integer): Integer;
const
  Metodo: Integer = 301;
  NomeMetodo: String = 'InserirDesmame';
  CodTipoEvento: Integer = 2;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Consiste se a mudança de categoria é válida
  Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
    CodRegimeAlimentarDestino);
  if Result < 0 then Exit;

  TxtDados := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select ind_animal_mamando from tab_regime_alimentar ' +
                ' where cod_regime_alimentar = :cod_regime_alimentar_destino ');
{$ENDIF}
      Q.ParamByName('cod_regime_alimentar_destino').AsInteger := CodRegimeAlimentarDestino;
      Q.Open;
      if Q.FieldByName('ind_animal_mamando').AsString = 'S' then begin
        Mensagens.Adicionar(886, Self.ClassName, NomeMetodo, []);
        Result := -886;
        Exit;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudança de categoria
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_desmame ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_aptidao ' +
                '   , cod_regime_alimentar_destino) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_aptidao ' +
                '   , :cod_regime_alimentar_destino) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_regime_alimentar_destino').AsInteger := CodRegimeAlimentarDestino;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}

      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(883, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -883;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirMudCategoria(DtaEvento: TDateTime;
  TxtObservacao: String; CodAptidao, CodCategoriaOrigem,
  CodCategoriaDestino, CodFazenda: Integer): Integer;
const
  Metodo: Integer = 285;
  NomeMetodo: String = 'InserirMudCategoria';
  CodTipoEvento: Integer = 3;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Consiste se a mudança de categoria é válida
  Result := ConsistirMudancaCategoriaAnimal(CodTipoEvento, CodAptidao,
    CodCategoriaOrigem, CodCategoriaDestino);
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudança de categoria
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_mud_categoria ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_aptidao ' +
                '   , cod_categoria_origem ' +
                '   , cod_categoria_destino) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_aptidao ' +
                '   , :cod_categoria_origem ' +
                '   , :cod_categoria_destino)');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_categoria_origem').AsInteger := CodCategoriaOrigem;
      Q.ParamByName('cod_categoria_destino').AsInteger := CodCategoriaDestino;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(846, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -846;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirMudRegAlimentar(DtaEvento: TDateTime;
  TxtObservacao: String; CodAptidao, CodRegimeAlimentarOrigem,
  CodRegimeAlimentarDestino, CodFazenda: Integer): Integer;
const
  Metodo: Integer = 293;
  NomeMetodo: String = 'InserirMudRegAlimentar';
  CodTipoEvento: Integer = 1;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Consiste se o regime alimentar de origem se aplica a aptidao
  Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
    CodRegimeAlimentarOrigem);
  if Result < 0 then Exit;

  // Consiste se o regime alimentar de destino se aplica a aptidao
  Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
    CodRegimeAlimentarDestino);
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

//  if CodFazenda > 0 then begin
//    TxtDados := TxtDados + 'Fazenda: ' + NomFazenda + QuebraLinha;
//  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudança de categoria
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_mud_reg_alimentar ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_aptidao ' +
                '   , cod_regime_alimentar_origem ' +
                '   , cod_regime_alimentar_destino) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_aptidao ' +
                '   , :cod_regime_alimentar_origem ' +
                '   , :cod_regime_alimentar_destino) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_regime_alimentar_origem').AsInteger := CodRegimeAlimentarOrigem;
      Q.ParamByName('cod_regime_alimentar_destino').AsInteger := CodRegimeAlimentarDestino;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(880, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -880;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirSelecaoReproducao(DtaEvento: TDateTime;
  TxtObservacao: String; CodFazenda: Integer): Integer;
const
  Metodo: Integer = 294;
  NomeMetodo: String = 'InserirSelecaoReproducao';
  CodTipoEvento: Integer = 4;
var
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

//  if CodFazenda > 0 then begin
//    TxtDados := TxtDados + 'Fazenda: ' + NomFazenda;
//  end;

  try
    // Abre transação
    beginTran;

    // -------------------------------------------------------------------
    // Insere dados comuns a todos os tipos de eventos, recebendo o número
    // do evento inserido (capa do evento)
    // -------------------------------------------------------------------
    CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
      DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

    if CodEvento < 0 then begin
      Rollback;
      Exit;
    end;

    // Cofirma transação
    Commit;

    // Retorna código do registro inserido
    Result := CodEvento;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(881, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -881;
      Exit;
    end;
  end;
end;

function TIntEventos.AlterarObservacao(CodEvento: Integer;
  TxtObservacao: String): Integer;
const
  Metodo: Integer = 305;
  NomeMetodo: String = 'AlterarObservacao';
var
  Q: THerdomQuery;
  CodRegistroLog: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se cadastro já está efetivado
  Result := CadastroEfetivado('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
  if Result < 0 then Exit;
  if Result = 1 then begin
    Mensagens.Adicionar(1047, Self.ClassName, NomeMetodo, []);
    Result := -1047;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Consiste o evento
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_registro_log from tab_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(902, Self.ClassName, NomeMetodo, []);
        Result := -902;
        Exit;
      end;
      CodRegistroLog := Q.FieldByName('cod_registro_log').AsInteger;

      // Abre transação
      beginTran;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_evento', CodRegistroLog, 2, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Altera o atributo do conteúdo observação
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento set txt_observacao = :txt_observacao ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('txt_observacao').DataType := ftString;
      AtribuiValorParametro(Q.ParamByName('txt_observacao'), TxtObservacao);
      Q.ExecSQL;

      // Grava Log de Operação (NomTabela, CodRegistroLog, CodOperacao, CodMetodo)
      // CodOperacao: 1-Insert, 2-Alteração Antes, 3-Alteração Após, 4-Exclusão, 5-Finalização Validade
      Result := GravarLogOperacao('tab_evento', CodRegistroLog, 3, Metodo);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      // Cofirma transação
      Commit;

      // Retorna 0, identificando procedimento como bem sucedido.
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(901, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -901;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirMudancaLote(DtaEvento: TDateTime;
  TxtObservacao: String; CodFazenda,
  CodLoteDestino: Integer): Integer;
const
  Metodo: Integer = 308;
  NomeMetodo: String = 'InserirMudancaLote';
  CodTipoEvento: Integer = 6;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Consiste se o lote de destino é válido
  Result := ConsistirLote(CodLoteDestino,CodFazenda);
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudança de lote
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_mudanca_lote ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_fazenda ' +
                '   , cod_lote_destino) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_fazenda ' +
                '   , :cod_lote_destino) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_lote_destino').AsInteger := CodLoteDestino;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(916, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -916;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirDesaparecimento(DtaEvento: TDateTime;
  TxtObservacao: String; CodFazenda: Integer): Integer;
const
  Metodo: Integer = 314;
  NomeMetodo: String = 'InserirDesaparecimento';
  CodTipoEvento: Integer = 11;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  TxtDados := '';

//  if CodFazenda > 0 then begin
//    TxtDados := TxtDados + 'Fazenda: ' + NomFazenda;
//  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // Cofirma transação
      Commit;

      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(934, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -934;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirMorte(DtaEvento: TDateTime;
  TxtObservacao: String; CodTipoMorte,
  CodCausaMorte, CodFazenda: Integer): Integer;
const
  Metodo: Integer = 315;
  NomeMetodo: String = 'InserirMorte';
  CodTipoEvento: Integer = 12;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
//  DadosAnimal: TDadosAnimal; --------
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Consiste se o tipo de morte e a causa da morte são válidos e compatíveis
  Result := ConsistirTipoCausaMorte(CodTipoMorte,CodCausaMorte);
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

//  if CodFazenda > 0 then begin
//    TxtDados := TxtDados + 'Fazenda: ' + NomFazenda + QuebraLinha;
//  end;

  // Buscando Descrição do tipo de morte e causa de morte

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento Morte
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_morte ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_tipo_morte ' +
                '   , cod_causa_morte) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_tipo_morte ' +
                '   , :cod_causa_morte) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_tipo_morte').AsInteger := CodTipoMorte;
      Q.ParamByName('cod_causa_morte').AsInteger := CodCausaMorte;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(944, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -944;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirMudancaLocal(DtaEvento: TDateTime;
  TxtObservacao: String; CodAptidao, CodFazenda, CodLocalDestino,
  CodRegAlimentarMamando, CodRegAlimentarDesmamado: Integer): Integer;
const
  Metodo: Integer = 316;
  NomeMetodo: String = 'InserirMudancaLocal';
  CodTipoEvento: Integer = 7;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Consiste se o local é válido
  Result := ConsistirLocal(CodLocalDestino, CodFazenda);
  if Result < 0 then Exit;

  // Consiste se os regimes são válidos e compatíveis com a aptidão e Local
  Result := ConsistirMudancaLocal(CodLocalDestino, CodFazenda, CodAptidao,
            CodRegAlimentarMamando, CodRegAlimentarDesmamado);
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudanca de local
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_mudanca_local ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_aptidao ' +
                '   , cod_fazenda ' +
                '   , cod_local_destino ' +
                '   , cod_reg_alimentar_mamando ' +
                '   , cod_reg_alimentar_desmamado) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_aptidao ' +
                '   , :cod_fazenda ' +
                '   , :cod_local_destino ');
      if CodRegAlimentarMamando > 0
         then Q.SQL.Add(' , :cod_regime_alimentar_mamando ' )
         else Q.SQL.Add(' , null ' );
      Q.SQL.Add('   , :cod_regime_alimentar_desmamado) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local_destino').AsInteger := CodLocalDestino;
      if CodRegAlimentarMamando > 0
         then Q.ParamByName('cod_regime_alimentar_mamando').AsInteger := CodRegAlimentarMamando;
      Q.ParamByName('cod_regime_alimentar_desmamado').AsInteger := CodRegAlimentarDesmamado;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(954, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -954;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.Pesquisar(CodEvento, CodTipoEvento: Integer; DtaInicio,
         DtaFim: TDateTime; TxtDados, CodSituacaoSisBov: String;
         CodFazenda: Integer; IndAplicadoAnimais, CodOrdenacao,
         IndOrdenacaoCrescente: String; CodGrupoEvento: Integer): Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado('Pesquisar');
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(320) then begin
    Mensagens.Adicionar(188, Self.ClassName, 'Pesquisar', []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, 'Pesquisar', []);
    Result := -307;
    Exit;
  end;

  // Verifica se qdo txtdados for informado, o intervalo de datas deve ser também
  if TxtDados <> ''  then begin
    if (DtaInicio = 0) or (DtaFim = 0) then begin
       Mensagens.Adicionar(984, Self.ClassName, 'Pesquisar', []);
       Result := -984;
       Exit;
    end;
  end;

  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select te.cod_evento as CodEvento, ' +
                '       te.cod_tipo_evento as CodTipoEvento, ' +
                '       tte.des_tipo_evento as DesTipoEvento, ' +
                '       te.dta_inicio as DtaInicio, ' +
                '       te.dta_fim as DtaFim, ' +
                '       te.cod_fazenda as CodFazenda, ' +
                '       tf.sgl_fazenda as SglFazenda, ' +
                '       te.cod_situacao_sisbov as CodSituacaoSisBov, ' +
                '       te.qtd_animais as QtdAnimais, ' +
                '       te.txt_dados as TxtDados, ' +
                '       tte.ind_restrito_sistema as IndRestritoSistema ' +
                '  from tab_evento as te, ' +
                '       tab_tipo_evento as tte, ' +
                '       tab_fazenda as tf ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_tipo_evento = tte.cod_tipo_evento ' +
                '   and tf.cod_pessoa_produtor =* te.cod_pessoa_produtor ' +
                '   and tf.cod_fazenda =* te.cod_fazenda ' +
                '   and tte.cod_grupo_evento = :cod_grupo_evento ');
  if CodEvento > 0 then
     Query.SQL.Add('   and te.cod_evento = :cod_evento ');

  if CodFazenda > 0 then begin
     Query.SQL.Add('   and te.cod_fazenda = :cod_fazenda ');
  end Else if CodFazenda = 0 then begin
              Query.SQL.Add('   and te.cod_fazenda is null ');
           end;
  if CodTipoEvento > 0 then
     Query.SQL.Add('   and te.cod_tipo_evento = :cod_tipo_evento ');
  if (DtaInicio > 0) and (DtaFim > 0) then begin
     Query.SQL.Add('   and (te.dta_inicio between :dta_inicio and :dta_fim or ');
     Query.SQL.Add('        te.dta_fim between :dta_inicio and :dta_fim) ');
  end;
  if TxtDados <> '' then
     Query.SQL.Add('   and te.txt_dados like :txt_dados ');
  if CodSituacaoSisBov <> '' then begin
     CodSituacaoSisBov:= #39 + CodSituacaoSisBov + #39;
     Query.SQL.Add('   and te.cod_situacao_sisbov in (' + CodSituacaoSisbov + ')');
  end;
  if IndAplicadoAnimais = 'S' then
     Query.SQL.Add('   and te.qtd_animais > 0 ');
  if IndAplicadoAnimais = 'N' then
     Query.SQL.Add('   and te.qtd_animais = 0 ');
  if Uppercase(CodOrdenacao) = 'C' then begin
    Query.SQL.Add(' order by te.cod_evento ');
    if Uppercase(IndOrdenacaoCrescente) = 'N' then
       Query.SQL.Add(' desc ');
  end;
  if Uppercase(CodOrdenacao) = 'T' then begin
    if Uppercase(IndOrdenacaoCrescente) = 'N'
       then Query.SQL.Add(' order by tte.des_tipo_evento, te.dta_inicio desc, te.cod_evento desc ')
       else Query.SQL.Add(' order by tte.des_tipo_evento, te.dta_inicio, te.cod_evento ');
  end;
  if Uppercase(CodOrdenacao) = 'D' then begin
    if Uppercase(IndOrdenacaoCrescente) = 'N'
       then Query.SQL.Add(' order by te.dta_inicio desc, te.cod_evento desc ')
       else Query.SQL.Add(' order by te.dta_inicio, te.cod_evento ');
  end;
{$ENDIF}

  Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
  Query.ParamByName('cod_grupo_evento').AsInteger := CodGrupoEvento;
  if CodEvento > 0 then
     Query.ParamByName('cod_evento').AsInteger := CodEvento;

  if CodFazenda > 0 then begin
     Query.ParamByName('cod_fazenda').AsInteger := CodFazenda;
  end;

  if CodTipoEvento > 0 then
     Query.ParamByName('cod_tipo_evento').AsInteger := CodTipoEvento;
  if (DtaInicio > 0) and (DtaFim > 0) then begin
     Query.ParamByName('dta_inicio').AsDateTime := DtaInicio;
     Query.ParamByName('dta_fim').AsDateTime := DtaFim;
  end;
  if TxtDados <> '' then
     Query.ParamByName('txt_dados').AsString := '%' + TxtDados + '%';

  try
    Query.Open;
    Result := 0;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(986, Self.ClassName, 'Pesquisar', [E.Message]);
      Result := -986;
      Exit;
    end;
  end;
end;

function TIntEventos.InserirVendaCriador(DtaSaidaOrigem,
                                         DtaChegadaDestino: TDateTime;
                                         TxtObservacao,
                                         NumImovelReceitaFederal: String;
                                         CodLocalizacaoSISBOV: String;
                                         CodPropriedadeRural,
                                         CodPessoa,
                                         CodPessoaSecundaria: Integer;
                                         NumCNPJCPFPessoaSecundaria: String;
                                         DtaEmissaoGTA: TDateTime;
                                         NumGTA: String;
                                         CodFazenda: Integer;
                                         IndEventoCertTerceira, CodSerieGTA: String;
                                         CodEstadoGTA: Integer;
                                         IndMovNErasEras: String;
                                         DtaValidadeGTA: TDateTime): Integer;
const
  Metodo: Integer = 321;
  NomeMetodo: String = 'InserirVendaCriador';
  CodTipoEvento: Integer = 9;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda,
  TxtDados,
  NIRF,
  CNPJSEC,
  CNPJSECF,
  NomPropriedade,
  NomPessoa: String;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then
  begin
    Exit;
  end;

  // Verifica DtaSaidaOrigem
  if DtaSaidaOrigem = 0 then
  begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de saída da origem']);
    Result := -309;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino = 0 then
  begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de chegada ao destino']);
    Result := -309;
    Exit;
  end;

  if DtaSaidaOrigem > DateOf(Now) then
  begin
    Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
      ['Data de saída da origem']);
    Result := -2105;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino > DateOf(Now) then
  begin
    Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
      ['Data de chegada ao destino']);
    Result := -2105;
    Exit;
  end;

  if DtaEmissaoGTA > DateOf(Now) then
  begin
    Mensagens.Adicionar(1283, Self.ClassName, NomeMetodo, []);
    Result := -1283;
    Exit;
  end;

  // Consiste datas
  if DtaChegadaDestino < DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
    Result := -1007;
    Exit;
  end;

  // Verifica DtaEmissaoGTA
  if DtaEmissaoGTA > DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
    Result := -1008;
    Exit;
  end;

  // Verifica DtaValidadeGTA
  if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
  begin
    Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
    Result := -2337;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then
  begin
    Exit;
  end;

  if (CodPessoa > 0) and
     (CodFazenda > 0) then
  begin
    if (CodPessoa = Conexao.CodProdutorTrabalho) and
       (CodFazenda = Conexao.CodFazendaTrabalho) then
    begin
      Mensagens.Adicionar(2260, Self.ClassName, NomeMetodo, []);
      Result := -2260;
      Exit;
    end;
  end;


  if (UpperCase(IndEventoCertTerceira) = 'S') and
     ({(Length(Trim(NumImovelReceitaFederal)) = 0) or}
      (Length(Trim(NumCNPJCPFPessoaSecundaria)) = 0)) then
  begin
    Mensagens.Adicionar(2268, Self.ClassName, NomeMetodo, []);
    Result := -2268;
    Exit;
  end;

  if (UpperCase(IndEventoCertTerceira) = 'N') or
     (UpperCase(IndEventoCertTerceira) <> 'S') then
  begin
    CodLocalizacaoSISBOV := '';
  end;

  if (UpperCase(IndMovNErasEras) <> 'S') then begin
    IndMovNErasEras := 'N';
  end;

  // Verifica Propriedade Rural
  NIRF := '';
  if NumImovelReceitaFederal <> '' then
  begin
    if CodPropriedadeRural > 0 then
    begin
      Mensagens.Adicionar(1005, Self.ClassName, NomeMetodo, []);
      Result := -1005;
      Exit;
    end
    else
    if not ValidaNirfIncra(NumImovelReceitaFederal, True) then
    begin
      Mensagens.Adicionar(494, Self.ClassName, NomeMetodo, [NumImovelReceitaFederal]);
      Result := -494;
      Exit;
    end
    else
    begin
      NIRF := NumImovelReceitaFederal;
    end;
  end;

  if CodPropriedadeRural > 0 then
  begin
    if NumImovelReceitaFederal <> '' then
    begin
      Mensagens.Adicionar(1005, Self.ClassName, NomeMetodo, []);
      Result := -1005;
      Exit;
    end
  end;

  if (UpperCase(IndEventoCertTerceira) = 'S') then
  begin
    Result := VerificaCNPJCPF(NumCNPJCPFPessoaSecundaria);
    if Result < 0 then
    begin
      Exit;
    end;
  end
  else
  begin
    // Consiste Pessoa Secundaria
    CNPJSEC := '';
    if NumCNPJCPFPessoaSecundaria <> '' then
    begin
      if CodPessoaSecundaria < 0 then
      begin
        Result := VerificaCNPJCPF(NumCNPJCPFPessoaSecundaria);
        if Result < 0 then
        begin
          Exit;
        end;
        CodPessoaSecundaria := BuscarPessoaSecundaria(NumCNPJCPFPessoaSecundaria, 1);
        CNPJSEC := NumCNPJCPFPessoaSecundaria;
        CNPJSECF := NumCNPJCPFPessoaSecundaria;
      end;
    end;
  end;

  if CodPessoaSecundaria > 0 then
  begin
    Result := VerificaPessoaSecundaria(CodPessoaSecundaria, 1, False, 'Criador', NomPessoa, CNPJSEC, CNPJSECF);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  // Descrevendo TxtDados
  TxtDados := '';

  // Gravando dados
  try
    Q := THerdomQuery.Create(Conexao, nil);
    try
      // Obtem o código do criador se existir algum produtor com
      // o CNPJ/CPF informado
      if (CodPessoa = -1) and (NumCNPJCPFPessoaSecundaria <> '') and (UpperCase(IndEventoCertTerceira) <> 'S') then
      begin
        with Q do
        begin
          SQL.Clear;
          SQL.Add('SELECT cod_pessoa');
          SQL.Add('  FROM tab_pessoa tp,');
          SQL.Add('       tab_produtor tpp');
          SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
          SQL.Add('   AND tp.cod_pessoa = tpp.cod_pessoa_produtor');
          SQL.Add('   AND tp.dta_fim_validade is null');
          ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoaSecundaria;
          Open;

          if not IsEmpty then
          begin
            CodPessoa := FieldByName('cod_pessoa').AsInteger;
            CodPessoaSecundaria := -1;
          end;
        end;
      end;

      if UpperCase(IndEventoCertTerceira) <> 'S' then
      begin
        // Se a propriedade rural (código ou NIRF/ICNRA) foi informada verifica se
        // esta é válida
        Result := VerificaPropriedadeRural(CodPropriedadeRural, False,
          'Propriedade rural', NIRF, StrToIntDef(CodLocalizacaoSISBOV, 0), NomPropriedade, CodPessoa);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      if UpperCase(IndMovNErasEras) = 'S' then begin
        // Se a movimentação for de não eras para eras, verifica se a propriedade de origem
        // não foi exportada para o sisbov
        Result := VerificaPropriedadeNaoEras(Conexao.CodProdutorTrabalho, CodFazenda, 0);
        if Result < 0 then begin
          Exit;
        end;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then
      begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento venda criador
      // -------------------------------------------------------------------
      with Q do
      begin
        SQL.Clear;
        SQL.Add('insert into tab_evento_venda_criador (');
        SQL.Add('     cod_pessoa_produtor');
        SQL.Add('   , cod_evento');
        SQL.Add('   , num_imovel_receita_federal');
        SQL.Add('   , cod_propriedade_rural');
        SQL.Add('   , num_cnpj_cpf_pessoa_secundaria');
        SQL.Add('   , cod_pessoa_secundaria');
        SQL.Add('   , cod_pessoa');
        SQL.Add('   , num_gta');
        SQL.Add('   , cod_serie_gta');
        SQL.Add('   , cod_estado_gta');
        SQL.Add('   , dta_emissao_gta');
        SQL.Add('   , dta_validade_gta');
        SQL.Add('   , ind_venda_certif_terceira');
        SQL.Add('   , cod_exportacao_propriedade');
        SQL.Add('   , ind_mov_naoeras_eras ');
        SQL.Add(') values (');
        SQL.Add('     :cod_pessoa_produtor');
        SQL.Add('   , :cod_evento');
        SQL.Add('   , :num_imovel_receita_federal');
        SQL.Add('   , :cod_propriedade_rural');
        SQL.Add('   , :num_cnpj_cpf_pessoa_secundaria');
        SQL.Add('   , :cod_pessoa_secundaria');
        SQL.Add('   , :cod_pessoa');
        SQL.Add('   , :num_gta');
        SQL.Add('   , :cod_serie_gta');
        SQL.Add('   , :cod_estado_gta');
        SQL.Add('   , :dta_emissao_gta');
        SQL.Add('   , :dta_validade_gta');
        SQL.Add('   , :ind_venda_certif_terceira');
        SQL.Add('   , :cod_exportacao_propriedade');
        SQL.Add('   , :ind_mov_naoeras_eras');
        SQL.Add(')');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;

        AtribuiParametro(Q, NIRF, 'num_imovel_receita_federal', '');
        AtribuiParametro(Q, CodPropriedadeRural, 'cod_propriedade_rural', -1);
        AtribuiParametro(Q, CodPessoaSecundaria, 'cod_pessoa_secundaria', -1);
        AtribuiParametro(Q, CodPessoa, 'cod_pessoa', -1);
        AtribuiParametro(Q, NumCNPJCPFPessoaSecundaria, 'num_cnpj_cpf_pessoa_secundaria', '');
        AtribuiParametro(Q, NumGTA, 'num_gta', '');
        AtribuiParametro(Q, CodSerieGTA, 'cod_serie_gta', '');
        if CodEstadoGTA > 0 then begin
          Q.ParamByName('cod_estado_gta').AsInteger := CodEstadoGTA;
        end Else begin
          Q.ParamByName('cod_estado_gta').DataType := ftInteger;
          Q.ParamByName('cod_estado_gta').Clear;
        end;
        AtribuiParametro(Q, DtaEmissaoGTA, 'dta_emissao_gta', 0);
        AtribuiParametro(Q, DtaValidadeGTA, 'dta_validade_gta', 0);
        AtribuiParametro(Q, IndEventoCertTerceira, 'ind_venda_certif_terceira', '');
        AtribuiParametro(Q, CodLocalizacaoSISBOV, 'cod_exportacao_propriedade', '');
        AtribuiParametro(Q, UpperCase(IndMovNErasEras), 'ind_mov_naoeras_eras', '');
        ExecSQL;
      end;

      with Q do
      begin
        SQL.Clear;
        {$IFDEF MSSQL}
        Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
        {$ENDIF}
        Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').asinteger := CodEvento;
        ExecSQL;
      end;
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    finally
      Q.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(1009, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1009;
      Exit;
    end;
  end;
end;

function TIntEventos.BuscarFrigorifico(NumCNPJFrigorifico: String): Integer;
const
  NomeMetodo: String = 'BuscarFrigorifico';
var
  Q: THerdomQuery;
begin

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Text :=
        'select '+
        '  tp.cod_pessoa as CodPessoaFrigorifico '+
        'from '+
        '  tab_pessoa tp, '+
        '  tab_papel tpa, '+
        '  tab_pessoa_papel tpp '+
        'where '+
        '  tp.num_cnpj_cpf = :num_cnpj_cpf '+
        '  and tp.dta_fim_validade is null '+
        '  and (tp.cod_natureza_pessoa = tpa.cod_natureza_pessoa '+
        '       or tpa.cod_natureza_pessoa = ''A'') '+
        '  and tpp.cod_pessoa = tp.cod_pessoa '+
        '  and tpp.dta_fim_validade is null '+
        '  and tpp.cod_papel = tpa.cod_papel '+
        '  and tpa.cod_papel = 6 ';
      Q.ParamByName('num_cnpj_cpf').AsString := NumCNPJFrigorifico;
      Q.Open;
      if Q.IsEmpty then begin
        Result := -1;
      end else begin
        Result := Q.FieldByName('CodPessoaFrigorifico').AsInteger;
      end;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1311, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1311;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirVendaFrigorifico(DtaSaidaOrigem,
  DtaChegadaDestino: TDateTime; TxtObservacao, NumCNPJCPFPessoa: String;
  CodPessoa: Integer; DtaEmissaoGTA: TDateTime; NumGTA: String;
  CodFazenda: Integer; CodSerieGta: String; CodEstadoGta: Integer;
  DtaValidadeGTA: TDateTime): Integer;
const
  Metodo: Integer = 322;
  NomeMetodo: String = 'InserirVendaFrigorifico';
  CodTipoEvento: Integer = 10;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados, CNPJ, CNPJF, NomPessoa: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Verifica DtaSaidaOrigem
  if DtaSaidaOrigem = 0 then begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de saída da origem']);
    Result := -309;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino = 0 then begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de chegada ao destino']);
    Result := -309;
    Exit;
  end;

  // Consiste datas
  if DtaChegadaDestino < DtaSaidaOrigem then begin
    Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
    Result := -1007;
    Exit;
  end;

  // Verifica DtaValidadeGTA
  if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
  begin
    Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
    Result := -2337;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Verifica Propriedade Rural
  CNPJ := '';
  if NumCNPJCPFPessoa <> '' then begin
    if CodPessoa > 0 then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaCNPJCPF(NumCNPJCPFPessoa);
      if Result < 0 then Exit;
      CNPJ := NumCNPJCPFPessoa;
      CNPJF := NumCNPJCPFPessoa;
    end;
  end;

  if CodPessoa > 0 then begin
    if NumCNPJCPFPessoa <> '' then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaPessoa(CodPessoa, 6, False, 'Frigorífico', NomPessoa, CNPJ, CNPJF);
      if Result < 0 then begin
        Exit;
      end;
    end;
  end;

  // Verifica DtaEmissaoGTA
  if DtaEmissaoGTA > DtaSaidaOrigem then begin
    Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
    Result := -1008;
    Exit;
  end;

  // Descrevendo TxtDados
  TxtDados := '';
  // Gravando dados
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, TxtObservacao,
        CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudanca de local
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_venda_frigorifico ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , num_cnpj_cpf_frigorifico ' +
                '   , cod_pessoa ' +
                '   , num_gta ' +
                '   , cod_serie_gta ' +
                '   , cod_estado_gta ' +
                '   , dta_emissao_gta ' +
                '   , dta_validade_gta) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :num_cnpj_cpf_frigorifico ' +
                '   , :cod_pessoa ' +
                '   , :num_gta ' +
                '   , :cod_serie_gta ' +
                '   , :cod_estado_gta ' +
                '   , :dta_emissao_gta ' +
                '   , :dta_validade_gta) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CNPJ <> '' then begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').AsString := CNPJ;
        if CodPessoa <= 0
           then CodPessoa := BuscarFrigorifico(CNPJ);
      end Else begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').DataType := ftString;
        Q.ParamByName('num_cnpj_cpf_frigorifico').Clear;
      end;
      if CodPessoa > 0 then begin
        Q.ParamByName('cod_pessoa').AsInteger := CodPessoa;
      end Else begin
        Q.ParamByName('cod_pessoa').DataType := ftInteger;
        Q.ParamByName('cod_pessoa').Clear;
      end;
      if NumGTA <> '' then begin
        Q.ParamByName('num_gta').AsString := NumGTA;
      end Else begin
        Q.ParamByName('num_gta').DataType := ftString;
        Q.ParamByName('num_gta').Clear;
      end;
      if CodSerieGTA <> '' then begin
        Q.ParamByName('cod_serie_gta').AsString := CodSerieGTA;
      end Else begin
        Q.ParamByName('cod_serie_gta').DataType := ftString;
        Q.ParamByName('cod_serie_gta').Clear;
      end;
      if CodEstadoGTA > 0 then begin
        Q.ParamByName('cod_estado_gta').AsInteger := CodEstadoGTA;
      end Else begin
        Q.ParamByName('cod_estado_gta').DataType := ftInteger;
        Q.ParamByName('cod_estado_gta').Clear;
      end;
      if DtaEmissaoGTA > 0 then begin
        Q.ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
      end Else begin
        Q.ParamByName('dta_emissao_gta').DataType := ftDateTime;
        Q.ParamByName('dta_emissao_gta').Clear;
      end;
      if DtaValidadeGTA > 0 then begin
        Q.ParamByName('dta_validade_gta').AsDateTime := DtaValidadeGTA;
      end Else begin
        Q.ParamByName('dta_validade_gta').DataType := ftDateTime;
        Q.ParamByName('dta_validade_gta').Clear;
      end;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1013, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1013;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirRetornoFrigorifico(DtaSaidaOrigem,
  DtaChegadaDestino: TDateTime; TxtObservacao, NumCNPJCPFPessoa: String;
  CodPessoa: Integer; DtaEmissaoGTA: TDateTime; NumGTA: String;
  CodFazenda: Integer; CodSerieGta: String; CodEstadoGta: Integer; DtaValidadeGTA: TDateTime): Integer;
const
  Metodo: Integer = 322;
  NomeMetodo: String = 'InserirRetornoFrigorifico';
  CodTipoEvento: Integer = 36;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados, CNPJ, CNPJF, NomPessoa: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Verifica DtaSaidaOrigem
  if DtaSaidaOrigem = 0 then begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de saída da origem']);
    Result := -309;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino = 0 then begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de chegada ao destino']);
    Result := -309;
    Exit;
  end;

  // Consiste datas
  if DtaChegadaDestino < DtaSaidaOrigem then begin
    Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
    Result := -1007;
    Exit;
  end;

  // Verifica DtaValidadeGTA
  if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
  begin
    Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
    Result := -2337;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Verifica Propriedade Rural
  CNPJ := '';
  if NumCNPJCPFPessoa <> '' then begin
    if CodPessoa > 0 then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaCNPJCPF(NumCNPJCPFPessoa);
      if Result < 0 then Exit;
      CNPJ := NumCNPJCPFPessoa;
      CNPJF := NumCNPJCPFPessoa;
    end;
  end;

  if CodPessoa > 0 then begin
    if NumCNPJCPFPessoa <> '' then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaPessoa(CodPessoa, 6, False, 'Frigorífico', NomPessoa, CNPJ, CNPJF);
      if Result < 0 then begin
        Exit;
      end;
    end;
  end;

  // Verifica DtaEmissaoGTA
  if DtaEmissaoGTA > DtaSaidaOrigem then begin
    Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
    Result := -1008;
    Exit;
  end;

  // Descrevendo TxtDados
  TxtDados := '';
  // Gravando dados
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, TxtObservacao,
        CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudanca de local
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_retorno_frigorifico ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , num_cnpj_cpf_frigorifico ' +
                '   , cod_pessoa ' +
                '   , num_gta ' +
                '   , cod_serie_gta ' +
                '   , cod_estado_gta ' +
                '   , dta_emissao_gta ' +
                '   , dta_validade_gta) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :num_cnpj_cpf_frigorifico ' +
                '   , :cod_pessoa ' +
                '   , :num_gta ' +
                '   , :cod_serie_gta ' +
                '   , :cod_estado_gta ' +
                '   , :dta_emissao_gta ' +
                '   , :dta_validade_gta) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CNPJ <> '' then begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').AsString := CNPJ;
        if CodPessoa <= 0
           then CodPessoa := BuscarFrigorifico(CNPJ);
      end Else begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').DataType := ftString;
        Q.ParamByName('num_cnpj_cpf_frigorifico').Clear;
      end;
      if CodPessoa > 0 then begin
        Q.ParamByName('cod_pessoa').AsInteger := CodPessoa;
      end Else begin
        Q.ParamByName('cod_pessoa').DataType := ftInteger;
        Q.ParamByName('cod_pessoa').Clear;
      end;
      if NumGTA <> '' then begin
        Q.ParamByName('num_gta').AsString := NumGTA;
      end Else begin
        Q.ParamByName('num_gta').DataType := ftString;
        Q.ParamByName('num_gta').Clear;
      end;
      if CodSerieGTA <> '' then begin
        Q.ParamByName('cod_serie_gta').AsString := CodSerieGTA;
      end Else begin
        Q.ParamByName('cod_serie_gta').DataType := ftString;
        Q.ParamByName('cod_serie_gta').Clear;
      end;
      if CodEstadoGTA > 0 then begin
        Q.ParamByName('cod_estado_gta').AsInteger := CodEstadoGTA;
      end Else begin
        Q.ParamByName('cod_estado_gta').DataType := ftInteger;
        Q.ParamByName('cod_estado_gta').Clear;
      end;
      if DtaEmissaoGTA > 0 then begin
        Q.ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
      end Else begin
        Q.ParamByName('dta_emissao_gta').DataType := ftDateTime;
        Q.ParamByName('dta_emissao_gta').Clear;
      end;
      if DtaValidadeGTA > 0 then begin
        Q.ParamByName('dta_validade_gta').AsDateTime := DtaEmissaoGTA;
      end Else begin
        Q.ParamByName('dta_validade_gta').DataType := ftDateTime;
        Q.ParamByName('dta_validade_gta').Clear;
      end;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1013, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1013;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;


function TIntEventos.VerificaPropriedadeRural(var CodPropriedade: Integer;
  Obrigatorio: Boolean; NomeCampo: String; var NIRF: String;
  CodLocalizacaoSISBOV: Integer; var NomPropriedade: String;
  CodPessoa: Integer): Integer;
const
  NomeMetodo: String = 'VerificaPropriedadeRural';
var
  QueryLocal: THerdomQuery;
begin
  if (CodPropriedade <= 0) and (NIRF = '') then
  begin
    if Obrigatorio then
    begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end
    else
    begin
      Result := 0;
      Exit;
    end;
  end;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      if CodPropriedade > -1 then
      begin
        with QueryLocal do
        begin
          SQL.Clear;
{$IFDEF MSSQL}
          SQL.Add('SELECT num_imovel_receita_federal,');
          SQL.Add('       nom_propriedade_rural');
          SQL.Add('  FROM tab_propriedade_rural');
          SQL.Add(' WHERE cod_propriedade_rural = :cod_propriedade_rural');
          SQL.Add('   AND dta_fim_validade is null');
{$ENDIF}
          ParamByName('cod_propriedade_rural').AsInteger := CodPropriedade;
          Open;
          if IsEmpty then
          begin
            Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
            Result := -497;
            Exit;
          end;

          NIRF := FieldByName('num_imovel_receita_federal').AsString;
          NomPropriedade := FieldByName('nom_propriedade_rural').AsString;
        end;
      end
      else
      if (NIRF <> '') and (CodLocalizacaoSISBOV = -1) then
      begin
        // Verifica se existe sómente uma propriedade para o NIRF/INCRA informado
        with QueryLocal do
        begin
          SQL.Clear;
{$IFDEF MSSQL}
          SQL.Add('SELECT num_imovel_receita_federal,');
          SQL.Add('       MAX(cod_propriedade_rural) AS cod_propriedade_rural,');
          SQL.Add('       MAX(nom_propriedade_rural) AS nom_propriedade_rural,');
          SQL.Add('       COUNT(*) as QtdPropriedades');
          SQL.Add('  FROM tab_propriedade_rural');
          SQL.Add(' WHERE num_imovel_receita_federal = :num_imovel_receita_federal');
          SQL.Add('   AND dta_fim_validade is null');
          SQL.Add('GROUP BY num_imovel_receita_federal');
{$ENDIF}
          ParamByName('num_imovel_receita_federal').AsString := NIRF;
          Open;
          if FieldByName('QtdPropriedades').AsInteger = 0 then
          begin
            Result := 0;
            Exit;
          end;

          if FieldByName('QtdPropriedades').AsInteger > 1 then
          begin
            Mensagens.Adicionar(2095, Self.ClassName, NomeMetodo, [NomeCampo]);
            Result := -2095;
            Exit;
          end;

          CodPropriedade := FieldByName('cod_propriedade_rural').AsInteger;
          NomPropriedade := FieldByName('nom_propriedade_rural').AsString;
        end;
      end
      else
      if (NIRF <> '') and (CodLocalizacaoSISBOV > -1) then
      begin
        // Verifica se existe sómente uma propriedade para o NIRF/INCRA
        // e o código de localização SISBOV informado
        with QueryLocal do
        begin
          SQL.Clear;
{$IFDEF MSSQL}
          SQL.Add('SELECT tpr.num_imovel_receita_federal,');
          SQL.Add('       tpr.cod_propriedade_rural,');
          SQL.Add('       tpr.nom_propriedade_rural,');
          SQL.Add('       tls.cod_localizacao_sisbov');
          SQL.Add('  FROM tab_propriedade_rural tpr,');
          SQL.Add('       tab_localizacao_sisbov tls');;
          SQL.Add(' WHERE tpr.num_imovel_receita_federal = :num_imovel_receita_federal');
          SQL.Add('   AND tls.cod_localizacao_sisbov = :cod_localizacao_sisbov');
          SQL.Add('   AND tls.cod_pessoa_produtor = :cod_pessoa_produtor');
          SQL.Add('   AND tpr.cod_propriedade_rural = tls.cod_propriedade_rural');
          SQL.Add('   AND tpr.dta_fim_validade is null');
{$ENDIF}
          ParamByName('num_imovel_receita_federal').AsString := NIRF;
          ParamByName('cod_localizacao_sisbov').AsInteger := CodLocalizacaoSISBOV;
          ParamByName('cod_pessoa_produtor').AsInteger := CodPessoa;
          Open;

          if IsEmpty then
          begin
            Mensagens.Adicionar(2094, Self.ClassName, NomeMetodo,
              [NIRF + ' - código exportação: ' +
              IntToStr(CodLocalizacaoSISBOV)]);
            Result := -2094;
            Exit;
          end;

          CodPropriedade := FieldByName('cod_propriedade_rural').AsInteger;
          NomPropriedade := FieldByName('nom_propriedade_rural').AsString;
        end;
      end
      else
      begin
        Mensagens.Adicionar(2096, Self.ClassName, NomeMetodo, []);
        Result := -2096;
        Exit;
      end;
      Result := 0;
    finally
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(496, Self.ClassName, NomeMetodo,
        [E.Message, NomeCampo]);
      Result := -496;
      Exit;
    end;
  end;
end;

function TIntEventos.VerificaPropriedadeNaoEras(CodPessoaProdutor, CodFazenda, CodLocalizacaoPropriedade: Integer): Integer;
const
  NomeMetodo: String = 'VerificaPropriedadeNaoEras';
var
  QueryLocal: THerdomQuery;
begin

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      with QueryLocal do
      begin
        SQL.Clear;

        if CodFazenda > 0 then begin
  {$IFDEF MSSQL}
          SQL.Add('SELECT tpr.cod_id_propriedade_sisbov ');
          SQL.Add('  FROM tab_fazenda tf ');
          SQL.Add('    ,  tab_propriedade_rural tpr ');
          SQL.Add(' WHERE tf.cod_pessoa_produtor   = :cod_pessoa_produtor ');
          SQL.Add('   AND tf.cod_fazenda           = :cod_fazenda ');
          SQL.Add('   AND tf.dta_fim_validade is null ');
          SQL.Add('   AND tf.cod_propriedade_rural = tpr.cod_propriedade_rural ');
          SQL.Add('   AND tpr.dta_fim_validade is null ');
  {$ENDIF}
          ParamByName('cod_fazenda').AsInteger         := CodFazenda;
        end else begin
  {$IFDEF MSSQL}
          SQL.Add('SELECT tpr.cod_id_propriedade_sisbov ');
          SQL.Add('  FROM tab_localizacao_sisbov tls ');
          SQL.Add('    ,  tab_propriedade_rural tpr ');
          SQL.Add(' WHERE tls.cod_pessoa_produtor    = :cod_pessoa_produtor ');
          SQL.Add('   AND tls.cod_localizacao_sisbov = :cod_localizacao_sisbov ');
          SQL.Add('   AND tls.cod_propriedade_rural  = tpr.cod_propriedade_rural ');
          SQL.Add('   AND tpr.dta_fim_validade is null ');
  {$ENDIF}
          ParamByName('cod_localizacao_sisbov').AsInteger  := CodLocalizacaoPropriedade;
        end;
        ParamByName('cod_pessoa_produtor').AsInteger := CodPessoaProdutor;
        Open;

        if (IsEmpty) and (FieldByName('cod_id_propriedade_sisbov').AsInteger > 0) then begin
          Mensagens.Adicionar(2383, Self.ClassName, NomeMetodo, []);
          Result := -2383;
          Exit;
        end;
      end;

      Result := 0;
    finally
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -496;
      Exit;
    end;
  end;
end;

(* 20/01/2005 - Fábio - Função removida. Não é mais necessária. A operação
  realizada por esta função está sendo feita pelo método VerificaLugar

function TIntEventos.BuscarPropriedadeRural(NIRF: String): Integer;
const
  NomeMetodo : String = 'BuscaPropriedadeRural';
  NomCampo : String = 'PropriedadeRural';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_propriedade_rural from tab_propriedade_rural ');
      Q.SQL.Add(' where num_imovel_receita_federal = :nirf ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('nirf').AsString := NIRF;
      Q.Open;

      Result := Q.FieldByName('cod_propriedade_rural').AsInteger;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;
*)

(* 20/01/2005 - Fábio - Função removida. Não é mais necessária. A operação
  realizada por esta função está sendo feita pelo método VerificaLugar

//retorna o código da pessoa ou pessoa secundária caso exista
function TIntEventos.BuscarAglomeracao(CNPJCPF: String): Integer;
const
  NomeMetodo : String = 'BuscaAglomeracao';
  NomCampo : String = 'Aglomeracao';
var
  Q : THerdomQuery;
begin


  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tp.cod_pessoa from tab_pessoa as tp, tab_pessoa_papel as tpp ');
      Q.SQL.Add(' where tp.num_cnpj_cpf = :cpf ');
      Q.SQL.Add(' and   tp.cod_pessoa = tpp.cod_pessoa ');
      Q.SQL.Add(' and   tpp.cod_papel = 7 ');
      Q.SQL.Add(' and   tp.dta_fim_validade is null  ');
      Q.SQL.Add(' and   tpp.dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cpf').AsString := CNPJCPF;
      Q.Open;

      if Q.IsEmpty then begin
         Q.SQL.Clear;
{$IFDEF MSSQL}
         Q.SQL.Add('select tp.cod_pessoa_secundaria as cod_pessoa from tab_pessoa_secundaria as tp, tab_pessoa_papel_secundario as tpp ');
         Q.SQL.Add(' where tp.num_cnpj_cpf = :cpf ');
         Q.SQL.Add(' and   tp.cod_pessoa_secundaria = tpp.cod_pessoa_secundaria ');
         Q.SQL.Add(' and   tp.dta_fim_validade is null  ');
{$ENDIF}
         Q.ParamByName('cpf').AsString := CNPJCPF;
         Q.Open;
      end;
      Result := Q.FieldByName('cod_pessoa').AsInteger;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;
*)

function TIntEventos.BuscarPessoaSecundaria(NumCNPJCPF: String;
  CodPapelSecundario: Integer): Integer;
const
  NomeMetodo: String = 'BuscarPessoaSecundaria';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Text :=
        'select '+
        '  tps.cod_pessoa_secundaria as CodPessoaSecundaria '+
        'from '+
        '  tab_pessoa_secundaria as tps, '+
        '  tab_pessoa_papel_secundario as tpp '+
        'where '+
        '  tps.cod_pessoa_produtor = :cod_pessoa_produtor and '+
        '  tps.cod_pessoa_produtor = tpp.cod_pessoa_produtor and '+
        '  tpp.cod_pessoa_secundaria = tpp.cod_pessoa_secundaria and '+
        '  tpp.cod_papel_secundario = :cod_papel_secundario and '+
        '  tps.num_cnpj_cpf = :num_cnpj_cpf ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_papel_secundario').AsInteger := CodPapelSecundario;
      Q.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPF;
      Q.Open;
      if Q.IsEmpty then begin
        Result := -1;
      end else begin
        Result := Q.FieldByName('CodPessoaSecundaria').AsInteger;
      end;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1310, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1310;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaPessoaSecundaria(CodPessoa, CodPapel: Integer;
  IndObrigatorio: Boolean; NomeCampo: String; var NomPessoa, CNPJCPF, CNPJCPFF: String): Integer;
const
  NomeMetodo : String = 'VerificaPessoaSecundaria';
var
  Q : THerdomQuery;
begin
  if CodPessoa <= 0 then begin
    if IndObrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end Else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      if CodPapel <= 0 then begin
        Q.SQL.Add('select nom_pessoa_secundaria, ');
        Q.SQL.Add('       num_cnpj_cpf,  ');
        Q.SQL.Add('       case cod_natureza_pessoa ');
        Q.SQL.Add('         when ''F'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 1, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 4, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 7, 3) + ''-'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 10, 2)) ');
        Q.SQL.Add('         when ''J'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 1, 2) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 3, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 6, 3) + ''/'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 9, 4) + ''-'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 13, 2)) ');
        Q.SQL.Add('       end as NumCNPJCPFFormatado ');
        Q.SQL.Add('from tab_pessoa_secundaria ');
        Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and cod_pessoa_secundaria = :cod_pessoa_secundaria ');
        Q.SQL.Add('   and dta_fim_validade is null ');
      end Else begin
        Q.SQL.Add('select tp.nom_pessoa_secundaria, ');
        Q.SQL.Add('       tp.num_cnpj_cpf,  ');
        Q.SQL.Add('       case tp.cod_natureza_pessoa ');
        Q.SQL.Add('         when ''F'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 1, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 4, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 7, 3) + ''-'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 10, 2)) ');
        Q.SQL.Add('         when ''J'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 1, 2) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 3, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 6, 3) + ''/'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 9, 4) + ''-'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 13, 2)) ');
        Q.SQL.Add('       end as NumCNPJCPFFormatado ');
        Q.SQL.Add('  from tab_pessoa_secundaria tp, tab_pessoa_papel_secundario tpp');
        Q.SQL.Add(' where tpp.cod_pessoa_produtor = tp.cod_pessoa_produtor ');
        Q.SQL.Add('   and tpp.cod_pessoa_secundaria = tp.cod_pessoa_secundaria ');
        Q.SQL.Add('   and tp.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.SQL.Add('   and tp.cod_pessoa_secundaria = :cod_pessoa_secundaria ');
        Q.SQL.Add('   and tpp.cod_papel_secundario = :cod_papel_secundario ');
        Q.SQL.Add('   and tp.dta_fim_validade is null ');
        Q.ParamByName('cod_papel_secundario').AsInteger := CodPapel;
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_pessoa_secundaria').AsInteger := CodPessoa;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -497;
        Exit;
      end;

      NomPessoa := Q.FieldByName('nom_pessoa_secundaria').AsString;
      CNPJCPF := Q.FieldByName('num_cnpj_cpf').AsString;
      CNPJCPFF := Q.FieldByName('NumCNPJCPFFormatado').AsString;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

(* Fábio - 06/10/2004 - Função não esta mais sendo usada. 
function TIntEventos.VerificaNumLetra(Valor: String; Tamanho: Integer;
  NomParametro: String): Integer;
const
  NomeMetodo : String = 'VerificaNumLetra';
var
  X : Integer;
begin
  Result := 0;
  if Length(Valor) > Tamanho then begin
    Mensagens.Adicionar(537, Self.ClassName, NomeMetodo, [NomParametro, IntToStr(Tamanho)]);
    Result := -537;
    Exit;
  end;

  For X := 1 to Length(Valor) do begin
    if Pos(Copy(Valor, X, 1), '0123456789ABCDEFGHIJKLMNOPQRSTUVXYWZ') = 0 then begin
      Mensagens.Adicionar(538, Self.ClassName, NomeMetodo, [NomParametro]);
      Result := -538;
      Exit;
    end;
  end;
end;
*)

function TIntEventos.VerificaPessoa(CodPessoa, CodPapel: Integer;
  IndObrigatorio: Boolean; NomeCampo: String;
  var NomPessoa, CNPJCPF, CNPJCPFF: String): Integer;
const
  NomeMetodo : String = 'VerificaPessoa';
var
  Q : THerdomQuery;
begin
  if CodPessoa <= 0 then begin
    if IndObrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end Else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      if CodPapel <= 0 then begin
        Q.SQL.Add('select nom_pessoa, ');
        Q.SQL.Add('       num_cnpj_cpf,  ');
        Q.SQL.Add('       case cod_natureza_pessoa ');
        Q.SQL.Add('         when ''F'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 1, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 4, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 7, 3) + ''-'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 10, 2)) ');
        Q.SQL.Add('         when ''J'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 1, 2) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 3, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 6, 3) + ''/'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 9, 4) + ''-'' + ');
        Q.SQL.Add('                             substring(num_cnpj_cpf, 13, 2)) ');
        Q.SQL.Add('       end as NumCNPJCPFFormatado ');
        Q.SQL.Add('  from tab_pessoa ');
        Q.SQL.Add(' where cod_pessoa = :cod_pessoa ');
        Q.SQL.Add('   and dta_fim_validade is null ');
      end Else begin
        Q.SQL.Add('select tp.nom_pessoa,');
        Q.SQL.Add('       tp.num_cnpj_cpf,  ');
        Q.SQL.Add('       case tp.cod_natureza_pessoa ');
        Q.SQL.Add('         when ''F'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 1, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 4, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 7, 3) + ''-'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 10, 2)) ');
        Q.SQL.Add('         when ''J'' then convert(varchar(18), ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 1, 2) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 3, 3) + ''.'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 6, 3) + ''/'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 9, 4) + ''-'' + ');
        Q.SQL.Add('                             substring(tp.num_cnpj_cpf, 13, 2)) ');
        Q.SQL.Add('       end as NumCNPJCPFFormatado ');
        Q.SQL.Add('  from tab_pessoa tp, ');
        Q.SQL.Add('       tab_pessoa_papel tpp ');
        Q.SQL.Add(' where tpp.cod_pessoa = tp.cod_pessoa ');
        Q.SQL.Add('   and tp.cod_pessoa = :cod_pessoa ');
        Q.SQL.Add('   and tpp.cod_papel = :cod_papel ');
        Q.SQL.Add('   and tp.dta_fim_validade is null ');
        Q.ParamByName('cod_papel').AsInteger := CodPapel;
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa').AsInteger := CodPessoa;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -497;
        Exit;
      end;

      NomPessoa := Q.FieldByName('nom_pessoa').AsString;
      CNPJCPF := Q.FieldByName('num_cnpj_cpf').AsString;
      CNPJCPFF := Q.FieldByName('NumCNPJCPFFormatado').AsString;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirTransferencia(DtaSaidaOrigem,
                                          DtaChegadaDestino: TDateTime;
                                          TxtObservacao: String;
                                          CodAptidao,
                                          CodTipoLugarOrigem,
                                          CodFazendaOrigem: Integer;
                                          NumImovelOrigem: String;
                                          CodLocalizacaoOrigem,
                                          CodPropriedadeOrigem: Integer;
                                          NumCNPJCPFOrigem: String;
                                          CodPessoaOrigem,
                                          CodPessoaSecundariaOrigem,
                                          CodTipoLugarDestino,
                                          CodFazendaDestino,
                                          CodLocalDestino,
                                          CodLoteDestino: Integer;
                                          NumImovelDestino: String;
                                          CodLocalizacaoDestino,
                                          CodPropriedadeDestino: Integer;
                                          NumCNPJCPFDestino: String;
                                          CodPessoaDestino,
                                          CodPessoaSecundariaDestino,
                                          CodRegAlimentarMamando,
                                          CodRegAlimentarDesmamado: Integer;
                                          NumGTA: String;
                                          DtaEmissaoGTA: TDateTime;
                                          CodSerieGta: String;
                                          CodEstadoGta: Integer;
                                          DtaValidadeGTA: TDateTime;
                                          IndMovNErasEras,
                                          IndMigrarAnimal: String): Integer;
const
  Metodo: Integer = 325;
  NomeMetodo: String = 'InserirTransferencia';
  CodTipoEvento: Integer = 8;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  TxtDados, NomPropriedadeO, NomPessoaO, CNPJO, CNPJFO, NomFazendaO, DesLocalO, DesLoteO,
  NomPropriedadeD, NomPessoaD, CNPJD, CNPJFD, NomFazendaD, DesLocalD, DesLoteD: String;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if (CodFazendaOrigem > 0) or
     (CodFazendaDestino > 0) then
  begin
    if (CodFazendaOrigem = CodFazendaDestino) then
    begin
      Mensagens.Adicionar(2249, Self.ClassName, NomeMetodo, []);
      Result := -2249;
      Exit;
    end;
  end;

  if ((Length(Trim(NumImovelOrigem)) > 0) or
      (Length(Trim(NumImovelDestino)) > 0)) and
     ((CodLocalizacaoOrigem > 0) or
      (CodLocalizacaoDestino > 0)) then
  begin
    if (NumImovelOrigem = NumImovelDestino) and
       (CodLocalizacaoOrigem = CodLocalizacaoDestino) then
    begin
      Mensagens.Adicionar(2250, Self.ClassName, NomeMetodo, []);
      Result := -2250;
      Exit;
    end;
  end;

  if (CodPropriedadeOrigem > 0) or
     (CodPropriedadeDestino > 0) then
  begin
    if (CodPropriedadeOrigem = CodPropriedadeDestino) then
    begin
      Mensagens.Adicionar(2251, Self.ClassName, NomeMetodo, []);
      Result := -2251;
      Exit;
    end;
  end;


  if IndMigrarAnimal = 'N' then begin
    // Verifica DtaSaidaOrigem
    if DtaSaidaOrigem = 0 then
    begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo,
        ['Data de saída da origem']);
      Result := -309;
      Exit;
    end;

    // Verifica DtaChegadaDestino
    if DtaChegadaDestino = 0 then
    begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo,
        ['Data de chegada ao destino']);
      Result := -309;
      Exit;
    end;

    if DtaSaidaOrigem > DateOf(Now) then
    begin
      Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
        ['Data de saída da origem']);
      Result := -2105;
      Exit;
    end;

    // Verifica DtaChegadaDestino
    if DtaChegadaDestino > DateOf(Now) then
    begin
      Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
        ['Data de chegada ao destino']);
      Result := -2105;
      Exit;
    end;

    if DtaEmissaoGTA > DateOf(Now) then
    begin
      Mensagens.Adicionar(1283, Self.ClassName, NomeMetodo, []);
      Result := -1283;
      Exit;
    end;

    // Consiste datas
    if DtaChegadaDestino < DtaSaidaOrigem then
    begin
      Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
      Result := -1007;
      Exit;
    end;

    // Verifica DtaValidadeGTA
    if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
    begin
      Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
      Result := -2337;
      Exit;
    end;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then
  begin
    Exit;
  end;

  // Consiste Aptidão
//  Result := VerificaAptidao(CodAptidao);
//  if Result < 0 then
//  begin
//    Exit;
//  end;

  // Consiste se o regime alimentar mamando se aplica a aptidao
//  if CodRegAlimentarMamando > 0 then
//  begin
//    Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
//      CodRegAlimentarMamando);
//    if Result < 0 then
//    begin
//      Exit;
//    end;
//  end;

  // Consiste se o regime alimentar desmamado se aplica a aptidao
//  Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
//    CodRegAlimentarDesmamado);
//  if Result < 0 then
//  begin
//    Exit;
//  end;

  // Consiste lugar origem
  Result := VerificaLugar(CodTipoLugarOrigem, -1, -1, CodFazendaOrigem,
    NumImovelOrigem, CodLocalizacaoOrigem, NomPropriedadeO, NomPessoaO, CNPJO,
    CNPJFO, NomFazendaO, DesLocalO, DesLoteO, CodPropriedadeOrigem,
    NumCNPJCPFOrigem, CodPessoaOrigem, CodPessoaSecundariaOrigem, 'Origem');
  if Result < 0 then
  begin
    Exit;
  end;
  NumCNPJCPFOrigem := CNPJO;

  // Consiste lugar destino
  Result := VerificaLugar(CodTipoLugarDestino, CodLoteDestino, CodLocalDestino,
    CodFazendaDestino, NumImovelDestino, CodLocalizacaoDestino, NomPropriedadeD,
    NomPessoaD, CNPJD, CNPJFD, NomFazendaD, DesLocalD, DesLoteD,
    CodPropriedadeDestino, NumCNPJCPFDestino, CodPessoaDestino,
    CodPessoaSecundariaDestino, 'Destino');
  if Result < 0 then
  begin
    Exit;
  end;
  NumCNPJCPFDestino := CNPJD;

{
  // Consiste se o regime alimentar pode ser aplicado ao local
  case CodTipoLugarDestino of
    1: begin
      if CodRegAlimentarMamando > 0 then
      begin
        Result := VerificaLocalRegAlimentar(CodFazendaDestino, CodLocalDestino, CodRegAlimentarMamando, DesRegM);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      Result := VerificaLocalRegAlimentar(CodFazendaDestino, CodLocalDestino, CodRegAlimentarDesmamado, DesRegD);
      if Result < 0 then
      begin
        Exit;
      end;
    end;

    2: begin
      Result := BuscarDesRegimeAlimentar(CodRegAlimentarMamando, DesRegM);
      if Result < 0 then
      begin
        Exit;
      end;

      Result := BuscarDesRegimeAlimentar(CodRegAlimentarDesmamado, DesRegD);
      if Result < 0 then
      begin
        Exit;
      end;
    end;

    3: begin
      Result := BuscarDesRegimeAlimentar(CodRegAlimentarMamando, DesRegM);
      if Result < 0 then
      begin
        Exit;
      end;

      Result := BuscarDesRegimeAlimentar(CodRegAlimentarDesmamado, DesRegD);
      if Result < 0 then
      begin
        Exit;
      end;
    end;
  end;
}

  if IndMigrarAnimal = 'N' then begin
    // Verifica DtaEmissaoGTA
    if DtaEmissaoGTA > DtaSaidaOrigem then
    begin
      Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
      Result := -1008;
      Exit;
    end;
  end;

  if (UpperCase(IndMovNErasEras) <> 'S') then begin
    IndMovNErasEras := 'N';
  end;

  if UpperCase(IndMovNErasEras) = 'S' then begin
    // Se a movimentação for de não eras para eras, verifica se a propriedade de origem
    // não foi exportada para o sisbov
    Result := VerificaPropriedadeNaoEras(Conexao.CodProdutorTrabalho, CodFazendaOrigem, CodLocalizacaoOrigem);
    if Result < 0 then begin
      Exit;
    end;
  end;

  // Descrevendo TxtDados
  TxtDados := '';

  // Gravando dados
  try
    Q := THerdomQuery.Create(Conexao, nil);
    try
      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, TxtObservacao,
        CodFazendaOrigem);

      if CodEvento < 0 then
      begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento mudanca de local
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_transferencia ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_aptidao ' +
                '   , cod_tipo_lugar_origem ' +
                '   , cod_fazenda_origem ' +
                '   , num_imovel_origem ' +
                '   , cod_localizacao_origem ' +
                '   , cod_propriedade_origem ' +
                '   , num_cnpj_cpf_origem ' +
                '   , cod_pessoa_origem ' +
                '   , cod_pessoa_secundaria_origem ' +
                '   , cod_tipo_lugar_destino ' +
                '   , cod_fazenda_destino ' +
                '   , cod_local_destino ' +
                '   , cod_lote_destino ' +
                '   , num_imovel_destino ' +
                '   , cod_localizacao_destino ' +
                '   , cod_propriedade_destino ' +
                '   , num_cnpj_cpf_destino ' +
                '   , cod_pessoa_destino ' +
                '   , cod_pessoa_secundaria_destino ' +
                '   , cod_reg_alimentar_mamando ' +
                '   , cod_reg_alimentar_desmamado ' +
                '   , num_gta ' +
                '   , cod_serie_gta ' +
                '   , cod_estado_gta ' +
                '   , dta_emissao_gta ' +
                '   , dta_validade_gta ' +
                '   , ind_mov_naoeras_eras ' +
                '   , ind_migrar_animal_sisbov ) ' +
                'values ' +
                '  (  :cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_aptidao ' +
                '   , :cod_tipo_lugar_origem ' +
                '   , :cod_fazenda_origem ' +
                '   , :num_imovel_origem ' +
                '   , :cod_localizacao_origem ' +
                '   , :cod_propriedade_origem ' +
                '   , :num_cnpj_cpf_origem ' +
                '   , :cod_pessoa_origem ' +
                '   , :cod_pessoa_secundaria_origem ' +
                '   , :cod_tipo_lugar_destino ' +
                '   , :cod_fazenda_destino ' +
                '   , :cod_local_destino ' +
                '   , :cod_lote_destino ' +
                '   , :num_imovel_destino ' +
                '   , :cod_localizacao_destino ' +
                '   , :cod_propriedade_destino ' +
                '   , :num_cnpj_cpf_destino ' +
                '   , :cod_pessoa_destino ' +
                '   , :cod_pessoa_secundaria_destino ' +
                '   , :cod_reg_alimentar_mamando ' +
                '   , :cod_reg_alimentar_desmamado ' +
                '   , :num_gta ' +
                '   , :cod_serie_gta ' +
                '   , :cod_estado_gta ' +
                '   , :dta_emissao_gta ' +
                '   , :dta_validade_gta ' +
                '   , :ind_mov_naoeras_eras ' +
                '   , :ind_migrar_animal_sisbov) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CodAptidao > 0 then begin
        Q.ParamByName('cod_aptidao').AsInteger := CodAptidao;
      end Else begin
        Q.ParamByName('cod_aptidao').DataType := ftInteger;
        Q.ParamByName('cod_aptidao').Clear;
      end;

      Q.ParamByName('cod_tipo_lugar_origem').AsInteger := CodTipoLugarOrigem;
      AtribuiParametro(Q, CodFazendaOrigem, 'cod_fazenda_origem', -1);
      AtribuiParametro(Q, NumImovelOrigem, 'num_imovel_origem', '');
      AtribuiParametro(Q, CodLocalizacaoOrigem, 'cod_localizacao_origem', -1);
      AtribuiParametro(Q, CodPropriedadeOrigem , 'cod_propriedade_origem', -1);
      AtribuiParametro(Q, NumCNPJCPFOrigem, 'num_cnpj_cpf_origem', '');
      AtribuiParametro(Q, CodPessoaOrigem, 'cod_pessoa_origem', -1);
      AtribuiParametro(Q, CodPessoaSecundariaOrigem, 'cod_pessoa_secundaria_origem', -1);
      Q.ParamByName('cod_tipo_lugar_destino').AsInteger := CodTipoLugarDestino;
      AtribuiParametro(Q, CodFazendaDestino, 'cod_fazenda_destino', -1);
      AtribuiParametro(Q, CodLocalDestino, 'cod_local_destino', -1);
      AtribuiParametro(Q, CodLoteDestino, 'cod_lote_destino', -1);
      AtribuiParametro(Q, NumImovelDestino, 'num_imovel_destino', '');
      AtribuiParametro(Q, CodLocalizacaoDestino, 'cod_localizacao_destino', -1);
      AtribuiParametro(Q, CodPropriedadeDestino, 'cod_propriedade_destino', -1);
      AtribuiParametro(Q, NumCNPJCPFDestino, 'num_cnpj_cpf_destino', '');
      AtribuiParametro(Q, CodPessoaDestino, 'cod_pessoa_destino', -1);
      AtribuiParametro(Q, CodPessoaSecundariaDestino, 'cod_pessoa_secundaria_destino', -1);
      if CodRegAlimentarMamando > 0 then begin
        Q.ParamByName('cod_reg_alimentar_mamando').AsInteger := CodRegAlimentarMamando;
      end Else begin
        Q.ParamByName('cod_reg_alimentar_mamando').DataType := ftInteger;
        Q.ParamByName('cod_reg_alimentar_mamando').Clear;
      end;

      if CodRegAlimentarDesmamado > 0 then begin
        Q.ParamByName('cod_reg_alimentar_desmamado').AsInteger := CodRegAlimentarDesmamado;
      end Else begin
        Q.ParamByName('cod_reg_alimentar_desmamado').DataType := ftInteger;
        Q.ParamByName('cod_reg_alimentar_desmamado').Clear;
      end;

      AtribuiParametro(Q, NumGTA, 'num_gta', '');
      AtribuiParametro(Q, CodSerieGTA, 'cod_serie_gta', '');
      if CodEstadoGTA > 0 then begin
        Q.ParamByName('cod_estado_gta').AsInteger := CodEstadoGTA;
      end Else begin
        Q.ParamByName('cod_estado_gta').DataType := ftInteger;
        Q.ParamByName('cod_estado_gta').Clear;
      end;
      AtribuiParametro(Q, DtaEmissaoGTA, 'dta_emissao_gta', 0);
      AtribuiParametro(Q, DtaValidadeGTA, 'dta_validade_gta', 0);
      AtribuiParametro(Q, UpperCase(IndMovNErasEras), 'ind_mov_naoeras_eras', '');
      AtribuiParametro(Q, UpperCase(IndMigrarAnimal), 'ind_migrar_animal_sisbov', '');
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    finally
      Q.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(1020, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1020;
      Exit;
    end;
  end;
end;

function TIntEventos.VerificaLugar(CodTipoLugar, CodLote, CodLocal,
  CodFazenda: Integer; var NumImovel: String; var CodLocalizacaoSISBOV: Integer;
  var NomPropriedade, NomPessoa, CNPJ, CNPJF, NomFazenda, DesLocal,
  DesLote: String; var CodPropriedade: Integer; NumCNPJCPF: String;
  var CodPessoa, CodPessoaSecundaria: Integer;
  DesTipo: String): Integer;
const
  NomeMetodo : String = 'VerificaLugar';
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se o tipo de origem informado é válido.
      with Q do
      begin
        SQL.Clear;
        SQL.Add('SELECT 1  ');
        SQL.Add('  FROM tab_tipo_lugar ');
        SQL.Add(' WHERE cod_tipo_lugar = :cod_tipo_lugar ');
        SQL.Add('   AND dta_fim_validade is null ');
        ParamByName('cod_tipo_lugar').AsInteger := CodTipoLugar;
        Open;

        if IsEmpty then
        begin
          Mensagens.Adicionar(657, Self.ClassName, NomeMetodo, []);
          Result := -657;
          Exit;
        end;
      end;

      case CodTipoLugar of
        1: begin  // Fazenda do produtor
          // Sómente a fazenda pode ser informada.
          if (NumImovel <> '') or (CodLocalizacaoSISBOV > -1)
            or (CodPropriedade > -1) or (NumCNPJCPF <> '')
            or (CodPessoa > -1) or (CodPessoaSecundaria > -1) then
          begin
            Mensagens.Adicionar(659, Self.ClassName, NomeMetodo, []);
            Result := -659;
            Exit;
          end;
          
          Result := VerificaFazenda(CodFazenda, True, 'Fazenda ' + Destipo,
            NomFazenda);
          if Result < 0 then
          begin
            Exit;
          end;

          if CodLocal > 0 then
          begin
            Result := VerificaLocal(CodFazenda, CodLocal, DesLocal);
            if Result < 0 then
            begin
              Exit;
            end;
          end;

          if CodLote > 0 then
          begin
            Result := VerificaLote(CodFazenda, CodLote, DesLote);
            if Result < 0 then
            begin
              Exit;
            end;
          end;
        end;

        2: begin  // Propriedade Rural
          if (CodFazenda > 0) or (CodLocal > 0) or (CodLote > 0) then
          begin
            Mensagens.Adicionar(662, Self.ClassName, NomeMetodo, []);
            Result := -662;
            Exit;
          end;

          if (NumImovel = '') and (CodPropriedade < 0) then
          begin
            Mensagens.Adicionar(664, Self.ClassName, NomeMetodo, []);
            Result := -664;
            Exit;
          end;

          if NumImovel <> '' then
          begin
            if CodPropriedade > 0 then
            begin
              Mensagens.Adicionar(663, Self.ClassName, NomeMetodo, []);
              Result := -663;
              Exit;
            end
            else
            if not ValidaNirfIncra(NumImovel, True) then
            begin
              Mensagens.Adicionar(494, Self.ClassName, 'VerificaLugar', [NumImovel]);
              Result := -494;
              Exit;
            end;
          end;

          if CodPropriedade > 0 then
          begin
            if NumImovel <> '' then
            begin
              Mensagens.Adicionar(663, Self.ClassName, NomeMetodo, []);
              Result := -663;
              Exit;
            end;
          end;

          // Verifica se existe uma pessoa cadastrada com o CNPJ/CPF inforamdo
          if (NumCNPJCPF <> '') and (CodPessoa < 0) then
          begin
            with Q do
            begin
              SQL.Clear;
              SQL.Add('SELECT cod_pessoa');
              SQL.Add('  FROM tab_pessoa tp,');
              SQL.Add('       tab_produtor tpp');
              SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
              SQL.Add('   AND tp.cod_pessoa = tpp.cod_pessoa_produtor');
              SQL.Add('   AND tp.dta_fim_validade is null');
              ParamByName('num_cnpj_cpf').AsString := NumCNPJCPF;
              Open;

              if not IsEmpty then
              begin
                CodPessoa := FieldByName('cod_pessoa').AsInteger;
              end;
            end;
          end;

          // Verifica se a propriedade é válida.
          Result := VerificaPropriedadeRural(CodPropriedade, True,
            'Propriedade rural ' + Destipo, NumImovel, CodLocalizacaoSISBOV,
            NomPropriedade, CodPessoa);
          if Result < 0 then
          begin
            Exit;
          end;

          if (CodPessoa > -1) and (CodPropriedade > -1) then
          begin
            with Q do
            begin
              SQL.Clear;
              SQL.Add('SELECT cod_fazenda');
              SQL.Add('  FROM tab_fazenda');
              SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
              SQL.Add('   AND cod_propriedade_rural = :cod_propriedade_rural');
              SQL.Add('   AND dta_fim_validade is null');
              ParamByName('cod_pessoa_produtor').AsInteger := CodPessoa;
              ParamByName('cod_propriedade_rural').AsInteger := CodPropriedade;
              Open;

              if IsEmpty then
              begin
                Mensagens.Adicionar(2098, Self.ClassName, NomeMetodo, []);
                Result := -2098;
              end;
            end;
          end;

          // Obtem o código da localização SISBOV se este não foi informado
          if (CodPessoa > -1) and (CodPropriedade > -1) and (NumImovel <> '')
            and (CodLocalizacaoSISBOV = -1) then
          begin
            with Q do
            begin
              SQL.Clear;
              SQL.Add('SELECT cod_localizacao_sisbov');
              SQL.Add('  FROM tab_localizacao_sisbov');
              SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
              SQL.Add('   AND cod_propriedade_rural = :cod_propriedade_rural');
              ParamByName('cod_pessoa_produtor').AsInteger := CodPessoa;
              ParamByName('cod_propriedade_rural').AsInteger := CodPropriedade;
              Open;

              if not IsEmpty then
              begin
                CodLocalizacaoSISBOV := FieldByName('cod_localizacao_sisbov').AsInteger;
              end;
            end;
          end;
        end;

        3: begin  // Aglomeração
          if (CodFazenda > 0) or (CodLocal > 0) or (CodLote > 0) or
             (NumImovel <> '') or (CodPropriedade > 0) then
          begin
            Mensagens.Adicionar(665, Self.ClassName, NomeMetodo, []);
            Result := -665;
            Exit;
          end;

          if (NumCNPJCPF = '') and (CodPessoa <= 0)
            and (CodPessoaSecundaria <= 0) then
          begin
            Mensagens.Adicionar(666, Self.ClassName, NomeMetodo, []);
            Result := -666;
            Exit;
          end;

          if NumCNPJCPF <> '' then begin
            if (CodPessoa > 0) or (CodPessoaSecundaria > 0) then
            begin
              Mensagens.Adicionar(667, Self.ClassName, NomeMetodo, []);
              Result := -667;
              Exit;
            end
            else
            begin
              Result := VerificaCNPJCPF(NumCNPJCPF);
              if Result < 0 then
              begin
                Exit;
              end;
              CNPJ := NumCNPJCPF;
              CNPJF := NumCNPJCPF;
            end;
          end;

          if CodPessoa > 0 then
          begin
            if (NumCNPJCPF <> '') or (CodPessoaSecundaria > 0) then
            begin
              Mensagens.Adicionar(667, Self.ClassName, NomeMetodo, []);
              Result := -667;
              Exit;
            end
            else
            begin
              Result := VerificaPessoa(CodPessoa, 7, True, 'Aglomeração ' + Destipo, NomPessoa, CNPJ, CNPJF);
              if Result < 0 then
              begin
                Exit;
              end;
            end;
          end;

          if CodPessoaSecundaria > 0 then
          begin
            if (NumCNPJCPF <> '') or (CodPessoa > 0) then
            begin
              Mensagens.Adicionar(667, Self.ClassName, NomeMetodo, []);
              Result := -667;
              Exit;
            end
            else
            begin
              Result := VerificaPessoaSecundaria(CodPessoa, 3, True, 'Aglomeração ' + Destipo, NomPessoa, CNPJ, CNPJF);
              if Result < 0 then
              begin
                Exit;
              end;
            end;
          end;

          // Verifica se a pessoa está cadastrada na base, se não estiver
          // verifica se existe uma pessoa secundária cadastrada na base.
          with Q do
          begin
            SQL.Clear;
            SQL.Add('select tp.cod_pessoa');
            SQL.Add('  from tab_pessoa as tp,');
            SQL.Add('       tab_pessoa_papel as tpp');
            SQL.Add(' where tp.num_cnpj_cpf = :cpf');
            SQL.Add('   and tp.cod_pessoa = tpp.cod_pessoa');
            SQL.Add('   and tpp.cod_papel = 7');
            SQL.Add('   and tp.dta_fim_validade is null');
            SQL.Add('   and tpp.dta_fim_validade is null');
            ParamByName('cpf').AsString := CNPJ;
            Open;
            if IsEmpty then
            begin
              SQL.Clear;
              SQL.Add('select tp.cod_pessoa_secundaria as cod_pessoa');
              SQL.Add('  from tab_pessoa_secundaria as tp,');
              SQL.Add('       tab_pessoa_papel_secundario as tpp');
              SQL.Add(' where tp.num_cnpj_cpf = :cpf');
              SQL.Add('   and tp.cod_pessoa_secundaria = tpp.cod_pessoa_secundaria');
              SQL.Add('   and tp.dta_fim_validade is null');
              ParamByName('cpf').AsString := CNPJ;
              Open;

              if not IsEmpty then
              begin
                CodPessoaSecundaria := FieldByName('cod_pessoa_secundaria').AsInteger;
              end;
            end
            else
            begin
              CodPessoa := FieldByName('cod_pessoa').AsInteger;
            end;
          end;
        end;
      else
        Mensagens.Adicionar(657, Self.ClassName, NomeMetodo, []);
        Result := -657;
        Exit;
      end;

    finally
      Q.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'localização atual do animal']);
      Result := -496;
      Exit;
    end;
  end;
end;

function TIntEventos.VerificaFazenda(Valor: Integer; Obrigatorio: Boolean;
  NomeCampo: String; var NomFazenda: String): Integer;
const
  NomeMetodo : String = 'VerificaFazenda';
var
  Q : THerdomQuery;
begin
  if Valor <= 0 then begin
    if Obrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end Else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select nom_fazenda from tab_fazenda ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := Valor;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -497;
        Exit;
      end;

      NomFazenda := Q.FieldByName('nom_fazenda').AsString;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaGrauDificuldade(CodGrauDificuldade:Integer): Integer;
const
  NomeMetodo : String = 'VerificaGrauDificuldade';
  NomeCampo : String = 'Grau de dificuldade';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_grau_dificuldade_parto ');
      Q.SQL.Add(' where cod_grau_dificuldade_parto = :cod_grau_dificuldade ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_grau_dificuldade').AsInteger := CodGrauDificuldade;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1540, Self.ClassName, NomeMetodo,[]);
        Result := -1540;
        Exit;
      end;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaSituacaoCria(CodSituacaoCria:Integer): Integer;
const
  NomeMetodo : String = 'VerificaSituacaoCria';
  NomeCampo : String = 'Situação da cria';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_situacao_cria ');
      Q.SQL.Add(' where cod_situacao_cria = :cod_situacao_cria ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_situacao_cria').AsInteger := CodSituacaoCria;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1541, Self.ClassName, NomeMetodo,[]);
        Result := -1541;
        Exit;
      end;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaDataEstacaoMonta(DtaInicio, DtaFim: TDateTime; CodFazenda: Integer; var CodEventoEstacaoMonta:Integer): Integer;
const
  NomeMetodo : String = 'VerificaDataEstacaoMonta';
var
  Q : THerdomQuery;

begin
  CodEventoEstacaoMonta := -1;

  if (DtaFim =0 ) or (DtaInicio = 0) then begin
     Mensagens.Adicionar(1407, Self.ClassName, NomeMetodo, []);
     Result := -1407;
     Exit;
  end;

  if DtaFim < DtaInicio then begin
     Mensagens.Adicionar(1406, Self.ClassName, NomeMetodo, []);
     Result := -1406;
     Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select te.cod_evento, ' +
                ' tp.ind_estacao_monta ' +
                ' from tab_evento as te, ' +
                ' tab_produtor as tp ' +
                ' where te.cod_tipo_evento = 24 ' +
                ' and   te.dta_inicio <= :dta_inicio ' +
                ' and   te.dta_fim >= :dta_fim ' +
                ' and   te.cod_pessoa_produtor =* tp.cod_pessoa_produtor ' +
                ' and   te.cod_fazenda = :cod_fazenda ' +
                ' and   tp.cod_pessoa_produtor = :cod_pessoa_produtor');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('dta_inicio').AsDateTime := DtaInicio;
      Q.ParamByName('dta_fim').AsDateTime := DtaFim;
      Q.Open;

      if (Q.FieldByName('ind_estacao_monta').asstring = 'S') and (Q.FieldByName('cod_evento').isnull) then begin
        Mensagens.Adicionar(1408, Self.ClassName, NomeMetodo, []);
        Result := -1408;
        Exit;
      end;

      if not Q.FieldByName('cod_evento').isnull then
         CodEventoEstacaoMonta := Q.FieldByName('cod_evento').asinteger;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

//verifica se o touro ou o RM é válido retornando o seu código
function TIntEventos.VerificaTouroRM(CodFazenda, CodAnimal: Integer; CodFazendaManejo: Integer;
  CodAnimalManejo:String;CodReprodutorMultiplo: Integer; var IndTouro:String): Integer;
const
  NomeMetodo : String = 'VerificaTouro';
var
  Q : THerdomQuery;
  CodAnimalRM: Integer;
begin
  IndTouro := 'S';
  CodAnimalRM := -1;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      if CodReprodutorMultiplo < 0 then begin
         Q.SQL.Clear;
{$IFDEF MSSQL}
         Q.SQL.Add('select ta.cod_animal ' +
                ' from tab_animal as ta ' +
                ' where ta.cod_categoria_animal = 4 ' +
                ' and   ta.dta_fim_validade is null ' +
                ' and   ta.ind_apto_cobertura = ''S'' ' +
                ' and   ta.cod_fazenda_corrente = :cod_fazenda ' +
                ' and   ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
         if CodAnimal > 0 then
            Q.SQL.Add(' and cod_animal = :cod_animal ');
         if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then
            Q.SQL.Add(' and cod_animal_manejo = :cod_animal_manejo ' +
                      ' and cod_fazenda_manejo = :cod_fazenda_manejo ');
{$ENDIF}
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
         if CodAnimal > 0 then
            Q.ParamByName('cod_animal').AsInteger := CodAnimal;
         if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then begin
            Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
            Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
         end;
         Q.Open;

         if not Q.FieldByName('cod_animal').isnull then
            CodAnimalRM := Q.Fieldbyname('cod_animal').asinteger;
      end;

      if (CodAnimalRM < 0) and (CodAnimal < 0) then begin
         Q.SQL.Clear;
{$IFDEF MSSQL}
         Q.SQL.Add('select trm.cod_reprodutor_multiplo ' +
                   ' from   tab_reprodutor_multiplo as trm, ' +
                   ' tab_animal_reprodutor_multiplo as tarm, ' +
                   ' tab_animal as ta ' +
                   ' where  trm.cod_reprodutor_multiplo = tarm.cod_reprodutor_multiplo ' +
                   ' and    trm.cod_pessoa_produtor = tarm.cod_pessoa_produtor ' +
                   ' and    trm.ind_ativo = ''S'' ' +
                   ' and    trm.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                   ' and    tarm.cod_animal = ta.cod_animal ' +
                   ' and    tarm.cod_pessoa_produtor = ta.cod_pessoa_produtor ' +
                   ' and    trm.cod_fazenda_manejo = :cod_fazenda ');
          if CodReprodutorMultiplo > 0 then
             Q.SQL.Add(' and trm.cod_reprodutor_multiplo = :cod_reprodutor_multiplo ');
          if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then
             Q.SQL.Add(' and trm.cod_reprodutor_multiplo_manejo = :cod_animal_manejo ' +
                       ' and trm.cod_fazenda_manejo = :cod_fazenda_manejo ');
{$ENDIF}
          Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
          Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
          if CodReprodutorMultiplo > 0 then
             Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodReprodutorMultiplo;
          if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then begin
             Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
             Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
          end;
          Q.Open;

          if not Q.IsEmpty then begin
             CodAnimalRM := Q.Fieldbyname('cod_reprodutor_multiplo').asinteger;
             IndTouro := 'N';
          end;
      end;
    if CodAnimalRM < 0 then begin
       Mensagens.Adicionar(1418, Self.ClassName, NomeMetodo, []);
       Result := -1418;
       Exit;
    end;
    Result := CodAnimalRM;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

//verifica se o animal é válido para eventos de cobertura
function TIntEventos.VerificaAnimalReproducao(CodFazenda, CodAnimal: Integer; CodFazendaManejo: Integer;
  CodAnimalManejo, IndTouro:String; DtaEvento:TDateTime): Integer;
const
  NomeMetodo : String = 'VerificaAnimal';
var
  Q : THerdomQuery;
  CodCategorias: String;
  CodAnimalInt: Integer;
begin
  if IndTouro = 'S'
     then CodCategorias := '4'
     else CodCategorias := '5,6,7,8,9';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select ta.cod_animal, ta.ind_apto_cobertura, null as dta_inicio, ta.cod_pessoa_tecnico ' +
                ' from tab_animal as ta ' +
                ' where ta.cod_categoria_animal in (' + CodCategorias + ')' +
                ' and   ta.ind_apto_cobertura = ''S'' '+
                ' and   ta.dta_fim_validade is null ');
      if CodFazenda > 0
         then Q.SQL.Add(' and   ta.cod_fazenda_corrente = :cod_fazenda ')
         else Q.SQL.Add(' and   ta.cod_tipo_lugar != 1 ');
      Q.SQL.Add(' and   ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
      if CodAnimal > 0 then
         Q.SQL.Add(' and ta.cod_animal = :cod_animal ');
      if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then
         Q.SQL.Add(' and ta.cod_animal_manejo = :cod_animal_manejo ' +
                   ' and ta.cod_fazenda_manejo = :cod_fazenda_manejo ');
      if IndTouro = 'N' then begin
         Q.SQL.Add('union select ta.cod_animal, ta.ind_apto_cobertura, te.dta_inicio, ta.cod_pessoa_tecnico '+
                   ' from tab_animal as ta, tab_animal_evento as tae, tab_evento as te '+
                   ' where ta.cod_categoria_animal in (' + CodCategorias + ')' +
                   ' and   ta.dta_fim_validade is null '+
                   ' and   ta.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                   ' and   ta.cod_pessoa_produtor = te.cod_pessoa_produtor '+
                   ' and   ta.ind_apto_cobertura = ''N'' '+
                   ' and   te.cod_tipo_evento = 28 '+
                   ' and   ta.cod_animal = tae.cod_animal '+
                   ' and   ta.dta_fim_validade is null ');
         if CodFazenda > 0
            then Q.SQL.Add(' and   ta.cod_fazenda_corrente = :cod_fazenda ')
            else Q.SQL.Add(' and   ta.cod_tipo_lugar != 1 ');
         Q.SQL.Add(' and   ta.cod_pessoa_produtor = :cod_pessoa_produtor ');
         if CodAnimal > 0 then
            Q.SQL.Add(' and ta.cod_animal = :cod_animal ');
         if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then
            Q.SQL.Add(' and ta.cod_animal_manejo = :cod_animal_manejo ' +
                      ' and ta.cod_fazenda_manejo = :cod_fazenda_manejo ');
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodFazenda > 0 then
         Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      if CodAnimal > 0 then
         Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') then begin
         Q.ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
         Q.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      Q.Open;
      CodAnimalInt := Q.FieldbyName('cod_animal').AsInteger;

      // Verifica se a fêmea pertece a outro tecnico
      if not Q.Fieldbyname('cod_pessoa_tecnico').IsNull then begin
        if Conexao.CodPapelUsuario = 3 then begin
          if Q.Fieldbyname('cod_pessoa_tecnico').AsInteger <> Conexao.CodPessoa then begin
            Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [CodAnimalManejo]);
            Result := -1698;
            Exit;
          end;
        end;
      end;

      if IndTouro = 'S' then begin
         if Q.IsEmpty then begin
            Mensagens.Adicionar(1470, Self.ClassName, NomeMetodo, []);
            Result := -1470;
            Exit;
         end;
      end else begin
         if Q.IsEmpty then begin
            Mensagens.Adicionar(1471, Self.ClassName, NomeMetodo, []);
            Result := -1471;
            Exit;
         end;
         if Q.fieldbyname('ind_apto_cobertura').asstring = 'N' then begin
            if (not Q.FieldByName('dta_inicio').isnull) and (Q.FieldByName('dta_inicio').asdatetime <= DtaEvento - StrtoInt(ValorParametro(60))) then begin
               //O animal possui um evento de diagnóstico de prenhez positivo que não originou parto
               //O evento será desconsiderado e o campo ind_apto_cobertura do animal voltará para "S"
               Q.SQL.Clear;
               Q.SQL.Add(' update tab_animal set ind_apto_cobertura = ''S'' '+
                         ' where cod_animal = :cod_animal ' +
                         ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
               Q.Parambyname('cod_animal').asinteger := CodAnimalInt;
               Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
               Q.ExecSQL;

               Mensagens.Adicionar(1491, Self.ClassName, NomeMetodo, [valorParametro(60)]);
            end else begin
               Mensagens.Adicionar(1471, Self.ClassName, NomeMetodo, []);
               Result := -1471;
               Exit;
            end;
         end;
      end;
      Result := CodAnimalInt;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaLocal(CodFazenda, CodLocal: Integer; var DesLocal: String): Integer;
const
  NomeMetodo : String = 'VerificaLocal';
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Consiste local
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select des_local ');
      Q.SQL.Add('  from tab_local ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
      Q.SQL.Add('   and cod_local = :cod_local ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_local').AsInteger := CodLocal;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(660, Self.ClassName, NomeMetodo, []);
        Result := -660;
        Exit;
      end;

      DesLocal := Q.FieldByName('des_local').AsString;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'local do animal']);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaLote(CodFazenda, CodLote: Integer; var DesLote: String): Integer;
const
  NomeMetodo : String = 'VerificaLote';
var
  Q : THerdomQuery;
begin
  Result := 0;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Consiste local
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select des_lote ');
      Q.SQL.Add('  from tab_lote ');
      Q.SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.SQL.Add('   and cod_fazenda = :cod_fazenda ');
      Q.SQL.Add('   and cod_lote = :cod_lote ');
      Q.SQL.Add('   and dta_fim_validade is null ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_lote').AsInteger := CodLote;

      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(661, Self.ClassName, NomeMetodo, []);
        Result := -661;
        Exit;
      end;

      DesLote := Q.FieldByName('des_lote').AsString;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, 'lote do animal']);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaCNPJCPF(NumCNPJCPF: String): Integer;
const
  NomeMetodo: String = 'VerificaCNPJCPF';
begin
  Result := 0;
  if (Length(NumCNPJCPF) <> 14) and (Length(NumCNPJCPF) <> 11) then begin
    Mensagens.Adicionar(668, Self.ClassName, NomeMetodo, [NumCNPJCPF]);
    Result := -668;
    Exit;
  end;
  if Length(NumCNPJCPF) = 14 then begin
//    if not VerificarCnpjCpf(Copy(NumCNPJCPF, 1, 12), Copy(NumCNPJCPF, 13, 2)) then begin
    if not VerificarCnpjCpf(Copy(NumCNPJCPF, 1, 12), NumCNPJCPF, ValorParametro(128)) then begin
      Mensagens.Adicionar(424, Self.ClassName, NomeMetodo, []);
      Result := -424;
      Exit;
    end;
  end Else begin
//    if not VerificarCnpjCpf(Copy(NumCNPJCPF, 1, 9), Copy(NumCNPJCPF, 10, 2)) then begin
    if not VerificarCnpjCpf(Copy(NumCNPJCPF, 1, 9), NumCNPJCPF, ValorParametro(128)) then begin
      Mensagens.Adicionar(424, Self.ClassName, NomeMetodo, []);
      Result := -424;
      Exit;
    end;
  end;
end;

function TIntEventos.AlterarGTA(CodEvento: Integer; NumGTA: String;
  DtaEmissaoGTA: TDateTime; CodSerieGta: String; CodEstadoGta: Integer;
  DtaValidadeGTA: TDateTime): Integer;
const
  Metodo: Integer = 329;
  NomeMetodo: String = 'AlterarGTA';
var
  Q: THerdomQuery;
  CodTipoEvento: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se cadastro já está efetivado
  Result := CadastroEfetivado('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
  if Result < 0 then Exit;
  if Result = 1 then begin
    Mensagens.Adicionar(1047, Self.ClassName, NomeMetodo, []);
    Result := -1047;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Consiste o evento
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select cod_tipo_evento, dta_inicio from tab_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(902, Self.ClassName, NomeMetodo, []);
        Result := -902;
        Exit;
      end;

      CodTipoEvento := Q.FieldByName('cod_tipo_evento').AsInteger;

      // Verifica se método pode ser aplicado a este evento
      if (CodTipoEvento <> 8) and (CodTipoEvento <> 9) and (CodTipoEvento <> 10) then begin
        Mensagens.Adicionar(1033, Self.ClassName, NomeMetodo, []);
        Result := -1033;
        Exit;
      end;

      // Verifica DtaEmissaoGTA
      if DtaEmissaoGTA > Q.FieldByName('dta_inicio').AsDateTime then begin
        Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
        Result := -1008;
        Exit;
      end;

      // Altera o atributos GTA para a tabela correta de acordo com o tipo de evento
      Q.SQL.Clear;
{$IFDEF MSSQL}
      if CodTipoEvento = 8 then begin
        Q.SQL.Add('update tab_evento_transferencia ');
      end;
      if CodTipoEvento = 9 then begin
        Q.SQL.Add('update tab_evento_venda_criador ');
      end;
      if CodTipoEvento = 10 then begin
        Q.SQL.Add('update tab_evento_venda_frigorifico ');
      end;
      Q.SQL.Add('   set num_gta = :num_gta, ' +
                '       cod_serie_gta = :cod_serie_gta, ' +
                '       cod_estado_gta = :cod_estado_gta, ' +
                '       dta_emissao_gta = :dta_emissao_gta ' +
                '       dta_validade_gta = :dta_validade_gta ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('num_gta').DataType := ftString;
      Q.ParamByName('cod_serie_gta').DataType := ftString;
      Q.ParamByName('cod_estado_gta').DataType := ftInteger;
      AtribuiValorParametro(Q.ParamByName('num_gta'), NumGTA);
      AtribuiValorParametro(Q.ParamByName('cod_serie_gta'), CodSerieGta);
      AtribuiValorParametro(Q.ParamByName('cod_estado_gta'), CodEstadoGta);
      Q.ParamByName('dta_emissao_gta').DataType := ftDateTime;
      AtribuiValorParametro(Q.ParamByName('dta_emissao_gta'), DtaEmissaoGTA);
      Q.ParamByName('dta_validade_gta').DataType := ftDateTime;
      AtribuiValorParametro(Q.ParamByName('dta_validade_gta'), DtaValidadeGTA);
      Q.ExecSQL;

      // Retorna 0, identificando procedimento como bem sucedido.
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1034, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1034;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.CancelarEfetivacao(CodEvento: Integer): Integer;
const
  Metodo: Integer = 330;
  NomeMetodo: String = 'CancelarEfetivacao';
var
  Q : THerdomQuery;
  DadosEvento: TInfoEvento;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se cadastro já foi exportado para o sisbov
//  Result := ExportadoSisbov('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
//  if Result < 0 then Exit;
//  if Result = 1 then begin
//    Mensagens.Adicionar(1042, Self.ClassName, NomeMetodo, []);
//    Result := -1042;
//    Exit;
//  end;

  // Verifica se cadastro já está efetivado
  Result := CadastroEfetivado('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
  if Result < 0 then Exit;
  if Result = 0 then begin
    Mensagens.Adicionar(1043, Self.ClassName, NomeMetodo, []);
    Result := -1043;
    Exit;
  end;

  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // Tenta Alterar Registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '   set dta_efetivacao_cadastro = null, ' +
                '       cod_situacao_sisbov = ''P'' ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      // Quando o evento for de emissão de certificado, exclui certificados e arquivo
      if DadosEvento.CodTipoEvento = 16 then begin
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('delete from tab_certificado_animal ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_evento = :cod_evento ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := CodEvento;
        Q.ExecSQL;

        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select nom_arquivo_certificado from tab_evento_emissao_cert ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_evento = :cod_evento ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := CodEvento;
        Q.Open;
        if not Q.IsEmpty then begin
          try
            DeleteFile(Q.FieldByName('nom_arquivo_certificado').AsString);
          except
          end;
        end;
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('delete from tab_evento_emissao_cert ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_evento = :cod_evento ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := CodEvento;
        Q.ExecSQL;
      end;

(*
      A partir de 19/10/2004 o procedimento de atualização de grandezas será
      realizado a partir da execução de processo batch por intervalos configuráveis
      e não mais a partir da execução de cada operação como anteriormente.
      Result := AtualizaGrandeza(5, Conexao.CodProdutorTrabalho, 1);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;

      Result := AtualizaGrandeza(6, Conexao.CodProdutorTrabalho, -1);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;
*)

      // Cofirma transação
      Commit;

      // Retorna status "ok" do método
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1044, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1044;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

(* 20/01/2005 - Fábio - Esta função foi movida para a classe TIntFazendas.
function TIntEventos.VerificaFazendaEfetivada(CodFazenda: Integer;
  var CodPropriedadeRural: Integer;
  var NumImovelReceitaFederal: String; var DtaInicioCertificacao: TDateTime;
  NomeCampo: String): Integer;
const
  NomeMetodo : String = 'VerificaFazendaEfetivada';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tf.dta_efetivacao_cadastro, tf.cod_propriedade_rural, ' +
                'tpr.num_imovel_receita_federal, tpr.dta_inicio_certificacao ' +
                '  from tab_fazenda tf, tab_propriedade_rural tpr ' +
                ' where tpr.cod_propriedade_rural =* tf.cod_propriedade_rural ' +
                '   and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and tf.cod_fazenda = :cod_fazenda ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(310, Self.ClassName, NomeMetodo, []);
        Result := -310;
        Exit;
      end;

      if Q.FieldByName('dta_efetivacao_cadastro').IsNull then begin
        Mensagens.Adicionar(732, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -732;
        Exit;
      end;

      if not (Q.FieldByName('cod_propriedade_rural').IsNull) then begin
        CodPropriedadeRural := Q.FieldByName('cod_propriedade_rural').AsInteger;
        NumImovelReceitaFederal := Q.FieldByName('num_imovel_receita_federal').AsString;
        DtaInicioCertificacao := Trunc(Q.FieldByName('dta_inicio_certificacao').AsDateTime);
      end;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaPropriedadeEfetivada(
  var CodPropriedadeRural: Integer; var NumImovelReceitaFederal: String;
  var DtaInicioCertificacao: TDateTime; NomeCampo: String): Integer;
const
  NomeMetodo : String = 'VerificaPropriedadeEfetivada';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select dta_efetivacao_cadastro, cod_propriedade_rural, ' +
                '       num_imovel_receita_federal, dta_inicio_certificacao ' +
                '  from tab_propriedade_rural ');
      if CodPropriedadeRural > 0 then begin
        Q.SQL.Add(' where cod_propriedade_rural = :cod_propriedade_rural ');
      end Else begin
        Q.SQL.Add(' where num_imovel_receita_federal = :num_imovel_receita_federal ');
      end;
{$ENDIF}
      if CodPropriedadeRural > 0 then begin
        Q.ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
      end Else begin
        Q.ParamByName('num_imovel_receita_federal').AsString := NumImovelReceitaFederal;
      end;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(733, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -733;
        Exit;
      end;

      if Q.FieldByName('dta_efetivacao_cadastro').IsNull then begin
        Mensagens.Adicionar(732, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -732;
        Exit;
      end;

      CodPropriedadeRural := Q.FieldByName('cod_propriedade_rural').AsInteger;
      NumImovelReceitaFederal := Q.FieldByName('num_imovel_receita_federal').AsString;
      DtaInicioCertificacao := Trunc(Q.FieldByName('dta_inicio_certificacao').AsDateTime);

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;
*)
function TIntEventos.InsereEventoEmissaoCert(var DadosEvento: TInfoEvento) : Integer;
const
  NomeMetodo : String = 'InsereEventoEmissaoCert';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_emissao_cert ' +
                '       (cod_pessoa_produtor, cod_evento, nom_arquivo_certificado) ' +
                ' values ' +
                '       (:cod_pessoa_produtor, :cod_evento, :nom_arquivo_certificado) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('nom_arquivo_certificado').AsString := StrZero(Conexao.CodProdutorTrabalho, 5) +
                                                           StrZero(DadosEvento.CodEvento, 5) +
                                                           '.pdf';
      Q.ExecSQL;

      DadosEvento.NomArquivoCertificado := StrZero(Conexao.CodProdutorTrabalho, 5) +
                                           StrZero(DadosEvento.CodEvento, 5) +
                                           '.pdf';

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1104, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1104;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.GeraCertificados(var DadosEvento: TInfoEvento;
  CodModeloCertificado: Integer) : Integer;
const
  NomeMetodo : String = 'GeraCertificados';
type
  TTecnico = record
    CodPessoa: Integer;
    Nome: String;
    CRMV: String;
  end;
var
  QAnimais, QPaginas, QLayOuts, QLinhas, QLinhasPagina, QImagens, Q, QCodBarras: THerdomQuery;
  PDF : TPrintPDF;
  Caminho : String;
  X, NumImagens: Integer;
  Bmp : TBitMap;
  CodigoDeBarras: TCodigoDeBarras2De5Intercalado;
  TecnicoResponsavel: TTecnico;
  Coef: Extended;
  TipoResponsavel: String;
  UtilizaID: Boolean;

//  Y : Integer;
  function RetiraEspacosEmBranco(Texto: String): String;
  var
    ipTxt: Integer;
  begin
    Result := '';
    for ipTxt := 1 to Length(Texto) do begin
      if Texto[ipTxt] <> #32 then begin
        Result := Result + Texto[ipTxt];
      end;
    end;
  end;

begin
  Try
    Coef := StrToFloat(ValorParametro(124));
  Except
    Coef := 28.3501;
  End;

  QAnimais := THerdomQuery.Create(Conexao, nil);
  try
    QPaginas := THerdomQuery.Create(Conexao, nil);
    try
      QLayOuts := THerdomQuery.Create(Conexao, nil);
      try
        QLinhas := THerdomQuery.Create(Conexao, nil);
        try
          QLinhasPagina := THerdomQuery.Create(Conexao, nil);
          try
            QImagens := THerdomQuery.Create(Conexao, nil);
            try
              QCodBarras := THerdomQuery.Create(Conexao, nil);
              try  
                try
                  // Obtem linhas a serem desenhadas na página
                  QLinhasPagina.SQL.Clear;
                  {$IFDEF MSSQL}
                  QLinhasPagina.SQL.Add('select num_posicao_x as X, ' +
                                  '       num_posicao_y as Y, ' +
                                  '       num_posicao_x1 as X1, ' +
                                  '       num_posicao_y1 as Y1, ' +
                                  '       cod_estilo_linha - 1 as CodEstilo, ' +
                                  '       num_espessura_linha as NumEspessura ' +
                                  '  from tab_linha_pagina ' +
                                  ' where cod_modelo_certificado = :cod_modelo_certificado');
                  {$ENDIF}
                  QLinhasPagina.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
                  QLinhasPagina.Open;

                  // Obtem posições iniciais de cada certificado da página
                  QPaginas.SQL.Clear;
                  {$IFDEF MSSQL}
                  QPaginas.SQL.Add('select num_posicao_x as X, ' +
                                   '       num_posicao_y as Y ' +
                                   '  from tab_pagina_certificado ' +
                                   '  where cod_modelo_certificado = :cod_modelo_certificado '+
                                   '  order by num_ordem');
                  {$ENDIF}
                  QPaginas.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
                  QPaginas.Open;

                  if QPaginas.IsEmpty then begin
                    Mensagens.Adicionar(1107, Self.ClassName, NomeMetodo, []);
                    Result := -1107;
                    Exit;
                  end;

                  // Obtem informações a serem impressas por certificado
                  QLayOuts.SQL.Clear;
                  {$IFDEF MSSQL}
                  QLayOuts.SQL.Add('select num_posicao_x as X, ' +
                                   '       num_posicao_y as Y, ' +
                                   '       cod_fonte_certificado - 1 as CodFonte, ' +
                                   '       num_tamanho_fonte as NumTamanho, ' +
                                   '       ind_texto_fixo as IndFixo, ' +
                                   '       txt_dado as TxtDado ' +
                                   '  from tab_layout_certificado '+
                                   ' where cod_modelo_certificado = :cod_modelo_certificado');
                  {$ENDIF}
                  QLayOuts.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
                  QLayOuts.Open;

                  if QLayOuts.IsEmpty then begin
                    Mensagens.Adicionar(1108, Self.ClassName, NomeMetodo, []);
                    Result := -1108;
                    Exit;
                  end;

                  QAnimais.SQL.Clear;
                  {$IFDEF MSSQL}
                  QAnimais.SQL.Add('select distinct case ta.cod_animal_sisbov ' +
                                   '         when null then null ' +
                                   '       else ' +
                                   '         right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) + ' +
                                   '         right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + ' +
                                   '         case ta.cod_micro_regiao_sisbov when 0 then ' +
                                   '           ''00'' + ' +
                                   '           right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) +  ' +
                                   '           right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) ' +
                                   '         when -1 then ' +
                                   '           right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) +  ' +
                                   '           right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) ' +
                                   ' 	   else ' +
                                   '           right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) + ' +
                                   '           right(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + ' +
                                   '           right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) ' +
                                   '         end ' +
                                   '       end as CodAnimalSisBov, ' +
                                   '       upper(tp.nom_pais) as NomPaisOrigem, ' +
                                   '       ta.dta_nascimento as DtaNascimento, ' +
                                   '       ta.dta_identificacao_sisbov as DtaIdentificacaoSisbov, ' +
                                   '       case ta.ind_sexo ' +
                                   '         when ''M'' then ''Macho'' ' +
                                   '       else ' +
                                   '         ''Fêmea'' ' +
                                   '       end as DesSexo, ' +
                                   '       tesp.des_especie as DesEspecie, ' +
                                   '       tapt.des_aptidao as DesAptidao, ' +
                                   '       tesp.des_especie + '' / '' + tapt.des_aptidao as DesEspecieAptidao, ' +
                                   '       tr.des_raca as DesRaca, ' +
                                   '       tr.sgl_raca + '' - '' + tr.des_raca as SglDesRaca, ' +
                                   '       tprn.num_imovel_receita_federal as NumImovelNascimento, ' +
                                   '       tprn.num_imovel_receita_federal + isnull('' - '' + ' +
                                   '       case when len(tprn.nom_propriedade_rural) > 33 then ' +
                                   '         left(tprn.nom_propriedade_rural, 30) + ''...'' ' +
                                   '       else ' +
                                   '         tprn.nom_propriedade_rural ' +
                                   '       end, '''') as NumNomImovelNascimento ' +
                                   '      , case when tprn.num_imovel_receita_federal is not null then ' +
                                   '            (select nom_municipio from tab_municipio tmn where tmn.cod_municipio = tprn.cod_municipio) ' +
                                   '        else null ' +
                                   '        end as NomMunicipioNascimento ' +
                                   '      , case when tprn.num_imovel_receita_federal is not null then ' +
                                   '            (select sgl_estado from tab_estado ten where ten.cod_estado = tprn.cod_estado) ' +
                                   '        else null ' +
                                   '        end as SglUFNascimento ' +
                                   '      , case when tprn.num_imovel_receita_federal is not null then ' +
                                   '            (select tmn.nom_municipio + '' - '' + ten.sgl_estado from tab_municipio tmn, tab_estado ten where tmn.cod_municipio = tprn.cod_municipio and ten.cod_estado = tprn.cod_estado) ' +
                                   '        else null ' +
                                   '        end as NomMunicipioUFNascimento, ' +
                                   '       tpri.num_imovel_receita_federal as NumImovelIdentificacao, ' +
                                   '       tpri.cod_id_propriedade_sisbov as CodIDPropriedadeIdentificacao, ' +
                                   '       tpri.num_imovel_receita_federal + isnull('' - '' + ' +
                                   '       case when len(tpri.nom_propriedade_rural) > 33 then ' +
                                   '         left(tpri.nom_propriedade_rural, 30) + ''...'' ' +
                                   '       else ' +
                                   '         tpri.nom_propriedade_rural ' +
                                   '       end, '''') as NumNomImovelIdentificacao, ' +
                                   '       tmi.nom_municipio as NomMunicipioIdentificacao, ' +
                                   '       tei.cod_estado as UFIdentificacao, ' +
                                   '       tei.sgl_estado as SglUFIdentificacao, ' +
                                   '       tmi.nom_municipio + '' - '' + tei.sgl_estado as NomMunicipioUFIdentificacao, ' +
                                   '       ta.cod_animal_certificadora as CodAnimalCertificadora, ' +
                                   '       ta.cod_autenticacao_sisbov as CodAutenticacaoSisbov, ' +
                                   '       tca.num_certificado_animal as NumCertificadoAnimal, ' +
                                   '       tpe.nom_pessoa as NomCertificadora, ' +
                                   '       te.dta_inicio as DtaEmissaoCertificado, ' +
                                   '       ta.cod_animal_manejo as CodAnimalManejo, ' +
                                   '       null as DtaLiberacaoAbate, ' +
                                   '       ta.dta_insercao_sisbov as DtaInsercaoSisbov ' +
                                   '  from tab_certificado_animal tca, ' +
                                   '       tab_animal ta, ' +
                                   '       tab_especie tesp, ' +
                                   '       tab_aptidao tapt, ' +
                                   '       tab_pais tp, ' +
                                   '       tab_raca tr, ' +
                                   '       tab_propriedade_rural tprn, ' +
                                   '       tab_propriedade_rural tpri, ' +
                                   '       tab_municipio tmi, ' +
                                   '       tab_estado tei, ' +
                                   '       tab_parametro_sistema tps, ' +
                                   '       tab_pessoa tpe, ' +
                                   '       tab_evento te ' +
//                                   '       tab_codigo_sisbov tcs ' +
                                   ' where ta.cod_pessoa_produtor = tca.cod_pessoa_produtor ' +
                                   '   and ta.cod_animal = tca.cod_animal ' +
                                   '   and tesp.cod_especie = ta.cod_especie ' +
                                   '   and tapt.cod_aptidao = ta.cod_aptidao ' +
                                   '   and tp.cod_pais_sisbov =* ta.cod_pais_sisbov ' +
                                   '   and tr.cod_raca = ta.cod_raca ' +
                                   '   and tprn.cod_propriedade_rural =* ta.cod_propriedade_nascimento ' +
                                    //druzo 10-06-2009
                                   '   and COALESCE(ta.cod_propriedade_identificacao,ta.num_imovel_identificacao)= Coalesce(tpri.cod_propriedade_rural,tpri.num_imovel_receita_federal) ' +
//                                   '   and (tpri.cod_propriedade_rural = ta.cod_propriedade_identificacao or tpri.num_imovel_receita_federal = ta.num_imovel_identificacao) ' +
                                   '   and tpri.dta_fim_validade is null ' +
                                   '   and tpri.dta_efetivacao_cadastro is not null ' +
                                   '   and tmi.cod_municipio = tpri.cod_municipio ' +
                                   '   and tei.cod_estado = tmi.cod_estado ' +
                                   '   and te.cod_pessoa_produtor = tca.cod_pessoa_produtor ' +
                                   '   and te.cod_evento = tca.cod_evento ' +
//                                   '   and tcs.cod_pais_sisbov = ta.cod_pais_sisbov ' +
//                                   '   and tcs.cod_estado_sisbov = ta.cod_estado_sisbov ' +
//                                   '   and tcs.cod_micro_regiao_sisbov = ta.cod_micro_regiao_sisbov ' +
//                                   '   and tcs.cod_animal_sisbov = ta.cod_animal_sisbov ' +
                                   '   and tpe.cod_pessoa = convert(integer, tps.val_parametro_sistema) ' +
                                   '   and tps.cod_parametro_sistema = 4 ' +
                                   '   and tca.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                                   '   and tca.cod_evento = :cod_evento ' +
                                   ' order by CodAnimalSisBov ');
                  {$ENDIF}
                  QAnimais.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                  QAnimais.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
                  QAnimais.SQL.SaveToFile('c:\sql.sql');
                  QAnimais.Open;

                  if QAnimais.IsEmpty then begin
                    Mensagens.Adicionar(1109, Self.ClassName, NomeMetodo, []);
                    Result := -1109;
                    Exit;
                  end;

                  // Obtem linhas a serem desenhadas por certificado
                  QLinhas.SQL.Clear;
                  {$IFDEF MSSQL}
                  QLinhas.SQL.Add('select num_posicao_x as X, ' +
                                  '       num_posicao_y as Y, ' +
                                  '       num_posicao_x1 as X1, ' +
                                  '       num_posicao_y1 as Y1, ' +
                                  '       cod_estilo_linha - 1 as CodEstilo, ' +
                                  '       num_espessura_linha as NumEspessura ' +
                                  '  from tab_linha_certificado '+
                                  ' where cod_modelo_certificado = :cod_modelo_certificado');
                  {$ENDIF}
                  QLinhas.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
                  QLinhas.Open;

                  // Obtem imagens a serem desenhadas por certificado
                  QImagens.SQL.Clear;
                  {$IFDEF MSSQL}
                  QImagens.SQL.Add('select num_posicao_x as X, ' +
                                   '       num_posicao_y as Y, ' +
                                   '       nom_arquivo_imagem as NomArquivoImagem, ' +
                                   '       num_zoom as NumZoom ' +
                                   '  from tab_imagem_certificado '+
                                   ' where cod_modelo_certificado = :cod_modelo_certificado');
                  {$ENDIF}
                  QImagens.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
                  QImagens.Open;
                  NumImagens := 0;
                  if not QImagens.IsEmpty then begin
                    NumImagens := 1;
                  end;

                  // Obtem códigos de barras a serem desenhados por certificado
                  QCodBarras.SQL.Clear;
                  {$IFDEF MSSQL}
                  QCodBarras.SQL.Add('select num_posicao_x as X, ' +
                                   '         num_posicao_y as Y, ' +
                                   '         num_altura as Altura, ' +
                                   '         ind_orientacao as Orientacao, ' +
                                   '         nom_campo_dado as CampoDado ' +
                                   '    from tab_codigo_barras_certificado '+
                                   '   where cod_modelo_certificado = :cod_modelo_certificado');
                  {$ENDIF}
                  QCodBarras.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;

                  // Prepara caminho para gravação do arquivo
                  try
                    Caminho := Conexao.CaminhoArquivosCertificadora + ValorParametro(17);
                  except
                    Result := -1;
                    Exit;
                  end;

                  if not DirectoryExists(Caminho) then begin
                    if not ForceDirectories(Caminho) then begin
                      Mensagens.Adicionar(1110, Self.ClassName, NomeMetodo, []);
                      Result := -1110;
                      Exit;
                    end;
                  end;

                  if Caminho[Length(Caminho)] <> '\' then begin
                    Caminho := Caminho + '\';
                  end;

                  // Prepara dados para início da geração do arquivo
                  PDF := TPrintPDF.Create(nil);
                  try
                    PDF.Title := 'Certificados de Animais';
                    PDF.Compress := True;

                    Q := THerdomQuery.Create(Conexao, nil);
                    try
                      // Recupera orientação e tamanho do papel
                      Q.SQL.Clear;
                      Q.SQL.Text :=
                        'select '+
                        '  tmc.cod_orientacao '+
                        '  , ttp.altura '+
                        '  , ttp.largura '+
                        'from '+
                        '  tab_modelo_certificado tmc '+
                        '  , tab_tamanho_papel ttp '+
                        'where '+
                        '  tmc.cod_modelo_certificado = :cod_modelo_certificado '+
                        '  and tmc.cod_tamanho_papel = ttp.cod_tamanho_papel ';
                      Q.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
                      Q.Open;
                      if Q.FieldByName('cod_orientacao').AsInteger = 1 then begin
                        PDF.PageWidth := Round(Q.FieldByName('largura').AsFloat * 28.3501);
                        PDF.PageHeight := Round(Q.FieldByName('altura').AsFloat * 28.3501);
                      end Else begin
                        PDF.PageWidth := Round(Q.FieldByName('altura').AsFloat * 28.3501);
                        PDF.PageHeight := Round(Q.FieldByName('largura').AsFloat * 28.3501);
                      end;


                      TipoResponsavel := '';
                      // Recupera pessoa responsável
                      Q.SQL.Clear;
                      Q.SQL.Text :=
                        'select '+
                        '  val_parametro_sistema as TipoResponsavel '+
                        'from '+
                        '  tab_parametro_sistema '+
                        'where '+
                        '  cod_parametro_sistema = 201 ';
                      Q.Open;
                      TipoResponsavel := Trim( Q.FieldByName('TipoResponsavel').AsString );
                      Q.Close;

                      // Verifica a Utilizacao do ID no lugar do NIRF
                      Q.SQL.Clear;
                      Q.SQL.Text :=
                        'select '+
                        '  val_parametro_sistema as UtilizaID '+
                        'from '+
                        '  tab_parametro_sistema '+
                        'where '+
                        '  cod_parametro_sistema = 202 ';
                      Q.Open;
                      UtilizaID := Trim( Q.FieldByName('UtilizaID').AsString ) = '1';
                      Q.Close;


                      if (TipoResponsavel = '') then
                        TipoResponsavel := 'N';

                      TecnicoResponsavel.CodPessoa := -1;
                      TecnicoResponsavel.Nome := '';
                      TecnicoResponsavel.CRMV := '';


                      // Recupera pessoa responsável
                      Q.SQL.Clear;
                      Q.SQL.Text :=
                        'select '+
                        '  cast(val_parametro_sistema as integer) as CodPessoa '+
                        'from '+
                        '  tab_parametro_sistema '+
                        'where '+
                        '  cod_parametro_sistema = 65 ';
                      Q.Open;
                      if not Q.IsEmpty then begin
                        TecnicoResponsavel.CodPessoa := Q.FieldByName('CodPessoa').AsInteger;
                      end;


                      // Recupera dados do técnico da UF do Animal
                      if (TipoResponsavel = 'U') then begin
                        Q.SQL.Clear;
                        Q.SQL.Text :=
                          'select tp.cod_pessoa as CodPessoa,'+
                          '  tp.nom_pessoa as NomPessoa '+
                          '  , case when tt.sgl_conselho_regional is null then '+
                          '      tt.num_conselho_regional '+
                          '    else '+
                          '      tt.sgl_conselho_regional + '' - '' + tt.num_conselho_regional '+
                          '    end as CRMV '+
                          'from '+
                          '  tab_pessoa tp '+
                          '  , tab_tecnico tt, tab_estado_tecnico ttu '+
                          'where tt.cod_pessoa_tecnico = tp.cod_pessoa '+
                          '  and ttu.cod_pessoa_tecnico = tt.cod_pessoa_tecnico '+
                          '  and ttu.cod_estado = :cod_estado ';
                        Q.ParamByName('cod_estado').AsInteger := QAnimais.FieldByName('UFIdentificacao').AsInteger;
                        Q.Open;
                        if Q.IsEmpty then begin
                          Mensagens.Adicionar(1602, Self.ClassName, NomeMetodo, []);
                          Result := -1602;
                          Exit;
                        end;
                        TecnicoResponsavel.CodPessoa := Q.FieldByName('CodPessoa').AsInteger;
                        TecnicoResponsavel.Nome      := Q.FieldByName('NomPessoa').AsString;
                        TecnicoResponsavel.CRMV      := Q.FieldByName('CRMV').AsString;
                      end
                      else
                        // Recupera dados do técnico (caso o mesmo tenha sido informado)
                        if (TipoResponsavel = 'P') then begin
                          Q.SQL.Clear;
                          Q.SQL.Text :=
                            'select '+
                            '  tp.nom_pessoa as NomPessoa '+
                            '  , case when tt.sgl_conselho_regional is null then '+
                            '      tt.num_conselho_regional '+
                            '    else '+
                            '      tt.sgl_conselho_regional + '' - '' + tt.num_conselho_regional '+
                            '    end as CRMV '+
                            'from '+
                            '  tab_pessoa tp '+
                            '  , tab_tecnico tt '+
                            'where '+
                            '  tp.cod_pessoa = :cod_pessoa '+
                            '  and tt.cod_pessoa_tecnico = tp.cod_pessoa ';
                          Q.ParamByName('cod_pessoa').AsInteger := TecnicoResponsavel.CodPessoa;
                          Q.Open;
                          if Q.IsEmpty then begin
                            Mensagens.Adicionar(1602, Self.ClassName, NomeMetodo, []);
                            Result := -1602;
                            Exit;
                          end;
                          TecnicoResponsavel.Nome := Q.FieldByName('NomPessoa').AsString;
                          TecnicoResponsavel.CRMV := Q.FieldByName('CRMV').AsString;
                        end;

                      // Disponibiliza recursos temporários utilizados
                    Finally
                      Q.Free;
                    end;

                    PDF.FileName := Caminho + DadosEvento.NomArquivoCertificado;
                    PDF.beginDoc;

                    // Escreve imagens se houver
                    if NumImagens > 0 then begin
                      Bmp := TBitMap.Create;
                      try
                        While not QImagens.Eof do begin
                          Bmp.LoadFromFile(QImagens.FieldByName('NomArquivoImagem').AsString);
                          PDF.EscreverBitmap(Bmp);
                          QImagens.Next;
                        end;
                      Finally
                        Bmp.Free;
                      end;
                    end;

                    PDF.LineWidth:=1;

                    // Diagrama para teste
      {              X := 0;
                    Y := 0;
                    While X < PDF.PageHeight do begin
                      PDF.TextOut(0, X, IntToStr(Y));
                      PDF.DrawLine(0, X, PDF.PageWidth, X);
                      Inc(X, Trunc(PDF.PageHeight / 21));
                      Inc(Y);
                    end;
                    X := 0;
                    Y := 0;
                    While X < PDF.PageWidth do begin
                      PDF.TextOut(X, 30, IntToStr(Y));
                      PDF.DrawLine(X, 0, X, PDF.PageHeight);
                      Inc(X, Trunc(PDF.PageWidth / 29.7));
                      Inc(Y);
                    end;
      }              // Fim do diagrama

                    // Imprime linhas da página
                    While not QLinhasPagina.Eof do begin
                      PDF.LineWidth := QLinhasPagina.FieldByName('NumEspessura').AsInteger;
                      PDF.LineStyle := TPDFLineStyle(QLinhasPagina.FieldByName('CodEstilo').AsInteger);
  //                    PDF.LineStyle := TPDFLineStyle(0);
                      PDF.DrawLine(Trunc((QLinhasPagina.FieldByName('X').AsFloat) * Coef),
                                   Trunc((QLinhasPagina.FieldByName('Y').AsFloat) * Coef),
                                   Trunc((QLinhasPagina.FieldByName('X1').AsFloat) * Coef),
                                   Trunc((QLinhasPagina.FieldByName('Y1').AsFloat) * Coef));

                      QLinhasPagina.Next;
                    end;

                    CodigoDeBarras := TCodigoDeBarras2De5Intercalado.Create(nil);
                    try
                      // Processa animais
                      While not QAnimais.Eof do begin
                        // Imprime textos do certificado
                        QLayouts.Close;
                        QLayouts.Open;
                        While not QLayouts.Eof do begin
                          PDF.Font.Name := TPDFFontName(QLayouts.FieldByName('CodFonte').AsInteger);
                          PDF.Font.Size := QLayouts.FieldByName('NumTamanho').AsInteger;
                          if (UpperCase(Trim(QLayouts.FieldByName('TxtDado').AsString)) = UpperCase(Trim('Responsável Técnico:'))) then begin
                            if (TecnicoResponsavel.CodPessoa > 0) then 
                              PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                          Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                          Trim(QLayouts.FieldByName('TxtDado').AsString)+#32+TecnicoResponsavel.Nome);
                          end Else if (TecnicoResponsavel.CodPessoa > 0) and (UpperCase(Trim(QLayouts.FieldByName('TxtDado').AsString)) = UpperCase(Trim('CRMV:'))) then begin
                            PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                        Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                        Trim(QLayouts.FieldByName('TxtDado').AsString)+#32+TecnicoResponsavel.CRMV);
                          end Else if (TecnicoResponsavel.CodPessoa > 0) and (UpperCase(Trim(QLayouts.FieldByName('TxtDado').AsString)) = UpperCase(Trim('RESP_CRMV'))) then begin
                            if ( Trim(TecnicoResponsavel.CRMV) <> '') then
                              PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                          Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                          Trim(TecnicoResponsavel.Nome + ' (' + TecnicoResponsavel.CRMV + ')'))
                            else
                              PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                          Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                          Trim(TecnicoResponsavel.Nome));
                          end Else if QLayouts.FieldByName('IndFixo').AsString = 'S' then begin
                            PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                        Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                        QLayouts.FieldByName('TxtDado').AsString);
                          end Else begin
                            if (QAnimais.FieldByName(QLayouts.FieldByName('TxtDado').AsString).DataType = ftDateTime) or
                               (QLayouts.FieldByName('TxtDado').AsString = 'DtaNascimento') or
                               (QLayouts.FieldByName('TxtDado').AsString = 'DtaInsercaoSisbov') then begin
                              PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                          Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                          FormatDateTime('dd/mm/yyyy', QAnimais.FieldByName(QLayouts.FieldByName('TxtDado').AsString).AsDateTime));
                            end Else begin
                              if (QLayouts.FieldByName('TxtDado').AsString = 'NumImovelIdentificacao') then
                              begin
                                if (Trim(QAnimais.FieldByName('NumImovelIdentificacao').Text) = '') and (UtilizaID) then
                                  PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                              Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                              QAnimais.FieldByName('CodIDPropriedadeIdentificacao').Text)
                                else
                                  PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                              Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                              QAnimais.FieldByName('NumImovelIdentificacao').Text);
                              end
                              else
                                if QLayouts.FieldByName('TxtDado').AsString = 'NumCertificadoAnimal' then
                                begin
                                  PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                              Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                              StrZero(QAnimais.FieldByName(QLayouts.FieldByName('TxtDado').AsString).AsInteger, 8));
                                end
                                else
                                  begin
                                    PDF.TextOut(Trunc((QPaginas.FieldByName('X').AsFloat + QLayouts.FieldByName('X').AsFloat) * Coef),
                                                Trunc((QPaginas.FieldByName('Y').AsFloat + QLayouts.FieldByName('Y').AsFloat) * Coef),
                                                QAnimais.FieldByName(QLayouts.FieldByName('TxtDado').AsString).Text);
                                  end;
                            end;
                          end;

                          QLayouts.Next;
                        end;

                        // Imprime códigos de barras do certificado
                        QCodBarras.Close;
                        QCodBarras.Open;
                        While not QCodBarras.Eof do begin
                          // Gera um código de barras a partir do conteúdo do campo da query QAnimais com nome equivalente ao
                          // valor de campo_dados da query QCodBarras
                          if QCodBarras.FieldByName('Orientacao').AsString = 'H' then begin
                            CodigoDeBarras.Orientacao := oHorizontal;
                          end else begin
                            CodigoDeBarras.Orientacao := oVertical;
                          end;

//                          CodigoDeBarras.Altura := Trunc(QCodBarras.FieldByName('Altura').AsFloat * Coef);

                          Bmp := CodigoDeBarras.GetBitmap(RetiraEspacosEmBranco(QAnimais.FieldByName(QCodBarras.FieldByName('CampoDado').AsString).AsString));

                          if Assigned(Bmp) then begin
                            try
                              PDF.ReferenciarBitmap(
                                Trunc((QPaginas.FieldByName('X').AsFloat + QCodBarras.FieldByName('X').AsFloat) * Coef),
                                Trunc((QPaginas.FieldByName('Y').AsFloat + QCodBarras.FieldByName('Y').AsFloat) * Coef),
                                PDF.EscreverBitmap(Bmp), 65);
                            Finally
                              Bmp.Free;
                            end;
                          end;
                          QCodBarras.Next;
                        end;

                        // Imprime linhas do certificado
                        QLinhas.Close;
                        QLinhas.Open;
                        While not QLinhas.Eof do begin
                          PDF.LineWidth := QLinhas.FieldByName('NumEspessura').AsInteger;
                          PDF.LineStyle := TPDFLineStyle(QLinhas.FieldByName('CodEstilo').AsInteger);
      //                    PDF.LineStyle := TPDFLineStyle(0);
                          PDF.DrawLine(Trunc((QPaginas.FieldByName('X').AsFloat + QLinhas.FieldByName('X').AsFloat) * Coef),
                                       Trunc((QPaginas.FieldByName('Y').AsFloat + QLinhas.FieldByName('Y').AsFloat) * Coef),
                                       Trunc((QPaginas.FieldByName('X').AsFloat + QLinhas.FieldByName('X1').AsFloat) * Coef),
                                       Trunc((QPaginas.FieldByName('Y').AsFloat + QLinhas.FieldByName('Y1').AsFloat) * Coef));

                          QLinhas.Next;
                        end;

                        // Imprime imagens do certificado
                        QImagens.Close;
                        QImagens.Open;
                        X := 1;
                        While not QImagens.Eof do begin
                          PDF.ReferenciarBitmap(Trunc((QPaginas.FieldByName('X').AsFloat + QImagens.FieldByName('X').AsFloat) * Coef),
                                                Trunc((QPaginas.FieldByName('Y').AsFloat + QImagens.FieldByName('Y').AsFloat) * Coef),
                                                X, QImagens.FieldByName('NumZoom').AsInteger);
                          QImagens.Next;
                          Inc(X);
                        end;


                        // Próxima posição de certificado na página
                        QPaginas.Next;
                        if QPaginas.Eof then begin
                          PDF.NewPage;
                          QPaginas.Close;
                          QPaginas.Open;
                          // Imprime linhas da página
                          QLinhasPagina.Close;
                          QLinhasPagina.Open;
                          While not QLinhasPagina.Eof do begin
                            PDF.LineWidth := QLinhasPagina.FieldByName('NumEspessura').AsInteger;
                            PDF.LineStyle := TPDFLineStyle(QLinhasPagina.FieldByName('CodEstilo').AsInteger);
          //                  PDF.LineStyle := TPDFLineStyle(0);
                            PDF.DrawLine(Trunc((QLinhasPagina.FieldByName('X').AsFloat) * Coef),
                                         Trunc((QLinhasPagina.FieldByName('Y').AsFloat) * Coef),
                                         Trunc((QLinhasPagina.FieldByName('X1').AsFloat) * Coef),
                                         Trunc((QLinhasPagina.FieldByName('Y1').AsFloat) * Coef));

                            QLinhasPagina.Next;
                          end;
                        end;

                        // Próximo animal
                        QAnimais.Next;
                      end;
                    Finally
                      CodigoDeBarras.Free;
                    end;
                    PDF.ENDDoc;
                    FUltimoArquivoGerado := PDF.FileName;
                  Finally
                    PDF.Free;
                  end;

                  Result := 0;
                except
                  On E: exception do begin
                    Rollback;
                    Mensagens.Adicionar(1106, Self.ClassName, NomeMetodo, [E.Message]);
                    Result := -1106;
                    Exit;
                  end;
                end;
              Finally
                QCodBarras.Free;
              end;
            Finally
              QImagens.Free;
            end;
          Finally
            QLinhasPagina.Free;
          end;
        Finally
          QLinhas.Free;
        end;
      Finally
        QLayOuts.Free;
      end;
    Finally
      QPaginas.Free;
    end;
  Finally
    QAnimais.Free;
  end;
end;

function TIntEventos.EfetivarCadastro(CodEvento: Integer): Integer;
const
  Metodo: Integer = 333;
  NomeMetodo: String = 'EfetivarCadastro';
var
  DadosEvento: TInfoEvento;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se evento pode ser efetivado
  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then Exit;

  if DadosEvento.CodTipoEvento = 16 then begin
    Mensagens.Adicionar(1171, Self.ClassName, NomeMetodo, []);
    Result := -1171;
    Exit;
  end;

  Result := EfetivarCadastroInt(CodEvento, -1, DadosEvento);
end;

function TIntEventos.EfetivarCadastroInt(CodEvento,
  CodModeloCertificado: Integer; DadosEvento: TInfoEvento): Integer;
const
  NomeMetodo: String = 'EfetivarCadastroInt';
var
  Q, QueryLocal: THerdomQuery;
  CodPessoaProdutor,
  CodFazendaOrigem,
  CodFazendaDestino,
  CodTipoLugarOrigem,
  CodTipoLugarDestino,
  CodLocalizacaoOrigem,
  CodPropriedadeRuralOrigem,
  CodLocalizacaoDestino,
  CodPropriedadeRuralDestino,
  CodLocalDestino,
  CodLoteDestino,
  CodPessoa : Integer;
  NumImovelReceitaFederalOrigem, NumImovelReceitaFederalDestino : String;
  IndMigrarAnimal, NumCNPJCPFPessoa, NumCNPJCPFPessoaSecundaria: String;
  DtaInicioCertificacao : TDateTime;
begin
  CodPessoaProdutor := -1;
  CodFazendaDestino := -1;
  CodLoteDestino := -1;
  CodLocalDestino := -1;
  IndMigrarAnimal := 'N';

  // Verifica se cadastro já está efetivado
  Result := CadastroEfetivado('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
  if Result < 0 then
  begin
    Exit;
  end;

  if Result = 1 then
  begin
    Mensagens.Adicionar(1047, Self.ClassName, NomeMetodo, []);
    Result := -1047;
    Exit;
  end;
 //  GeraCertificados(DadosEvento, CodModeloCertificado);
  if DadosEvento.IndEventoSisbov <> 'S' then
  begin
    Mensagens.Adicionar(1063, Self.ClassName, NomeMetodo, []);
    Result := -1063;
    Exit;
  end;

  if DadosEvento.CodSituacaoSisbov <> 'P' then
  begin
    Mensagens.Adicionar(1064, Self.ClassName, NomeMetodo, []);
    Result := -1064;
    Exit;
  end;

  try
    Q := THerdomQuery.Create(Conexao, nil);
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Verifica se existe algum animal pendente
      with Q do
      begin
        SQL.Clear;
        {$IFDEF MSSQL}
        SQL.Add('SELECT count(tae.cod_animal) as qtd_animal_pendente');
        SQL.Add('  FROM tab_animal_evento tae,');
        SQL.Add('       tab_animal ta');
        SQL.Add(' WHERE ta.cod_pessoa_produtor = tae.cod_pessoa_produtor');
        SQL.Add('   AND ta.cod_animal = tae.cod_animal');
        SQL.Add('   AND ta.cod_situacao_sisbov = ''P''');
        SQL.Add('   AND tae.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND tae.cod_evento = :cod_evento');
        {$ENDIF}
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        Open;
        if FieldByName('qtd_animal_pendente').AsInteger > 0 then
        begin
          Mensagens.Adicionar(1065, Self.ClassName, NomeMetodo, []);
          Result := -1065;
          Exit;
        end;
      end;

      CodTipoLugarOrigem := 0;
      CodTipoLugarDestino := 0;
      case DadosEvento.CodTipoEvento of
        8: begin  // Transferência
          with Q do
          begin
            SQL.Clear;
            SQL.Add('SELECT tet.cod_tipo_lugar_origem, ');
            SQL.Add('       IsNull(tet.cod_fazenda_origem, -1) AS cod_fazenda_origem, ');
            SQL.Add('       tet.num_imovel_origem, ');
            SQL.Add('       IsNull(tet.cod_localizacao_origem, -1) AS cod_localizacao_origem, ');
            SQL.Add('       IsNull(tet.cod_propriedade_origem, -1) AS cod_propriedade_origem, ');
            SQL.Add('       tet.num_cnpj_cpf_origem, ');
            SQL.Add('       IsNull(tet.cod_pessoa_origem, -1) AS cod_pessoa_origem, ');
            SQL.Add('       IsNull(tet.cod_pessoa_secundaria_origem, -1) AS cod_pessoa_secundaria_origem, ');
            SQL.Add('       tet.cod_tipo_lugar_destino, ');
            SQL.Add('       IsNull(tet.cod_fazenda_destino, -1) AS cod_fazenda_destino, ');
            SQL.Add('       IsNull(tet.cod_local_destino, -1) AS cod_local_destino, ');
            SQL.Add('       IsNull(tet.cod_lote_destino, -1) AS cod_lote_destino, ');
            SQL.Add('       tet.num_imovel_destino, ');
            SQL.Add('       IsNull(tet.cod_localizacao_destino, -1) AS cod_localizacao_destino, ');
            SQL.Add('       IsNull(tet.cod_propriedade_destino, -1) AS cod_propriedade_destino, ');
            SQL.Add('       tet.num_cnpj_cpf_destino, ');
            SQL.Add('       IsNull(tet.cod_pessoa_destino, -1) AS cod_pessoa_destino, ');
            SQL.Add('       IsNull(tet.cod_pessoa_secundaria_destino, -1) AS cod_pessoa_secundaria_destino, ');
            SQL.Add('       tet.num_gta, ');
            SQL.Add('       tet.cod_serie_gta, ');
            SQL.Add('       tet.cod_estado_gta, ');
            SQL.Add('       tet.dta_emissao_gta, ');
            SQL.Add('       tet.ind_mov_naoeras_eras, ');
            SQL.Add('       tet.ind_migrar_animal_sisbov, ');
            SQL.Add('       case when tet.cod_propriedade_destino  is null then ');
            SQL.Add('         case when tet.cod_fazenda_destino is null then '''' ');
            SQL.Add('         else ');
            SQL.Add('            (select tpr1.cod_id_propriedade_sisbov from tab_fazenda tf1, tab_propriedade_rural tpr1 ');
            SQL.Add('               where tf1.cod_pessoa_produtor    = tet.cod_pessoa_produtor ');
            SQL.Add('                 and tf1.cod_fazenda            = tet.cod_fazenda_destino ');
            SQL.Add('                 and tpr1.cod_propriedade_rural = tf1.cod_propriedade_rural) ');
            SQL.Add('         end ');
            SQL.Add('       else ');
            SQL.Add('          (select tpr1.cod_id_propriedade_sisbov from tab_propriedade_rural tpr1 ');
            SQL.Add('             where tpr1.cod_propriedade_rural = tet.cod_propriedade_destino) ');
            SQL.Add('       end as cod_id_propriedade_sisbov ');
            SQL.Add('  FROM tab_evento_transferencia tet ');
            SQL.Add(' WHERE tet.cod_pessoa_produtor = :cod_pessoa_produtor ');
            SQL.Add('   AND tet.cod_evento = :cod_evento  ');

            ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            ParamByName('cod_evento').AsInteger := CodEvento;
            Open;

            if FieldByName('ind_migrar_animal_sisbov').AsString = 'N' then begin
              if (FieldByName('num_gta').IsNull) or (FieldByName('cod_serie_gta').IsNull) or (FieldByName('cod_estado_gta').IsNull)
                or (FieldByName('dta_emissao_gta').IsNull) then
              begin
                Mensagens.Adicionar(1073, Self.ClassName, NomeMetodo, []);
                Result := -1073;
                Exit;
              end;
            end;

            if ((FieldByName('ind_mov_naoeras_eras').AsString = 'S') and
               (FieldByName('cod_id_propriedade_sisbov').IsNull)) then begin
              Mensagens.Adicionar(2393, Self.ClassName, NomeMetodo, []);
              Result := -2393;
              Exit;
            end;

            // Consiste origem
            CodTipoLugarOrigem := FieldByName('cod_tipo_lugar_origem').AsInteger;
            IndMigrarAnimal    := FieldByName('ind_migrar_animal_sisbov').AsString;

            case CodTipoLugarOrigem of
              1: begin
                CodLocalizacaoOrigem := -1;
                CodFazendaOrigem := FieldByName('cod_fazenda_origem').AsInteger;
                Result := TIntFazendas.VerificaFazendaEfetivada(Conexao,
                   Mensagens, CodFazendaOrigem, CodPropriedadeRuralOrigem,
                   NumImovelReceitaFederalOrigem, CodLocalizacaoOrigem,
                   DtaInicioCertificacao, 'Fazenda Origem');
                if Result < 0 then
                begin
                  Exit;
                end;
              end;

              2: begin
                CodPropriedadeRuralOrigem := FieldByName('cod_propriedade_origem').AsInteger;
                NumImovelReceitaFederalOrigem := FieldByName('num_imovel_origem').AsString;
                CodLocalizacaoOrigem := FieldByName('cod_localizacao_origem').AsInteger;
                CodPessoaProdutor := FieldByName('cod_pessoa_origem').AsInteger;
                NumCNPJCPFPessoa := FieldByName('num_cnpj_cpf_origem').AsString;
                CodLocalDestino := FieldByName('cod_local_destino').AsInteger;
                CodLoteDestino := FieldByName('cod_lote_destino').AsInteger;
                if CodPropriedadeRuralOrigem > 0 then
                begin
                  NumImovelReceitaFederalOrigem := '';
                  CodLocalizacaoOrigem := -1;
                end;

                // Busca a pessoa
                if CodPessoaProdutor <= 0 then
                begin
                  QueryLocal.SQL.Clear;
                  QueryLocal.SQL.Add('SELECT cod_pessoa');
                  QueryLocal.SQL.Add('  FROM tab_pessoa');
                  QueryLocal.SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
                  QueryLocal.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoa;
                  Open;

                  if QueryLocal.IsEmpty then
                  begin
                    Mensagens.Adicionar(1769, Self.ClassName, NomeMetodo,
                      [NumCNPJCPFPessoa]);
                    Result := -1769;
                    Exit;
                  end;

                  CodPessoaProdutor := QueryLocal.FieldByName('cod_pessoa').AsInteger;
                end;

                CodPropriedadeRuralOrigem := TIntPropriedadesRurais.
                  VerificaLocalizacaoSISBOVPropriedade(Conexao, Mensagens,
                  NumImovelReceitaFederalOrigem, CodPropriedadeRuralOrigem,
                  CodLocalizacaoOrigem, CodPessoaProdutor, True);
                if Result < 0 then
                begin
                  Exit;
                end;

                // Busca o restante dos dados
                QueryLocal.SQL.Clear;
                QueryLocal.SQL.Add('SELECT tp.num_cnpj_cpf,');
                QueryLocal.SQL.Add('       tpr.num_imovel_receita_federal,');
                QueryLocal.SQL.Add('       tls.cod_localizacao_sisbov,');
                QueryLocal.SQL.Add('       tls.cod_propriedade_rural,');
                QueryLocal.SQL.Add('       tls.cod_pessoa_produtor');
                QueryLocal.SQL.Add('  FROM tab_localizacao_sisbov tls,');
                QueryLocal.SQL.Add('       tab_propriedade_rural tpr,');
                QueryLocal.SQL.Add('       tab_pessoa tp');
                QueryLocal.SQL.Add(' WHERE tls.cod_pessoa_produtor = :cod_pessoa_produtor');
                QueryLocal.SQL.Add('   AND tls.cod_propriedade_rural = :cod_propriedade_rural');
                QueryLocal.SQL.Add('   AND tpr.cod_propriedade_rural = tls.cod_propriedade_rural');
                QueryLocal.SQL.Add('   AND tp.cod_pessoa = tls.cod_pessoa_produtor');
                QueryLocal.SQL.Add('   AND tpr.dta_fim_validade is null');
                QueryLocal.SQL.Add('   AND tp.dta_fim_validade is null');
                QueryLocal.ParamByName('cod_pessoa_produtor').AsInteger :=
                  CodPessoaProdutor;
                QueryLocal.ParamByName('cod_propriedade_rural').AsInteger :=
                  CodPropriedadeRuralOrigem;
                QueryLocal.Open;

                if QueryLocal.IsEmpty then
                begin
                  Mensagens.Adicionar(2097, Self.ClassName, NomeMetodo, []);
                  Result := -2097;
                  Exit;
                end;

                CodPropriedadeRuralOrigem := QueryLocal.FieldByName('cod_propriedade_rural').AsInteger;
                NumImovelReceitaFederalOrigem := QueryLocal.FieldByName('num_imovel_receita_federal').AsString;
                CodLocalizacaoOrigem := QueryLocal.FieldByName('cod_localizacao_sisbov').AsInteger;
                CodPessoaProdutor := QueryLocal.FieldByName('cod_pessoa_produtor').AsInteger;
                NumCNPJCPFPessoa := QueryLocal.FieldByName('num_cnpj_cpf').AsString;
              end;

              3: begin
              end;
            end;

            // Consiste destino
            CodTipoLugarDestino :=
              Q.FieldByName('cod_tipo_lugar_destino').AsInteger;
            case CodTipoLugarDestino of
              1: begin
                CodLocalizacaoDestino := -1;
                CodFazendaDestino := FieldByName('cod_fazenda_destino').AsInteger;
                Result := TIntFazendas.VerificaFazendaEfetivada(Conexao,
                  Mensagens, CodFazendaDestino, CodPropriedadeRuralDestino,
                  NumImovelReceitaFederalDestino, CodLocalizacaoDestino,
                  DtaInicioCertificacao, 'Fazenda Destino');
                if Result < 0 then
                begin
                  Exit;
                end;
              end;

              2: begin
                CodPropriedadeRuralDestino := FieldByName('cod_propriedade_destino').AsInteger;
                NumImovelReceitaFederalDestino := FieldByName('num_imovel_destino').AsString;
                CodLocalizacaoDestino := FieldByName('cod_localizacao_destino').AsInteger;
                CodPessoaProdutor := FieldByName('cod_pessoa_destino').AsInteger;
                NumCNPJCPFPessoa := FieldByName('num_cnpj_cpf_destino').AsString;
                if CodPropriedadeRuralDestino > 0 then
                begin
                  NumImovelReceitaFederalDestino := '';
                  CodLocalizacaoDestino := -1;
                end;

                // Busca a pessoa
                if CodPessoaProdutor <= 0 then
                begin
                  QueryLocal.SQL.Clear;
                  QueryLocal.SQL.Add('SELECT cod_pessoa');
                  QueryLocal.SQL.Add('  FROM tab_pessoa');
                  QueryLocal.SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
                  QueryLocal.ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoa;
                  QueryLocal.Open;

                  if QueryLocal.IsEmpty then
                  begin
                    Mensagens.Adicionar(1769, Self.ClassName, NomeMetodo,
                      [NumCNPJCPFPessoa]);
                    Result := -1769;
                    Exit;
                  end;

                  CodPessoaProdutor := QueryLocal.FieldByName('cod_pessoa').AsInteger;
                end;

                Result := TIntPropriedadesRurais.VerificaLocalizacaoSISBOVPropriedade(
                  Conexao, Mensagens, NumImovelReceitaFederalDestino,
                  CodPropriedadeRuralDestino, CodLocalizacaoDestino,
                  CodPessoaProdutor, True);
                if Result < 0 then
                begin
                  Exit;
                end;

                // Busca o restante dos dados
                QueryLocal.SQL.Clear;
                QueryLocal.SQL.Add('SELECT tp.num_cnpj_cpf,');
                QueryLocal.SQL.Add('       tpr.num_imovel_receita_federal,');
                QueryLocal.SQL.Add('       tls.cod_localizacao_sisbov,');
                QueryLocal.SQL.Add('       tls.cod_propriedade_rural,');
                QueryLocal.SQL.Add('       tls.cod_pessoa_produtor');
                QueryLocal.SQL.Add('  FROM tab_localizacao_sisbov tls,');
                QueryLocal.SQL.Add('       tab_propriedade_rural tpr,');
                QueryLocal.SQL.Add('       tab_pessoa tp');
                QueryLocal.SQL.Add(' WHERE tls.cod_pessoa_produtor = :cod_pessoa_produtor');
                QueryLocal.SQL.Add('   AND tls.cod_propriedade_rural = :cod_propriedade_rural');
                QueryLocal.SQL.Add('   AND tpr.cod_propriedade_rural = tls.cod_propriedade_rural');
                QueryLocal.SQL.Add('   AND tp.cod_pessoa = tls.cod_pessoa_produtor');
                QueryLocal.SQL.Add('   AND tpr.dta_fim_validade is null');
                QueryLocal.SQL.Add('   AND tp.dta_fim_validade is null');
                QueryLocal.ParamByName('cod_pessoa_produtor').AsInteger :=
                  CodPessoaProdutor;
                QueryLocal.ParamByName('cod_propriedade_rural').AsInteger :=
                  CodPropriedadeRuralDestino;
                QueryLocal.Open;

                if QueryLocal.IsEmpty then
                begin
                  Mensagens.Adicionar(2097, Self.ClassName, NomeMetodo, []);
                  Result := -2097;
                  Exit;
                end;

                CodPropriedadeRuralDestino := QueryLocal.FieldByName('cod_propriedade_rural').AsInteger;
                NumImovelReceitaFederalDestino := QueryLocal.FieldByName('num_imovel_receita_federal').AsString;
                CodLocalizacaoDestino := QueryLocal.FieldByName('cod_localizacao_sisbov').AsInteger;
                CodPessoaProdutor := QueryLocal.FieldByName('cod_pessoa_produtor').AsInteger;
                NumCNPJCPFPessoa := QueryLocal.FieldByName('num_cnpj_cpf').AsString;
              end;

              3: begin
                NumCNPJCPFPessoaSecundaria := Fieldbyname('num_cnpj_cpf_destino').Asstring;
                Result := ConsistirAglomeracao(NumCNPJCPFPessoaSecundaria, CodEvento);
                if Result < 0 then
                begin
                  Exit;
                end;
              end;
            end;
          end;
        end;

        9: begin  // Venda ao criador
          with Q do
          begin
            SQL.Clear;
            SQL.Add('SELECT tev.num_imovel_receita_federal, ');
            SQL.Add('       IsNull(tev.cod_localizacao_sisbov, -1) AS cod_localizacao_sisbov, ');
            SQL.Add('       IsNull(tev.cod_propriedade_rural, -1) AS cod_propriedade_rural, ');
            SQL.Add('       IsNull(tev.cod_pessoa, -1) AS cod_pessoa, ');
            SQL.Add('       tev.num_cnpj_cpf_pessoa_secundaria, ');
            SQL.Add('       tev.num_gta, ');
            SQL.Add('       tev.cod_serie_gta, ');
            SQL.Add('       tev.cod_estado_gta, ');
            SQL.Add('       tev.dta_emissao_gta, ');
            SQL.Add('       tev.ind_venda_certif_terceira, ');
            SQL.Add('       tev.ind_mov_naoeras_eras, ');
            SQL.Add('       tev.cod_exportacao_propriedade, ');
            SQL.Add('       tpr.cod_id_propriedade_sisbov ');
            SQL.Add('  FROM tab_evento_venda_criador tev ');
            SQL.Add('    ,  tab_propriedade_rural tpr ');
            SQL.Add(' WHERE tev.cod_pessoa_produtor = :cod_pessoa_produtor ');
            SQL.Add('   AND tev.cod_evento = :cod_evento ');
            SQL.Add('   AND tev.cod_propriedade_rural *= tpr.cod_propriedade_rural ');
            ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            ParamByName('cod_evento').AsInteger := CodEvento;
            Open;

            if (FieldByName('num_gta').IsNull) or (FieldByName('cod_serie_gta').IsNull) or (FieldByName('cod_estado_gta').IsNull)
              or (FieldByName('dta_emissao_gta').IsNull) then
            begin
              Mensagens.Adicionar(1073, Self.ClassName, NomeMetodo, []);
              Result := -1073;
              Exit;
            end;

            if ((FieldByName('ind_mov_naoeras_eras').AsString = 'S') and
                (FieldByName('cod_id_propriedade_sisbov').IsNull) and
                (FieldByName('ind_venda_certif_terceira').AsString <> 'S'))    then begin
              Mensagens.Adicionar(2393, Self.ClassName, NomeMetodo, []);
              Result := -2393;
              Exit;
            end;

            CodPropriedadeRuralDestino := FieldByName('cod_propriedade_rural').AsInteger;
            NumImovelReceitaFederalDestino := FieldByName('num_imovel_receita_federal').AsString;
            CodLocalizacaoDestino := FieldByName('cod_localizacao_sisbov').AsInteger;
            CodPessoaProdutor := FieldByName('cod_pessoa').AsInteger;
            NumCNPJCPFPessoaSecundaria := FieldByName('num_cnpj_cpf_pessoa_secundaria').AsString;
            if CodPropriedadeRuralDestino > 0 then
            begin
              NumImovelReceitaFederalDestino := '';
              CodLocalizacaoDestino := -1;
            end;

            if (UpperCase(FieldByName('ind_venda_certif_terceira').AsString) <> 'S') then
            begin
              // Busca a pessoa
              if CodPessoaProdutor <= 0 then
              begin
                SQL.Clear;
                SQL.Add('SELECT cod_pessoa');
                SQL.Add('  FROM tab_pessoa');
                SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
                ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoaSecundaria;
                Open;

                if IsEmpty then
                begin
                  Mensagens.Adicionar(1769, Self.ClassName, NomeMetodo,
                    [NumCNPJCPFPessoa]);
                  Result := -1769;
                  Exit;
                end;

                CodPessoaProdutor := Q.FieldByName('cod_pessoa').AsInteger;
              end;

              Result := TIntPropriedadesRurais.VerificaLocalizacaoSISBOVPropriedade(
                Conexao, Mensagens, NumImovelReceitaFederalDestino,
                CodPropriedadeRuralDestino, CodLocalizacaoDestino,
                CodPessoaProdutor, True);
              if Result < 0 then
              begin
                Exit;
              end;

              // Busca o restante dos dados
              SQL.Clear;
              SQL.Add('SELECT tp.num_cnpj_cpf,');
              SQL.Add('       tpr.num_imovel_receita_federal,');
              SQL.Add('       tls.cod_localizacao_sisbov,');
              SQL.Add('       tls.cod_propriedade_rural,');
              SQL.Add('       tls.cod_pessoa_produtor');
              SQL.Add('  FROM tab_localizacao_sisbov tls,');
              SQL.Add('       tab_propriedade_rural tpr,');
              SQL.Add('       tab_pessoa tp');
              SQL.Add(' WHERE tls.cod_pessoa_produtor = :cod_pessoa_produtor');
              SQL.Add('   AND tls.cod_propriedade_rural = :cod_propriedade_rural');
              SQL.Add('   AND tpr.cod_propriedade_rural = tls.cod_propriedade_rural');
              SQL.Add('   AND tp.cod_pessoa = tls.cod_pessoa_produtor');
              SQL.Add('   AND tpr.dta_fim_validade is null');
              SQL.Add('   AND tp.dta_fim_validade is null');
              ParamByName('cod_pessoa_produtor').AsInteger :=
                CodPessoaProdutor;
              ParamByName('cod_propriedade_rural').AsInteger :=
                CodPropriedadeRuralDestino;
              Open;

              if IsEmpty then
              begin
                Mensagens.Adicionar(2097, Self.ClassName, NomeMetodo, []);
                Result := -2097;
                Exit;
              end;

              CodPropriedadeRuralDestino := FieldByName('cod_propriedade_rural').AsInteger;
              NumImovelReceitaFederalDestino := FieldByName('num_imovel_receita_federal').AsString;
              CodLocalizacaoDestino := FieldByName('cod_localizacao_sisbov').AsInteger;
              CodPessoaProdutor := FieldByName('cod_pessoa_produtor').AsInteger;
              NumCNPJCPFPessoa := FieldByName('num_cnpj_cpf').AsString;
            end else begin
              if FieldByName('cod_exportacao_propriedade').IsNull and
                FieldByName('cod_localizacao_sisbov').IsNull and
                FieldByName('cod_propriedade_rural').IsNull then begin
                Mensagens.Adicionar(2395, Self.ClassName, NomeMetodo, []);
                Result := -2395;
                Exit;
              end;
            end;
          end;
        end;

        10: begin  // Venda ao frigorífico
          with Q do
          begin
            SQL.Clear;
            {$IFDEF MSSQL}
            SQL.Add('SELECT num_cnpj_cpf_frigorifico,');
            SQL.Add('       cod_pessoa,');
            SQL.Add('       num_gta,');
            SQL.Add('       cod_serie_gta,');
            SQL.Add('       cod_estado_gta,');
            SQL.Add('       dta_emissao_gta');
            SQL.Add('  FROM tab_evento_venda_frigorifico ');
            SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
            SQL.Add('   AND cod_evento = :cod_evento');
            {$ENDIF}
            ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            ParamByName('cod_evento').AsInteger := CodEvento;
            Open;

            if (FieldByName('num_gta').IsNull) or (FieldByName('cod_serie_gta').IsNull) or (FieldByName('cod_estado_gta').IsNull) or
               (FieldByName('dta_emissao_gta').IsNull) then
            begin
              Mensagens.Adicionar(1073, Self.ClassName, NomeMetodo, []);
              Result := -1073;
              Exit;
            end;

            if FieldByName('cod_pessoa').IsNull then
            begin
              if not FieldByName('num_cnpj_cpf_frigorifico').IsNull then
              begin
                CodPessoa := BuscarFrigorifico(FieldByName('num_cnpj_cpf_frigorifico').asstring);
                if CodPessoa > 0 then
                begin
                  SQL.Clear;
                  SQL.Add('UPDATE tab_evento_venda_frigorifico');
                  SQL.Add('   SET cod_pessoa          = :cod_pessoa');
                  SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
                  SQL.Add('   AND cod_evento          = :cod_evento');
                  ParamByName('cod_pessoa').AsInteger := CodPessoa;
                  ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                  ParamByName('cod_evento').AsInteger := CodEvento;
                  ExecSQL;
                end
                else
                begin
                  Mensagens.Adicionar(1074, Self.ClassName, NomeMetodo, []);
                  Result := -1074;
                  Exit;
                end;
              end
              else
              begin
                 Mensagens.Adicionar(1074, Self.ClassName, NomeMetodo, []);
                 Result := -1074;
                 Exit;
              end;
            end;
          end;
        end;

        11: begin  // Desaparecimento
        end;

        12: begin  // Morte
        end;

        16: begin  // Emissão de certificado
        end;
        36: begin  // Retorno do frigorífico
          with Q do
          begin
            SQL.Clear;
            {$IFDEF MSSQL}
            SQL.Add('SELECT num_cnpj_cpf_frigorifico,');
            SQL.Add('       cod_pessoa,');
            SQL.Add('       num_gta,');
            SQL.Add('       cod_serie_gta,');
            SQL.Add('       cod_estado_gta,');
            SQL.Add('       dta_emissao_gta');
            SQL.Add('  FROM tab_evento_retorno_frigorifico ');
            SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
            SQL.Add('   AND cod_evento = :cod_evento');
            {$ENDIF}
            ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            ParamByName('cod_evento').AsInteger := CodEvento;
            Open;

            if (FieldByName('num_gta').IsNull) or (FieldByName('cod_serie_gta').IsNull) or (FieldByName('cod_estado_gta').IsNull) or
               (FieldByName('dta_emissao_gta').IsNull) then
            begin
              Mensagens.Adicionar(1073, Self.ClassName, NomeMetodo, []);
              Result := -1073;
              Exit;
            end;

            if FieldByName('cod_pessoa').IsNull then
            begin
              if not FieldByName('num_cnpj_cpf_frigorifico').IsNull then
              begin
                CodPessoa := BuscarFrigorifico(FieldByName('num_cnpj_cpf_frigorifico').asstring);
                if CodPessoa > 0 then
                begin
                  SQL.Clear;
                  SQL.Add('UPDATE tab_evento_retorno_frigorifico');
                  SQL.Add('   SET cod_pessoa          = :cod_pessoa');
                  SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
                  SQL.Add('   AND cod_evento          = :cod_evento');
                  ParamByName('cod_pessoa').AsInteger := CodPessoa;
                  ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
                  ParamByName('cod_evento').AsInteger := CodEvento;
                  ExecSQL;
                end
                else
                begin
                  Mensagens.Adicionar(1074, Self.ClassName, NomeMetodo, []);
                  Result := -1074;
                  Exit;
                end;
              end
              else
              begin
                 Mensagens.Adicionar(1074, Self.ClassName, NomeMetodo, []);
                 Result := -1074;
                 Exit;
              end;
            end;
          end;
        end;
      else
        Mensagens.Adicionar(1066, Self.ClassName, NomeMetodo, []);
        Result := -1066;
        Exit;
      end;

      // Abre transação
      beginTran;

      // Atualiza tab_evento
      with Q do
      begin
        Close;
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('UPDATE tab_evento');
        SQL.Add('   SET dta_efetivacao_cadastro = getdate(),');
        SQL.Add('       cod_situacao_sisbov = ''I''');
        SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND cod_evento = :cod_evento');
{$ENDIF}
        ParamByName('cod_pessoa_produtor').AsInteger :=
          Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        ExecSQL;
      end;

      case DadosEvento.CodTipoEvento of
        8: begin  // Transferência
          if CodTipoLugarOrigem <> 3 then
          begin
            with Q do
            begin
              SQL.Clear;
{$IFDEF MSSQL}
              SQL.Add('UPDATE tab_evento_transferencia');
              SQL.Add('   SET num_imovel_origem = :num_imovel_origem,');
              SQL.Add('       cod_localizacao_origem = :cod_localizacao_origem,');
              SQL.Add('       cod_propriedade_origem = :cod_propriedade_origem');
              SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
              SQL.Add('   AND cod_evento = :cod_evento');
{$ENDIF}
              ParamByName('num_imovel_origem').asString := NumImovelReceitaFederalOrigem;
              ParamByName('cod_localizacao_origem').AsInteger := CodLocalizacaoOrigem;
              ParamByName('cod_propriedade_origem').AsInteger := CodPropriedadeRuralOrigem;
              ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
              ParamByName('cod_evento').AsInteger := CodEvento;
              ExecSQL;
            end;
          end;

          if CodTipoLugarDestino <> 3 then
          begin
            with Q do
            begin
              SQL.Clear;
              SQL.Add('UPDATE tab_evento_transferencia');
              SQL.Add('   SET num_imovel_destino = :num_imovel_destino,');
              SQL.Add('       cod_localizacao_destino = :cod_localizacao_destino,');
              SQL.Add('       cod_propriedade_destino = :cod_propriedade_destino');
              SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
              SQL.Add('   AND cod_evento = :cod_evento');

              ParamByName('num_imovel_destino').asString :=
                NumImovelReceitaFederalDestino;
              ParamByName('cod_localizacao_destino').AsInteger :=
                CodLocalizacaoDestino;
              ParamByName('cod_propriedade_destino').AsInteger :=
                CodPropriedadeRuralDestino;
              ParamByName('cod_pessoa_produtor').AsInteger :=
                Conexao.CodProdutorTrabalho;
              ParamByName('cod_evento').AsInteger := CodEvento;
              ExecSQL;
            end;

            // Atualiza os dados do lugar corrente dos animais
            // que ainda não foram enviados para o SISBOV
            // para garantir a consistência dos dados. Isso será realizado
            // apenas se a transferencia não for uma migração do sistema antigo
            // para o novo de certificadora terceira.
            if (CodTipoLugarDestino = 2) and (IndMigrarAnimal = 'N') then
            begin
              with Q do
              begin
                SQL.Clear;
                SQL.Add('update tab_animal');
                SQL.Add('   set cod_tipo_lugar = :cod_tipo_lugar,');
                SQL.Add('       cod_fazenda_corrente = :cod_fazenda_corrente,');
                SQL.Add('       cod_lote_corrente = :cod_lote_corrente,');
                SQL.Add('       cod_local_corrente = :cod_local_corrente,');
                SQL.Add('       num_imovel_corrente = :num_imovel_corrente,');
                SQL.Add('       cod_localizacao_corrente = :cod_localizacao_corrente,');
                SQL.Add('       cod_propriedade_corrente = :cod_propriedade_corrente,');
                SQL.Add('       num_cnpj_cpf_corrente = :num_cnpj_cpf_corrente,');
                SQL.Add('       cod_pessoa_corrente = :cod_pessoa_corrente,');
                SQL.Add('       cod_pessoa_secundaria_corrente = :cod_pessoa_secundaria_corrente');
                SQL.Add('  from tab_animal ta,');
                SQL.Add('       tab_animal_evento tae');
                SQL.Add(' where ta.cod_pessoa_produtor = tae.cod_pessoa_produtor');
                SQL.Add('   and ta.cod_animal = tae.cod_animal');
                SQL.Add('   and tae.cod_pessoa_produtor = :cod_pessoa_produtor');
                SQL.Add('   and tae.cod_evento = :cod_evento');
                SQL.Add('   and tae.cod_arquivo_sisbov IS NULL');
                ParamByName('cod_pessoa_produtor').AsInteger :=
                  Conexao.CodProdutorTrabalho;
                ParamByName('cod_evento').AsInteger := CodEvento;
                ParamByName('cod_tipo_lugar').AsInteger := CodTipoLugarDestino;
                AtribuiParametro(Q, CodFazendaDestino, 'cod_fazenda_corrente', -1);
                AtribuiParametro(Q, CodLoteDestino, 'cod_lote_corrente', -1);
                AtribuiParametro(Q, CodLocalDestino, 'cod_local_corrente', -1);
                AtribuiParametro(Q, NumImovelReceitaFederalDestino, 'num_imovel_corrente', '');
                AtribuiParametro(Q, CodLocalizacaoDestino, 'cod_localizacao_corrente', -1);
                AtribuiParametro(Q, CodPropriedadeRuralDestino, 'cod_propriedade_corrente', -1);
                AtribuiParametro(Q, NumCNPJCPFPessoa, 'num_cnpj_cpf_corrente', '');
                AtribuiParametro(Q, CodPessoaProdutor, 'cod_pessoa_corrente', -1);
                AtribuiParametro(Q, -1, 'cod_pessoa_secundaria_corrente', -1);

                ExecSQL;
              end;
            end;
          end;
        end;

        9: begin  // Venda para criador
          with Q do
          begin
            SQL.Clear;
{$IFDEF MSSQL}
            SQL.Add('UPDATE tab_evento_venda_criador');
            SQL.Add('   SET num_imovel_receita_federal = :num_imovel_receita_federal,');
            SQL.Add('       cod_localizacao_sisbov = :cod_localizacao_sisbov,');
            SQL.Add('       cod_pessoa = :cod_pessoa,');
            SQL.Add('       cod_propriedade_rural = :cod_propriedade_rural');
            SQL.Add(' WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
            SQL.Add('   AND cod_evento = :cod_evento');
{$ENDIF}
            ParamByName('num_imovel_receita_federal').asString := NumImovelReceitaFederalDestino;
            if CodLocalizacaoDestino > 0 then
            begin
              ParamByName('cod_localizacao_sisbov').AsInteger := CodLocalizacaoDestino;
            end
            else
            begin
              ParamByName('cod_localizacao_sisbov').DataType := ftInteger;
              ParamByName('cod_localizacao_sisbov').Clear;
            end;
            if CodPessoaProdutor > 0 then
            begin
              ParamByName('cod_pessoa').AsInteger := CodPessoaProdutor;
            end
            else
            begin
              ParamByName('cod_pessoa').DataType := ftInteger;
              ParamByName('cod_pessoa').Clear;
            end;
            if CodPropriedadeRuralDestino > 0 then
            begin
              ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRuralDestino;
            end
            else
            begin
              ParamByName('cod_propriedade_rural').DataType := ftInteger;
              ParamByName('cod_propriedade_rural').Clear;
            end;
            ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;            
            ParamByName('cod_evento').AsInteger := CodEvento;
            ExecSQL;
          end;
        end;

        10: begin  // Venda ao frigorífico
        end;

        11: begin  // Desaparecimento
        end;

        12: begin  // Morte
        end;

        16: begin  // Emissão de certificado
          FUltimoArquivoGerado := '';

          // Grava animais na tab_certificado_animal
          Result := GravaCertificadoAnimal(DadosEvento);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;

          // Grava registro do arquivo de evento na tab_evento_emissao_cert
          Result := InsereEventoEmissaoCert(DadosEvento);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;

          // Gera arquivo PDF contendo certificados
          Result := GeraCertificados(DadosEvento, CodModeloCertificado);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
        end;
      end;

      // Cofirma transação
      Commit;

      // Retorna status "ok" do método
      Result := 0;
    finally
      Q.Free;
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(1046, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1046;
      Exit;
    end;
  end;
end;

function TIntEventos.Excluir(CodEvento: Integer): Integer;
const
  Metodo: Integer = 332;
  NomeMetodo: String = 'Excluir';
var
  Q, Q1: THerdomQuery;
  DadosEvento, DadosEventoAssociado: TInfoEvento;
  Animais : TIntAnimais;
  EstoqueSemen: TIntEstoqueSemen;
  idMovimentacao, CodMovimento: Integer;
  CodAnimalFemea: Integer;
  Retorno: Integer;
  Conectado, EventoRemovido: Boolean;
  RetornoCancelamento: RetornoCancelarMovimentacao;
  SoapSisbov: TIntSoapSisbov;


  function RemoverEvento(CodTipoEventoExcluir,
    CodEventoExcluir: Integer): Integer;
  begin
    Result := 0;
    Case CodTipoEventoExcluir of
      1 : begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_mud_reg_alimentar ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      2 : begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_desmame ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      3 : begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_mud_categoria ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      4 : begin
          end;
      5 : begin
          end;
      6 : begin

            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_resgata_animais_abatidos_tmp ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;

            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_mudanca_lote ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      7 : begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_mudanca_local ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      8 : begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_transferencia ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      9:  begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_venda_criador ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      10: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_venda_frigorifico ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      11: begin
          end;
      12: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_morte ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      13: begin
          end;
      14: begin
          end;
      15: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_animal_tipo_insumo ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;

            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_sanitario ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      16: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_certificado_animal ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;

            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_emissao_cert ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;

      17: begin
          end;
      18: begin
          end;
      19: begin
          end;
      20: begin
          end;
      21: begin
          end;
      23: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_cobertura_reg_pasto ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      24: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_estacao_monta ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      26: begin
           //busca o movimento a ser estornado
           Q.SQL.Clear;
           {$IFDEF MSSQL}
           Q.SQL.Add('select cod_movimento from tab_evento_insemin_artificial ' +
                     ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                     '   and cod_evento = :cod_evento ');
           {$ENDIF}
           Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
           Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
           Q.Open;

           CodMovimento := Q.FieldbyName('cod_movimento').asinteger;

           // Lança estorno de movimentação de semen
           EstoqueSemen := TIntEstoqueSemen.Create;
           try
            result:= EstoqueSemen.Inicializar(Conexao,Mensagens);
            if Result < 0  then begin
              RollBack;
              Exit;
            end;
            Result:= EstoqueSemen.EstornarMovimento(CodMovimento,'Exclusão de evento','S');
            if Result < 0 then begin
              Rollback;
              Exit;
            end;
            finally
             EstoqueSemen.Free;
            end;

            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_insemin_artificial ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      27: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_monta_controlada ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      30: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_parto ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;

            // exclui animais da tab_animal_evento
//            Q.SQL.Clear;
//            {$IFDEF MSSQL}
//            Q.SQL.Add('delete from tab_animal_evento ' +
  //                    ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
//                      '   and cod_evento = :cod_evento ');
//            {$ENDIF}
//            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
//            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
//            Q.ExecSQL;
          end;
      31: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_avaliacao ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      32: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_monta_automatica ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      33: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_descarte ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
      36: begin
            Q.SQL.Clear;
            {$IFDEF MSSQL}
            Q.SQL.Add('delete from tab_evento_retorno_frigorifico ' +
                      ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                      '   and cod_evento = :cod_evento ');
            {$ENDIF}
            Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
            Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
            Q.ExecSQL;
          end;
    end;

    Q.SQL.Clear;
    {$IFDEF MSSQL}
    Q.SQL.Add('delete from tab_evento ' +
              ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
              '   and cod_evento = :cod_evento ');
    {$ENDIF}
    Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    Q.ParamByName('cod_evento').AsInteger := CodEventoExcluir;
    Q.ExecSQL;
  end;

  function VerificaSeExisteAnimaisEvento(CodEvento: Integer): Integer;
   begin
      Q.SQL.Add('select 1 from tab_animal_evento where cod_evento = :cod_evento');
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if Q.IsEmpty then begin
         Result := 1;
      end
      else Result := -1;
   end;

begin
  Result := -1;
  EventoRemovido := True;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se evento pode ser efetivado
  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then Exit;

  // Obtem dados do evento associado, caso exista
  if DadosEvento.CodEventoAssociado > 0 then begin
    Result := VerificaEvento(DadosEvento.CodEventoAssociado, True,
      'Evento associado', DadosEventoAssociado);
    if Result < 0 then Exit;
  end;

  // Verifica se cadastro já está efetivado
  Result := CadastroEfetivado('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
  if Result < 0 then Exit;
  if Result = 1 then begin
    Mensagens.Adicionar(1047, Self.ClassName, NomeMetodo, []);
    Result := -1047;
    Exit;
  end;

  Q1 := THerdomQuery.Create(Conexao, nil);
  SoapSisbov := TIntSoapSisbov.Create;
  SoapSisbov.Inicializar(Conexao, Mensagens);

  if (DadosEvento.CodTipoEvento = 8) or (DadosEvento.CodTipoEvento = 9) or
     (DadosEvento.CodTipoEvento = 10) then begin

    Conectado := SoapSisbov.conectado('Cancelamento Movimentação');

    // Verifica se o evento tem Id de movimentação
    Q1.SQL.Clear;

    if Conectado then begin
      if DadosEvento.CodTipoEvento = 8 then begin
        Q1.SQL.Text := 'select cod_id_movimentacao_sisbov '+
                      'from tab_evento_transferencia '+
                      'where cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and  cod_evento          = :cod_evento ';
      end else if DadosEvento.CodTipoEvento = 9 then begin
        Q1.SQL.Text := 'select cod_id_movimentacao_sisbov '+
                      'from tab_evento_venda_criador '+
                      'where cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and  cod_evento          = :cod_evento ';
      end else if DadosEvento.CodTipoEvento = 10 then begin
        Q1.SQL.Text := 'select cod_id_movimentacao_sisbov '+
                      'from tab_evento_venda_frigorifico '+
                      'where cod_pessoa_produtor = :cod_pessoa_produtor '+
                      ' and  cod_evento          = :cod_evento ';
      end;

      Q1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q1.ParamByName('cod_evento').AsInteger          := DadosEvento.CodEvento;

      Q1.Open;

      if Q1.IsEmpty then begin
        Mensagens.Adicionar(2372, Self.ClassName, NomeMetodo, []);
        Result := -2372;
        Exit;
      end;

      if Q1.FieldByName('cod_id_movimentacao_sisbov').AsInteger > 0 then begin
        idMovimentacao := Q1.FieldByName('cod_id_movimentacao_sisbov').AsInteger;

        try
          // Incluir tratamento de retirada do evento no Sisbov
          RetornoCancelamento := SoapSisbov.cancelarMovimentacao(
                                    Descriptografar(ValorParametro(118))
                                  , Descriptografar(ValorParametro(119))
                                  , idMovimentacao
                                  , 'Cancelamento da movimentação na propriedade rural.');
        except
          on E: Exception do
          begin
           Mensagens.Adicionar(2371, Self.ClassName, 'ExcluirEvento', ['']);
           Exit;
          end;
        end;

        If RetornoCancelamento <> nil then begin
          If RetornoCancelamento.Status = 0 then begin
            Mensagens.Adicionar(2371, Self.ClassName, 'ExcluirEvento', [' Mensagem SISBOV: ' + TrataMensagemErroSISBOV(RetornoCancelamento)]);
            Result := -2371;
            Exit;
          end;
        end else begin
          Mensagens.Adicionar(2371, Self.ClassName, 'ExcluirEvento', [' Erro no retorno do SISBOV ']);
          Result := -2371;
          Exit;
        end;
      end;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Verifica se o evento é um evento restrito ao sistema, caso seja aborta a operação
      Q.SQL.Clear;
      Q.SQL.Text :=
        'select tte.cod_tipo_evento'+
        '  ,tte.ind_restrito_sistema '+
        'from '+
        '  tab_tipo_evento tte '+
        'where '+
        '  tte.cod_tipo_evento = :cod_tipo_evento ';
      Q.ParamByName('cod_tipo_evento').AsInteger := DadosEvento.CodTipoEvento;
      Q.Open;
      if Q.IsEmpty then
      begin
        Mensagens.Adicionar(1606, Self.ClassName, NomeMetodo, []);
        Result := -1606;
        Exit;
      end
      else if (Q.FieldByName('ind_restrito_sistema').AsString = 'S') and (Q.FieldByName('cod_tipo_evento').AsInteger <> 16) then begin
        Mensagens.Adicionar(1607, Self.ClassName, NomeMetodo, []);
        Result := -1607;
        Exit;
      end;


      // Esta consistencia devera ser implementada, quando for disponibilizado
      // para o usuario o cancelamento de exportacao de eventos.
      
      // Verifica se o evento já foi exportado! Se foi, não poderá ser excluído!
//      Q.SQL.Clear;
//      Q.SQL.Add(' select cod_arquivo_sisbov ');
//      Q.SQL.Add('   from tab_animal_evento ');
//      Q.SQL.Add('  where cod_pessoa_produtor = :cod_pessoa_produtor ');
//      Q.SQL.Add('    and cod_evento = :cod_evento ');
//      Q.SQL.Add('    and cod_arquivo_sisbov is not null');
//      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
//      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
//      Q.Open;

//      if not Q.IsEmpty then
//      begin
//        Mensagens.Adicionar(2269, Self.ClassName, NomeMetodo, [IntToStr(DadosEvento.CodEvento)]);
//        Result := -2269;
//        Exit;
//      end;

//      beginTran;
      // Se o evento é de parto
      if DadosEvento.CodTipoEvento = 30 then
      begin
        //verifica se este evento de parto é o último que a femea recebeu
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select tae.cod_animal '+
                ' from tab_evento te, tab_animal_evento tae  ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento = :cod_evento '+
                '   and tae.cod_evento = te.cod_evento '+
                '   and tae.cod_pessoa_produtor = tae.cod_pessoa_produtor');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
        Q.Open;
        CodAnimalFemea := Q.Fieldbyname('cod_animal').asinteger;
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('select te.cod_evento '+
                ' from tab_evento te, tab_animal_evento tae  ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and tae.cod_animal = :cod_animal '+
                '   and tae.cod_evento = te.cod_evento '+
                '   and tae.cod_pessoa_produtor = tae.cod_pessoa_produtor'+
                '   and te.cod_tipo_evento = 30 '+
                ' order by te.dta_inicio desc ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := CodAnimalFemea;
        Q.Open;

        if DadosEvento.CodEvento <> Q.Fieldbyname('cod_evento').asinteger then
        begin
          Mensagens.Adicionar(1570, Self.ClassName, NomeMetodo, []);
          Result := -1570;
          Rollback;
          Exit;
        end;
      end;

      if (DadosEvento.QtdAnimais > 0) then //or (DadosEvento.CodTipoEvento = 30) then
      begin
        {$IFDEF MSSQL}
        Q.SQL.Clear;
        Q.SQL.Add('if object_id(''tempdb..#tmp_animais_evento'') is null ' +
                  '  create table #tmp_animais_evento ' +
                  '              (cod_animal integer not null )');
        {$ENDIF}
        Q.ExecSQL;

        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('truncate table #tmp_animais_evento');
        {$ENDIF}
        Q.ExecSQL;

        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('insert into #tmp_animais_evento ' +
                  '       (cod_animal)' +
                  'select cod_animal from tab_animal_evento ' +
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                  '   and cod_evento = :cod_evento ');
        {$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := CodEvento;
        Q.ExecSQL;

        Animais := TIntAnimais.Create;
        try
          Result := Animais.Inicializar(Conexao, Mensagens);
          if Result < 0 then begin
            Rollback;
            Exit;
          end;

          Result := Animais.RemoverEvento('#PESQUISADOS', -1, '', -1, -1, CodEvento, 'S');
          Commit;
          if (Result = 949) or (Result = -1) then
          begin;
            Result := -949;
            Exit;
          end;
        Finally
          Animais.Free;
        end
      end;

      BeginTran;
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_erro_aplicacao_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      {$ENDIF}

      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      // Remove evento associado, caso o evento não seja 30 (parto) 23 (cobertura em regime de pasto), 26 Inseminação artificial e 28 Diagnóstico prenhez
      // para os eventos 23, 26 e 28 os únicos eventos associados que se aplica, é a estação de monta. Com isso este]
      // evento associado não poderá ser excluido.
      if (DadosEvento.CodEventoAssociado > 0) and (DadosEvento.CodTipoEvento <> 30) and (DadosEvento.CodTipoEvento <> 26) and (DadosEvento.CodTipoEvento <> 28) and (DadosEvento.CodTipoEvento <> 23) then begin
        // Verifica se o evento ainda possui animais associados
        Q.SQL.Clear;
        Q.SQL.Text :=
          'select '+
          '  count(1) as QtdAnimaisAssociados '+
          'from '+
          '  tab_animal_evento '+
          'where '+
          '  cod_pessoa_produtor = :cod_pessoa_produtor '+
          '  and cod_evento = :cod_evento ';

        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEventoAssociado;
        Q.Open;

        if Q.FieldByName('QtdAnimaisAssociados').AsInteger > 0 then begin
          Mensagens.Adicionar(1608, Self.ClassName, NomeMetodo, []);
          Result := -1608;
          Rollback;
          Exit;
        end;

        Retorno := VerificaSeExisteAnimaisEvento(DadosEventoAssociado.CodEvento);
        if Retorno < 0 then
        begin
           Mensagens.Adicionar(1893, Self.ClassName, NomeMetodo, ['associado '
             + IntToStr(DadosEventoAssociado.CodEvento)]);
           EventoRemovido := False;
        end
        else
        begin
          // Remove definitivamente
          Result := RemoverEvento(DadosEventoAssociado.CodTipoEvento,
            DadosEventoAssociado.CodEvento);
          if Result < 0 then
          begin
            Rollback;
            Exit;
          end;
        end;
      end;

      Retorno := VerificaSeExisteAnimaisEvento(CodEvento);
      if Retorno < 0 then
      begin
         Mensagens.Adicionar(1893, Self.ClassName, NomeMetodo,
           [IntToStr(CodEvento)]);
         EventoRemovido := False;
      end
      else
      begin
        // Remove evento principal
        Result := RemoverEvento(DadosEvento.CodTipoEvento, DadosEvento.CodEvento);
        if Result < 0 then begin
          Rollback;
          Exit;
        end;
      end;

(*
      A partir de 19/10/2004 o procedimento de atualização de grandezas será
      realizado a partir da execução de processo batch por intervalos configuráveis
      e não mais a partir da execução de cada operação como anteriormente.
      Result := AtualizaGrandeza(5, Conexao.CodProdutorTrabalho, -1);
      if Result < 0 then begin
        Rollback;
        Exit;
      end;
*)

      Commit;

      if not EventoRemovido then
      begin
        Result := -1893;
      end;

//      if DadosEvento.QtdAnimais > 0 then begin
//        Q.SQL.Clear;
        {$IFDEF MSSQL}
//        Q.SQL.Add('drop table #tmp_animais_evento');
        {$ENDIF}
//        Q.ExecSQL;
//      end;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(903, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -903;
        Exit;
      end;
    end;
  Finally
    Q.Free;
    Q1.Free;
    SoapSisbov.Free;
  end;
end;


function TIntEventos.InserirAbateAnimalVendido(DtaEvento: TDateTime;
  TxtObservacao: String; CodFazenda: Integer): Integer;
const
  Metodo: Integer = 328;
  NomeMetodo: String = 'InserirAbateAnimalVendido';
  CodTipoEvento: Integer = 21;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados : String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1032, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1032;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.MarcarNaoGravadoSisbov(CodEvento: Integer): Integer;
const
  Metodo: Integer = 331;
  NomeMetodo: String = 'MarcarNaoGravadoSisbov';
var
  Q : THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se cadastro já está efetivado
  Result := ExportadoSisbov('tab_evento', 'cod_evento', Conexao.CodProdutorTrabalho, CodEvento, False);
  if Result < 0 then Exit;
  if Result = 0 then begin
    Mensagens.Adicionar(1045, Self.ClassName, NomeMetodo, []);
    Result := -1045;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // Tenta Alterar Registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ');
      Q.SQL.Add('   set ');
      Q.SQL.Add('   cod_arquivo_sisbov = null');
      Q.SQL.Add(' where cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      // Cofirma transação
      Commit;

      // Retorna status "ok" do método
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1046, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1046;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.AdicionarSubEventoSanitario(CodEvento,
  CodEntradaInsumo: Integer): Integer;
const
  Metodo: Integer = 335;
  NomeMetodo: String = 'AdicionarSubEventoSanitario';
var
  Q: THerdomQuery;
  DadosEvento: TInfoEvento;
  DadosEntradaInsumo: TInfoEntradaInsumo;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then Exit;

  if DadosEvento.QtdAnimais > 0 then begin
    Mensagens.Adicionar(1049, Self.ClassName, NomeMetodo, []);
    Result := -1049;
    Exit;
  end;

  Result := VerificaEntradaInsumo(CodEntradaInsumo, True, 'Entrada Insumo', DadosEntradaInsumo);
  if Result < 0 then Exit;

  if DadosEntradaInsumo.DtaCompra > DadosEvento.DtaInicio then begin
    Mensagens.Adicionar(1050, Self.ClassName, NomeMetodo, []);
    Result := -1050;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_evento_sanitario  ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ' +
                '   and cod_entrada_insumo = :cod_entrada_insumo');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_entrada_insumo').AsInteger := CodEntradaInsumo;
      Q.Open;

      if not Q.IsEmpty then begin
        Mensagens.Adicionar(1052, Self.ClassName, NomeMetodo, []);
        Result := -1052;
        Exit;
      end;

      // Abre transação
      beginTran;

      // Adiciona a entrada de insumo
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_sanitario  ' +
                '      (cod_pessoa_produtor, ' +
                '       cod_evento, ' +
                '       cod_entrada_insumo, ' +
                '       dta_cadastramento) ' +
                ' values ' +
                '      (:cod_pessoa_produtor, ' +
                '       :cod_evento, ' +
                '       :cod_entrada_insumo, ' +
                '       getdate() ) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_entrada_insumo').AsInteger := CodEntradaInsumo;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}

      commit;  

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1053, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1053;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirSanitario(DtaInicio, DtaFim: TDateTime;
  TxtObservacao: String; CodFazenda: Integer): Integer;
const
  Metodo: Integer = 334;
  NomeMetodo: String = 'InserirSanitario';
  CodTipoEvento: Integer = 15;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  TxtDados := '';

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaInicio, DtaFim, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // Cofirma transação
      Commit;

      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1048, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1048;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.PesquisarSubEventosSanitarios(
  CodEvento: Integer): Integer;
const
  Metodo : Integer = 337;
  NomeMetodo : String = 'PesquisarSubEventosSanitarios';
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  {$IFDEF MSSQL}
  Query.SQL.Clear;
  Query.SQL.Add('select tes.cod_entrada_insumo as CodEntradaInsumo, ' +
                '       te.cod_fazenda as CodFazenda, ' +
                '       tf.sgl_fazenda as SglFazenda, ' +
                '       tf.nom_fazenda as NomFazenda, ' +
                '       ttses.des_tipo_sub_evento_sanitario as DesTipoSubEventoSanitario, ' +
                '       tsti.des_sub_tipo_insumo as DesSubTipoInsumo, ' +
                '       case isnull(tei.cod_insumo, 0) ' +
                '         when 0 then tei.des_insumo ' +
                '       else ' +
                '         ti.des_insumo ' +
                '       end as DesInsumo, ' +
                '       tei.dta_compra DtaCompra ' +
                '  from tab_evento te, ' +
                '       tab_evento_sanitario tes, ' +
                '       tab_fazenda tf, ' +
                '       tab_entrada_insumo tei, ' +
                '       tab_tipo_insumo tti, ' +
                '       tab_tipo_sub_evento_sanitario ttses, ' +
                '       tab_sub_tipo_insumo tsti, ' +
                '       tab_insumo ti ' +
                ' where tes.cod_pessoa_produtor = te.cod_pessoa_produtor ' +
                '   and tes.cod_evento = te.cod_evento ' +
                '   and tf.cod_pessoa_produtor =* te.cod_pessoa_produtor ' +
                '   and tf.cod_fazenda =* te.cod_fazenda ' +
                '   and tei.cod_pessoa_produtor = tes.cod_pessoa_produtor ' +
                '   and tei.cod_entrada_insumo = tes.cod_entrada_insumo ' +
                '   and tti.cod_tipo_insumo = tei.cod_tipo_insumo ' +
                '   and ttses.cod_tipo_sub_evento_sanitario = tti.cod_tipo_sub_evento_sanitario ' +
                '   and tsti.cod_sub_tipo_insumo =* tei.cod_sub_tipo_insumo ' +
                '   and ti.cod_insumo =* tei.cod_insumo ' +
                '   and te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento = :cod_evento ' +
                ' order by ttses.des_tipo_sub_evento_sanitario ');
{$ENDIF}

  Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
  Query.ParamByName('cod_evento').AsInteger := CodEvento;

  try
    Query.Open;
    Result := 0;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(1057, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1057;
      Exit;
    end;
  end;
end;

function TIntEventos.RemoverSubEventoSanitario(CodEvento,
  CodEntradaInsumo: Integer): Integer;
const
  Metodo: Integer = 336;
  NomeMetodo: String = 'RemoverSubEventoSanitario';
var
  Q: THerdomQuery;
  DadosEvento: TInfoEvento;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then Exit;

  if DadosEvento.QtdAnimais > 0 then begin
    Mensagens.Adicionar(1054, Self.ClassName, NomeMetodo, []);
    Result := -1054;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 from tab_evento_sanitario  ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ' +
                '   and cod_entrada_insumo = :cod_entrada_insumo');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_entrada_insumo').AsInteger := CodEntradaInsumo;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(1055, Self.ClassName, NomeMetodo, []);
        Result := -1055;
        Exit;
      end;

      // Abre transação
      beginTran;

      // Adiciona a entrada de insumo
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('delete from tab_evento_sanitario  ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ' +
                '   and cod_entrada_insumo = :cod_entrada_insumo');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_entrada_insumo').AsInteger := CodEntradaInsumo;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      Commit;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1056, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1056;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaEvento(CodEvento: Integer;
  Obrigatorio: Boolean; NomeCampo: String;
  var DadosEvento: TInfoEvento): Integer;
const
  NomeMetodo : String = 'VerificaEvento';
var
  Q : THerdomQuery;
begin
  if CodEvento <= 0 then begin
    if Obrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end Else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select te.cod_evento,  ' +
                '       te.cod_tipo_evento, ' +
                '       tte.des_tipo_evento, ' +
                '       tte.ind_evento_sisbov, ' +
                '       te.dta_inicio, ' +
                '       te.dta_fim, ' +
                '       isnull(te.cod_fazenda, -1) as cod_fazenda, ' +
                '       tf.nom_fazenda, ' +
                '       te.txt_dados, ' +
                '       te.cod_situacao_sisbov, ' +
                '       te.qtd_animais, ' +
                '       te.dta_efetivacao_cadastro, ' +
                '       te.cod_registro_log, ' +
                '       te.cod_evento_associado '+
                '  from tab_evento te,' +
                '       tab_tipo_evento tte, ' +
                '       tab_fazenda tf ' +
                ' where tte.cod_tipo_evento = te.cod_tipo_evento ' +
                '   and te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and tf.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and tf.cod_fazenda =* te.cod_fazenda ' +
                '   and te.cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -497;
        Exit;
      end;

      DadosEvento.CodEvento             := Q.FieldByName('cod_evento').AsInteger;
      DadosEvento.CodTipoEvento         := Q.FieldByName('cod_tipo_evento').AsInteger;
      DadosEvento.DesTipoEvento         := Q.FieldByName('des_tipo_evento').AsString;
      DadosEvento.IndEventoSisbov       := Q.FieldByName('ind_evento_sisbov').AsString;
      DadosEvento.DtaInicio             := Q.FieldByName('dta_inicio').AsDateTime;
      DadosEvento.DtaFim                := Q.FieldByName('dta_fim').AsDateTime;
      DadosEvento.CodFazenda            := Q.FieldByName('cod_fazenda').AsInteger;
      DadosEvento.NomFazenda            := Q.FieldByName('nom_fazenda').AsString;
      DadosEvento.TxtDados              := Q.FieldByName('txt_dados').AsString;
      DadosEvento.CodSituacaoSisbov     := Q.FieldByName('cod_situacao_sisbov').asString;
      DadosEvento.QtdAnimais            := Q.FieldByName('qtd_animais').AsInteger;
      DadosEvento.DtaEfetivacaoCadastro := Q.FieldByName('dta_efetivacao_cadastro').AsDateTime;
      DadosEvento.CodRegistroLog        := Q.FieldByName('cod_registro_log').AsInteger;
      DadosEvento.CodEventoAssociado    := Q.FieldByName('cod_evento_associado').AsInteger;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaEntradaInsumo(CodEntradaInsumo: Integer;
  Obrigatorio: Boolean; NomeCampo: String;
  var DadosEntradaInsumo: TInfoEntradaInsumo): Integer;
const
  NomeMetodo : String = 'VerificaEntradaInsumo';
var
  Q : THerdomQuery;
begin
  if CodEntradaInsumo <= 0 then begin
    if Obrigatorio then begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, [NomeCampo]);
      Result := -309;
      Exit;
    end Else begin
      Result := 0;
      Exit;
    end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select tei.cod_entrada_insumo, ' +
                '       isnull(tei.cod_insumo, -1) as cod_insumo, ' +
                '       case isnull(tei.cod_insumo, 0) ' +
                '         when 0 then tei.des_insumo ' +
                '       else ' +
                '         ti.des_insumo ' +
                '       end as des_insumo, ' +
                '       tei.cod_tipo_insumo, ' +
                '       tti.des_tipo_insumo, ' +
                '       isnull(tei.cod_sub_tipo_insumo, -1) as cod_sub_tipo_insumo, ' +
                '       tsti.des_sub_tipo_insumo, ' +
                '       tti.cod_tipo_sub_evento_sanitario, ' +
                '       ttses.des_tipo_sub_evento_sanitario, ' +
                '       tei.dta_compra ' +
                '  from tab_entrada_insumo tei, ' +
                '       tab_insumo ti, ' +
                '       tab_tipo_insumo tti, ' +
                '       tab_sub_tipo_insumo tsti, ' +
                '       tab_tipo_sub_evento_sanitario ttses ' +
                ' where ti.cod_insumo =* tei.cod_insumo ' +
                '   and tti.cod_tipo_insumo = tei.cod_tipo_insumo ' +
                '   and tsti.cod_sub_tipo_insumo =* tei.cod_sub_tipo_insumo ' +
                '   and ttses.cod_tipo_sub_evento_sanitario = tti.cod_tipo_sub_evento_sanitario ' +
                '   and tei.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and tei.cod_entrada_insumo = :cod_entrada_insumo ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_entrada_insumo').AsInteger := CodEntradaInsumo;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(497, Self.ClassName, NomeMetodo, [NomeCampo]);
        Result := -497;
        Exit;
      end;

      DadosEntradaInsumo.CodEntradaInsumo          := Q.FieldByName('cod_entrada_insumo').AsInteger;
      DadosEntradaInsumo.CodInsumo                 := Q.FieldByName('cod_insumo').AsInteger;
      DadosEntradaInsumo.DesInsumo                 := Q.FieldByName('des_insumo').AsString;
      DadosEntradaInsumo.CodTipoInsumo             := Q.FieldByName('cod_tipo_insumo').AsInteger;
      DadosEntradaInsumo.DesTipoInsumo             := Q.FieldByName('des_tipo_insumo').AsString;
      DadosEntradaInsumo.CodSubTipoInsumo          := Q.FieldByName('cod_sub_tipo_insumo').AsInteger;
      DadosEntradaInsumo.DesSubTipoInsumo          := Q.FieldByName('des_sub_tipo_insumo').AsString;
      DadosEntradaInsumo.CodTipoSubEventoSanitario := Q.FieldByName('cod_tipo_sub_evento_sanitario').AsInteger;
      DadosEntradaInsumo.DesTipoSubEventoSanitario := Q.FieldByName('des_tipo_sub_evento_sanitario').AsString;
      DadosEntradaInsumo.DtaCompra                 := Q.FieldByName('dta_compra').AsDateTime;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(496, Self.ClassName, NomeMetodo, [E.Message, NomeCampo]);
        Result := -496;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirEmissaoCertificado(DtaEvento: TDateTime;
  TxtObservacao: String;CodFazenda: Integer): Integer;
const
  Metodo: Integer = 341;
  NomeMetodo: String = 'InserirEmissaoCertificado';
  CodTipoEvento: Integer = 16;
var
  CodEvento: Integer;
  TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Descrevendo TxtDados
  TxtDados := '';

  try
    // Abre transação
    beginTran;

    // -------------------------------------------------------------------
    // Insere dados comuns a todos os tipos de eventos, recebendo o número
    // do evento inserido (capa do evento)
    // -------------------------------------------------------------------
    CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
      DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

    if CodEvento < 0 then begin
      Rollback;
      Exit;
    end;

    // Cofirma transação
    Commit;

    // Retorna código do registro inserido
    Result := CodEvento;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(1098, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1098;
      Exit;
    end;
  end;
end;

function TIntEventos.GravaCertificadoAnimal(
  DadosEvento: TInfoEvento): Integer;
const
  NomeMetodo: String = 'GravaCertificadoAnimal';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select cod_animal ' +
                '  from tab_animal_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(1099, Self.ClassName, NomeMetodo, []);
         Result := -1099;
         Exit;
      end;

      While not Q.EOF do begin
        Result := InserirCertificadoAnimal(DadosEvento, Q.FieldByName('cod_animal').AsInteger);
        if Result < 0 then begin
          Exit;
        end;
        Q.Next;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1100, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1100;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirCertificadoAnimal(DadosEvento: TInfoEvento;
  CodAnimal: Integer): Integer;
const
  NomeMetodo: String = 'InserirCertificadoAnimal';
var
  Q: THerdomQuery;
  NumCertificadoAnimal: Integer;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      // Abre transação para pegar codigo certificado
      beginTran;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_sequencia_codigo set num_certificado_animal = isnull(num_certificado_animal, 0) + 1 ');
{$ENDIF}
      Q.ExecSQL;

      // Pega próximo código
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select num_certificado_animal ' +
                '  from tab_sequencia_codigo ');
{$ENDIF}
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(206, Self.ClassName, NomeMetodo, []);
        Result := -206;
        exit
      end;
      commit;  // Atualiza tabela tab_sequencia_codigo

      NumCertificadoAnimal := Q.FieldByName('num_certificado_animal').AsInteger;

      // Tenta Inserir Registro
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_certificado_animal ' +
                '  (num_certificado_animal ' +
                '   , cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_animal) ' +
                'values ' +
                '  (:num_certificado_animal ' +
                '   , :cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_animal) ');
{$ENDIF}
      Q.ParamByName('num_certificado_animal').AsInteger := NumCertificadoAnimal;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := DadosEvento.CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ExecSQL;

      Result := NumCertificadoAnimal;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1101, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1101;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.PossuiMensagemOcorrenciaAplicacao(
  CodEvento: Integer): Integer;
const
  Metodo: Integer = 343;
  NomeMetodo: String = 'PossuiMensagemOcorrenciaAplicacao';
var
  Q: THerdomQuery;
  DadosEvento: TInfoEvento;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then begin
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;

      {$IFDEF MSSQL}
      Q.SQL.Add('select count(*) as qtd_ocorrencias ' +
                '  from tab_erro_aplicacao_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;

      if Q.FieldByName('qtd_ocorrencias').AsInteger > 0 then begin
        Result := 1;
        Exit;
      end;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1105, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1105;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.GerarRelatorioConsolidado(SglProdutor,
                                               NomPessoaProdutor,
                                               CodSituacaoSisbov: String;
                                               CodGrupoEvento: Integer;
                                               CodTipoEvento: String;
                                               CodTipoSubEventoSanitario: Integer;
                                               DtaInicio,
                                               DtaFim: TDateTime;
                                               TxtDados: String;
                                               Tipo,
                                               QtdQuebraRelatorio,
                                               CodTarefa: Integer;
                                               DtaInicioCadastro, DtaFimCadastro,
                                               DtaInicioEfetivacao, DtaFimEfetivacao: TDateTime): String;
const
  Metodo: Integer = 345;
  NomeMetodo: String = 'GerarRelatorioConsolidado';
  CodRelatorio: Integer = 4;
  CodTipoTarefa: Integer = 5;
var
  Rel: TRelatorioPadrao;
  Retorno, iAux: Integer;
  sAux, sQuebra: String;
  QtdAnimais: Integer;
  Qry: THerdomQuery;
begin
  Result := '';

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);
  try
    {Realiza pesquisa de eventos de acordo com os critérios informados}
    Retorno := PesquisarRelatorioConsolidado(Qry,
                                             SglProdutor,
                                             NomPessoaProdutor,
                                             CodSituacaoSisbov,
                                             CodGrupoEvento,
                                             CodTipoEvento,
                                             CodTipoSubEventoSanitario,
                                             DtaInicio,
                                             DtaFim,
                                             TxtDados,
                                             CodTarefa,
                                             DtaInicioCadastro,
                                             DtaFimCadastro,
                                             DtaInicioEfetivacao,
                                             DtaFimEfetivacao);
    if Retorno < 0 then begin
      if Retorno = idExceedsTheConfiguredThreshold then begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, SglProdutor, NomPessoaProdutor,
                                                              CodSituacaoSisbov, CodGrupoEvento,
                                                              CodTipoEvento, CodTipoSubEventoSanitario,
                                                              DtaInicio, DtaFim, TxtDados,
                                                              Tipo, QtdQuebraRelatorio]);
        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, SglProdutor, NomPessoaProdutor,
                                                              CodSituacaoSisbov, CodGrupoEvento,
                                                              CodTipoEvento, CodTipoSubEventoSanitario,
                                                              DtaInicio, DtaFim, TxtDados,
                                                              Tipo, QtdQuebraRelatorio], DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then begin
      Mensagens.Adicionar(1114, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      Rel.TipoDoArquvio := Tipo;

      {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
      if CodTarefa > 0 then begin
        Rel.CodTarefa := CodTarefa;
      end;

      {Define o relatório em questão e carrega os seus dados específicos}
      Retorno := Rel.CarregarRelatorio(CodRelatorio);
      if Retorno < 0 then Exit;

      {Consiste se número de campos do relatório é maior ou igual ao de quebras}
      if Rel.Campos.NumCampos < QtdQuebraRelatorio then begin
        Mensagens.Adicionar(1119, Self.ClassName, NomeMetodo, []);
        Exit;
      end;

      {Desabilita a apresentação dos campos selecionados para quebra}
      Rel.Campos.IrAoPrimeiro;
      for iAux := 1 to QtdQuebraRelatorio do begin
        Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
        Rel.Campos.IrAoProximo;
      end;

      {Inicializa o procedimento de geração do arquivo de relatório}
      Retorno := Rel.InicializarRelatorio;
      if Retorno < 0 then Exit;

      sQuebra := '';
      QtdAnimais := 0;
      Qry.First;
      while not Qry.Eof do begin
        if QtdQuebraRelatorio > 0 then begin
          {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
          Rel.Campos.CarregarValores(Qry);
          {Percorre o(s) campo(s) informado(s) para quebra}
          Rel.Campos.IrAoPrimeiro;
          sAux := '';
          for iAux := 1 to QtdQuebraRelatorio do begin
            {Concatena o valor dos campos de quebra, montando o título}
            sAux := SE(sAux = '', sAux, sAux + ' / ') +
              TrataQuebra(Rel.Campos.Campo.TxtTitulo) + ': ' +
              Rel.Campos.Campo.Valor;
            Rel.Campos.IrAoProximo;
          end;
          if (sAux <> sQuebra) then begin
            {Se ocorreu mudança na quebra atual ou é a primeira ('')}
            sQuebra := sAux;
            if Rel.LinhasRestantes <= 2 then begin
              {Se ñ couber uma linha de registro na pag. atual, quebra página}
              Rel.NovaPagina;
            end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
              {Salta uma linha antes da quebra}
              Rel.NovaLinha;
            end;
            {Imprime título da quebra}
            Rel.ImprimirTexto(0, sQuebra);
          end;
        end;
        Rel.ImprimirColunasResultSet(Qry);
        Inc(QtdAnimais, Qry.FieldByName('QtdAnimais').AsInteger);
        Qry.Next;
      end;
      if Rel.LinhasRestantes < 2 then begin
        Rel.NovaPagina;
      end else begin
        Rel.NovaLinha;
      end;
      Rel.Campos.LimparValores;
      Rel.Campos.ValorCampo['QtdAnimais'] := QtdAnimais;
      Rel.ImprimirTextoTotalizador('Total de Animais:');
      Retorno := Rel.FinalizarRelatorio;
      {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
      if Retorno = 0 then begin
        Result := Rel.NomeArquivo;
      end;
    finally
      Rel.Free;
    end;
  Finally
    Qry.Free;
  end;
end;

function TIntEventos.GerarRelatorioAnimaisAplicados(
  CodSituacaoSisbovEvento: String; CodGrupoEvento,
  CodTipoEvento, CodTipoSubEventoSanitario, CodEvento: Integer;
  DtaInicioEvento, DtaFimEvento: TDateTime; CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim: String; CodPaisSisBov,
  CodEstadoSisBov, CodMicroRegiaoSisBov, CodAnimalSisbovInicio,
  CodAnimalSisbovFim: Integer; DtaNascimentoInicio, DtaNascimentoFim,
  DtaIdentificacaoInicio, DtaIdentificacaoFim: TDateTime; CodRaca, CodCategoria,
  IndSexo: String; CodTipoLugar: Integer; CodLocal, CodLote,
  IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; Tipo: Integer; IndMostrarCriteriosPesquisa,
  IndAnimaisNaoAssociados, SemTecnico: String; CodPessoaTecnico: Integer): String;
const
  Metodo: Integer = 354;
  NomeMetodo: String = 'GerarRelatorioAnimaisAplicados';
  CodRelatorio: Integer = 7;
var
  Rel: TRelatorioPadrao;
  Retorno, X, QtdAnimais: Integer;
  sTxtDados: String;
  bTxtDados: Boolean;
  TotalizaEvento: TArrayOfTotalizaEvento;

  procedure TxtDados(Txt: String);
  begin
    if bTxtDados then begin
      sTxtDados := sTxtDados + QuebraLinha;
    end else begin
      bTxtDados := True;
    end;
    sTxtDados := sTxtDados + Txt;
  end;

begin
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  if CodEvento <> -1 then begin
    {Realiza pesquisa de dados específicos de um evento, caso o mesmo seja informado}
    try
      Query.SQL.Clear;
      Query.SQL.Text :=
        'select '+
        '  tp.nom_pessoa + '+
        '  case tp.cod_natureza_pessoa '+
        '  when ''F'' then '' - CPF: '' '+
        '  when ''J'' then '' - CNPJ: '' '+
        '  end + '+
        '  case tp.cod_natureza_pessoa '+
        '  when ''F'' then convert(varchar(18), '+
        '    substring(tp.num_cnpj_cpf, 1, 3) + ''.'' + '+
        '    substring(tp.num_cnpj_cpf, 4, 3) + ''.'' + '+
        '    substring(tp.num_cnpj_cpf, 7, 3) + ''-'' + '+
        '    substring(tp.num_cnpj_cpf, 10, 2)) '+
        '  when ''J'' then convert(varchar(18), '+
        '    substring(tp.num_cnpj_cpf, 1, 2) + ''.'' + '+
        '    substring(tp.num_cnpj_cpf, 3, 3) + ''.'' + '+
        '    substring(tp.num_cnpj_cpf, 6, 3) + ''/'' + '+
        '    substring(tp.num_cnpj_cpf, 9, 4) + ''-'' + '+
        '    substring(tp.num_cnpj_cpf, 13, 2)) '+
        '  end as NomProdutor'+
        '  , tf.nom_fazenda as NomFazenda '+
        '  , te.txt_dados as TxtDados '+
        '  , te.qtd_animais as QtdAnimais '+
        'from '+
        '  tab_pessoa tp with (nolock) '+
        '  , tab_fazenda tf with (nolock) '+
        '  , tab_evento te with (nolock) '+
        'where '+
        '  tp.cod_pessoa = te.cod_pessoa_produtor '+
        '  and tf.cod_pessoa_produtor =* te.cod_pessoa_produtor '+
        '  and tf.cod_fazenda =* te.cod_fazenda '+
        '  and te.cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and te.cod_evento = :cod_evento ';
      Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Query.ParamByName('cod_evento').AsInteger := CodEvento;
      Query.Open;
      if Query.IsEmpty then begin
        Mensagens.Adicionar(1144, Self.ClassName, NomeMetodo, []);
        Exit;
      end;
      sTxtDados := 'Produtor: '+Query.FieldByName('NomProdutor').AsString;
      if not Query.FieldByName('NomFazenda').IsNull then begin
        sTxtDados := sTxtDados + QuebraLinha + 'Fazenda: ' + Query.FieldByName('NomFazenda').AsString;
      end;
      if not Query.FieldByName('TxtDados').IsNull then begin
        sTxtDados := sTxtDados + QuebraLinha + Query.FieldByName('TxtDados').AsString;
      end;
      if not Query.FieldByName('QtdAnimais').IsNull then begin
        sTxtDados := sTxtDados + QuebraLinha + 'Quantidade: ' + Query.FieldByName('QtdAnimais').AsString;
      end;
      if IndAnimaisNaoAssociados = 'S' then begin
        sTxtDados := sTxtDados + QuebraLinha + 'Escopo: Animais que não sofreram o(s) evento(s)';
      end else begin
        sTxtDados := sTxtDados + QuebraLinha + 'Escopo: Animais que sofreram o(s) evento(s)';
      end;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1143, Self.ClassName, NomeMetodo, [E.Message]);
        Exit;
      end;
    end;
  end else begin
    {Monta TxtDados visando apresentar os critérios de pesquisa selecionados}
    sTxtDados := '';
    bTxtDados := False;
    if IndMostrarCriteriosPesquisa = 'S' then begin
      if CodSituacaoSisbovEvento <> '' then TxtDados('Cód. Sit. Sisbov Evento: '+BuscarDesCriterioPesquisa('CodSituacaoSisbovEvento', CodSituacaoSisbovEvento));
      if CodGrupoEvento <> -1 then TxtDados('Grupo de Evento: '+BuscarDesCriterioPesquisa('CodGrupoEvento', IntToStr(CodGrupoEvento)));
      if CodTipoEvento <> -1 then TxtDados('Tipo de Evento: '+BuscarDesCriterioPesquisa('CodTipoEvento', IntToStr(CodTipoEvento)));
      if CodTipoSubEventoSanitario <> -1 then TxtDados('Tipo Sub-evento Sanitário: '+BuscarDesCriterioPesquisa('CodTipoSubEventoSanitario', IntToStr(CodTipoSubEventoSanitario)));
      if (DtaInicioEvento > 0) and (DtaFimEvento > 0) then TxtDados('Data do Evento: de '+FormatDateTime('dd/mm/yyyy', DtaInicioEvento)+' à '+FormatDateTime('dd/mm/yyyy', DtaFimEvento));
      if CodFazendaManejo <> -1 then TxtDados('Fazenda Manejo: '+BuscarDesCriterioPesquisa('CodFazendaManejo', IntToStr(CodFazendaManejo)));
      if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then TxtDados('Cód. Animal Manejo: de ' + CodAnimalManejoInicio + ' à ' + CodAnimalManejoFim);
      if CodPaisSisBov <> -1 then TxtDados('Cód. País Sisbov: '+IntToStr(CodPaisSisBov));
      if CodEstadoSisBov <> -1 then TxtDados('Cód. Estado Sisbov: '+IntToStr(CodEstadoSisBov));
      if CodMicroRegiaoSisBov <> -1 then TxtDados('Cód. Micro Região Sisbov: '+IntToStr(CodMicroRegiaoSisBov));
      if (CodAnimalSisbovInicio <> -1) and (CodAnimalSisbovFim <> -1) then TxtDados(Format('Cód. Animal Sisbov: de %d à %d', [CodAnimalSisbovInicio, CodAnimalSisbovFim]));
      if (DtaNascimentoInicio > 0) and (DtaNascimentoFim > 0) then TxtDados('Data de Nascimento: de '+FormatDateTime('dd/mm/yyyy', DtaNascimentoInicio)+' à '+FormatDateTime('dd/mm/yyyy', DtaNascimentoFim));
      if (DtaIdentificacaoInicio > 0) and (DtaIdentificacaoFim > 0) then TxtDados('Data de Identificação: de '+FormatDateTime('dd/mm/yyyy', DtaIdentificacaoInicio)+' à '+FormatDateTime('dd/mm/yyyy', DtaIdentificacaoFim));
      if IndSexo <> '' then TxtDados('Sexo: '+IndSexo);
      if CodTipoLugar <> -1 then TxtDados('Tipo de Lugar: '+BuscarDesCriterioPesquisa('CodTipoLugar', IntToStr(CodTipoLugar)));
      if IndAnimaisNaoAssociados = 'S' then TxtDados('Escopo: Animais que não sofreram o(s) evento(s)')
      else TxtDados('Escopo: Animais que sofreram o(s) evento(s)');
      { Os seguintes campo não são apresentados na área de texto de dados:
        CodEvento, CodRaca, CodCategoria, CodLocal, CodLote }
    end;
  end;

  {Realiza pesquisa de eventos de acordo com os critérios informados}
  Retorno := PesquisarRelatorioAnimaisAplicados(CodSituacaoSisbovEvento,
    CodGrupoEvento, CodTipoEvento, CodTipoSubEventoSanitario, CodEvento,
    DtaInicioEvento, DtaFimEvento, CodFazendaManejo, CodAnimalManejoInicio,
    CodAnimalManejoFim, CodPaisSisBov, CodEstadoSisBov, CodMicroRegiaoSisBov,
    CodAnimalSisbovInicio, CodAnimalSisbovFim, DtaNascimentoInicio,
    DtaNascimentoFim, DtaIdentificacaoInicio, DtaIdentificacaoFim, CodRaca,
    CodCategoria, IndSexo,  CodTipoLugar, CodLocal, CodLote, IndAgrupRaca1,
    CodRaca1, QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2,
    CodRaca2, QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
    CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4,
    CodRaca4, QtdCompRacialInicio4, QtdCompRacialFim4, IndAnimaisNaoAssociados,
    TotalizaEvento, QtdAnimais, SemTecnico, CodPessoaTecnico);
  if Retorno < 0 then Exit;

  {Verifica se a pesquisa é válida (se existe algum registro)}
  if Query.IsEmpty then begin
    Mensagens.Adicionar(1144, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Rel.TipoDoArquvio := Tipo;

    {Define o relatório em questão e carrega os seus dados específicos}
    Retorno := Rel.CarregarRelatorio(CodRelatorio);
    if Retorno < 0 then Exit;

    {Atribui texto de dados no cabeçalho do relatório}
    Rel.TxtDados := sTxtDados;

    {Inicializa o procedimento de geração do arquivo de relatório}
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    Query.First;
    while not EOF do begin
      Rel.ImprimirColunasResultSet(Query);
      Query.Next;
    end;
    if IndAnimaisNaoAssociados <> 'S' then begin
      if Length(TotalizaEvento) > 0 then begin
        if Rel.LinhasRestantes < 2+Length(TotalizaEvento) then begin
          Rel.NovaPagina;
        end else begin
          Rel.NovaLinha;
        end;
        Rel.ImprimirTexto(0, 'Total de animais que tiveram o(s) evento(s) aplicado(s): ');
        Rel.NovaLinha;
        for X := Low(TotalizaEvento) to High(TotalizaEvento) do begin
          Rel.ImprimirTexto(0,
            PadR(TotalizaEvento[X].DesTipoEvento+': ', ' ', 32)+
            PadL(IntToStr(TotalizaEvento[X].QtdAnimais), ' ', 6));
        end;
      end;
    end else begin
      if Rel.LinhasRestantes < 2 then begin
        Rel.NovaPagina;
      end else begin
        Rel.NovaLinha;
      end;
      Rel.ImprimirTexto(0, 'Total: '+IntToStr(QtdAnimais)+' animais');
    end;
    Retorno := Rel.FinalizarRelatorio;

    {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
  end;
end;

function TIntEventos.InserirPesagem(DtaEvento: TDateTime; TxtObservacao: String;CodFazenda: Integer): Integer;
const
  Metodo: Integer = 358;
  NomeMetodo: String = 'InserirPesagem';
  CodTipoEvento: Integer = 22;
var
  Q: THerdomQuery;
  CodEvento: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1148, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1148;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.EmitirCertificado(CodEvento,
  CodModeloCertificado: Integer): Integer;
const
  Metodo: Integer = 376;
  NomeMetodo: String = 'EmitirCertificado';
var
  DadosEvento: TInfoEvento;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica se o modelo de certificado é válido
  Result := VerificaModeloCertificado(CodModeloCertificado);
  if Result < 0 then Exit;

  // Verifica se evento pode ser efetivado
  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then Exit;

  if DadosEvento.CodTipoEvento <> 16 then begin
    Mensagens.Adicionar(1172, Self.ClassName, NomeMetodo, []);
    Result := -1172;
    Exit;
  end;

  Result := EfetivarCadastroInt(CodEvento, CodModeloCertificado, DadosEvento);
end;

function TIntEventos.VerificaModeloCertificado(
  CodModeloCertificado: Integer): Integer;
const
  NomeMetodo: String = 'VerificaModeloCertificado';
var
  Q: THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Add('select ' +
                '  1 ' +
                'from ' +
                '  tab_modelo_certificado ' +
                'where ' +
                '  cod_modelo_certificado = :cod_modelo_certificado ' +
                '  and dta_fim_validade is null ');
      Q.ParamByName('cod_modelo_certificado').AsInteger := CodModeloCertificado;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(1173, Self.ClassName, NomeMetodo, []);
         Result := -1173;
         Exit;
      end;
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1174, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1174;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirEstacaoMonta(DtaInicio, DtaFim: TDateTime;
  TxtObservacao: String; CodFazenda: Integer; SglEstacaoMonta,
  DesEstacaoMonta: String): Integer;
const
  Metodo: Integer = 415;
  NomeMetodo: String = 'InserirEstacaoMonta';
  CodTipoEvento: Integer = 24;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, true, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Trata campo SglEstacaoMonta
  Result := TrataString(SglEstacaoMonta, 4, 'SglEstacaoMonta');
  if Result < 0 then Exit;

  // Trata campo DesEstacaoMonta
  Result := TrataString(SglEstacaoMonta, 20, 'DesEstacaoMonta');
  if Result < 0 then Exit;

  if SglEstacaoMonta = '' then begin
    Mensagens.Adicionar(1350, Self.ClassName, NomeMetodo, []);
    Result := -1350;
    Exit;
  end;

  if DesEstacaoMonta = '' then begin
    Mensagens.Adicionar(1351, Self.ClassName, NomeMetodo, []);
    Result := -1351;
    Exit;
  end;

  //testa se DtaInicio é menor que DtaFim
  if DtaInicio > DtaFim then begin
    Mensagens.Adicionar(1353, Self.ClassName, NomeMetodo, []);
    Result := -1353;
    Exit;
  end;

  TxtDados := '';

  TxtDados := TxtDados + 'Estação de monta: '+SglEstacaoMonta+' - '+DesEstacaoMonta;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica se o produtor pode cadastrar este evento
      Q.SQL.clear;
      Q.SQL.Add('select ind_estacao_monta from tab_produtor ' +
                'where cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if Q.fieldbyname('ind_estacao_monta').asstring = 'N' then begin
        Mensagens.Adicionar(1348, Self.ClassName, NomeMetodo, []);
        Result := -1348;
        Exit;
      end;

      // Verifica se a sigla é única para o produtor e fazenda
      Q.SQL.clear;
      Q.SQL.Add('select 1 from '+
                ' tab_evento_estacao_monta tem, ' +
                ' tab_evento te '+
                ' where tem.sgl_estacao_monta =:sgl_estacao_monta ' +
                ' and   tem.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_fazenda = :cod_fazenda ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('sgl_estacao_monta').asstring := SglEstacaoMonta;
      Q.ParamByName('cod_fazenda').asinteger := CodFazenda;
      Q.Open;

      if not Q.IsEmpty then begin
        Mensagens.Adicionar(1355, Self.ClassName, NomeMetodo, [SglEstacaoMonta]);
        Result := -1355;
        Exit;
      end;

      // Verifica se a descrição é única para o produtor e fazenda
      Q.SQL.clear;
      Q.SQL.Add('select 1 from '+
                ' tab_evento_estacao_monta tem, ' +
                ' tab_evento te '+
                ' where tem.des_estacao_monta =:des_estacao_monta ' +
                ' and   tem.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_fazenda = :cod_fazenda ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('des_estacao_monta').asstring := DesEstacaoMonta;
      Q.ParamByName('cod_fazenda').asinteger := CodFazenda;
      Q.Open;

      if not Q.IsEmpty then begin
        Mensagens.Adicionar(1356, Self.ClassName, NomeMetodo, [DesEstacaoMonta]);
        Result := -1356;
        Exit;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaInicio, DtaFim, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento Estação de Monta
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_estacao_monta ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , sgl_estacao_monta ' +
                '   , des_estacao_monta) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :sgl_estacao_monta ' +
                '   , :des_estacao_monta) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('sgl_estacao_monta').AsString := SglEstacaoMonta;
      Q.ParamByName('des_estacao_monta').AsString := DesEstacaoMonta;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1349, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1349;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.AlterarVendaCriador(CodEvento: Integer;
                                         NumImovelReceitaFederal: String;
                                         CodLocalizacaoSISBOV: String;
                                         CodPropriedadeRural: Integer;
                                         NumCNPJCPFPessoaSecundaria: String;
                                         CodPessoa,
                                         CodPessoaSecundaria: Integer;
                                         NumGTA: String;
                                         DtaEmissaoGTA: TDateTime;
                                         IndVendaCertTerceira,
                                         CodSerieGta: String;
                                         CodEstadoGta: Integer;
                                         IndMovNErasEras: String;
                                         DtaValidadeGTA,
                                         DtaSaidaOrigem,
                                         DtaChegadaDestino: TDateTime): Integer;
const
  Metodo: Integer = 423;
  NomeMetodo: String = 'AlterarVendaCriador';
  CodTipoEvento: Integer = 9;
var
  Q: THerdomQuery;
//  DtaSaidaEvento :Tdatetime;
  NIRF, CNPJSEC, CNPJSECF, NomPropriedade, NomPessoa: String;
  CodFazendaOrigem : Integer;
begin
  Result := -1;
  
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica DtaSaidaOrigem
  if DtaSaidaOrigem = 0 then
  begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de saída da origem']);
    Result := -309;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino = 0 then
  begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de chegada ao destino']);
    Result := -309;
    Exit;
  end;

  if DtaSaidaOrigem > DateOf(Now) then
  begin
    Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
      ['Data de saída da origem']);
    Result := -2105;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino > DateOf(Now) then
  begin
    Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
      ['Data de chegada ao destino']);
    Result := -2105;
    Exit;
  end;

  if DtaEmissaoGTA > DateOf(Now) then
  begin
    Mensagens.Adicionar(1283, Self.ClassName, NomeMetodo, []);
    Result := -1283;
    Exit;
  end;

  // Consiste datas
  if DtaChegadaDestino < DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
    Result := -1007;
    Exit;
  end;

  // Verifica DtaEmissaoGTA
  if DtaEmissaoGTA > DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
    Result := -1008;
    Exit;
  end;

  // Verifica DtaValidadeGTA
  if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
  begin
    Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
    Result := -2337;
    Exit;
  end;

  // Verifica Propriedade Rural
  NIRF := '';
  if NumImovelReceitaFederal <> '' then
  begin
    if CodPropriedadeRural > 0 then
    begin
      Mensagens.Adicionar(1005, Self.ClassName, NomeMetodo, []);
      Result := -1005;
      Exit;
    end
    else
    if not ValidaNirfIncra(NumImovelReceitaFederal, True) then
    begin
      Mensagens.Adicionar(494, Self.ClassName, NomeMetodo, [NumImovelReceitaFederal]);
      Result := -494;
      Exit;
    end
    else
    begin
      NIRF := NumImovelReceitaFederal;
    end;
  end;

  if CodPropriedadeRural > 0 then
  begin
    if NumImovelReceitaFederal <> '' then
    begin
      Mensagens.Adicionar(1005, Self.ClassName, NomeMetodo, []);
      Result := -1005;
      Exit;
    end;
  end;

  if (UpperCase(IndVendaCertTerceira) = 'S') then
  begin
    Result := VerificaCNPJCPF(NumCNPJCPFPessoaSecundaria);
    if Result < 0 then
    begin
      Exit;
    end;
  end
  else
  begin
    // Consiste Pessoa Secundaria
    CNPJSEC := '';
    if NumCNPJCPFPessoaSecundaria <> '' then
    begin
      if CodPessoaSecundaria <= 0 then
      begin
        Result := VerificaCNPJCPF(NumCNPJCPFPessoaSecundaria);
        if Result < 0 then
        begin
          Exit;
        end;
        CodPessoaSecundaria := BuscarPessoaSecundaria(NumCNPJCPFPessoaSecundaria,1);
        CNPJSEC := NumCNPJCPFPessoaSecundaria;
        CNPJSECF := NumCNPJCPFPessoaSecundaria;
      end;
    end;
  end;

  if CodPessoaSecundaria > 0 then
  begin
    Result := VerificaPessoaSecundaria(CodPessoaSecundaria, 1, False, 'Criador', NomPessoa, CNPJSEC, CNPJSECF);
    if Result < 0 then
    begin
      Exit;
    end;
  end;

  if (UpperCase(IndVendaCertTerceira) = 'S') and
     ({(Length(Trim(NumImovelReceitaFederal)) = 0) or}
      (Length(Trim(NumCNPJCPFPessoaSecundaria)) = 0)) then
  begin
    Mensagens.Adicionar(2268, Self.ClassName, NomeMetodo, []);
    Result := -2268;
    Exit;
  end;

  if (UpperCase(IndVendaCertTerceira) = 'N') or
     (UpperCase(IndVendaCertTerceira) <> 'S') then
  begin
    CodLocalizacaoSISBOV := '';
  end;

  if (UpperCase(IndMovNErasEras) <> 'S') then begin
    IndMovNErasEras := 'N';
  end;

  // Gravando dados
  try
    Q := THerdomQuery.Create(Conexao, nil);
    try
      if (UpperCase(IndVendaCertTerceira) <> 'S') then
      begin
        // Obtem o código do criador se existir algum produtor com
        // o CNPJ/CPF informado
        if (CodPessoa = -1) and (NumCNPJCPFPessoaSecundaria <> '') then
        begin
          with Q do
          begin
            SQL.Clear;
            SQL.Add('SELECT cod_pessoa');
            SQL.Add('  FROM tab_pessoa tp,');
            SQL.Add('       tab_produtor tpp');
            SQL.Add(' WHERE num_cnpj_cpf = :num_cnpj_cpf');
            SQL.Add('   AND tp.cod_pessoa = tpp.cod_pessoa_produtor');
            SQL.Add('   AND tp.dta_fim_validade is null');
            ParamByName('num_cnpj_cpf').AsString := NumCNPJCPFPessoaSecundaria;
            Open;

            if not IsEmpty then
            begin
              CodPessoa := FieldByName('cod_pessoa').AsInteger;
              CodPessoaSecundaria := -1;
            end;
          end;
        end;

        // Se a propriedade rural (código ou NIRF/ICNRA) foi informada verifica se
        // esta é válida
        Result := VerificaPropriedadeRural(CodPropriedadeRural, False,
          'Propriedade rural', NIRF, StrToIntDef(CodLocalizacaoSISBOV, 0), NomPropriedade, CodPessoa);
        if Result < 0 then
        begin
          Exit;
        end;
      end;

      // Verifica a existência do evento e a DtaEmissaoGTA
      with Q do
      begin
        SQL.Clear;
        SQL.Add('SELECT dta_inicio  AS dta_saida_origem');
        SQL.Add('     , cod_fazenda AS cod_fazenda_origem');
        SQL.Add('  FROM tab_evento');
        SQL.Add(' WHERE cod_evento = :cod_evento');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');

        ParamByName('cod_evento').asinteger := CodEvento;
        ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Open;

        if IsEmpty then
        begin
          Mensagens.Adicionar(837, Self.ClassName, NomeMetodo, []);
          Result := -837;
          Exit;
        end;

//        DtaSaidaEvento   := FieldByName('dta_saida_origem').asdatetime;
        CodFazendaOrigem := FieldByName('cod_fazenda_origem').AsInteger;
{
        if DtaEmissaoGTA > DtaSaidaEvento then
        begin
          Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
          Result := -1008;
          Exit;
        end;
}
      end;

      if UpperCase(IndMovNErasEras) = 'S' then begin
        // Se a movimentação for de não eras para eras, verifica se a propriedade de origem
        // não foi exportada para o sisbov
        Result := VerificaPropriedadeNaoEras(Conexao.CodProdutorTrabalho, CodFazendaOrigem, 0);
        if Result < 0 then begin
          Exit;
        end;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Altera dados comuns a todos os tipos de eventos (capa do evento)
      // -------------------------------------------------------------------
      Result := AlterarEvento(Conexao.CodProdutorTrabalho, CodEvento,
                              DtaSaidaOrigem, DtaChegadaDestino, '');

      // -------------------------------------------------------------------
      // Insere dados específicos do evento venda criador
      // -------------------------------------------------------------------
      with Q do
      begin
        SQL.Clear;
        SQL.Add('UPDATE tab_evento_venda_criador');
        SQL.Add('   SET num_imovel_receita_federal = :num_imovel_receita_federal,');
        SQL.Add('       cod_propriedade_rural = :cod_propriedade_rural,');
        SQL.Add('       num_cnpj_cpf_pessoa_secundaria = :num_cnpj_cpf_pessoa_secundaria,');
        SQL.Add('       cod_pessoa_secundaria = :cod_pessoa_secundaria,');
        SQL.Add('       cod_pessoa = :cod_pessoa,');
        SQL.Add('       num_gta = :num_gta,');
        SQL.Add('       cod_serie_gta = :cod_serie_gta,');
        SQL.Add('       cod_estado_gta = :cod_estado_gta,');
        SQL.Add('       dta_emissao_gta = :dta_emissao_gta,');
        SQL.Add('       dta_validade_gta = :dta_validade_gta,');
        SQL.Add('       ind_venda_certif_terceira = :ind_venda_certif_terceira,');
        SQL.Add('       cod_exportacao_propriedade = :cod_exportacao_propriedade, ');
        SQL.Add('       ind_mov_naoeras_eras = :ind_mov_naoeras_eras');
        SQL.Add(' WHERE cod_evento = :cod_evento');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;

        AtribuiParametro(Q, NIRF, 'num_imovel_receita_federal', '');
        AtribuiParametro(Q, CodPropriedadeRural, 'cod_propriedade_rural', -1);
        AtribuiParametro(Q, CodPessoaSecundaria, 'cod_pessoa_secundaria', -1);
        AtribuiParametro(Q, CodPessoa, 'cod_pessoa', -1);
        AtribuiParametro(Q, NumCNPJCPFPessoaSecundaria, 'num_cnpj_cpf_pessoa_secundaria', '');
        AtribuiParametro(Q, NumGTA, 'num_gta', '');
        AtribuiParametro(Q, CodSerieGTA, 'cod_serie_gta', '');
        AtribuiParametro(Q, CodEstadoGTA, 'cod_estado_gta', 0);
        AtribuiParametro(Q, DtaEmissaoGTA, 'dta_emissao_gta', 0);
        AtribuiParametro(Q, DtaValidadeGTA, 'dta_validade_gta', 0);
        AtribuiParametro(Q, IndVendaCertTerceira, 'ind_venda_certif_terceira', '');
        AtribuiParametro(Q, CodLocalizacaoSISBOV, 'cod_exportacao_propriedade', '');
        AtribuiParametro(Q, UpperCase(IndMovNErasEras), 'ind_mov_naoeras_eras', '');
        ExecSQL;
      end;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      Result := 0;
    finally
      Q.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(1382, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1382;
      Exit;
    end;
  end;
end;

function TIntEventos.AlterarTransferencia(CodEvento: Integer;
                                          NumGTA: String;
                                          DtaEmissaoGta: TDateTime;
                                          CodSerieGta: String;
                                          CodEstadoGta: Integer;
                                          IndMovNErasEras: String;
                                          DtaValidadeGta,
                                          DtaSaidaOrigem,
                                          DtaChegadaDestino: TDateTime;
                                          IndMigrarAnimal: String): Integer;
const
  Metodo: Integer = 650;
  NomeMetodo: String = 'AlterarTransferencia';
  CodTipoEvento: Integer = 8;
var
  Q: THerdomQuery;
//  DtaSaidaEvento :Tdatetime;
  CodFazendaOrigem : Integer;
begin
  Result := -1;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if IndMigrarAnimal = 'N' then begin
    // Verifica DtaSaidaOrigem
    if DtaSaidaOrigem = 0 then
    begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de saída da origem']);
      Result := -309;
      Exit;
    end;

    // Verifica DtaChegadaDestino
    if DtaChegadaDestino = 0 then
    begin
      Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de chegada ao destino']);
      Result := -309;
      Exit;
    end;

    if DtaSaidaOrigem > DateOf(Now) then
    begin
      Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
        ['Data de saída da origem']);
      Result := -2105;
      Exit;
    end;

    // Verifica DtaChegadaDestino
    if DtaChegadaDestino > DateOf(Now) then
    begin
      Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
        ['Data de chegada ao destino']);
      Result := -2105;
      Exit;
    end;

    if DtaEmissaoGTA > DateOf(Now) then
    begin
      Mensagens.Adicionar(1283, Self.ClassName, NomeMetodo, []);
      Result := -1283;
      Exit;
    end;

    // Consiste datas
    if DtaChegadaDestino < DtaSaidaOrigem then
    begin
      Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
      Result := -1007;
      Exit;
    end;

    // Verifica DtaEmissaoGTA
    if DtaEmissaoGTA > DtaSaidaOrigem then
    begin
      Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
      Result := -1008;
      Exit;
    end;

    // Verifica DtaValidadeGTA
    if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
    begin
      Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
      Result := -2337;
      Exit;
    end;
  end;

  if (UpperCase(IndMovNErasEras) <> 'S') then begin
    IndMovNErasEras := 'N';
  end;

  // Gravando dados
  try
    Q := THerdomQuery.Create(Conexao, nil);
    try
      // Verifica a existência do evento e a DtaEmissaoGTA
      with Q do
      begin
        SQL.Clear;
        SQL.Add('SELECT dta_inicio  AS dta_saida_origem');
        SQL.Add('     , cod_fazenda AS cod_fazenda_origem');
        SQL.Add('  FROM tab_evento');
        SQL.Add(' WHERE cod_evento = :cod_evento');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');

        ParamByName('cod_evento').asinteger := CodEvento;
        ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Open;

        if IsEmpty then
        begin
          Mensagens.Adicionar(837, Self.ClassName, NomeMetodo, []);
          Result := -837;
          Exit;
        end;

        CodFazendaOrigem := FieldByName('cod_fazenda_origem').AsInteger;
      end;

      if UpperCase(IndMovNErasEras) = 'S' then begin
        // Se a movimentação for de não eras para eras, verifica se a propriedade de origem
        // não foi exportada para o sisbov
        Result := VerificaPropriedadeNaoEras(Conexao.CodProdutorTrabalho, CodFazendaOrigem, 0);
        if Result < 0 then begin
          Exit;
        end;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Altera dados comuns a todos os tipos de eventos (capa do evento)
      // -------------------------------------------------------------------
      Result := AlterarEvento(Conexao.CodProdutorTrabalho, CodEvento,
                              DtaSaidaOrigem, DtaChegadaDestino, '');

      // -------------------------------------------------------------------
      // Insere dados específicos do evento venda criador
      // -------------------------------------------------------------------
      with Q do
      begin
        SQL.Clear;
        SQL.Add('UPDATE tab_evento_transferencia');
        SQL.Add('   SET num_gta = :num_gta,');
        SQL.Add('       cod_serie_gta = :cod_serie_gta,');
        SQL.Add('       cod_estado_gta = :cod_estado_gta,');
        SQL.Add('       dta_emissao_gta = :dta_emissao_gta,');
        SQL.Add('       dta_validade_gta = :dta_validade_gta,');
        SQL.Add('       ind_mov_naoeras_eras = :ind_mov_naoeras_eras,');
        SQL.Add('       ind_migrar_animal_sisbov = :ind_migrar_animal_sisbov');
        SQL.Add(' WHERE cod_evento = :cod_evento');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;

        AtribuiParametro(Q, NumGTA, 'num_gta', '');
        AtribuiParametro(Q, CodSerieGTA, 'cod_serie_gta', '');
        AtribuiParametro(Q, CodEstadoGTA, 'cod_estado_gta', 0);
        AtribuiParametro(Q, DtaEmissaoGTA, 'dta_emissao_gta', 0);
        AtribuiParametro(Q, DtaValidadeGTA, 'dta_validade_gta', 0);
        AtribuiParametro(Q, UpperCase(IndMovNErasEras), 'ind_mov_naoeras_eras', '');
        AtribuiParametro(Q, UpperCase(IndMigrarAnimal), 'ind_migrar_animal_sisbov', '');
        ExecSQL;
      end;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      Result := 0;
    finally
      Q.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(2386, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2386;
      Exit;
    end;
  end;
end;


function TIntEventos.AlterarVendaFrigorifico(CodEvento: Integer;
  NumCNPJCPFFrigorifico: String; CodPessoaFrigorifico: Integer;
  NumGTA: String; DtaEmissaoGTA: TDateTime; CodSerieGta: String;
  CodEstadoGta: Integer; DtaValidadeGTA, DtaSaidaOrigem,
  DtaChegadaDestino: TDateTime): Integer;
const
  Metodo: Integer = 424;
  NomeMetodo: String = 'AlterarVendaFrigorifico';
  CodTipoEvento: Integer = 10;
var
  Q: THerdomQuery;
//  DtaSaidaEvento : TDateTime;
  CNPJ, CNPJF, NomPessoa: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica DtaSaidaOrigem
  if DtaSaidaOrigem = 0 then
  begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de saída da origem']);
    Result := -309;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino = 0 then
  begin
    Mensagens.Adicionar(309, Self.ClassName, NomeMetodo, ['Data de chegada ao destino']);
    Result := -309;
    Exit;
  end;

  if DtaSaidaOrigem > DateOf(Now) then
  begin
    Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
      ['Data de saída da origem']);
    Result := -2105;
    Exit;
  end;

  // Verifica DtaChegadaDestino
  if DtaChegadaDestino > DateOf(Now) then
  begin
    Mensagens.Adicionar(2105, Self.ClassName, NomeMetodo,
      ['Data de chegada ao destino']);
    Result := -2105;
    Exit;
  end;

  if DtaEmissaoGTA > DateOf(Now) then
  begin
    Mensagens.Adicionar(1283, Self.ClassName, NomeMetodo, []);
    Result := -1283;
    Exit;
  end;

  // Consiste datas
  if DtaChegadaDestino < DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
    Result := -1007;
    Exit;
  end;

  // Verifica DtaEmissaoGTA
  if DtaEmissaoGTA > DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
    Result := -1008;
    Exit;
  end;

  // Verifica DtaValidadeGTA
  if (DtaValidadeGTA < DtaEmissaoGTA) or (DtaValidadeGTA = 0) then
  begin
    Mensagens.Adicionar(2337, Self.ClassName, NomeMetodo, []);
    Result := -2337;
    Exit;
  end;

  // Verifica Frigorífico
  CNPJ := '';
  if NumCNPJCPFFrigorifico <> '' then begin
    if CodPessoaFrigorifico > 0 then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaCNPJCPF(NumCNPJCPFFrigorifico);
      if Result < 0 then Exit;
      CNPJ := NumCNPJCPFFrigorifico;
      CNPJF := NumCNPJCPFFrigorifico;
    end;
  end;

  if CodPessoaFrigorifico > 0 then begin
    if NumCNPJCPFFrigorifico <> '' then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaPessoa(CodPessoaFrigorifico, 6, False, 'Frigorífico', NomPessoa, CNPJ, CNPJF);
      if Result < 0 then begin
        Exit;
      end;
    end;
  end;

  // Gravando dados
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica a existência do evento e a DtaEmissaoGTA
{      Q.SQL.Clear;
$IFDEF MSSQL
      Q.SQL.Add('select dta_inicio as dta_saida_origem from tab_evento ' +
                'where cod_evento =:cod_evento and cod_pessoa_produtor =:cod_pessoa_produtor ');
$ENDIF
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(837, Self.ClassName, NomeMetodo, []);
         Result := -837;
         Exit;
      end;

      DtaSaidaEvento := Q.fieldbyname('dta_saida_origem').asdatetime;

      if DtaEmissaoGTA > DtaSaidaEvento then begin
         Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
         Result := -1008;
         Exit;
      end;
}
      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Altera dados comuns a todos os tipos de eventos (capa do evento)
      // -------------------------------------------------------------------
      Result := AlterarEvento(Conexao.CodProdutorTrabalho, CodEvento,
                              DtaSaidaOrigem, DtaChegadaDestino, '');

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento_venda_frigorifico ' +
                ' set ' +
                '   num_cnpj_cpf_frigorifico =:num_cnpj_cpf_frigorifico ' +
                '   , cod_pessoa  =:cod_pessoa ' +
                '   , num_gta =:num_gta ' +
                '   , cod_serie_gta =:cod_serie_gta ' +
                '   , cod_estado_gta =:cod_estado_gta ' +
                '   , dta_emissao_gta =:dta_emissao_gta ' +
                '   , dta_validade_gta =:dta_validade_gta ' +
                '  where cod_pessoa_produtor =:cod_pessoa_produtor ' +
                '  and   cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CNPJ <> '' then begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').AsString := CNPJ;
        if CodPessoaFrigorifico <= 0
           then CodPessoaFrigorifico := BuscarFrigorifico(CNPJ);
      end Else begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').DataType := ftString;
        Q.ParamByName('num_cnpj_cpf_frigorifico').Clear;
      end;
      if CodPessoaFrigorifico > 0 then begin
        Q.ParamByName('cod_pessoa').AsInteger := CodPessoaFrigorifico;
      end Else begin
        Q.ParamByName('cod_pessoa').DataType := ftInteger;
        Q.ParamByName('cod_pessoa').Clear;
      end;
      if NumGTA <> '' then begin
        Q.ParamByName('num_gta').AsString := NumGTA;
      end Else begin
        Q.ParamByName('num_gta').DataType := ftString;
        Q.ParamByName('num_gta').Clear;
      end;
      if CodSerieGTA <> '' then begin
        Q.ParamByName('cod_serie_gta').AsString := CodSerieGTA;
      end Else begin
        Q.ParamByName('cod_serie_gta').DataType := ftString;
        Q.ParamByName('cod_serie_gta').Clear;
      end;
      if CodEstadoGTA > 0 then begin
        Q.ParamByName('cod_estado_gta').AsInteger := CodEstadoGTA;
      end Else begin
        Q.ParamByName('cod_estado_gta').DataType := ftInteger;
        Q.ParamByName('cod_estado_gta').Clear;
      end;
      if DtaEmissaoGTA > 0 then begin
        Q.ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
      end Else begin
        Q.ParamByName('dta_emissao_gta').DataType := ftDateTime;
        Q.ParamByName('dta_emissao_gta').Clear;
      end;
      if DtaValidadeGTA > 0 then begin
        Q.ParamByName('dta_validade_gta').AsDateTime := DtaValidadeGTA;
      end Else begin
        Q.ParamByName('dta_validade_gta').DataType := ftDateTime;
        Q.ParamByName('dta_validade_gta').Clear;
      end;
      Q.ExecSQL;
      // Cofirma transação
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1383, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1383;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.AlterarRetornoFrigorifico(CodEvento: Integer;
  NumCNPJCPFFrigorifico: String; CodPessoaFrigorifico: Integer;
  NumGTA: String; DtaEmissaoGTA: TDateTime; CodSerieGta: String;
  CodEstadoGta: Integer; DtaValidadeGTA: TDateTime): Integer;
const
  Metodo: Integer = 424;
  NomeMetodo: String = 'AlterarRetornoFrigorifico';
  CodTipoEvento: Integer = 36;
var
  Q: THerdomQuery;
  DtaSaidaOrigem : TDateTime;
  CNPJ, CNPJF, NomPessoa: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Verifica Frigorífico
  CNPJ := '';
  if NumCNPJCPFFrigorifico <> '' then begin
    if CodPessoaFrigorifico > 0 then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaCNPJCPF(NumCNPJCPFFrigorifico);
      if Result < 0 then Exit;
      CNPJ := NumCNPJCPFFrigorifico;
      CNPJF := NumCNPJCPFFrigorifico;
    end;
  end;

  if CodPessoaFrigorifico > 0 then begin
    if NumCNPJCPFFrigorifico <> '' then begin
      Mensagens.Adicionar(1011, Self.ClassName, NomeMetodo, []);
      Result := -1011;
      Exit;
    end Else begin
      Result := VerificaPessoa(CodPessoaFrigorifico, 6, False, 'Frigorífico', NomPessoa, CNPJ, CNPJF);
      if Result < 0 then begin
        Exit;
      end;
    end;
  end;

  // Gravando dados
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // Verifica a existência do evento e a DtaEmissaoGTA
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select dta_inicio as dta_saida_origem from tab_evento ' +
                'where cod_evento =:cod_evento and cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if Q.IsEmpty then begin
         Mensagens.Adicionar(837, Self.ClassName, NomeMetodo, []);
         Result := -837;
         Exit;
      end;

      DtaSaidaOrigem := Q.fieldbyname('dta_saida_origem').asdatetime;

      if DtaEmissaoGTA > DtaSaidaOrigem then begin
         Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
         Result := -1008;
         Exit;
      end;

      // Abre transação
      beginTran;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento_retorno_frigorifico ' +
                ' set ' +
                '   num_cnpj_cpf_frigorifico =:num_cnpj_cpf_frigorifico ' +
                '   , cod_pessoa  =:cod_pessoa ' +
                '   , num_gta =:num_gta ' +
                '   , cod_serie_gta =:cod_serie_gta ' +
                '   , cod_estado_gta =:cod_estado_gta ' +
                '   , dta_emissao_gta =:dta_emissao_gta ' +
                '   , dta_validade_gta =:dta_validade_gta ' +
                '  where cod_pessoa_produtor =:cod_pessoa_produtor ' +
                '  and   cod_evento = :cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CNPJ <> '' then begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').AsString := CNPJ;
        if CodPessoaFrigorifico <= 0
           then CodPessoaFrigorifico := BuscarFrigorifico(CNPJ);
      end Else begin
        Q.ParamByName('num_cnpj_cpf_frigorifico').DataType := ftString;
        Q.ParamByName('num_cnpj_cpf_frigorifico').Clear;
      end;
      if CodPessoaFrigorifico > 0 then begin
        Q.ParamByName('cod_pessoa').AsInteger := CodPessoaFrigorifico;
      end Else begin
        Q.ParamByName('cod_pessoa').DataType := ftInteger;
        Q.ParamByName('cod_pessoa').Clear;
      end;
      if NumGTA <> '' then begin
        Q.ParamByName('num_gta').AsString := NumGTA;
      end Else begin
        Q.ParamByName('num_gta').DataType := ftString;
        Q.ParamByName('num_gta').Clear;
      end;
      if CodSerieGTA <> '' then begin
        Q.ParamByName('cod_serie_gta').AsString := CodSerieGTA;
      end Else begin
        Q.ParamByName('cod_serie_gta').DataType := ftString;
        Q.ParamByName('cod_serie_gta').Clear;
      end;
      if CodEstadoGTA > 0 then begin
        Q.ParamByName('cod_estado_gta').AsInteger := CodEstadoGTA;
      end Else begin
        Q.ParamByName('cod_estado_gta').DataType := ftInteger;
        Q.ParamByName('cod_estado_gta').Clear;
      end;
      if DtaEmissaoGTA > 0 then begin
        Q.ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
      end Else begin
        Q.ParamByName('dta_emissao_gta').DataType := ftDateTime;
        Q.ParamByName('dta_emissao_gta').Clear;
      end;
      if DtaValidadeGTA > 0 then begin
        Q.ParamByName('dta_validade_gta').AsDateTime := DtaEmissaoGTA;
      end Else begin
        Q.ParamByName('dta_validade_gta').DataType := ftDateTime;
        Q.ParamByName('dta_validade_gta').Clear;
      end;
      Q.ExecSQL;
      // Cofirma transação
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1383, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1383;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;


function TIntEventos.InserirCoberturaRegimePasto(DtaInicio, DtaFim: TDateTime;
  CodFazenda: Integer; TxtObservacao: String;
  CodFazendaManejo: Integer; CodAnimalManejo: String;
  CodAnimalTouro, CodReprodutorMultiplo,
  CodEventoEstacaoMonta: Integer): Integer;
const
  Metodo: Integer = 428;
  NomeMetodo: String = 'InserirCoberturaRegimePasto';
  CodTipoEvento: Integer = 23;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  CodAnimalRM: Integer;
  IndTouro, NomFazenda: String;
  InfoEstacaoMonta: TInfoEstacaoMonta;
//  CodEventoEstacaoMonta: Integer; // A partir de 5/6/2003 é rec. como param.
begin
  Result := -1;
  IndTouro := 'S';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, true, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

{ // Conceito alterado em 5/6/2003
  // Trata a data de inícío e fim do evento
  Result := VerificaDataEstacaoMonta(DtaInicio, DtaFim, CodFazenda, CodEventoEstacaoMonta);
  if Result < 0 then Exit; }

  if (CodFazendaManejo < 0) and (CodAnimalManejo = '') and (CodReprodutorMultiplo < 0) and (CodAnimalTouro < 0) then begin
     Mensagens.Adicionar(1426, Self.ClassName, NomeMetodo, []);
     Result := -1426;
     Exit;
  end;

  if CodFazendaManejo > 0 then begin
     if CodAnimalManejo <> '' then begin
        if (CodAnimalTouro > 0) or (CodReprodutorMultiplo > 0) then begin
           Mensagens.Adicionar(1409, Self.ClassName, NomeMetodo, []);
           Result := -1409;
           Exit;
        end;
     end else begin
        Mensagens.Adicionar(1410, Self.ClassName, NomeMetodo, []);
        Result := -1410;
        Exit;
     end;
  end;

  if CodAnimalTouro > 0 then begin
     if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or (CodReprodutorMultiplo > 0) then begin
        Mensagens.Adicionar(1411, Self.ClassName, NomeMetodo, []);
        Result := -1411;
        Exit;
     end;
  end;

  if CodReprodutorMultiplo > 0 then begin
     if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or (CodAnimalTouro > 0) then begin
        Mensagens.Adicionar(1412, Self.ClassName, NomeMetodo, []);
        Result := -1412;
        Exit;
     end;
  end;

  // Consiste e obtem estação de monta informada
  InfoEstacaoMonta.CodEventoEstacaoMonta := CodEventoEstacaoMonta;
  Result := VerificaEstacaoMonta(InfoEstacaoMonta);
  if Result < 0 then Exit;

  // Consiste se o período do evento de cobertura entra-se dentro da estação de monta
  if (DtaInicio < InfoEstacaoMonta.DtaInicio)
    or (DtaInicio > InfoEstacaoMonta.DtaFim)
    or (DtaFim < InfoEstacaoMonta.DtaInicio)
    or (DtaFim > InfoEstacaoMonta.DtaFim) then begin
      Mensagens.Adicionar(1529, Self.ClassName, NomeMetodo, []);
      Result := -1529;
      Exit;
  end;

  // Consiste se a fazenda informada para o evento é a mesma da estação de monta
  if CodFazenda <> InfoEstacaoMonta.CodFazenda then begin
    Mensagens.Adicionar(1530, Self.ClassName, NomeMetodo, []);
    Result := -1530;
    Exit;
  end;

  CodAnimalRM := VerificaTouroRM(CodFazenda, CodAnimalTouro, CodFazendaManejo,
                 CodAnimalManejo, CodReprodutorMultiplo, IndTouro);

  if CodAnimalRM < 0 then begin
     result := CodAnimalRM;
     Exit;
  end;

  // Verifica se o touro ou RM não pertence à outra cobertura por RP no período
  Result := VerificaParticipacaoTouroRMRegimePasto(CodAnimalRM, IndTouro,
    DtaInicio, DtaFim);
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      //No caso de RM verifica se a data de início e fim dos touros são compatíveis com
      //o início e fim do evento
      if IndTouro = 'N' then begin
        Q.SQL.Clear;
        Q.SQL.Add('select 1 from tab_animal_reprodutor_multiplo '+
                  ' where cod_reprodutor_multiplo = :cod_rm '+
                  ' and   cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and   ((dta_inicio_uso between :dta_inicio and :dta_fim '+
                  '         or dta_fim_uso between :dta_inicio and :dta_fim) '+
                  '        or (dta_inicio_uso < :dta_inicio and dta_fim_uso > :dta_fim)) ');
        Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_rm').asinteger := CodAnimalRM;
        Q.ParamByName('dta_inicio').asdatetime := DtaInicio;
        Q.ParamByName('dta_fim').asdatetime := DtaFim;
        Q.Open;

        if Q.IsEmpty then begin
          Mensagens.Adicionar(1590, Self.ClassName, NomeMetodo, []);
          Result := -1590;
          Exit;
        end;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaInicio, DtaFim, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // ------------------------------------------------------------------------------
      // Associa o evento de estação de monta ao evento de cobertura em regime de pasto
      // ------------------------------------------------------------------------------
      if CodEventoEstacaoMonta > 0 then begin
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add('update tab_evento ' +
                '  set cod_evento_associado =:cod_evento_associado ' +
                '  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_evento_associado').AsInteger := CodEventoEstacaoMonta;
        Q.ParamByName('cod_evento').AsInteger := CodEvento;
        Q.ExecSQL;

        Q.SQL.Clear;
      end;
      // -------------------------------------------------------------------
      // Insere dados específicos do evento cobertura em regime de pasto
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_cobertura_reg_pasto ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_reprodutor_multiplo ' +
                '   , cod_animal_touro) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ');
      if IndTouro = 'S' then
         Q.SQL.Add('   , null ' +
                   '   , :cod_animal_touro) ');
      if IndTouro = 'N' then
         Q.SQL.Add('   , :cod_reprodutor_multiplo ' +
                   '   , null) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if IndTouro = 'S' then
         Q.ParamByName('cod_animal_touro').AsInteger := CodAnimalRM;
      if IndTouro = 'N' then
         Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodAnimalRM;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1419, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1419;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.AlterarCoberturaRegimePasto(CodEvento: Integer; DtaFim: TDateTime;
  CodFazendaManejo: Integer; CodAnimalManejo: String;
  CodAnimalTouro, CodReprodutorMultiplo: Integer): Integer;
const
  Metodo: Integer = 429;
  NomeMetodo: String = 'AlterarCoberturaRegimePasto';
  CodTipoEvento: Integer = 23;
var
  Q: THerdomQuery;
  CodAnimalRM, CodFazenda: Integer;
  DtaInicio: TDateTime;
  IndTouro: String;
  CodEventoEstacaoMonta: Integer;
begin
  Result := -1;
  IndTouro := 'S';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if (CodFazendaManejo < 0) and (CodAnimalManejo = '') and (CodReprodutorMultiplo < 0) and (CodAnimalTouro < 0) then begin
     Mensagens.Adicionar(1426, Self.ClassName, NomeMetodo, []);
     Result := -1426;
     Exit;
  end;

  if CodFazendaManejo > 0 then begin
     if CodAnimalManejo <> '' then begin
        if (CodAnimalTouro > 0) or (CodReprodutorMultiplo > 0) then begin
           Mensagens.Adicionar(1409, Self.ClassName, NomeMetodo, []);
           Result := -1409;
           Exit;
        end;
     end else begin
        Mensagens.Adicionar(1410, Self.ClassName, NomeMetodo, []);
        Result := -1410;
        Exit;
     end;
  end;

  if CodAnimalTouro > 0 then begin
     if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or (CodReprodutorMultiplo > 0) then begin
        Mensagens.Adicionar(1411, Self.ClassName, NomeMetodo, []);
        Result := -1411;
        Exit;
     end;
  end;

  if CodReprodutorMultiplo > 0 then begin
     if (CodFazendaManejo > 0) or (CodAnimalManejo <> '') or (CodAnimalTouro > 0) then begin
        Mensagens.Adicionar(1412, Self.ClassName, NomeMetodo, []);
        Result := -1412;
        Exit;
     end;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Trata a data de inícío e fim do evento
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select dta_inicio, cod_fazenda ' +
                ' from tab_evento ' +
                '  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;
      DtaInicio := Q.FieldByName('dta_inicio').asDateTime;
      CodFazenda := Q.FieldByName('cod_fazenda').asInteger;
      Result := VerificaDataEstacaoMonta(DtaInicio, DtaFim, CodFazenda, CodEventoEstacaoMonta);
      if Result < 0 then Exit;

      CodAnimalRM := VerificaTouroRM(CodFazenda, CodAnimalTouro, CodFazendaManejo,
                     CodAnimalManejo, CodReprodutorMultiplo, IndTouro);

      if CodAnimalRM < 0 then begin
         result := CodAnimalRM;
         Exit;
      end;

      // Abre transação
      beginTran;

      // ------------------------------------------------------------------------------
      // Altera DtaInicio e CodEventoAssociado (caso exista) na capa do evento
      // ------------------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '  set dta_fim = :dta_fim, ');
      if CodEventoEstacaoMonta > 0
         then Q.SQL.Add(' cod_evento_associado =:cod_evento_associado ')
         else Q.SQL.Add(' cod_evento_associado = null ');
      Q.SQL.Add('  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodEventoEstacaoMonta > 0
         then Q.ParamByName('cod_evento_associado').AsInteger := CodEventoEstacaoMonta;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('dta_fim').AsDateTime := DtaFim;
      Q.ExecSQL;

      Q.SQL.Clear;
      // -------------------------------------------------------------------
      // Altera os dados específicos do evento cobertura em regime de pasto
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento_cobertura_reg_pasto ' +
                ' set ');
      if IndTouro = 'S' then begin
         Q.SQL.Add('   cod_reprodutor_multiplo = null, ' +
                   '   cod_animal_touro = :cod_animal_touro ');
      end;
      if IndTouro = 'N' then begin
         Q.SQL.Add('   cod_reprodutor_multiplo = :cod_reprodutor_multiplo, ' +
                   '   cod_animal_touro = null ');
      end;
      Q.SQL.Add(' where ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor and ' +
                '  cod_evento =:cod_evento ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if IndTouro = 'S' then
         Q.ParamByName('cod_animal_touro').AsInteger := CodAnimalRM;
      if IndTouro = 'N' then
         Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodAnimalRM;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1429, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1429;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirDiagnosticoPrenhez(DtaEvento: TDateTime;
  CodFazenda: Integer; TxtObservacao: String;
  CodEventoEstacaoMonta: Integer): Integer;
const
  Metodo: Integer = 436;
  NomeMetodo: String = 'InserirDiagnosticoPrenhez';
  CodTipoEvento: Integer = 28;
var
  InfoEstacaoMonta: TInfoEstacaoMonta;
  Q: THerdomQuery;
  NomFazenda: String;
  CodEvento: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Trata campo Fazenda
  Result := VerificaFazenda(CodFazenda,false,'Fazenda',NomFazenda);
  if Result < 0 then Exit;

  // Consiste e obtem estação de monta informada
  InfoEstacaoMonta.CodEventoEstacaoMonta := CodEventoEstacaoMonta;
  Result := VerificaEstacaoMonta(InfoEstacaoMonta);
  if Result < 0 then Exit;

  // Consiste se a fazenda informada para o evento é a mesma da estação de monta
  if CodFazenda <> InfoEstacaoMonta.CodFazenda then begin
    Mensagens.Adicionar(1530, Self.ClassName, NomeMetodo, []);
    Result := -1530;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // Associa o evento a estação de monta informada
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '  set ');
      if CodEventoEstacaoMonta > 0 then
         Q.SQL.Add('  cod_evento_associado =:cod_evento_associado ');
      Q.SQL.Add('  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento_associado').AsInteger := CodEventoEstacaoMonta;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1455, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1455;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirExameAndrologico(DtaEvento: TDateTime;
  CodFazenda: Integer; TxtObservacao: String): Integer;
const
  Metodo: Integer = 437;
  NomeMetodo: String = 'InserirExameAndrologico';
  CodTipoEvento: Integer = 25;
var
  Q: THerdomQuery;
  NomFazenda: String;
  CodEvento: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  // Trata campo Fazenda
  Result := VerificaFazenda(CodFazenda,false,'Fazenda',NomFazenda);
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1456, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1456;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirCoberturaMontaControlada(DtaEvento: TDateTime;
  CodFazenda: Integer; TxtObservacao: String; CodAnimalTouro,
  CodFazendaManejoTouro: Integer; CodAnimalManejoTouro: String;
  CodAnimalFemea, CodFazendaManejoFemea: Integer;
  CodAnimalManejoFemea: String; CodEventoEstacaoMonta: Integer): Integer;
const
  Metodo: Integer = 442;
  NomeMetodo: String = 'InserirCoberturaMontaControlada';
  CodTipoEvento: Integer = 27;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  IndTouro, NomFazenda: String;
  InfoEstacaoMonta: TInfoEstacaoMonta;
  // CodEventoEstacaoMonta, // A partir de 6/5/2003 é rec. como param.
  DescansoReprodutivo, DiasEntreCobertura: Integer;
  DtaAplicacaoEvento: TDateTime;
  DadosAnimal: TDadosAnimal;
  DtaMaxEvento: TDateTime;
begin
  DtaMaxEvento := 0;
  Result := -1;
  IndTouro := 'S';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, false, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

{ // Conceito alterado em 5/6/2003
  // Trata a data de inícío e fim do evento
  Result := VerificaDataEstacaoMonta(DtaEvento, DtaEvento, CodFazenda, CodEventoEstacaoMonta);
  if Result < 0 then Exit; }

  //consistências para touro
  if (CodFazendaManejoTouro < 0) and (CodAnimalManejoTouro = '') and (CodAnimalTouro < 0) then begin
     Mensagens.Adicionar(1469, Self.ClassName, NomeMetodo, []);
     Result := -1469;
     Exit;
  end;

  if CodFazendaManejoTouro > 0 then begin
     if CodAnimalManejoTouro <> '' then begin
        if (CodAnimalTouro > 0) then begin
           Mensagens.Adicionar(1467, Self.ClassName, NomeMetodo, []);
           Result := -1467;
           Exit;
        end;
     end else begin
        Mensagens.Adicionar(1410, Self.ClassName, NomeMetodo, []);
        Result := -1410;
        Exit;
     end;
  end;

  if CodAnimalTouro > 0 then begin
     if (CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> '') then begin
        Mensagens.Adicionar(1468, Self.ClassName, NomeMetodo, []);
        Result := -1468;
        Exit;
     end;
  end;

  // Consiste e obtem estação de monta informada
  InfoEstacaoMonta.CodEventoEstacaoMonta := CodEventoEstacaoMonta;
  Result := VerificaEstacaoMonta(InfoEstacaoMonta);
  if Result < 0 then Exit;

  // Consiste se o período do evento de cobertura encontra-se dentro da estação de monta
  if (DtaEvento < InfoEstacaoMonta.DtaInicio)
    or (DtaEvento > InfoEstacaoMonta.DtaFim) then begin
      Mensagens.Adicionar(1529, Self.ClassName, NomeMetodo, []);
      Result := -1529;
      Exit;
  end;

  // Consiste se a fazenda informada para o evento é a mesma da estação de monta
  if CodFazenda <> InfoEstacaoMonta.CodFazenda then begin
    Mensagens.Adicionar(1530, Self.ClassName, NomeMetodo, []);
    Result := -1530;
    Exit;
  end;

  Result := VerificaAnimalReproducao(CodFazenda,CodAnimalTouro,CodFazendaManejoTouro,CodAnimalManejoTouro,'S',DtaEvento);

  if Result < 0 then
     Exit;

  CodAnimalTouro:= Result;

  //consistências para fêmea
  if (CodFazendaManejoFemea < 0) and (CodAnimalManejoFemea = '') and (CodAnimalFemea < 0) then begin
     Mensagens.Adicionar(1472, Self.ClassName, NomeMetodo, []);
     Result := -1472;
     Exit;
  end;

  if CodFazendaManejoFemea > 0 then begin
     if CodAnimalManejoFemea <> '' then begin
        if (CodAnimalFemea > 0) then begin
           Mensagens.Adicionar(1473, Self.ClassName, NomeMetodo, []);
           Result := -1473;
           Exit;
        end;
     end else begin
        Mensagens.Adicionar(1410, Self.ClassName, NomeMetodo, []);
        Result := -1410;
        Exit;
     end;
  end;

  if CodAnimalFemea > 0 then begin
     if (CodFazendaManejoFemea > 0) or (CodAnimalManejoFemea <> '') then begin
        Mensagens.Adicionar(1474, Self.ClassName, NomeMetodo, []);
        Result := -1474;
        Exit;
     end;
  end;

  Result := VerificaAnimalReproducao(CodFazenda,CodAnimalFemea,CodFazendaManejoFemea,CodAnimalManejoFemea,'N',DtaEvento);

  if Result < 0 then
     Exit;

  CodAnimalFemea:= Result;

  // Verifica se fêmea pertence a estação de monta do evento
  Result := VerificaFemeaEstacaoMonta(CodEventoEstacaoMonta, CodAnimalFemea);
  if Result < 0 then Exit;

  // Verifica se fêmea não pertence à cobertura por RP no período
  Result := VerificaParticipacaoFemeaRegimePasto(CodAnimalFemea, DtaEvento,
    DtaEvento);
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select getdate() dta_aplicacao_evento ' );
      {$ENDIF}
      Q.Open;
      DtaAplicacaoEvento := Q.Fieldbyname('dta_aplicacao_evento').asdatetime;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '  set ');
      if (CodEventoEstacaoMonta > 0) then
         Q.SQL.Add('  cod_evento_associado =:cod_evento_associado, ');
      Q.SQL.Add('  qtd_animais = 1 '+
                '  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodEventoEstacaoMonta > 0 then
         Q.ParamByName('cod_evento_associado').AsInteger := CodEventoEstacaoMonta;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      Q.SQL.Clear;
      // -----------------------------------------------------------------
      // Insere dados específicos do evento cobertura por monta controlada
      // -----------------------------------------------------------------
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_monta_controlada ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_animal_touro) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_animal_touro) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal_touro').AsInteger := CodAnimalTouro;
      Q.ExecSQL;

      Q.SQL.Clear;

      // -----------------------------------------------------------------
      // Associa a vaca ao evento
      // -----------------------------------------------------------------
      //verifica se a vaca já recebeu outro evento de monta nesta data
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select te.dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_tipo_evento in (23,26,27) ' +
                '   and tae.cod_animal = :cod_animal ' +
                '   and te.dta_inicio <= :dta_inicio ' +
                '   and te.dta_fim >= :dta_inicio ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').asinteger := CodAnimalFemea;
      Q.ParamByName('dta_inicio').asdatetime := DtaEvento;
      Q.Open;
      if not Q.IsEmpty then begin
         Mensagens.Adicionar(1490, Self.ClassName, NomeMetodo, []);
         Result := -1490;
         Rollback;
         Exit;
      end;

      //verifica se o animal está no descanso reprodutivo ou intervalo entre coberturas
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select qtd_dias_descanso_reprodutivo, qtd_dias_entre_coberturas ' +
                ' from tab_produtor ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
      {$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      DescansoReprodutivo := Q.FieldbyName('qtd_dias_descanso_reprodutivo').asinteger;
      DiasEntreCobertura := Q.FieldbyName('qtd_dias_entre_coberturas').asinteger;

      //verifica se o animal possui evento de cobertura a menos de N (onde N = qtd_dias_entre_coberturas) dias
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select max(te.dta_inicio) as dta_inicio ' +
                ' from tab_evento te, tab_animal_evento tae ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                ' and   te.cod_evento = tae.cod_evento ' +
                ' and   tae.cod_animal = :cod_animal ' +
                ' and   te.cod_tipo_evento in (23,26,27) '+
                ' and   te.dta_inicio between :dta_inicio and :dta_fim ');
{$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger := CodAnimalFemea;
      Q.Parambyname('dta_inicio').asdatetime := DtaEvento - DiasEntreCobertura;
      Q.Parambyname('dta_fim').asdatetime := DtaEvento;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         if (Q.fieldbyname('dta_inicio').asdatetime - DtaEvento < StrtoInt(ValorParametro(61))) or (Q.fieldbyname('dta_inicio').asdatetime - DtaEvento > StrtoInt(ValorParametro(62))) then
            Mensagens.Adicionar(1486, Self.ClassName, NomeMetodo, [Q.Fieldbyname('dta_inicio').asstring,inttostr(DiasEntreCobertura)]);

      //verifica se o animal está no descanso reprodutivo
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select max(te.dta_inicio) as dta_inicio ' +
                ' from tab_evento te, tab_animal_evento tae ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                ' and   te.cod_evento = tae.cod_evento ' +
                ' and   tae.cod_animal = :cod_animal ' +
                ' and   te.cod_tipo_evento in (30) '+ // a especificar
                ' and   te.dta_inicio between :dta_inicio and :dta_fim ');
      {$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger := CodAnimalFemea;
      Q.Parambyname('dta_inicio').asdatetime := DtaEvento - DescansoReprodutivo;
      Q.Parambyname('dta_fim').asdatetime := DtaEvento;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         Mensagens.Adicionar(1487, Self.ClassName, NomeMetodo, [Q.Fieldbyname('dta_inicio').asstring,inttostr(DescansoReprodutivo)]);

      //verifica a data
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select max(dta_inicio) as dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_tipo_evento tte, ' +
                '      tab_animal ta, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_tipo_evento = tte.cod_tipo_evento ' +
                '   and ta.cod_animal = tae.cod_animal ' +
                '   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento != :cod_evento ' +
                '   and ta.cod_animal = :cod_animal ' +
                '   and tte.ind_dta_controlada = ''S'' ');
      {$ENDIF}
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalFemea;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         DtaMaxEvento := Q.Fieldbyname('dta_inicio').asdatetime;

      if DtaMaxEvento > DtaEvento then begin
         Mensagens.Adicionar(1482, Self.ClassName, NomeMetodo, []);
         Result := -1482;
         Rollback;
         Exit;
      end;

      // associa o animal ao evento
      MontaQueryInsertAnimalEvento;
      Result := BuscaDadosAnimal(CodAnimalFemea,DadosAnimal);
      if Result < 0 then begin
         RollBack;
         Exit;
      end;

      Result := InserirAnimalEvento(CodEvento,DtaAplicacaoEvento,DadosAnimal);
      if Result < 0 then begin
         RollBack;
         Exit;
      end;
      // -----------------------------------------------------------------
      // Cria o TxtDados para o evento
      // -----------------------------------------------------------------
      Q.Close;
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
      {$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1475, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1475;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirCoberturaInseminacaoArtificial(DtaEvento,
  HraEvento: TDateTime; CodFazenda: Integer;
  TxtObservacao: String; CodAnimalTouro: Integer;
  NumPartida: String; CodAnimalFemea,
  CodFazendaManejoFemea: Integer; CodAnimalManejoFemea: String;
  QtdDoses, CodPessoaSecundariaInseminador,
  CodEventoEstacaoMonta: Integer): Integer;
const
  Metodo: Integer = 443;
  NomeMetodo: String = 'InserirCoberturaInseminacaoArtificial';
  CodTipoEvento: Integer = 26;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  IndTouro, NomFazenda: String;
  InfoEstacaoMonta: TInfoEstacaoMonta;
//  CodEventoEstacaoMonta: Integer; // A partir de 6/5/2003 é rec. como param.
  EstoqueSemen: TIntEstoqueSemen;
  DtaAplicacaoEvento, DtaMaxEvento: TDateTime;
  DadosAnimal: TDadosAnimal;
  DiasEntreCobertura, DescansoReprodutivo: Integer;
  CodMovimento: Integer;
begin
  Result := -1;
  IndTouro := 'S';
  DtaMaxEvento := 0;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, true, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

{ // Conceito alterado em 5/6/2003
  // Trata a data de inícío e fim do evento
  Result := VerificaDataEstacaoMonta(DtaEvento, DtaEvento, CodFazenda, CodEventoEstacaoMonta);
  if Result < 0 then Exit; }

  // trata a quantidade de doses
  if (QtdDoses < 0) or (QtdDoses > 9) then begin
     Mensagens.Adicionar(1477, Self.ClassName, NomeMetodo, []);
     Result := -1477;
     Exit;
  end;

  // Consiste e obtem estação de monta informada
  InfoEstacaoMonta.CodEventoEstacaoMonta := CodEventoEstacaoMonta;
  Result := VerificaEstacaoMonta(InfoEstacaoMonta);
  if Result < 0 then Exit;

  // Consiste se o período do evento de cobertura encontra-se dentro da estação de monta
  if (DtaEvento < InfoEstacaoMonta.DtaInicio)
    or (DtaEvento > InfoEstacaoMonta.DtaFim) then begin
      Mensagens.Adicionar(1529, Self.ClassName, NomeMetodo, []);
      Result := -1529;
      Exit;
  end;

  // Consiste se a fazenda informada para o evento é a mesma da estação de monta
  if CodFazenda <> InfoEstacaoMonta.CodFazenda then begin
    Mensagens.Adicionar(1530, Self.ClassName, NomeMetodo, []);
    Result := -1530;
    Exit;
  end;

{ Alterado em 09/09/2003, o touro será consistido juntamente com o estoque do
  mesmo durante a inserção do movimento no estoque de sêmen, não sendo necessária
  a realização desta consistência neste momento.
  //consistências para touro
  Result := VerificaAnimalReproducao(CodFazenda,CodAnimalTouro,-1,'','S',DtaEvento);

  if Result < 0 then
     Exit;

  CodAnimalTouro := Result;
}

  //consistências para fêmea
  if (CodFazendaManejoFemea < 0) and (CodAnimalManejoFemea = '') and (CodAnimalFemea < 0) then begin
     Mensagens.Adicionar(1472, Self.ClassName, NomeMetodo, []);
     Result := -1472;
     Exit;
  end;

  if CodFazendaManejoFemea > 0 then begin
     if CodAnimalManejoFemea <> '' then begin
        if (CodAnimalFemea > 0) then begin
           Mensagens.Adicionar(1473, Self.ClassName, NomeMetodo, []);
           Result := -1473;
           Exit;
        end;
     end else begin
        Mensagens.Adicionar(1410, Self.ClassName, NomeMetodo, []);
        Result := -1410;
        Exit;
     end;
  end;

  if CodAnimalFemea > 0 then begin
     if (CodFazendaManejoFemea > 0) or (CodAnimalManejoFemea <> '') then begin
        Mensagens.Adicionar(1474, Self.ClassName, NomeMetodo, []);
        Result := -1474;
        Exit;
     end;
  end;

  Result := VerificaAnimalReproducao(CodFazenda,CodAnimalFemea,CodFazendaManejoFemea,CodAnimalManejoFemea,'N',DtaEvento);

  if Result < 0 then
     Exit;

  CodAnimalFemea := Result;

  // Verifica se fêmea pertence a estação de monta do evento
  Result := VerificaFemeaEstacaoMonta(CodEventoEstacaoMonta, CodAnimalFemea);
  if Result < 0 then Exit;

  // Verifica se fêmea não pertence à cobertura por RP no período
  Result := VerificaParticipacaoFemeaRegimePasto(CodAnimalFemea, DtaEvento,
    DtaEvento);
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select getdate() dta_aplicacao_evento ' );
      {$ENDIF}
      Q.Open;
      DtaAplicacaoEvento := Q.Fieldbyname('dta_aplicacao_evento').asdatetime;

      Q.SQL.Clear;
      {$IFDEF MSSQL}
      Q.SQL.Add('select cast(:hhmm as smalldatetime) hra_aplicacao_evento ' );
      {$ENDIF}
      Q.ParamByName('hhmm').AsString := FormatDateTime('hh:nn:ss', HraEvento);
      Q.Open;
      HraEvento := Q.FieldByName('hra_aplicacao_evento').AsDateTime;

      // consiste a pessoa secundaria inseminador
      if CodPessoaSecundariaInseminador > 0 then begin
        Q.SQL.Clear;
        Q.SQL.Add('select tps.cod_pessoa_secundaria ' +
                ' from tab_pessoa_secundaria tps, tab_pessoa_papel_secundario tpps ' +
                ' where tps.cod_pessoa_secundaria =:cod_pessoa_secundaria ' +
                ' and   tps.dta_fim_validade is null ' +
                ' and   tps.cod_pessoa_secundaria = tpps.cod_pessoa_secundaria ' +
                ' and   tps.cod_pessoa_produtor = tpps.cod_pessoa_produtor ' +
                ' and   tpps.cod_papel_secundario = 6 ' +
                ' and   tps.cod_pessoa_produtor = :cod_pessoa_produtor ');
        Q.Parambyname('cod_pessoa_secundaria').AsInteger:=CodPessoaSecundariaInseminador;
        Q.Parambyname('cod_pessoa_produtor').AsInteger:=Conexao.CodProdutorTrabalho;
        Q.Open;
        if Q.IsEmpty then begin
          Mensagens.Adicionar(1478, Self.ClassName, NomeMetodo, []);
          Result := -1478;
          Exit;
        end;
      end;
      // Abre transação
      beginTran;

      // Lança o eventos de movimentação de semen
      EstoqueSemen := TIntEstoqueSemen.Create;
      try
       result:= EstoqueSemen.Inicializar(Conexao,Mensagens);
       if Result < 0  then begin
         RollBack;
         Exit;
       end;
       Result:= EstoqueSemen.InserirMovimento(5, CodFazenda, CodAnimalTouro,
         -1, '', NumPartida, DtaEvento, CodPessoasecundariaInseminador,
         CodAnimalFemea, -1, QtdDoses, 0, '', 'S');
       if Result < 0 then begin
          Rollback;
          Exit;
       end;
      finally
       EstoqueSemen.Free;
      end;

      CodMovimento := result;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -----------------------------------------------------------------------
      // Insere dados específicos do evento cobertura por inseminação artificial
      // -----------------------------------------------------------------------
{$IFDEF MSSQL}
      Q.SQL.Clear;
      Q.SQL.Add('insert into tab_evento_insemin_artificial ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , hra_evento ' +
                '   , cod_fazenda ' +
                '   , cod_animal ' +
                '   , num_partida ' +
                '   , qtd_doses ' +
                '   , cod_movimento '+
                '   , seq_movimento '+
                '   , cod_pessoa_sec_inseminador) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :hra_evento ' +
                '   , :cod_fazenda ' +
                '   , :cod_animal ' +
                '   , :num_partida ' +
                '   , :qtd_doses ' +
                '   , :cod_movimento '+
                '   , 1 ');
      if CodPessoaSecundariaInseminador > 0
         then Q.SQL.Add('   , :cod_pessoa_sec_inseminador) ')
         else Q.SQL.Add('   , null) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalTouro;
      Q.ParamByName('hra_evento').AsDateTime := HraEvento;
      Q.ParamByName('num_partida').AsString := NumPartida;
      Q.ParamByName('qtd_doses').AsInteger := QtdDoses;
      Q.ParamByName('cod_movimento').AsInteger := CodMovimento;
      if CodPessoaSecundariaInseminador > 0 then
        Q.ParamByName('cod_pessoa_sec_inseminador').AsInteger := CodPessoaSecundariaInseminador;
      Q.ExecSQL;

      // -----------------------------------------------------------------
      // Associa a vaca ao evento
      // -----------------------------------------------------------------
      //verifica se a vaca já recebeu outro evento de monta nesta data
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select 1 ' +
                ' from tab_evento te, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_tipo_evento in (23,26,27) ' +
                '   and tae.cod_animal = :cod_animal ' +
                '   and te.dta_inicio <= :dta_inicio ' +
                '   and te.dta_fim >= :dta_inicio ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').asinteger := CodAnimalFemea;
      Q.ParamByName('dta_inicio').asdatetime := DtaEvento;
      Q.Open;
      if not Q.IsEmpty then begin
         Mensagens.Adicionar(1485, Self.ClassName, NomeMetodo, []);
         Result := -1485;
         Rollback;
         Exit;
      end;

      //verifica se o animal está no descanso reprodutivo ou intervalo entre coberturas
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select qtd_dias_descanso_reprodutivo, qtd_dias_entre_coberturas ' +
                ' from tab_produtor ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      DescansoReprodutivo := Q.FieldbyName('qtd_dias_descanso_reprodutivo').asinteger;
      DiasEntreCobertura := Q.FieldbyName('qtd_dias_entre_coberturas').asinteger;

      //verifica se o animal possui evento de cobertura a menos de N (onde N = qtd_dias_entre_coberturas) dias
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select max(te.dta_inicio) as dta_inicio ' +
                ' from tab_evento te, tab_animal_evento tae ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                ' and   te.cod_evento = tae.cod_evento ' +
                ' and   tae.cod_animal = :cod_animal ' +
                ' and   te.cod_tipo_evento in (23,26,27) '+
                ' and   te.dta_inicio between :dta_inicio and :dta_fim ');
{$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger := CodAnimalFemea;
      Q.Parambyname('dta_inicio').asdatetime := DtaEvento - DiasEntreCobertura;
      Q.Parambyname('dta_fim').asdatetime := DtaEvento;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         if (Q.fieldbyname('dta_inicio').asdatetime - DtaEvento < StrtoInt(ValorParametro(61))) or (Q.fieldbyname('dta_inicio').asdatetime - DtaEvento > StrtoInt(ValorParametro(62))) then
            Mensagens.Adicionar(1486, Self.ClassName, NomeMetodo, [Q.Fieldbyname('dta_inicio').asstring,inttostr(DiasEntreCobertura)]);

      //verifica se o animal está no descanso reprodutivo
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select max(te.dta_inicio) as dta_inicio ' +
                ' from tab_evento te, tab_animal_evento tae ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                ' and   te.cod_evento = tae.cod_evento ' +
                ' and   tae.cod_animal = :cod_animal ' +
                ' and   te.cod_tipo_evento in (30) '+ // a especificar
                ' and   te.dta_inicio between :dta_inicio and :dta_fim ');
{$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger := CodAnimalFemea;
      Q.Parambyname('dta_inicio').asdatetime := DtaEvento - DescansoReprodutivo;
      Q.Parambyname('dta_fim').asdatetime := DtaEvento;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         Mensagens.Adicionar(1487, Self.ClassName, NomeMetodo, [Q.Fieldbyname('dta_inicio').asstring,inttostr(DescansoReprodutivo)]);

      //verifica data
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select max(dta_inicio) as dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_tipo_evento tte, ' +
                '      tab_animal ta, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_tipo_evento = tte.cod_tipo_evento ' +
                '   and ta.cod_animal = tae.cod_animal ' +
                '   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento != :cod_evento ' +
                '   and ta.cod_animal = :cod_animal ' +
                '   and tte.ind_dta_controlada = ''S'' ');
{$ENDIF}
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalFemea;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         DtaMaxEvento := Q.Fieldbyname('dta_inicio').asdatetime;

      if DtaMaxEvento > DtaEvento then begin
         Mensagens.Adicionar(1482, Self.ClassName, NomeMetodo, []);
         Result := -1482;
         Rollback;
         Exit;
      end;

      // associa o animal ao evento
      MontaQueryInsertAnimalEvento;
      Result := BuscaDadosAnimal(CodAnimalFemea,DadosAnimal);
      if Result < 0 then begin
         RollBack;
         Exit;
      end;

      Result := InserirAnimalEvento(CodEvento,DtaAplicacaoEvento,DadosAnimal);
      if Result < 0 then begin
         RollBack;
         Exit;
      end;

      // -----------------------------------------------------------------
      // Cria o TxtDados para o evento
      // -----------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}

// --------------------------------------------------------------------------------
// Associa o evento de estação de monta ao evento de cobertura por monta controlada
// --------------------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '  set ' +
                '  qtd_animais = 1 ');
      if (CodEventoEstacaoMonta > 0) then
         Q.SQL.Add('  ,cod_evento_associado =:cod_evento_associado ');
      Q.SQL.Add('  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodEventoEstacaoMonta > 0 then
         Q.ParamByName('cod_evento_associado').AsInteger := CodEventoEstacaoMonta;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      Q.SQL.Clear;
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1476, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1476;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirAvaliacao(DtaEvento: TDateTime;
  CodFazenda: Integer; TxtObservacao: String; CodTipoAvaliacao,
  CodPessoaSecAvaliador: Integer): Integer;
const
  Metodo: Integer = 446;
  NomeMetodo: String = 'InserirAvaliacao';
  CodTipoEvento: Integer = 31;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, true, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      //verifica se o tipo de avaliação é válido
      Q.SQL.clear;
      Q.SQL.Add('select 1 from tab_tipo_avaliacao '+
                ' where cod_tipo_avaliacao = :cod_tipo_avaliacao ' +
                ' and   dta_fim_validade is null ');
      Q.Parambyname('cod_tipo_avaliacao').asinteger := CodTipoAvaliacao;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(1495, Self.ClassName, NomeMetodo, []);
        Result := -1495;
        Exit;
      end;

      //verifica, caso seja informado, se o avaliador é válido
      if CodPessoaSecAvaliador > 0 then begin
        Q.SQL.clear;
        Q.SQL.Add('select 1 from tab_pessoa_papel_secundario '+
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and   cod_papel_secundario = 7 '+ //papel de avaliador
                  ' and   cod_pessoa_secundaria = :cod_pessoa_secundaria ');
        Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Q.Parambyname('cod_pessoa_secundaria').asinteger := CodPessoaSecAvaliador;
        Q.Open;

        if Q.IsEmpty then begin
          Mensagens.Adicionar(1496, Self.ClassName, NomeMetodo, []);
          Result := -1496;
          Exit;
        end;
      end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento de avaliacao
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_avaliacao ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_tipo_avaliacao ' +
                '   , cod_pessoa_avaliador) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_tipo_avaliacao ');
      if CodPessoaSecAvaliador <= 0
         then Q.SQL.Add('   , null) ')
         else Q.SQL.Add('   , :cod_pessoa_avaliador) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_tipo_avaliacao').AsInteger := CodTipoAvaliacao;
      if CodPessoaSecAvaliador > 0 then
         Q.ParamByName('cod_pessoa_avaliador').AsInteger := CodPessoasecAvaliador;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1497, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1497;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.AlterarAvaliacao(CodEvento: Integer;
  DtaEvento: TDateTime; CodPessoaSecAvaliador: Integer): Integer;
const
  Metodo: Integer = 447;
  NomeMetodo: String = 'AlterarAvaliacao';
  CodTipoEvento: Integer = 31;
var
  Q: THerdomQuery;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      //verifica, caso seja informado, se o avaliador é válido
      if CodPessoaSecAvaliador > 0 then begin
        Q.SQL.clear;
        Q.SQL.Add('select 1 from tab_pessoa_papel_secundario '+
                  ' where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and   cod_papel_secundario = 7 '+ //papel de avaliador
                  ' and   cod_pessoa_secundaria = :cod_pessoa_secundaria ');
        Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        Q.Parambyname('cod_pessoa_secundaria').asinteger := CodPessoaSecAvaliador;
        Q.Open;

        if Q.IsEmpty then begin
          Mensagens.Adicionar(1496, Self.ClassName, NomeMetodo, []);
          Result := -1496;
          Exit;
        end;
      end;

      // Abre transação
      beginTran;

      //altera a data
      Q.SQL.Clear;
      Q.SQL.Add('update tab_evento '+
                ' set dta_inicio = :dta_evento, '+
                '     dta_fim = :dta_evento '+
                ' where cod_evento = :cod_evento '+
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.ParambyName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParambyName('cod_evento').asinteger := CodEvento;
      Q.ParambyName('dta_evento').asdatetime := DtaEvento;
      Q.ExecSQL;

      //altera o avaliador
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento_avaliacao ');
      if CodPessoaSecAvaliador > 0
         then Q.SQL.Add('  set  cod_pessoa_avaliador = :cod_pessoa_avaliador ')
         else Q.SQL.Add('  set  cod_pessoa_avaliador = null ');
      Q.SQL.Add(' where cod_evento = :cod_evento ' +
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CodPessoaSecAvaliador > 0 then
         Q.ParamByName('cod_pessoa_avaliador').AsInteger := CodPessoasecAvaliador;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1497, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1497;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.PesquisarRelatorioAvaliacao(EQuery: THerdomQuery; CodEvento: Integer;
  DtaInicioEvento, DtaFimEvento: TDateTime; CodTipoAvaliacao: Integer;
  CodCaracteristicas: String; CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim: String;
  CodFazendaManejoPai: Integer; CodAnimalManejoPai, NomAnimalPai,
  DesApelidoPai: String; CodFazendaManejoMae: Integer;
  CodAnimalManejoMae: String; DtaNascimentoInicio,
  DtaNascimentoFim: TDateTime; IndSexo, CodRacas, CodCategorias, CodLocais,
  CodLotes, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; CodTarefa: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioAvaliacao';
  CodRelatorio: Integer = 16;

  fCODANIMALMANEJO: Integer = 1;
  fNOMANIMAL: Integer = 2;
  fDESAPELIDO: Integer = 3;
  fNUMRGD: Integer = 4;
  fCODANIMALMANEJOPAI: Integer = 5;
  fNOMANIMALPAI: Integer = 6;
  fDESAPELIDOPAI: Integer = 7;
  fCODANIMALMANEJOMAE: Integer = 8;
  fDTANASCIMENTO: Integer = 9;
  fSGLFAZENDACORRENTE: Integer = 10;
  fSGLLOCALCORRENTE: Integer = 11;
  fSGLLOTECORRENTE: Integer = 12;
  fSGLRACA: Integer = 13;
  fDESRACA: Integer = 14;
  fSGLCATEGORIAANIMAL: Integer = 15;
  fDESIDADE: Integer = 16;
  fDESCOMPOSICAORACIAL: Integer = 17;
  fINDSEXO: Integer = 18;
  fSGLTIPOAVALIACAO: Integer = 19;
  fDESTIPOAVALIACAO: Integer = 20;
  fNOMPESSOAAVALIADOR: Integer = 21;
  fSGLCARACTERISTICA: Integer = 22;
  fDESCARACTERISTICA: Integer = 23;
  fVALAVALIACAO: Integer = 24;
  fSGLUNIDADEMEDIDA: Integer = 25;
  fDtaAvaliacao: Integer = 26;
var
  iAux, X: Integer;
  Param: TValoresParametro;
  IntRelatorios: TIntRelatorios;
  bAux, bPersonalizavel, bPai, bMae, bEvento: Boolean;
  sAux: String;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        EQuery.SQL.Text := EQuery.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLotes <> '' then begin
      Result := VerificaParametroMultiValor(CodLotes, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLocais <> '' then begin
      Result := VerificaParametroMultiValor(CodLocais, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCaracteristicas <> '' then begin
      Result := VerificaParametroMultiValor(CodCaracteristicas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    bPai :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOPAI) = 1)
      or (IntRelatorios.CampoAssociado(fNOMANIMALPAI) = 1)
      or (IntRelatorios.CampoAssociado(fDESAPELIDOPAI) = 1)
      or (CodFazendaManejoPai > 0)
      or (CodAnimalManejoPai <> '')
      or (NomAnimalPai <> '')
      or (DesApelidoPai <> '');

    bMae :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOMAE) = 1)
      or (CodFazendaManejoMae > 0)
      or (CodAnimalManejoMae <> '');

    bEvento :=
      not (bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fDESIDADE) = 1)
      or ((DtaInicioEvento > 0) and (DtaFimEvento > 0))
      or (IntRelatorios.CampoAssociado(fDtaAvaliacao) = 1);

    try
      // Cria tabela temporária de pesquisa, quando não existir
      EQuery.SQL.Text :=
        'if object_id(''tempdb..#tmp_relatorio_avaliacao'') is null '+
        'begin '+
        '  create table #tmp_relatorio_avaliacao '+
        '  ( '+
        '    cod_pessoa_produtor int not null '+
        '    , CodAnimalManejo varchar(11) null '+
        '    , cod_animal_pai int null '+
        '    , cod_rm_pai int null '+ 
        '    , cod_fazenda_manejo_pai int null '+
        '    , cod_animal_manejo_pai varchar(8) null '+
        '    , CodAnimalManejoPai varchar(11) null '+
        '    , NomAnimalPai varchar(60) null '+
        '    , DesApelidoPai varchar(20) null '+
        '    , cod_animal_mae int null '+
        '    , cod_fazenda_manejo_mae int null '+
        '    , cod_animal_manejo_mae varchar(8) null '+
        '    , CodAnimalManejoMae varchar(11) null '+
        '    , NomAnimal varchar(60) null '+
        '    , DesApelido varchar(20) null '+
        '    , NumRGD varchar(20) null '+
        '    , SglFazendaCorrente varchar(2) null '+
        '    , SglLocalCorrente varchar(2) null '+
        '    , SglLoteCorrente varchar(2) null '+
        '    , SglRaca varchar(3) null '+
        '    , DesRaca varchar(35) null '+
        '    , SglCategoriaAnimal varchar(3) null '+
        '    , DesIdade varchar(7) null '+
        '    , DesComposicaoRacial varchar(50) null '+
        '    , DtaNascimento smalldatetime null '+
        '    , IndSexo char(1) null '+
        '    , SglTipoAvaliacao varchar(5) null '+
        '    , DesTipoAvaliacao varchar(30) null '+
        '    , NomPessoaAvaliador varchar(50) null '+
        '    , SglCaracteristica varchar(4) null '+
        '    , DesCaracteristica varchar(30) null '+
        '    , SglUnidadeMedida varchar(10) null '+
        '    , ValAvaliacao decimal(4,1) null '+
        '    , DtaAvaliacao smalldatetime null '+        
        '  ) '+
        '  create index idx_tmp_avaliacao_pai on #tmp_relatorio_avaliacao (cod_pessoa_produtor, cod_animal_pai) '+
        '  create index idx_tmp_avaliacao_mae on #tmp_relatorio_avaliacao (cod_pessoa_produtor, cod_animal_mae) '+
        'end ';
      EQuery.ExecSQL;

      // Esvazia a tabela temporária
      EQuery.SQL.Text :=
        'truncate table #tmp_relatorio_avaliacao ';
      EQuery.ExecSQL;

      // Define quais campos seram populados
      EQuery.SQL.Clear;
      SQL('insert into #tmp_relatorio_avaliacao ', 0);
      SQL('( ', 0);
      SQL('  cod_pessoa_produtor ', 0);
      SQL('  , CodAnimalManejo ',                                                 fCODANIMALMANEJO );
      SQL('  , cod_animal_pai ',                                                  SE(bPai, 0, -1));
      SQL('  , cod_rm_pai ',                                                      SE(bPai, 0, -1));
      SQL('  , cod_animal_mae ',                                                  SE(bMae, 0, -1));
      SQL('  , NomAnimal ',                                                       fNOMANIMAL);
      SQL('  , DesApelido ',                                                      fDESAPELIDO);
      SQL('  , NumRGD ',                                                          fNUMRGD);
      SQL('  , SglFazendaCorrente ',                                              fSGLFAZENDACORRENTE);
      SQL('  , SglLocalCorrente ',                                                fSGLLOCALCORRENTE);
      SQL('  , SglLoteCorrente ',                                                 fSGLLOTECORRENTE);
      SQL('  , SglRaca ',                                                         fSGLRACA);
      SQL('  , DesRaca ',                                                         fDESRACA);
      SQL('  , SglCategoriaAnimal ',                                              fSGLCATEGORIAANIMAL);
      SQL('  , DesIdade ',                                                        fDESIDADE);
      SQL('  , DesComposicaoRacial ',                                             fDESCOMPOSICAORACIAL);
      SQL('  , DtaNascimento ',                                                   fDTANASCIMENTO);
      SQL('  , IndSexo ',                                                         fINDSEXO);
      SQL('  , SglTipoAvaliacao ',                                                fSGLTIPOAVALIACAO);
      SQL('  , DesTipoAvaliacao ',                                                fDESTIPOAVALIACAO);
      SQL('  , NomPessoaAvaliador ',                                              fNOMPESSOAAVALIADOR);
      SQL('  , SglCaracteristica ',                                               fSGLCARACTERISTICA);
      SQL('  , DesCaracteristica ',                                               fDESCARACTERISTICA);
      SQL('  , SglUnidadeMedida ',                                                fSGLUNIDADEMEDIDA);
      SQL('  , ValAvaliacao ',                                                    fVALAVALIACAO);
      SQL('  , DtaAvaliacao ',                                                    fDtaAvaliacao);
      SQL(') ', 0);

      // Obtem os dados que atendam aos critérios de pesquisa
      SQL('select ', 0);
      SQL('  taea.cod_pessoa_produtor ', 0);
      SQL('  , case when ta.cod_fazenda_manejo is null then '+
          '      ta.cod_animal_manejo '+
          '    else '+
          '      tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
          '    end ',                                                              fCODANIMALMANEJO);
      SQL('  , ta.cod_animal_pai ',                                                SE(bPai, 0, -1));
      SQL('  , ta.cod_reprodutor_multiplo ',                                       SE(bPai, 0, -1));      
      SQL('  , ta.cod_animal_mae ',                                                SE(bMae, 0, -1));
      SQL('  , ta.nom_animal ',                                                    fNOMANIMAL);
      SQL('  , ta.des_apelido ',                                                   fDESAPELIDO);
      SQL('  , ta.num_rgd ',                                                       fNUMRGD);
      SQL('  , tfc.sgl_fazenda ',                                                  fSGLFAZENDACORRENTE);
      SQL('  , tlc.sgl_local ',                                                    fSGLLOCALCORRENTE);
      SQL('  , tlt.sgl_lote  ',                                                    fSGLLOTECORRENTE);
      SQL('  , tr.sgl_raca ',                                                      fSGLRACA);
      SQL('  , tr.des_raca ',                                                      fDESRACA);
      SQL('  , tca.sgl_categoria_animal ',                                         fSGLCATEGORIAANIMAL);
      SQL('  , dbo.FNT_IDADE(ta.dta_nascimento, te.dta_inicio) ',                  fDESIDADE);
      SQL('  , dbo.FNT_COMPOSICAO_RACIAL(ta.cod_pessoa_produtor, ta.cod_animal) ', fDESCOMPOSICAORACIAL);
      SQL('  , ta.dta_nascimento ',                                                fDTANASCIMENTO);
      SQL('  , ta.ind_sexo ',                                                      fINDSEXO);
      SQL('  , tta.sgl_tipo_avaliacao ',                                           fSGLTIPOAVALIACAO);
      SQL('  , tta.des_tipo_avaliacao ',                                           fDESTIPOAVALIACAO);
      SQL('  , tps.nom_pessoa_secundaria ',                                        fNOMPESSOAAVALIADOR);
      SQL('  , tcla.sgl_caracteristica ',                                          fSGLCARACTERISTICA);
      SQL('  , tcla.des_caracteristica ',                                          fDESCARACTERISTICA);
      SQL('  , tum.sgl_unidade_medida ',                                           fSGLUNIDADEMEDIDA);
      SQL('  , taea.val_avaliacao ',                                               fVALAVALIACAO);
      SQL('  , te.dta_inicio as DtaAvaliacao ',                                    fDtaAvaliacao);
      SQL('from ', 0);
      SQL('  tab_animal_evento_avaliacao taea ', 0);
      SQL('  , tab_fazenda tfm ',                                                  fCODANIMALMANEJO);
      SQL('  , tab_evento te with (nolock) ',                                      SE(bEvento, 0, -1));
      SQL('  , tab_fazenda tfc ',                                                  fSGLFAZENDACORRENTE);
      SQL('  , tab_local tlc ',                                                    fSGLLOCALCORRENTE);
      SQL('  , tab_lote tlt ',                                                     fSGLLOTECORRENTE);
      SQL('  , tab_raca tr ',                                                      [fSGLRACA, fDESRACA]);
      SQL('  , tab_categoria_animal tca ',                                         fSGLCATEGORIAANIMAL);
      SQL('  , tab_animal ta with (nolock) ',                                      0);
      SQL('  , tab_tipo_avaliacao tta ',                                           [fSGLTIPOAVALIACAO, fDESTIPOAVALIACAO]);
      SQL('  , tab_pessoa_secundaria tps ',                                        fNOMPESSOAAVALIADOR);
      SQL('  , tab_evento_avaliacao tea ',                                         [fSGLTIPOAVALIACAO, fDESTIPOAVALIACAO, fNOMPESSOAAVALIADOR]);
      SQL('  , tab_unidade_medida tum ',                                           fSGLUNIDADEMEDIDA);
      SQL('  , tab_caracteristica_avaliacao tcla ',                                [fSGLCARACTERISTICA, fDESCARACTERISTICA, fSGLUNIDADEMEDIDA]);
      SQL('  , tab_composicao_racial as tcr with (nolock) ',                       SE(IndAgrupRaca1 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                      SE(IndAgrupRaca2 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                      SE(IndAgrupRaca3 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                      SE(IndAgrupRaca4 = 'N', 0, -1));
      SQL('where ', 0);
      SQL('  taea.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fCODANIMALMANEJO);
      SQL('  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ',                       fCODANIMALMANEJO);
      SQL('  and te.cod_pessoa_produtor = taea.cod_pessoa_produtor ',              SE(bEvento, 0, -1));
      SQL('  and te.cod_evento = taea.cod_evento ',                                SE(bEvento, 0, -1));
      SQL('  and tlc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fSGLLOCALCORRENTE);
      SQL('  and tlc.cod_local =* ta.cod_local_corrente ',                         fSGLLOCALCORRENTE);
      SQL('  and tlt.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fSGLLOTECORRENTE);
      SQL('  and tlt.cod_lote =* ta.cod_lote_corrente ',                           fSGLLOTECORRENTE);
      SQL('  and tfc.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fSGLFAZENDACORRENTE);
      SQL('  and tfc.cod_fazenda =* ta.cod_fazenda_corrente ',                     fSGLFAZENDACORRENTE);
      SQL('  and tr.cod_raca = ta.cod_raca ',                                      [fSGLRACA, fDESRACA]);
      SQL('  and tca.cod_categoria_animal = ta.cod_categoria_animal ',             fSGLCATEGORIAANIMAL);
      SQL('  and ta.cod_pessoa_produtor = taea.cod_pessoa_produtor ',              0);
      SQL('  and ta.cod_animal = taea.cod_animal ',                                0);
      SQL('  and tta.cod_tipo_avaliacao = tea.cod_tipo_avaliacao ',                [fSGLTIPOAVALIACAO, fDESTIPOAVALIACAO]);
      SQL('  and tps.cod_pessoa_produtor =* tea.cod_pessoa_produtor ',             fNOMPESSOAAVALIADOR);
      SQL('  and tps.cod_pessoa_secundaria =* tea.cod_pessoa_avaliador ',          fNOMPESSOAAVALIADOR);
      SQL('  and tea.cod_pessoa_produtor = taea.cod_pessoa_produtor ',             [fSGLTIPOAVALIACAO, fDESTIPOAVALIACAO, fNOMPESSOAAVALIADOR]);
      SQL('  and tea.cod_evento = taea.cod_evento ',                               [fSGLTIPOAVALIACAO, fDESTIPOAVALIACAO, fNOMPESSOAAVALIADOR]);
      SQL('  and tum.cod_unidade_medida = tcla.cod_unidade_medida ',               fSGLUNIDADEMEDIDA);
      SQL('  and tcla.cod_tipo_avaliacao = taea.cod_tipo_avaliacao ',              [fSGLCARACTERISTICA, fDESCARACTERISTICA, fSGLUNIDADEMEDIDA]);
      SQL('  and tcla.cod_caracteristica = taea.cod_caracteristica ',              [fSGLCARACTERISTICA, fDESCARACTERISTICA, fSGLUNIDADEMEDIDA]);
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and ta.cod_animal = tcr.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and ta.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and ta.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and ta.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;
      if Conexao.CodPapelUsuario = 3 then begin
         SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico or ta.cod_pessoa_tecnico is null) ', 0);
      end;
      if IndAgrupRaca1 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          EQuery.ParamByName('codraca1').AsInteger := CodRaca1;
          EQuery.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          EQuery.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          EQuery.ParamByName('codraca2').AsInteger := CodRaca2;
          EQuery.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          EQuery.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          EQuery.ParamByName('codraca3').AsInteger := CodRaca3;
          EQuery.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          EQuery.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          EQuery.ParamByName('codraca4').AsInteger := CodRaca4;
          EQuery.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          EQuery.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
      end;
      EQuery.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

      // Critérios de pesquisa
      if CodFazendaManejo > 0 then begin
        SQL('  and ta.cod_fazenda_manejo = :cod_fazenda_manejo ', 0);
        EQuery.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
        SQL('  and ta.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        EQuery.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoInicio;
        EQuery.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoFim;
      end;
      if (DtaNascimentoInicio > 0) and (DtaNascimentoFim > 0) then begin
        SQL('  and ( ta.dta_nascimento >= :dta_nascimento_inicio and ta.dta_nascimento < :dta_nascimento_fim ) ', 0);
        EQuery.ParamByName('dta_nascimento_inicio').AsDateTime := Trunc(DtaNascimentoInicio);
        EQuery.ParamByName('dta_nascimento_fim').AsDateTime := Trunc(DtaNascimentoFim)+1;
      end;
      if IndSexo <> '' then begin
        SQL('  and ta.ind_sexo = :ind_sexo ', 0);
        EQuery.ParamByName('ind_sexo').AsString := IndSexo;
      end;
      if CodRacas <> '' then begin
        SQL('  and ta.cod_raca in ( '+CodRacas+' ) ', 0);
      end;
      if CodCategorias <> '' then begin
        SQL('  and ta.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
      end;
      if CodLocais <> '' then begin
        SQL('  and ta.cod_local_corrente in ( '+CodLocais+' ) ', 0);
      end;
      if CodLotes <> '' then begin
        SQL('  and ta.cod_lote_corrente in ( '+CodLotes+' ) ', 0);
      end;
      if CodTipoAvaliacao > 0 then begin
        SQL('  and taea.cod_tipo_avaliacao = :cod_tipo_avaliacao ', 0);
        EQuery.ParamByName('cod_tipo_avaliacao').AsInteger := CodTipoAvaliacao;
      end;
      if CodCaracteristicas <> '' then begin
        SQL('  and taea.cod_caracteristica in ( '+CodCaracteristicas+' ) ', 0);
      end;
      if CodEvento > 0 then begin
        SQL('  and taea.cod_evento = :cod_evento ', 0);
        EQuery.ParamByName('cod_evento').AsInteger := CodEvento;
      end;
      if (DtaInicioEvento > 0) and (DtaFimEvento > 0) then begin
        SQL('  and ( te.dta_inicio >= :dta_inicio_evento and te.dta_fim < :dta_fim_evento ) ', 0);
        EQuery.ParamByName('dta_inicio_evento').AsDateTime := Trunc(DtaInicioEvento);
        EQuery.ParamByName('dta_fim_evento').AsDateTime := Trunc(DtaFimEvento)+1;
      end;
      if Conexao.CodPapelUsuario = 3 then begin
        EQuery.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;
      EQuery.ExecSQL;

      // Atualiza informações do pai quando necessário
      if bPai then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_avaliacao '+
          'set '+
          '  cod_fazenda_manejo_pai = tap.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = tap.cod_animal_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when tap.cod_fazenda_manejo is null then '+
          '        tap.cod_animal_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + tap.cod_animal_manejo '+
          '    end '+
          '  , NomAnimalPai = tap.nom_animal '+
          '  , DesApelidoPai = tap.des_apelido '+
          'from '+
          '    tab_animal tap '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* tap.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* tap.cod_fazenda_manejo '+
          '  and tap.cod_pessoa_produtor = #tmp_relatorio_avaliacao.cod_pessoa_produtor '+
          '  and tap.cod_animal = #tmp_relatorio_avaliacao.cod_animal_pai '+
          '  and #tmp_relatorio_avaliacao.cod_animal_pai is not null ';
        EQuery.ExecSQL;

        //Atualiza tabela temporária
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_avaliacao ' +
          'set '+
          '    cod_fazenda_manejo_pai = trm.cod_fazenda_manejo ' +
          '  , cod_animal_manejo_pai =  trm.cod_reprodutor_multiplo_manejo ' +
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when trm.cod_fazenda_manejo is null then '+
          '        trm.cod_reprodutor_multiplo_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + trm.cod_reprodutor_multiplo_manejo '+
          '    end '+
          '  , NomAnimalPai = null '+
          '  , DesApelidoPai = null '+
          'from '+
          '    tab_reprodutor_multiplo trm '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* trm.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* trm.cod_fazenda_manejo '+
          '  and trm.cod_pessoa_produtor = #tmp_relatorio_avaliacao.cod_pessoa_produtor '+
          '  and trm.cod_reprodutor_multiplo = #tmp_relatorio_avaliacao.cod_rm_pai '+
          '  and #tmp_relatorio_avaliacao.cod_rm_pai is not null ';
        EQuery.ExecSQL;
      end;

      // Atualiza informações da mãe quando necessário
      if bMae then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_avaliacao '+
          'set '+
          '  cod_fazenda_manejo_mae = tam.cod_fazenda_manejo '+
          '  , cod_animal_manejo_mae = tam.cod_animal_manejo '+
          '  , CodAnimalManejoMae = '+
          '    case '+
          '      when tam.cod_fazenda_manejo is null then '+
          '        tam.cod_animal_manejo '+
          '      else '+
          '        tfmm.sgl_fazenda + '' '' + tam.cod_animal_manejo '+
          '    end '+
          'from '+
          '  tab_animal tam '+
          '  , tab_fazenda tfmm '+
          'where '+
          '  tfmm.cod_pessoa_produtor =* tam.cod_pessoa_produtor '+
          '  and tfmm.cod_fazenda =* tam.cod_fazenda_manejo '+
          '  and tam.cod_pessoa_produtor = #tmp_relatorio_avaliacao.cod_pessoa_produtor '+
          '  and tam.cod_animal = #tmp_relatorio_avaliacao.cod_animal_mae '+
          '  and #tmp_relatorio_avaliacao.cod_animal_mae is not null ';
        EQuery.ExecSQL;
      end;

      // Recupera os dados que serão apresentados no relatório
      EQuery.SQL.Clear;
      SQL('select ', 0);
      SQL('  distinct null ', 0);
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := '  , '+IntRelatorios.ValorCampo('NomField');
        SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1));
        IntRelatorios.IrAoProximo;
      end;
      SQL('from ', 0);
      SQL('  #tmp_relatorio_avaliacao ', 0);
      SQL('where ', 0);
      SQL('  cod_pessoa_produtor is not null ', 0);

      // Critérios referentes aos pais dos animais
      if CodFazendaManejoPai > 0 then begin
        SQL('  and cod_fazenda_manejo_pai = :cod_fazenda_manejo_pai ', 0);
        EQuery.ParamByName('cod_fazenda_manejo_pai').AsInteger := CodFazendaManejoPai;
      end;
      if CodAnimalManejoPai <> '' then begin
        SQL('  and cod_animal_manejo_pai = :cod_animal_manejo_pai ', 0);
        EQuery.ParamByName('cod_animal_manejo_pai').AsString := CodAnimalManejoPai;
      end;
      if NomAnimalPai <> '' then begin
        SQL('  and NomAnimalPai like :NomAnimalPai ', 0);
        EQuery.ParamByName('NomAnimalPai').AsString := NomAnimalPai + '%';
      end;
      if DesApelidoPai <> '' then begin
        SQL('  and DesApelidoPai like :DesApelidoPai ', 0);
        EQuery.ParamByName('DesApelidoPai').AsString := DesApelidoPai + '%';
      end;
      if CodFazendaManejoMae > 0 then begin
        SQL('  and cod_fazenda_manejo_mae = :cod_fazenda_manejo_mae ', 0);
        EQuery.ParamByName('cod_fazenda_manejo_mae').AsInteger := CodFazendaManejoMae;
      end;
      if CodAnimalManejoMae <> '' then begin
        SQL('  and cod_animal_manejo_mae = :cod_animal_manejo_mae ', 0);
        EQuery.ParamByName('cod_animal_manejo_mae').AsString := CodAnimalManejoMae;
      end;

      // Realiza "order by" por campos selecionados
      SQL('order by ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := SE(bAux, '  , ', '  ')+IntRelatorios.ValorCampo('NomField');
        if SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
          and not(bAux) then bAux := True;
        IntRelatorios.IrAoProximo;
      end;

      // Realiza consulta a massa de dados preparada
      EQuery.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      on E: exception do begin
        Rollback;
        iAux := Length(strExceedsTheConfiguredThreshold);
        if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
          Result := idExceedsTheConfiguredThreshold;
        end else begin
          Mensagens.Adicionar(1522, Self.ClassName, NomMetodo, [E.Message]);
          Result := -1522;
        end;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.GerarRelatorioAvaliacao(CodEvento: Integer;
  DtaInicioEvento, DtaFimEvento: TDateTime; CodTipoAvaliacao: Integer;
  CodCaracteristicas: String; CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim: String;
  CodFazendaManejoPai: Integer; CodAnimalManejoPai, NomAnimalPai,
  DesApelidoPai: String; CodFazendaManejoMae: Integer;
  CodAnimalManejoMae: String; DtaNascimentoInicio,
  DtaNascimentoFim: TDateTime; IndSexo, CodRacas, CodCategorias, CodLocais,
  CodLotes, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; Tipo, QtdQuebraRelatorio, CodTarefa,
  CodPessoaProdutor: Integer): String;
const
  Metodo:        Integer = 454;
  NomeMetodo:    String  = 'GerarRelatorioAvaliacao';
  CodRelatorio:  Integer = 16;
  CodTipoTarefa: Integer = 5;
var
  Rel: TRelatorioPadrao;
  Retorno, X, iAux: Integer;
  sQuebra, sAux, NomPessoaProdutor: String;
  Qry: THerdomQuery;
begin
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    if CodTarefa > 0 then
    begin
      Conexao.DefinirProdutorTrabalho(CodPessoaProdutor, NomPessoaProdutor);
    end;
    if Conexao.CodProdutorTrabalho = -1 then
    begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Exit;
    end;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);
  try
    {Realiza pesquisa de avaliações de acordo com os critérios informados}
    Retorno := PesquisarRelatorioAvaliacao(Qry, CodEvento, DtaInicioEvento,
                                           DtaFimEvento, CodTipoAvaliacao, CodCaracteristicas, CodFazendaManejo,
                                           CodAnimalManejoInicio, CodAnimalManejoFim, CodFazendaManejoPai,
                                           CodAnimalManejoPai, NomAnimalPai, DesApelidoPai, CodFazendaManejoMae,
                                           CodAnimalManejoMae, DtaNascimentoInicio, DtaNascimentoFim, IndSexo,
                                           CodRacas, CodCategorias, CodLocais, CodLotes, IndAgrupRaca1, CodRaca1,
                                           QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                           QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                           QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
                                           QtdCompRacialInicio4, QtdCompRacialFim4, CodTarefa);

    if Retorno < 0 then begin
      if Retorno = idExceedsTheConfiguredThreshold then begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodEvento, DtaInicioEvento,
                                                              DtaFimEvento, CodTipoAvaliacao, CodCaracteristicas,
                                                              CodFazendaManejo, CodAnimalManejoInicio,
                                                              CodAnimalManejoFim, CodFazendaManejoPai,
                                                              CodAnimalManejoPai, NomAnimalPai, DesApelidoPai,
                                                              CodFazendaManejoMae, CodAnimalManejoMae,
                                                              DtaNascimentoInicio, DtaNascimentoFim, IndSexo,
                                                              CodRacas, CodCategorias, CodLocais, CodLotes,
                                                              IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                                              QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                              QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
                                                              CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                              IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                                              QtdCompRacialFim4, Tipo, QtdQuebraRelatorio,
                                                              Conexao.CodProdutorTrabalho]);

        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodEvento, DtaInicioEvento,
                                                              DtaFimEvento, CodTipoAvaliacao, CodCaracteristicas,
                                                              CodFazendaManejo, CodAnimalManejoInicio,
                                                              CodAnimalManejoFim, CodFazendaManejoPai,
                                                              CodAnimalManejoPai, NomAnimalPai, DesApelidoPai,
                                                              CodFazendaManejoMae, CodAnimalManejoMae,
                                                              DtaNascimentoInicio, DtaNascimentoFim, IndSexo,
                                                              CodRacas, CodCategorias, CodLocais, CodLotes,
                                                              IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                                              QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                              QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
                                                              CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                              IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                                              QtdCompRacialFim4, Tipo, QtdQuebraRelatorio,
                                                              Conexao.CodProdutorTrabalho], DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then begin
      Mensagens.Adicionar(1498, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      Rel.TipoDoArquvio := Tipo;

      {Define o relatório em questão e carrega os seus dados específicos}
      Retorno := Rel.CarregarRelatorio(CodRelatorio);
      if Retorno < 0 then Exit;

      {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
      if CodTarefa > 0 then begin
        Rel.CodTarefa := CodTarefa;
      end;

      {Consiste se número de campos do relatório é maior ou igual ao de quebras}
      if Rel.Campos.NumCampos < QtdQuebraRelatorio then begin
        Mensagens.Adicionar(1119, Self.ClassName, NomeMetodo, []);
        Exit;
      end;

      {Desabilita a apresentação dos campos selecionados para quebra}
      Rel.Campos.IrAoPrimeiro;
      for iAux := 1 to QtdQuebraRelatorio do begin
        Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
        Rel.Campos.IrAoProximo;
      end;

      {Inicializa o procedimento de geração do arquivo de relatório}
      Retorno := Rel.InicializarRelatorio;
      if Retorno < 0 then Exit;

      sQuebra := '';
      Qry.First;
      while not Qry.EOF do begin
        if QtdQuebraRelatorio > 0 then begin
          {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
          Rel.Campos.CarregarValores(Qry);
          {Percorre o(s) campo(s) informado(s) para quebra}
          Rel.Campos.IrAoPrimeiro;
          sAux := '';
          for iAux := 1 to QtdQuebraRelatorio do begin
            {Concatena o valor dos campos de quebra, montando o título}
            sAux := SE(sAux = '', sAux, sAux + ' / ') +
              TrataQuebra(Rel.Campos.Campo.TxtTitulo) + ': ' +
              Rel.Campos.Campo.Valor;
            Rel.Campos.IrAoProximo;
          end;
          if (sAux <> sQuebra) then begin
            {Se ocorreu mudança na quebra atual ou é a primeira ('')}
            sQuebra := sAux;
            if Rel.LinhasRestantes <= 2 then begin
              {Se ñ couber uma linha de registro na pag. atual, quebra página}
              Rel.NovaPagina;
            end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
              {Salta uma linha antes da quebra}
              Rel.NovaLinha;
            end;
            {Imprime título da quebra}
            Rel.ImprimirTexto(0, sQuebra);
          end;
        end;
        Rel.ImprimirColunasResultSet(Qry);
        Qry.Next;
      end;
      Retorno := Rel.FinalizarRelatorio;
      {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
      if Retorno = 0 then begin
        Result := Rel.NomeArquivo;
      end;
    finally
      Rel.Free;
    end;
  Finally
    Qry.Free;
  end;
end;

function TIntEventos.VerificaEstacaoMonta(
  var InfoEstacaoMonta: TInfoEstacaoMonta): Integer;
const
  NomeMetodo: String = 'VerificaEstacaoMonta';
  CodTipoEvento: Integer = 24;
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Text :=
        'select '+
        '  cod_fazenda '+
        '  , dta_inicio '+
        '  , dta_fim '+
        '  , cod_tipo_evento '+
        'from '+
        '  tab_evento '+
        'where '+
        '  cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and cod_evento = :cod_evento ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := InfoEstacaoMonta.CodEventoEstacaoMonta;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(1527, Self.ClassName, NomeMetodo, []);
        Result := -1527;
        Exit;
      end;

      if Q.FieldByName('cod_tipo_evento').AsInteger <> CodTipoEvento then begin
        Mensagens.Adicionar(1528, Self.ClassName, NomeMetodo, []);
        Result := -1528;
        Exit;
      end;

      InfoEstacaoMonta.CodFazenda := Q.FieldByName('cod_fazenda').AsInteger;
      InfoEstacaoMonta.DtaInicio := Q.FieldByName('dta_inicio').AsDateTime;
      InfoEstacaoMonta.DtaFim := Q.FieldByName('dta_fim').AsDateTime;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1352, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1352;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaParticipacaoTouroRMRegimePasto(CodAnimal: Integer;
  IndTouro: String; DtaInicio, DtaFim: TDatetime): Integer;
const
  NomeMetodo: String = 'VerificaParticipacaoTouroRMRegimePasto';
var
  Q : THerdomQuery;
  sTouroRM: String;
begin
  if IndTouro = 'S' then begin
    sTouroRM := 'touro';
  end else begin
    sTouroRM := 'reprodutor múltiplo';
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Text :=
        'select '+
        '  count(1) '+
        'from '+
        '  tab_evento te '+
        '  , tab_evento_cobertura_reg_pasto tecrp '+
        'where '+
        '  te.cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and tecrp.cod_pessoa_produtor = te.cod_pessoa_produtor '+
        '  and tecrp.cod_evento = te.cod_evento '+
        '  and (( te.dta_inicio >= :dta_inicio and te.dta_inicio < :dta_fim ) '+
        '         or ( te.dta_fim >= :dta_inicio and te.dta_fim < :dta_fim )) ';
      if IndTouro = 'S' then begin
        Q.SQL.Text := Q.SQL.Text +
          '  and tecrp.cod_animal_touro = :cod_animal_touro_rm ';
      end else begin
        Q.SQL.Text := Q.SQL.Text +
          '  and tecrp.cod_reprodutor_multiplo = :cod_animal_touro_rm ';
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal_touro_rm').AsInteger := CodAnimal;
      Q.ParamByName('dta_inicio').AsDateTime := Trunc(DtaInicio);
      Q.ParamByName('dta_fim').AsDateTime := Trunc(DtaFim)+1;
      Q.Open;
      if Q.Fields[0].AsInteger > 0 then begin
        Mensagens.Adicionar(1532, Self.ClassName, NomeMetodo, [sTouroRM]);
        Result := -1532;
        Exit;
      end;

      if IndTouro = 'S' then begin
        // Verifica o touro pertence a algum RM
        Q.SQL.Clear;
        Q.SQL.Text :=
          'select '+
          '  cod_reprodutor_multiplo '+
          'from '+
          '  tab_animal_reprodutor_multiplo '+
          'where '+
          '  cod_pessoa_produtor = :cod_pessoa_produtor '+
          '  and cod_animal = :cod_animal ';
        Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
        if not Q.IsEmpty then begin
          Result := VerificaParticipacaoTouroRMRegimePasto(
            Q.Fields[0].AsInteger, 'N', DtaInicio, DtaFim);
          Exit;
        end;
      end;

      // Identifica passo como bem sucedido
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1533, Self.ClassName, NomeMetodo, [sTouroRM, E.Message]);
        Result := -1533;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaParticipacaoFemeaRegimePasto(
  CodAnimal: Integer; DtaInicio, DtaFim: TDatetime): Integer;
const
  NomeMetodo: String = 'VerificaParticipacaoFemeaRegimePasto';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Text :=
        'select '+
        '  count(1) '+
        'from '+
        '  tab_evento te '+
        '  , tab_animal_evento tae '+
        'where '+
        '  tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
        '  and tae.cod_evento = te.cod_evento '+
        '  and te.cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and te.cod_tipo_evento = 23 '+ // RP
        '  and tae.cod_animal = :cod_animal '+
        '  and (( te.dta_inicio >= :dta_inicio and te.dta_inicio < :dta_fim ) '+
        '         or ( te.dta_fim >= :dta_inicio and te.dta_fim < :dta_fim )) ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.ParamByName('dta_inicio').AsDateTime := Trunc(DtaInicio);
      Q.ParamByName('dta_fim').AsDateTime := Trunc(DtaFim)+1;
      Q.Open;
      if Q.Fields[0].AsInteger > 0 then begin
        Mensagens.Adicionar(1534, Self.ClassName, NomeMetodo, []);
        Result := -1534;
        Exit;
      end;

      // Identifica passo como bem sucedido
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1535, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1535;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.VerificaFemeaEstacaoMonta(
  CodEventoEstacaoMonta, CodAnimal: Integer): Integer;
const
  NomeMetodo: String = 'VerificaFemeaEstacaoMonta';
var
  Q : THerdomQuery;
begin
  Q := THerdomQuery.Create(Conexao, nil);
  try
    try
      Q.SQL.Clear;
      Q.SQL.Text :=
        'select '+
        '  1 '+
        'from '+
        '  tab_animal_evento '+
        'where '+
        '  cod_pessoa_produtor = :cod_pessoa_produtor '+
        '  and cod_evento = :cod_evento '+
        '  and cod_animal = :cod_animal ';
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEventoEstacaoMonta;
      Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1536, Self.ClassName, NomeMetodo, []);
        Result := -1536;
        Exit;
      end;

      // Identifica passo como bem sucedido
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1537, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1537;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.InserirParto(DtaEvento: TDateTime; CodFazenda: Integer;
  TxtObservacao: String; CodGrauDificuldade, CodSituacaoCria,
  CodEstacaoMonta: Integer; CodAnimalManejoCria,
  IndSexoCria: String; CodPelagemCria: Integer; QtdPesagemCria: Double;
  CodAnimalManejoGemeo, IndSexoGemeo: String; CodPelagemGemeo:Integer;
  QtdPesagemGemeo:Double; CodAnimalFemea, CodFazendaManejoFemea: Integer;
  CodAnimalManejoFemea: String; IndCodSisBovReservado:String): String;
const
  Metodo: Integer = 464;
  NomeMetodo: String = 'InserirParto';
  CodTipoEvento: Integer = 30;
  numCNPJCPFTecnico: String = '';
var
  Q: THerdomQuery;
  Q1: THerdomQuery;
  X, CodEvento: Integer;
  DtaMaxEvento: TDateTime;
  CodEspecie, CodAptidao, CodRaca, CodReprodutorMultiplo, CodAnimalTouro: Integer;
  CodRegimeAlimentar, CodLote, CodLocal, CodTipoLugar, CodFazendaCorrente: Integer;
  DtaMinimaCobert, DtaMaximaCobert, DtaProvavelCobertura, DtaCobertura : TDateTime;
  CodAnimalAux, QtdDiasGestacao, IndOrdemParto, PeriodoEntrePartos: Integer;
  CodEventoCobertura: Integer;
  CodSituacaoSisBov, NomFazenda: String;
  InfoEstacaoMonta: TInfoEstacaoMonta;
  CodAptidaoFemea: Integer;
  CodCategoria: Integer;
  Cont: Integer;
  Animais: TIntAnimais;
  Resultado, CodAnimalCria: Integer;
  IndPaternidadeDuvidosa: String;
  DtaAplicacaoEvento: TDateTime;
  DadosAnimal: TDadosAnimal;
  ChecaAnimal : Boolean;
  CodPessoaTecnico: Integer;
begin
  Result := '';
  CodEspecie := -1;
  CodAptidao := -1;
  CodRaca := -1;
  DtaCobertura := 0;
  CodEventoCobertura:=0;
  CodReprodutorMultiplo := -1;
  CodAnimalCria := 0;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := '';
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := '';
    Exit;
  end;

  if Conexao.CodPapelUsuario = 3 then begin
     CodPessoaTecnico := Conexao.CodPapelUsuario;
  end else begin
     CodPessoaTecnico := -1;
  end;
  
  if IndCodSisBovReservado <> 'S' then
     IndCodSisBovReservado := 'N';

  // Trata fazenda
  Resultado := VerificaFazenda(CodFazenda, true, 'Fazenda', NomFazenda);
  if Resultado < 0 then Exit;

  // Trata campo Observação
  Resultado := TrataString(TxtObservacao, 255, 'Observação');
  if Resultado < 0 then Exit;

  //verifica se o grau de dificuldade é válido
  Resultado := VerificaGrauDificuldade(CodGrauDificuldade);
  if Resultado < 0 then Exit;

  //verifica se a situacao da cria
  Resultado := VerificaSituacaoCria(CodSituacaoCria);
  if Resultado < 0 then Exit;

  case CodSituacaoCria of
  1,6:begin // os dados para gemeos não podem ser informados
    if (CodAnimalManejoGemeo <> '') or (IndSexoGemeo <> '') or (CodPelagemGemeo > 0) then begin
       Mensagens.Adicionar(1544, Self.ClassName, NomeMetodo, []);
       Result := '';
       Exit;
    end;
    if (CodAnimalManejoCria = '') or (IndSexoCria = '') or (CodPelagemCria <= 0) then begin
       Mensagens.Adicionar(1545, Self.ClassName, NomeMetodo, []);
       Result := '';
       Exit;
    end;
  end;
  2:begin // todos os dados da cria e do gêmeo devem ser informados
    if (CodAnimalManejoCria = '') or (IndSexoCria = '') or (CodPelagemCria <= 0) or
       (CodAnimalManejoGemeo = '') or (IndSexoGemeo = '') or (CodPelagemGemeo <= 0) then begin
       Mensagens.Adicionar(1546, Self.ClassName, NomeMetodo, []);
       Result := '';
       Exit;
    end;
  end;
  else
    if (CodAnimalManejoCria <> '') or (IndSexoCria <> '') or (CodPelagemCria > 0) or
       (CodAnimalManejoGemeo <> '') or (IndSexoGemeo <> '') or (CodPelagemGemeo > 0) then begin
       Mensagens.Adicionar(1547, Self.ClassName, NomeMetodo, []);
       Result := '';
       Exit;
    end;
  end;

  // Consiste e obtem estação de monta informada
  InfoEstacaoMonta.CodEventoEstacaoMonta := CodEstacaoMonta;
  Resultado := VerificaEstacaoMonta(InfoEstacaoMonta);
  if Resultado < 0 then Exit;

{
  * Alterado em 16/09/2004 a pedido da Sra. Gracielle que requisitou que o
  animal fêmea localizado em uma fazenda X possa ter o evento de parto
  associado ao evento de estação de monta de outra fazenda Y. Para atender
  a essa situação a consistência a seguir foi inativada.
  // Consiste se a fazenda informada para o evento é a mesma da estação de monta
  if CodFazenda <> InfoEstacaoMonta.CodFazenda then begin
    Mensagens.Adicionar(1530, Self.ClassName, NomeMetodo, []);
    Result := '';
    Exit;
  end;
}

  //consistências para fêmea
  if (CodFazendaManejoFemea < 0) and (CodAnimalManejoFemea = '') and (CodAnimalFemea < 0) then begin
     Mensagens.Adicionar(1472, Self.ClassName, NomeMetodo, []);
     Result := '';
     Exit;
  end;

  if CodFazendaManejoFemea > 0 then begin
     if CodAnimalManejoFemea <> '' then begin
        if (CodAnimalFemea > 0) then begin
           Mensagens.Adicionar(1473, Self.ClassName, NomeMetodo, []);
           Result := '';
           Exit;
        end;
     end else begin
        Mensagens.Adicionar(1410, Self.ClassName, NomeMetodo, []);
        Result := '';
        Exit;
     end;
  end;

  if CodAnimalFemea > 0 then begin
     if (CodFazendaManejoFemea > 0) or (CodAnimalManejoFemea <> '') then begin
        Mensagens.Adicionar(1474, Self.ClassName, NomeMetodo, []);
        Result := '';
        Exit;
     end;
  end;

  Q := THerdomQueryNavegacao.Create(nil);
  try
    try
      Q.SQLConnection := Conexao.SQLConnection;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select getdate() dta_aplicacao_evento ' );
{$ENDIF}
      Q.Open;
      DtaAplicacaoEvento := Q.Fieldbyname('dta_aplicacao_evento').asdatetime;

      // verifica os dados da fêmea
      Q.SQL.Clear;
      Q.SQL.Add('select cod_animal, cod_especie, cod_aptidao, cod_especie, cod_situacao_sisbov, cod_raca, '+
                ' cod_regime_alimentar, cod_tipo_lugar, cod_local_corrente, cod_lote_corrente, cod_fazenda_corrente, cod_pessoa_tecnico  '+
                ' from tab_animal '+
                ' where dta_fim_validade is null '+
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      if CodAnimalFemea > 0 then
         Q.SQL.Add(' and cod_animal = :cod_animal ')
      else
         Q.SQL.Add(' and cod_animal_manejo =:cod_animal_manejo '+
                   ' and cod_fazenda_manejo =:cod_fazenda_manejo ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      if CodAnimalFemea > 0 then
         Q.ParamByName('cod_animal').asinteger := CodAnimalFemea
      else begin
         Q.ParamByName('cod_animal_manejo').asstring := CodAnimalManejoFemea;
         Q.ParamByName('cod_fazenda_manejo').asinteger := CodFazendaManejoFemea;
      end;
      Q.Open;
      if (Q.IsEmpty) then begin
         Mensagens.Adicionar(1549, Self.ClassName, NomeMetodo, []);
         Result := '';
         Exit;
      end;

      CodAnimalFemea := Q.Fieldbyname('cod_animal').asinteger;

      // Verifica se a fêmea pertece a outro tecnico
      if not Q.Fieldbyname('cod_pessoa_tecnico').IsNull then begin
        if Conexao.CodPapelUsuario = 3 then begin
          if Q.Fieldbyname('cod_pessoa_tecnico').AsInteger <> Conexao.CodPessoa then begin
            Mensagens.Adicionar(1698, Self.ClassName, NomeMetodo, [CodAnimalManejoFemea]);
            Result := '';
            Exit;
          end;
        end;
      end;

      // Verifica se fêmea pertence a estação de monta do evento
      Resultado := VerificaFemeaEstacaoMonta(CodEstacaoMonta, CodAnimalFemea);
      if Resultado < 0 then Exit;

      CodRegimeAlimentar := Q.Fieldbyname('cod_regime_alimentar').asinteger;
      CodLote := Q.Fieldbyname('cod_lote_corrente').asinteger;
      CodLocal := Q.Fieldbyname('cod_local_corrente').asinteger;
      CodTipoLugar := Q.Fieldbyname('cod_tipo_lugar').asinteger;
      CodFazendaCorrente := Q.Fieldbyname('cod_fazenda_corrente').asinteger;
      if CodRaca <= 0 then begin
         CodRaca := Q.Fieldbyname('cod_raca').asinteger;
         CodEspecie:= Q.Fieldbyname('cod_especie').asinteger;
         if Q.Fieldbyname('cod_situacao_sisbov').asstring = 'N'
            then CodSituacaoSisBov:= 'N'
            else CodSituacaoSisBov:= 'P';
         CodAptidao:= Q.Fieldbyname('cod_aptidao').asinteger;
      end;

      //verifica se a vaca participou de algum evento de cobertura nesta estação
      Q.SQL.Clear;
      Q.SQL.Add('select 1 '+
                ' from tab_evento te, tab_animal_evento tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_tipo_evento in (23,26,27) '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal ');
      Q.Parambyname('cod_animal').AsInteger := CodAnimalFemea;
      Q.Parambyname('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_estacao_monta').AsInteger := CodEstacaoMonta;
      Q.Open;

      if Q.IsEmpty then begin
        if CodSituacaoCria in [1,2,6] then begin
          Mensagens.Adicionar(1555, Self.ClassName, NomeMetodo, []);
          DtaCobertura := 0;
        end;
      end else begin
        //verifica se a vaca participou de monta e se existe outros possiveis pais
        Q.SQL.Clear;
        Q.SQL.Add('select qtd_min_dias_gestacao, qtd_max_dias_gestacao '+
                  ' from tab_raca '+
                  ' where cod_raca = :cod_raca ');
        Q.ParamByName('cod_raca').asinteger := CodRaca;
        Q.Open;
        DtaMinimaCobert := DtaEvento - Q.Fieldbyname('qtd_max_dias_gestacao').asinteger;
        DtaMaximaCobert := DtaEvento - Q.Fieldbyname('qtd_min_dias_gestacao').asinteger;
        DtaProvavelCobertura := DtaEvento - ((Q.Fieldbyname('qtd_max_dias_gestacao').asinteger + Q.Fieldbyname('qtd_min_dias_gestacao').asinteger) div 2);

        if CodSituacaoCria = 6 then
           DtaMaximaCobert := DtaMaximaCobert + StrtoInt(ValorParametro(63));

        Cont := 1;
        while Cont <= 3 do begin
          Q.SQL.Clear;
{$IFDEF MSSQL}
          Q.SQL.Add('select cod_evento, dta_inicio, dta_fim, cod_animal_touro, cod_reprodutor_multiplo, cod_tipo_evento from ('+
                    ' select te.cod_evento, te.dta_inicio, te.dta_fim, tem.cod_animal_touro, null as cod_reprodutor_multiplo, te.cod_tipo_evento '+
                    ' from tab_evento_monta_controlada as tem, '+
                    '      tab_evento as te, '+
                    '      tab_animal_evento as tae '+
                    ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                    ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                    ' and   te.cod_evento = tae.cod_evento '+
                    ' and   tae.cod_animal = :cod_animal_femea  '+
                    ' and   te.cod_tipo_evento = 27 '+
                    ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                    ' and   te.cod_evento = tem.cod_evento '+
                    ' and   te.cod_evento_associado = :cod_estacao_monta ');
          if CodSituacaoCria <> 5 then
             Q.SQL.Add(' and   te.dta_inicio between :dta_minima and :dta_maxima ');
          Q.SQL.Add(' union '+
                    ' select te.cod_evento, te.dta_inicio, te.dta_fim, tem.cod_animal as cod_animal_touro, null as cod_reprodutor_multiplo, te.cod_tipo_evento '+
                    ' from tab_evento_insemin_artificial as tem, '+
                    '      tab_evento as te, '+
                    '     tab_animal_evento as tae '+
                    ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                    ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                    ' and   te.cod_evento = tae.cod_evento '+
                    ' and   tae.cod_animal = :cod_animal_femea '+
                    ' and   te.cod_tipo_evento = 26 '+
                    ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                    ' and   te.cod_evento = tem.cod_evento '+
                    ' and   te.cod_evento_associado = :cod_estacao_monta ');
          if CodSituacaoCria <> 5 then
             Q.SQL.Add(' and   te.dta_inicio between :dta_minima and :dta_maxima ');
          Q.SQL.Add(' union '+
                    ' select te.cod_evento, te.dta_inicio, te.dta_fim, tem.cod_animal_touro, tem.cod_reprodutor_multiplo, te.cod_tipo_evento '+
                    ' from tab_evento_cobertura_reg_pasto as tem, '+
                    '      tab_evento as te, '+
                    '     tab_animal_evento as tae '+
                    ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                    ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                    ' and   te.cod_evento = tae.cod_evento '+
                    ' and   tae.cod_animal = :cod_animal_femea '+
                    ' and   te.cod_tipo_evento = 23 '+
                    ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                    ' and   te.cod_evento = tem.cod_evento '+
                    ' and   te.cod_evento_associado = :cod_estacao_monta ');
          if CodSituacaoCria <> 5 then
             Q.SQL.Add(' and   ((te.dta_inicio between :dta_minima and :dta_maxima '+
                       '       or te.dta_fim between :dta_minima and :dta_maxima) ' +
                       '       or (te.dta_inicio <=:dta_minima and te.dta_fim >=:dta_maxima)) ');
          Q.SQL.Add(' ) as tabela ');
          if CodSituacaoCria <> 5 then
             Q.SQL.Add(' order by abs(cast(dta_inicio-:dta_provavel_cobertura as int)) ');
{$ENDIF}
          Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
          Q.Parambyname('cod_animal_femea').asinteger := CodAnimalFemea;
          Q.Parambyname('cod_estacao_monta').asinteger := CodEstacaoMonta;
          if CodSituacaoCria <> 5 then begin
             Q.Parambyname('dta_maxima').asdatetime := DtaMaximaCobert;
             Q.Parambyname('dta_minima').asdatetime := DtaMinimaCobert;
             Q.Parambyname('dta_provavel_cobertura').asdatetime := DtaProvavelCobertura;
          end;
          Q.Open;

          if not Q.IsEmpty then begin
            Break;
          end else begin
            DtaMaximaCobert := DtaMaximaCobert + 90;
            Cont := Cont + 1;
          end;
        end;

//      Se não foi encontrado o possível pai, cadastra a cria sem o pai e depois
//      este será informado.
        if Q.IsEmpty then begin
          if CodSituacaoCria in [1,2,6] then begin
            Mensagens.Adicionar(1620, Self.ClassName, NomeMetodo, []);
//            Exit;
          end;
        end else begin
          Q1 := THerdomQuery.Create(Conexao, nil);
          try
            try
              //verifica se a vaca foi coberta por mais de um touro
              if not Q.IsEmpty then begin
                while not Q.Eof do begin
                  if not Q.Fieldbyname('cod_animal_touro').IsNull then begin
                    //Pega a raça pai, touro
                    Q1.SQL.Clear;
                    Q1.SQL.Add('select top 1 '+
                               '       cod_raca  '+
                               ' from tab_animal '+
                               ' where cod_animal = :cod_animal '+
                               '   and cod_pessoa_produtor = :cod_pessoa_produtor ');
                    Q1.ParamByName('cod_animal').asinteger := Q.Fieldbyname('cod_animal_touro').AsInteger;
                    Q1.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
                    Q1.Open;

                    if not Q1.IsEmpty then begin
                      CodRaca := Q1.Fieldbyname('cod_raca').asinteger;
                    end;

                    break;
                  end;
                  Q.Next;
                end;

                IndPaternidadeDuvidosa := 'S'
              end else begin
                if Q.RecordCount = 1 then begin
                  //Pega a raça pai, touro ou do RM
                  if not Q.Fieldbyname('cod_animal_touro').IsNull then begin
                    Q1.SQL.Clear;
                    Q1.SQL.Add('select top 1 '+
                              '        cod_raca  '+
                              ' from tab_animal '+
                              ' where cod_animal = :cod_animal '+
                              '   and cod_pessoa_produtor = :cod_pessoa_produtor ');
                    Q1.ParamByName('cod_animal').asinteger := Q.Fieldbyname('cod_animal_touro').AsInteger;
                    Q1.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
                    Q1.Open;

                    if not Q1.IsEmpty then begin
                      CodRaca := Q1.Fieldbyname('cod_raca').asinteger;
                    end;
                  end else begin
                    // Se o pai for um RM, pega a raça do primeiro touro que encontrar
                    if not Q.Fieldbyname('cod_reprodutor_multiplo').IsNull then begin
                      Q1.SQL.Clear;
                      Q1.SQL.Add('select top 1 '+
                                 '       ta.cod_raca '+
                                 ' from tab_reprodutor_multiplo trm '+
                                 '    , tab_animal_reprodutor_multiplo tarm '+
                                 '    , tab_animal ta '+
                                 'where trm.cod_pessoa_produtor = :cod_pessoa_produtor '+
                                 'and   trm.cod_reprodutor_multiplo = :cod_rm '+
                                 'and   trm.cod_reprodutor_multiplo = tarm.cod_reprodutor_multiplo '+
                                 'and   tarm.cod_animal = ta.cod_animal ');
                      Q1.ParamByName('cod_rm').asinteger := Q.Fieldbyname('cod_reprodutor_multiplo').AsInteger;
                      Q1.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
                      Q1.Open;

                      if not Q1.IsEmpty then begin
                        CodRaca := Q1.Fieldbyname('cod_raca').asinteger;
                      end;
                    end;
                  end;
                end;

                IndPaternidadeDuvidosa := 'N';
              end;
            except
              On E: exception do begin
                Rollback;
                Mensagens.Adicionar(1557, Self.ClassName, NomeMetodo, [E.Message]);
                Result := '';
                Exit;
              end;
            end;
          Finally
            Q1.Free;
          end;

          // verifica se existe cobertura válida do tipo Inseminação Artificial
          Q.Close;
          Q.Open;
          CodEventoCobertura := 0;
          while not Q.Eof do begin
             if Q.FieldByName('cod_tipo_evento').asinteger = 26 then begin
                DtaCobertura := Q.Fieldbyname('dta_inicio').asdatetime;
                CodEventoCobertura := Q.Fieldbyname('cod_evento').asinteger;
                if not Q.FieldByName('cod_reprodutor_multiplo').isnull then
                  CodReprodutorMultiplo := Q.Fieldbyname('cod_reprodutor_multiplo').AsInteger;
                if not Q.FieldByName('cod_animal_touro').isnull then
                  CodAnimalTouro := Q.Fieldbyname('cod_animal_touro').AsInteger;
                break;
             end;
             Q.Next;
          end;
          if CodEventoCobertura = 0 then begin // não existe evento de inseminação artificial, busca, se existir, evento de monta controlada
            Q.Close;
            Q.Open;
            while not Q.Eof do begin
               if Q.FieldByName('cod_tipo_evento').asinteger = 26 then begin
                  DtaCobertura := Q.Fieldbyname('dta_inicio').asdatetime;
                  CodEventoCobertura := Q.Fieldbyname('cod_evento').asinteger;
                  if not Q.FieldByName('cod_reprodutor_multiplo').isnull then
                    CodReprodutorMultiplo := Q.Fieldbyname('cod_reprodutor_multiplo').AsInteger;
                  if not Q.FieldByName('cod_animal_touro').isnull then
                    CodAnimalTouro := Q.Fieldbyname('cod_animal_touro').AsInteger;
                  break;
               end;
               Q.Next;
            end;
          end;
          if CodEventoCobertura = 0 then begin // não existe evento de inseminação artificial nem de monta controlada. Pega então o evento de cobertura em regime de pasto
            Q.Close;
            Q.Open;
            DtaCobertura := DtaProvavelCobertura;
            CodEventoCobertura := Q.Fieldbyname('cod_evento').asinteger;
            if not Q.FieldByName('cod_reprodutor_multiplo').isnull then
               CodReprodutorMultiplo := Q.Fieldbyname('cod_reprodutor_multiplo').AsInteger;
            if not Q.FieldByName('cod_animal_touro').isnull then
               CodAnimalTouro := Q.Fieldbyname('cod_animal_touro').AsInteger;
          end;
        end;
      end;

      //verifica se a fêmea recebeu diagnóstico de prenhez para este parto
      Q.SQL.Clear;
      Q.SQL.Add('select tae.ind_vaca_prenha '+
                ' from tab_evento te, tab_animal_evento tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
                ' and   te.cod_tipo_evento = 28 '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   te.cod_evento = tae.cod_evento  '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' order by te.dta_inicio desc ');
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_estacao_monta').asinteger := CodEstacaoMonta;
      Q.ParamByName('cod_animal_femea').asinteger := CodAnimalFemea;
      Q.Open;
      if Q.IsEmpty then begin
        Mensagens.Adicionar(1553, Self.ClassName, NomeMetodo, []);
      end else if Q.Fieldbyname('ind_vaca_prenha').asstring = 'N' then begin
        Mensagens.Adicionar(1554, Self.ClassName, NomeMetodo, []);
      end;

      Q.SQL.Clear;
      Q.SQL.Add(' select isNull(count(*),0)+1 as quantidade '+
                ' from tab_evento te, tab_animal_evento tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_tipo_evento = 30 '+
                ' and   tae.cod_evento = te.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal_femea').asinteger := CodAnimalFemea;
      Q.Open;

      if DtaCobertura = 0
         then QtdDiasGestacao := 0
         else QtdDiasGestacao := trunc(DtaEvento - DtaCobertura);
      IndOrdemParto := Q.Fieldbyname('quantidade').asinteger;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      beginTran;

      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      Result := padl(InttoStr(CodEvento),' ',10);

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('update tab_evento ' +
                '  set ');
      if (CodEstacaoMonta > 0)  then
         Q.SQL.Add('  cod_evento_associado =:cod_evento_associado, ');
      Q.SQL.Add('  qtd_animais = 1 '+
                '  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodEstacaoMonta > 0 then
         Q.ParamByName('cod_evento_associado').AsInteger := CodEstacaoMonta;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      Q.SQL.Clear;
      // -----------------------------------------------------------------
      // Insere dados específicos do evento de parto
      // -----------------------------------------------------------------
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_parto ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_grau_dificuldade_parto ' +
                '   , cod_situacao_cria ' +
                '   , cod_evento_cobertura ' +
                '   , qtd_dias_gestacao ' +
                '   , ind_ordem_parto) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_grau_dificuldade ' +
                '   , :cod_situacao_cria ');
      if CodEventoCobertura > 0
         then Q.SQL.Add('   , :cod_evento_cobertura ')
         else Q.SQL.Add('   , null ');
      Q.SQL.Add('   , :qtd_dias_gestacao ' +
                '   , :ind_ordem_parto) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_grau_dificuldade').AsInteger := CodGrauDificuldade;
      Q.ParamByName('cod_situacao_cria').AsInteger := CodSituacaoCria;
      Q.Parambyname('qtd_dias_gestacao').AsInteger := QtdDiasGestacao;
      Q.Parambyname('ind_ordem_parto').AsInteger := IndOrdemParto;
      if CodEventoCobertura > 0 then
         Q.Parambyname('cod_evento_cobertura').AsInteger := CodEventoCobertura;
      Q.ExecSQL;

      // -----------------------------------------------------------------
      // Associa a vaca ao evento
      // -----------------------------------------------------------------
      //verifica o período entre partos

      if (CodSituacaoCria = 3) or (CodSituacaoCria = 4) then begin
        Q.SQL.Clear;
{$IFDEF MSSQL}
        Q.SQL.Add('select qtd_min_dias_gestacao ' +
                  ' from tab_raca  tr' +
                  '    , tab_animal  ta' +
                  ' where ta.cod_animal = :cod_animal_femea ' +
                  ' and   ta.cod_raca = tr.cod_raca ');
{$ENDIF}
        Q.Parambyname('cod_animal_femea').asinteger := CodAnimalFemea;
        Q.Open;
        // Segunda a Graciele o Periodo entre partos, vai conter apenas a quantidade
        // mínima de dias de gestação para as situações acima e para as outras
        // situações deverá conter apenas a Quantidade de dias para gestação.
        PeriodoEntrePartos := Q.FieldbyName('qtd_min_dias_gestacao').asinteger;  //+ 90

      end else if (CodSituacaoCria = 5) then begin
        PeriodoEntrePartos := StrToInt(ValorParametro(95));        

      end else begin
//        Q.SQL.Clear;
//{$IFDEF MSSQL}
//        Q.SQL.Add('select qtd_dias_descanso_reprodutivo ' +
//                  ' from tab_produtor ' +
//                  ' where cod_pessoa_produtor = :cod_pessoa_produtor ');
//{$ENDIF}
//        Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
//        Q.Open;

        // Segunda a Graciele o Periodo entre partos, vai conter apenas a quantidade
        // mínima de dias de gestação para as situações acima e para as outras
        // situações deverá conter apenas a Quantidade de dias para gestação.
        PeriodoEntrePartos := QtdDiasGestacao; // + Q.FieldbyName('qtd_dias_descanso_reprodutivo').asinteger;
      end;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select max(te.dta_inicio) as dta_inicio ' +
                ' from tab_evento te, tab_animal_evento tae ' +
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                ' and   te.cod_evento = tae.cod_evento ' +
                ' and   tae.cod_animal = :cod_animal ' +
                ' and   te.cod_tipo_evento = 30 '+
                ' and   te.cod_evento != :cod_evento '+
                ' and   te.dta_inicio >= :dta_evento ');
{$ENDIF}
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_animal').asinteger := CodAnimalFemea;
      Q.Parambyname('dta_evento').asdatetime := DtaEvento - PeriodoEntrePartos;
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Open;

      if (not Q.IsEmpty) and (not Q.Fieldbyname('dta_inicio').isnull) then begin
        if (CodSituacaoCria = 5) then
         Mensagens.Adicionar(2017, Self.ClassName, NomeMetodo, [Q.FieldByname('dta_inicio').asstring, ValorParametro(95)])
        else
         Mensagens.Adicionar(1556, Self.ClassName, NomeMetodo, [Q.FieldByname('dta_inicio').asstring]);
        Result := '';
        Rollback;
        Exit;
      end;

      //verifica a data
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select max(dta_inicio) as dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_tipo_evento tte, ' +
                '      tab_animal ta, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_tipo_evento = tte.cod_tipo_evento ' +
                '   and ta.cod_animal = tae.cod_animal ' +
                '   and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and ta.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_evento != :cod_evento ' +
                '   and ta.cod_animal = :cod_animal ' +
                '   and tte.ind_dta_controlada = ''S'' ');
{$ENDIF}
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalFemea;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      if not Q.Fieldbyname('dta_inicio').isnull then
         DtaMaxEvento := Q.Fieldbyname('dta_inicio').asdatetime;

      if DtaMaxEvento > DtaEvento then begin
         Mensagens.Adicionar(1482, Self.ClassName, NomeMetodo, []);
         Result := '';
         Rollback;
         Exit;
      end;

      // associa o animal ao evento
      MontaQueryInsertAnimalEvento;
      Resultado := BuscaDadosAnimal(CodAnimalFemea,DadosAnimal);
      if Resultado < 0 then begin
         RollBack;
         Exit;
      end;

      Resultado := InserirAnimalEvento(CodEvento,DtaAplicacaoEvento,DadosAnimal);
      if Resultado < 0 then begin
         RollBack;
         Exit;
      end;

      //insere a cria
      Q.SQL.Clear;
      Q.SQL.Add(' insert into tab_animal_cria '+
                ' (cod_pessoa_produtor, '+
                '  cod_evento, '+
                '  cod_animal, '+
                '  ind_paternidade_duvidosa) '+
                '  values '+
                ' (:cod_pessoa_produtor, '+
                '  :cod_evento, '+
                '  :cod_animal, '+
                '  :ind_paternidade_duvidosa) ');

      if (CodSituacaoCria = 1) or (CodSituacaoCria = 2) or (CodSituacaoCria = 6) then begin //cadastra a cria
         Animais := TIntAnimais.Create;
         try
          resultado:= Animais.Inicializar(Conexao,Mensagens);
          if Resultado < 0  then begin
            RollBack;
            Result := '';
            Exit;
          end;
          Resultado:= Animais.InserirNascidoParto(CodAnimalFemea,CodAnimalTouro,
            CodReprodutorMultiplo,CodFazenda, CodAnimalManejoCria, IndSexoCria,
            CodPelagemCria, DtaEvento, CodSituacaoSisBov,CodEspecie,
            CodAptidao, CodRaca, CodRegimeAlimentar, 1,
            CodTipoLugar, CodLote, CodLocal, CodFazendaCorrente, IndCodSisBovReservado, CodPessoaTecnico, numCNPJCPFTecnico);

          if Resultado > 0 then begin
             Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
             Q.Parambyname('cod_evento').asinteger := CodEvento;
             Q.Parambyname('cod_animal').asinteger := Resultado;
             Q.Parambyname('ind_paternidade_duvidosa').asstring := IndPaternidadeDuvidosa;
             Q.ExecSQL;
             CodAnimalCria := Resultado;

             if QtdPesagemCria > 0 then begin
               Resultado := InserirPesagem(DtaEvento,'Pesagem ao nascimento', CodFazenda);
               if Resultado > 0 then begin
                  Resultado := Animais.DefinirPesoAnimal(Resultado, -1, Inttostr(CodAnimalCria),'',Floattostr(QtdPesagemCria),'S');
               end;
             end;
             if Resultado >= 0 then
                Result := Result +','+ padl(InttoStr(CodAnimalCria),' ',10);
           end;
          if Resultado < 0 then begin
             Rollback;
             Result := '';
             Exit;
          end;
          if (CodSituacaoCria = 2) and (Resultado>=0) then begin
             Resultado:= Animais.InserirNascidoParto(CodAnimalFemea,CodAnimalTouro,
               CodReprodutorMultiplo,CodFazenda, CodAnimalManejoGemeo, IndSexoGemeo,
               CodPelagemGemeo,DtaEvento, CodSituacaoSisBov,CodEspecie,
               CodAptidao, CodRaca, CodRegimeAlimentar, 1,
               CodTipoLugar, CodLote, CodLocal, CodFazendaCorrente, IndCodSisBovReservado, CodPessoaTecnico, numCNPJCPFTecnico);
             if Resultado > 0 then begin
                  Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
                  Q.Parambyname('cod_evento').asinteger := CodEvento;
                  Q.Parambyname('cod_animal').asinteger := Resultado;
                  Q.Parambyname('ind_paternidade_duvidosa').asstring := IndPaternidadeDuvidosa;
                  Q.ExecSQL;
                  CodAnimalCria := Resultado;
                  if QtdPesagemGemeo > 0 then begin
                    Resultado := InserirPesagem(DtaEvento,'Pesagem ao nascimento', CodFazenda);
                    if Resultado > 0 then begin
                       Resultado := Animais.DefinirPesoAnimal(Resultado, -1, Inttostr(CodAnimalCria),'',Floattostr(QtdPesagemGemeo),'S');
                    end;
                  end;
                  if Resultado >= 0 then
                     Result := Result +','+ padl(InttoStr(CodAnimalCria),' ',10);
             end;
             if Resultado < 0 then begin
                Rollback;
                Result := '';
                Exit;
             end;
          end;
         finally
          Animais.Free;
         end;
      end;
      // -----------------------------------------------------------------
      // Cria o TxtDados para o evento
      // -----------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}

      // altera a categoria da fêmea e o ind_apto_cobertura
      Q.SQL.Clear;
      Q.SQL.Add(' update tab_animal '+
                ' set cod_categoria_animal = :cod_categoria_animal '+
                '     ,ind_apto_cobertura = ''S'' '+
                ' where cod_animal = :cod_animal '+
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.ParamByName('cod_animal').Asinteger := CodAnimalFemea;
      Q.ParamByName('cod_pessoa_produtor').Asinteger := Conexao.CodProdutorTrabalho;
      if CodAptidaoFemea = 2 then begin
        // Caso a cria tenha situação "Natimorto" ou "aborto" a categoria da vaca
        // passa para vaca solteira. 
        if (CodSituacaoCria = 3) or (CodSituacaoCria = 4) or (CodSituacaoCria = 5) then begin
          Q.ParamByName('cod_categoria_animal').asinteger := 7;
        end else begin
          Q.ParamByName('cod_categoria_animal').asinteger := 8;
        end;
      end else begin
        if (CodSituacaoCria = 3) or (CodSituacaoCria = 4) or (CodSituacaoCria = 5) then begin
          Q.ParamByName('cod_categoria_animal').asinteger := 7;
        end else begin
          Q.ParamByName('cod_categoria_animal').asinteger := 6;
        end;
      end;
      Q.ExecSQL;

      // Cofirma transação
      Commit;

    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1557, Self.ClassName, NomeMetodo, [E.Message]);
        Result := '';
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.AlterarParto(CodEvento: Integer; DtaEvento: TDateTime;
  CodGrauDificuldade, CodCobertura: Integer): Integer;
const
  Metodo: Integer = 465;
  NomeMetodo: String = 'AlterarParto';
  CodTipoEvento: Integer = 30;
var
  Q,Q1: THerdomQuery;
  CodAnimalTouro, CodReprodutorMultiplo, CodRaca, CodAnimalFemea: Integer;
  CodEstacaoMonta, DiasGestacao: Extended;
  DtaCobertura, DtaMaxEvento, DtaMinEvento: Tdatetime;
begin
  Result := -1;
  CodRaca := 0;
  DiasGestacao := 0;
  CodAnimalTouro := 0;
  CodAnimalFemea := 0;
  CodReprodutorMultiplo := 0;
  DtaCobertura := 0;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  //verifica se o grau de dificuldade é válido
  Result := VerificaGrauDificuldade(CodGrauDificuldade);
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  Q1 := THerdomQuery.Create(Conexao, nil);
  try
    try
      //verifica se a cobertura informada está na mesma estação de monta do parto
      Q.SQL.Clear;
      Q.SQL.Add(' select cod_evento_associado '+
                ' from tab_evento '+
                ' where cod_evento = :cod_evento '+
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      CodEstacaoMonta := Q.Fieldbyname('cod_evento_associado').asinteger;

      if CodCobertura > 0 then begin
         Q.SQL.Clear;
         Q.SQL.Add(' select dta_inicio, cod_evento_associado '+
                   ' from tab_evento '+
                   ' where cod_evento = :cod_evento '+
                   ' and   cod_pessoa_produtor = :cod_pessoa_produtor '+
                   ' and   cod_tipo_evento in (23,26,27)' );
         Q.Parambyname('cod_evento').asinteger := CodCobertura;
         Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
         Q.Open;
         DtaCobertura := Q.Fieldbyname('dta_inicio').asdatetime;
         if CodEstacaoMonta <> Q.Fieldbyname('cod_evento_associado').asinteger then begin
            Mensagens.Adicionar(1572, Self.ClassName, NomeMetodo, []);
            Result := -1572;
            Exit;
         end;
         //verifica o macho
         Q.SQL.Clear;
         Q.SQL.Add(' select ta.cod_animal, ta.cod_raca '+
                   ' from tab_evento_cobertura_reg_pasto tem, '+
                   '      tab_animal ta '+
                   ' where tem.cod_evento = :cod_evento '+
                   ' and   tem.cod_pessoa_produtor =:cod_pessoa_produtor '+
                   ' and   tem.cod_animal_touro = ta.cod_animal '+
                   ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                   ' and   tem.cod_animal_touro is not null ');
         Q.ParamByName('cod_evento').asinteger := CodCobertura;
         Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
         Q.Open;
         if not Q.IsEmpty then begin
           CodAnimalTouro := Q.Fieldbyname('cod_animal').asinteger;
           CodRaca := Q.Fieldbyname('cod_raca').asinteger;
         end else begin
           Q.SQL.Clear;
           Q.SQL.Add(' select tem.cod_reprodutor_multiplo '+
                     ' from tab_evento_cobertura_reg_pasto tem, '+
                     '      tab_reprodutor_multiplo ta '+
                     ' where tem.cod_evento = :cod_evento '+
                     ' and   tem.cod_pessoa_produtor =:cod_pessoa_produtor '+
                     ' and   tem.cod_reprodutor_multiplo = ta.cod_reprodutor_multiplo '+
                     ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
                     ' and   tem.cod_reprodutor_multiplo is not null ');
           Q.ParamByName('cod_evento').asinteger := CodCobertura;
           Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
           Q.Open;
           if not Q.IsEmpty then
              CodReprodutorMultiplo := Q.Fieldbyname('cod_reprodutor_multiplo').asinteger
           else begin
             Q.SQL.Clear;
             Q.SQL.Add(' select ta.cod_animal, ta.cod_raca '+
                       ' from tab_evento_monta_controlada tem, '+
                       '      tab_animal ta '+
                       ' where tem.cod_evento = :cod_evento '+
                       ' and   tem.cod_pessoa_produtor =:cod_pessoa_produtor '+
                       ' and   tem.cod_animal_touro = ta.cod_animal '+
                       ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor ');
             Q.ParamByName('cod_evento').asinteger := CodCobertura;
             Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
             Q.Open;
             if not Q.IsEmpty then begin
               CodAnimalTouro := Q.Fieldbyname('cod_animal').asinteger;
               CodRaca := Q.Fieldbyname('cod_raca').asinteger;
             end else begin
               Q.SQL.Clear;
               Q.SQL.Add(' select ta.cod_animal, ta.cod_raca '+
                         ' from tab_evento_insemin_artificial tem, '+
                         '      tab_animal ta '+
                         ' where tem.cod_evento = :cod_evento '+
                         ' and   tem.cod_pessoa_produtor =:cod_pessoa_produtor '+
                         ' and   tem.cod_animal = ta.cod_animal '+
                         ' and   tem.cod_pessoa_produtor = ta.cod_pessoa_produtor ');
               Q.ParamByName('cod_evento').asinteger := CodCobertura;
               Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
               Q.Open;
               if not Q.IsEmpty then begin
                 CodAnimalTouro := Q.Fieldbyname('cod_animal').asinteger;
                 CodRaca := Q.Fieldbyname('cod_raca').asinteger;
               end;
             end;
           end;
         end;
      end;
      //verifica a fêmea
      Q.SQL.Clear;
      Q.SQL.Add(' select tae.cod_animal, ta.cod_raca '+
                ' from tab_animal_evento tae, '+
                '      tab_animal ta '+
                ' where tae.cod_evento = :cod_evento '+
                ' and   tae.cod_pessoa_produtor =:cod_pessoa_produtor '+
                ' and   tae.cod_animal = ta.cod_animal '+
                ' and   tae.cod_pessoa_produtor = ta.cod_pessoa_produtor ');
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;
      if not Q.IsEmpty then begin
         CodAnimalFemea := Q.Fieldbyname('cod_animal').asinteger;
         if CodRaca = 0 then
            CodRaca := Q.Fieldbyname('cod_raca').asinteger;
      end;

      if CodCobertura > 0 then begin
         // verifica os limites de gestacao
         Q.SQL.Clear;
         Q.SQL.Add(' select qtd_min_dias_gestacao, qtd_max_dias_gestacao '+
                   ' from tab_raca where cod_raca =:cod_raca ');
         Q.Parambyname('cod_raca').asinteger := CodRaca;
         Q.Open;

         DtaMinEvento := DtaCobertura + Q.Fieldbyname('qtd_min_dias_gestacao').asinteger;
         DtaMaxEvento := DtaCobertura + Q.Fieldbyname('qtd_max_dias_gestacao').asinteger;

         if (DtaEvento > DtaMaxEvento) or (DtaEvento < DtaMinEvento) then begin
           Mensagens.Adicionar(1573, Self.ClassName, NomeMetodo, []);
           Result := -1573;
           Exit;
         end;
         DiasGestacao := DtaEvento - DtaCobertura;
      end;


      beginTran;

      Q.SQL.Clear;
      Q.SQL.Add(' update tab_evento '+
                ' set dta_inicio =:dta_evento, '+
                '     dta_fim =:dta_evento '+
                ' where cod_evento =:cod_evento '+
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Parambyname('dta_evento').asdatetime := DtaEvento;
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ExecSQL;

      Q.SQL.Clear;
      Q.SQL.Add(' update tab_evento_parto '+
                ' set cod_grau_dificuldade_parto =:cod_grau_dificuldade ');
      if CodCobertura > 0 then
         Q.SQL.Add('     ,cod_evento_cobertura =:cod_evento_cobertura '+
                   '     ,qtd_dias_gestacao =:qtd_dias_gestacao    ');
      Q.SQL.Add(' where cod_evento =:cod_evento '+
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Parambyname('cod_grau_dificuldade').asinteger := CodGrauDificuldade;
      if CodCobertura > 0 then begin
        Q.Parambyname('cod_evento_cobertura').asinteger := CodCobertura;
        Q.Parambyname('qtd_dias_gestacao').asfloat := DiasGestacao;
      end;  
      Q.ExecSQL;

      Q.SQL.Clear;
      Q.SQL.Add(' update tab_animal '+
                ' set cod_animal_mae =:cod_animal_mae,  ');
      if CodAnimalTouro > 0
         then Q.SQL.Add('     cod_animal_pai =:cod_animal_pai,  ')
         else Q.SQL.Add('     cod_animal_pai =null,  ');
      if CodReprodutorMultiplo > 0
         then Q.SQL.Add('     cod_reprodutor_multiplo =:cod_reprodutor_multiplo,  ')
         else Q.SQL.Add('     cod_reprodutor_multiplo =null,  ');
      Q.SQL.Add(' dta_nascimento = :dta_nascimento, '+
                ' cod_raca =:cod_raca '+
                ' where cod_animal in (select cod_animal '+
                '                      from tab_animal_cria '+
                '                      where cod_evento =:cod_evento '+
                '                      and   cod_pessoa_produtor =:cod_pessoa_produtor) '+
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Parambyname('cod_animal_mae').asinteger := CodAnimalFemea;
      Q.Parambyname('dta_nascimento').asdatetime := DtaEvento;
      Q.Parambyname('cod_raca').asinteger := CodRaca;
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      if CodAnimalTouro > 0 then
         Q.Parambyname('cod_animal_pai').asinteger := CodAnimalTouro;
      if CodReprodutorMultiplo > 0 then
         Q.Parambyname('cod_reprodutor_multiplo').asinteger := CodReprodutorMultiplo;
      Q.ExecSQL;

      // Chama proc de composição racial caso não seja inserção múltipla e
      // caso o animal possua pai ou mãe

      Q1.SQL.Clear;
      Q1.SQL.Add(' select cod_animal from tab_animal_cria '+
                 ' where cod_evento = :cod_evento '+
                 ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q1.Parambyname('cod_evento').asinteger := CodEvento;
      Q1.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q1.Open;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('exec spt_calcula_comp_racial :cod_animal, ' +
             '                             :cod_pessoa_produtor, '+
             '                             :cod_animal_pai, '+
             '                             :cod_animal_mae, '+
             '                             :ind_tipo ');
{$ENDIF}
      while not Q1.eof do begin
         Q.ParamByName('cod_animal').AsInteger := Q1.fieldbyname('cod_animal').asinteger;
         Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
         Q.ParamByName('cod_animal_pai').AsInteger := CodAnimalTouro;
         Q.ParamByName('cod_animal_mae').AsInteger := CodAnimalFemea;
         Q.ParamByName('ind_tipo').AsInteger := 2;
         Q.ExecSQL;
         Q1.next;
      end;
      // -----------------------------------------------------------------
      // Cria o TxtDados para o evento
      // -----------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Confirma transação
      Commit;

    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1574, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1574;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

{function TIntEventos.InserirCoberturaAutomatica(DtaEvento: TDateTime;
  CodFazenda: Integer; TxtObservacao: String; CodAnimalTouro,
  CodReprodutorMultiplo, CodAnimalFemea, CodEventoEstacaoMonta: Integer): Integer;
const
  NomeMetodo: String = 'InserirCoberturaAutomatica';
  CodTipoEvento: Integer = 32;
var
  Q: THerdomQuery;
  X, CodEvento: Integer;
  DtaUltimoEvento, DtaAplicacaoUltimoEvento: TDateTime;
  IndAptoCobertura: String;
begin
  Result := -1;

  if CodReprodutorMultiplo > 0 then
     CodAnimalTouro := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, '', TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      Q.SQL.Clear;
      Q.SQL.Add('update tab_evento ' +
                '  set ');
      if (CodEventoEstacaoMonta > 0) then
         Q.SQL.Add('  cod_evento_associado =:cod_evento_associado, ');
      Q.SQL.Add('  qtd_animais = 1 '+
                '  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodEventoEstacaoMonta > 0 then
         Q.ParamByName('cod_evento_associado').AsInteger := CodEventoEstacaoMonta;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ExecSQL;

      Q.SQL.Clear;
      // -----------------------------------------------------------------
      // Insere dados específicos do evento cobertura por monta automatica
      // -----------------------------------------------------------------
      Q.SQL.Add('insert into tab_evento_monta_automatica ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_animal_touro ' +
                '   , cod_reprodutor_multiplo) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ');
      if CodAnimalTouro > 0 then begin
         Q.SQL.Add('   , :cod_animal_touro '+
                   '   , null) ');
      end else if CodReprodutorMultiplo > 0 then begin
         Q.SQL.Add('   , null '+
                   '   , :cod_reprodutor_multiplo) ');
      end else begin
         Q.SQL.Add('   , null '+
                   '   , null) ');
      end;
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if CodAnimalTouro > 0 then
         Q.ParamByName('cod_animal_touro').AsInteger := CodAnimalTouro;
      if CodReprodutorMultiplo > 0 then
         Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodReprodutorMultiplo;
      Q.ExecSQL;

      Q.SQL.Clear;

      // -----------------------------------------------------------------
      // Associa a vaca ao evento
      // -----------------------------------------------------------------
      //verifica se a vaca já recebeu outro evento de monta nesta data
      Q.SQL.Clear;
      Q.SQL.Add('select te.dta_inicio ' +
                ' from tab_evento te, ' +
                '      tab_animal_evento tae ' +
                ' where te.cod_evento = tae.cod_evento ' +
                '   and te.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
                '   and tae.cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and te.cod_tipo_evento in (26,27,32) ' +
                '   and tae.cod_animal = :cod_animal ' +
                '   and te.dta_inicio <= :dta_inicio ' +
                '   and te.dta_fim >= :dta_inicio ');
      Q.ParamByName('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').asinteger := CodAnimalFemea;
      Q.ParamByName('dta_inicio').asdatetime := DtaEvento;
      Q.Open;
      if not Q.IsEmpty then begin
         Mensagens.Adicionar(1490, Self.ClassName, NomeMetodo, []);
         Result := -1490;
         Exit;
      end;

      Q.SQL.Clear;
      Q.SQL.Add('select dta_ultimo_evento, dta_aplicacao_ultimo_evento, ind_apto_cobertura ' +
                ' from tab_animal ' +
                ' where cod_animal =:cod_animal ' +
                ' and   cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.ParamByName('cod_animal').AsInteger:=CodAnimalFemea;
      Q.ParamByName('cod_pessoa_produtor').AsInteger:=Conexao.CodProdutorTrabalho;
      Q.Open;
      DtaUltimoEvento := Q.Fieldbyname('dta_ultimo_evento').AsDateTime;
      DtaAplicacaoUltimoEvento := Q.Fieldbyname('dta_aplicacao_ultimo_evento').AsDateTime;
      IndAptoCobertura := Q.Fieldbyname('ind_apto_cobertura').AsString;

      Q.SQL.Clear;
      Q.SQL.Add('insert into tab_animal_evento ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_animal ' +
                '   , ind_apto_cobertura ' +
                '   , dta_ultimo_evento ' +
                '   , dta_aplicacao_ultimo_evento ' +
                '   , dta_aplicacao_evento) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_animal ' +
                '   , :ind_apto_cobertura ' +
                '   , :dta_ultimo_evento ' +
                '   , :dta_aplicacao_ultimo_evento ' +
                '   , :dta_aplicacao_evento) ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalFemea;
      Q.ParamByName('ind_apto_cobertura').AsString := IndAptoCobertura;
      Q.ParamByName('dta_ultimo_evento').AsDateTime := DtaUltimoEvento;
      Q.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DtaAplicacaoUltimoEvento;
      Q.ParamByName('dta_aplicacao_evento').AsDateTime := DtaEvento;
      Q.ExecSQL;

      // -----------------------------------------------------------------
      // Cria o TxtDados para o evento
      // -----------------------------------------------------------------
      Q.SQL.Clear;}
{$IFDEF MSSQL}
{      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;}
{$ENDIF}
{      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1552, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1552;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;}

function TIntEventos.PesquisarEstacoesMonta(
  NumMaxEventos, CodFazenda: Integer): Integer;
const
  Metodo: Integer = 469;
  NomeMetodo: String = 'PesquisarEstacoesMonta';
var
  ConsultaSQL : String;
begin
  Result := -1;
  ConsultaSQL := '';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  try
    Query.SQL.Clear;
    ConsultaSQL :=
      'select '+
{IFDEF MSSQL}
      SE(NumMaxEventos > 0, '  top ' + IntToStr(NumMaxEventos) + ' ', '')+
{ENDIF}
      '  tem.cod_evento as CodEventoEstacaoMonta '+
      '  , tem.sgl_estacao_monta as SglEstacaoMonta '+
      '  , tem.des_estacao_monta as DesEstacaoMonta '+
      'from '+
      '  tab_evento_estacao_monta tem, '+
      '  tab_evento te '+
      'where '+
      '  tem.cod_pessoa_produtor = :cod_pessoa_produtor and '+
      '  tem.cod_pessoa_produtor = te.cod_pessoa_produtor and '+
      '  tem.cod_evento = te.cod_evento ';
    if CodFazenda > 0 then
      ConsultaSQL := ConsultaSQL + '  and te.cod_fazenda =:cod_fazenda ';
    ConsultaSQL := ConsultaSQL + 'order by '+
      '  tem.cod_evento desc ';

    Query.SQL.Text := ConsultaSQL;
    Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    if CodFazenda > 0 then
       Query.ParamByName('cod_fazenda').AsInteger := CodFazenda;

    Query.Open;
    Result := 0;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(1550, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1550;
      Exit;
    end;
  end;
end;

function TIntEventos.PesquisarRelatorioPrevisaoParto(EQuery: THerdomQuery;
  CodEventoEstacaoMonta: Integer; CodTipoEventosCobertura: String;
  DtaPrevistaPartoInicio, DtaPrevistaPartoFim: TDateTime; CodRacas,
  CodCategorias, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; NumOrdemInicio, NumOrdemFim: Integer;
  CodLotes, CodLocais: String; CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim: String;
  CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
  IndDiagnosticoPrenhez: String; CodTarefa: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioPrevisaoParto';
  CodRelatorio: Integer = 18;

  fCODANIMALMANEJO: Integer = 1;
  fSGLRACA: Integer = 2;
  fDESCOMPOSICAORACIAL: Integer = 3;
  fSGLCATEGORIAANIMAL: Integer = 4;
  fDESDIAGPRENHEZ: Integer = 5;
  fSGLTIPOCOBERTURA: Integer = 6;
  fDESTIPOCOBERTURA: Integer = 7;
  fDESGESTACAO: Integer = 8;
  fDTAPREVISTA: Integer = 9;
  fDTAULTIMOPARTO: Integer = 10;
  fNUMORDEM: Integer = 11;
  fDESDIASRESTANTES: Integer = 12;
  fCODANIMALMANEJOPAI: Integer = 13;
  fNOMANIMALPAI: Integer = 14;
  fCODANIMALMANEJOMAE: Integer = 15;
  fSGLLOCALCORRENTE: Integer = 16;
  fCODANIMALMANEJOTOURO: Integer = 17;

var
  Param: TValoresParametro;
  IntRelatorios: TIntRelatorios;
  bAux, bPersonalizavel, bPai, bMae, bEvento, bDtaPrevista: Boolean;
  sAux: String;
  iAux: Integer;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        EQuery.SQL.Text := EQuery.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodTipoEventosCobertura <> '' then begin
      Result := VerificaParametroMultiValor(CodTipoEventosCobertura, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLotes <> '' then begin
      Result := VerificaParametroMultiValor(CodLotes, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLocais <> '' then begin
      Result := VerificaParametroMultiValor(CodLocais, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    bEvento :=
      not (bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fDTAULTIMOPARTO) = 1)
      or (IntRelatorios.CampoAssociado(fNUMORDEM) = 1)
      or ((NumOrdemInicio > 0) and (NumOrdemFim > 0));

    bPai :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOPAI) = 1)
      or (IntRelatorios.CampoAssociado(fNOMANIMALPAI) = 1)
      or (CodFazendaManejoPai > 0)
      or (CodAnimalManejoPai <> '');

    bMae :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOMAE) = 1);

    bDtaPrevista :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fDTAPREVISTA) = 1)
      or ((DtaPrevistaPartoInicio > 0) and (DtaPrevistaPartoFim > 0));

    try
      // Cria tabela temporária de pesquisa, quando não existir
      EQuery.SQL.Text :=
        'if object_id(''tempdb..#tmp_relatorio_previsao_parto'') is null '+
        'begin '+
        '  create table #tmp_relatorio_previsao_parto '+
        '  ( '+
        '    cod_pessoa_produtor int not null '+
        '    , cod_animal int not null '+
        '    , cod_evento int not null '+
        '    , CodAnimalManejo varchar(11) null '+
        '    , SglRaca varchar(3) null '+
        '    , DesComposicaoRacial varchar(50) null '+
        '    , SglCategoriaAnimal varchar(3) null '+
        '    , DesDiagPrenhez varchar(6) null '+
        '    , SglTipoCobertura varchar(2) null '+
        '    , DesTipoCobertura varchar(30) null '+
        '    , DesGestacao varchar(10) null '+
        '    , DtaPrevista smalldatetime null '+
        '    , MesPrevisto smalldatetime null '+
        '    , cod_evento_ultimo_parto int null '+
        '    , DtaUltimoParto smalldatetime null '+
        '    , NumOrdem int null '+
        '    , DesDiasRestantes varchar(8) null '+
        '    , cod_animal_pai int null '+
        '    , cod_reprodutor_multiplo_pai int null '+
        '    , cod_fazenda_manejo_pai int null '+
        '    , cod_animal_manejo_pai varchar(8) null '+
        '    , CodAnimalManejoPai varchar(11) null '+
        '    , NomAnimalPai varchar(60) null '+
        '    , cod_animal_mae int null '+
        '    , CodAnimalManejoMae varchar(11) null '+
        '    , SglLocalCorrente varchar(2) null '+
        '    , CodAnimalManejoTouro varchar(11) null '+
        '  ) '+
        '  create index idx_tmp_previsao_animal on #tmp_relatorio_previsao_parto (cod_animal, cod_evento) '+
        '  create index idx_tmp_previsao_evento on #tmp_relatorio_previsao_parto (cod_pessoa_produtor, cod_evento) '+
        '  create index idx_tmp_previsao_parto on #tmp_relatorio_previsao_parto (cod_pessoa_produtor, cod_evento_ultimo_parto) '+
        '  create index idx_tmp_previsao_rm on #tmp_relatorio_previsao_parto (cod_pessoa_produtor, cod_reprodutor_multiplo_pai) '+
        '  create index idx_tmp_previsao_pai on #tmp_relatorio_previsao_parto (cod_pessoa_produtor, cod_animal_pai) '+
        '  create index idx_tmp_previsao_mae on #tmp_relatorio_previsao_parto (cod_pessoa_produtor, cod_animal_mae) '+
        'end ';
      EQuery.ExecSQL;

      // Esvazia a tabela temporária
      EQuery.SQL.Text :=
        'truncate table #tmp_relatorio_previsao_parto ';
      EQuery.ExecSQL;

      // Define quais campos seram populados
      EQuery.SQL.Clear;
      SQL('insert into #tmp_relatorio_previsao_parto ', 0);
      SQL('( ', 0);
      SQL('  cod_pessoa_produtor ', 0);
      SQL('  , cod_animal ', 0);
      SQL('  , cod_evento ', 0);
      SQL('  , CodAnimalManejo ',                                                  fCODANIMALMANEJO);
      SQL('  , SglRaca ',                                                          fSGLRACA);
      SQL('  , DesComposicaoRacial ',                                              fDESCOMPOSICAORACIAL);
      SQL('  , SglCategoriaAnimal ',                                               fSGLCATEGORIAANIMAL);
      SQL('  , DesDiagPrenhez ',                                                   0);
      SQL('  , SglTipoCobertura ',                                                 fSGLTIPOCOBERTURA);
      SQL('  , DesTipoCobertura ',                                                 fDESTIPOCOBERTURA);
      SQL('  , DesGestacao ',                                                      fDESGESTACAO);
      SQL('  , DtaPrevista ',                                                      SE(bDtaPrevista, 0, -1));
      SQL('  , MesPrevisto ',                                                      0);
      SQL('  , cod_evento_ultimo_parto ',                                          SE(bEvento, 0, -1));
      SQL('  , DesDiasRestantes ',                                                 fDESDIASRESTANTES);
      SQL('  , cod_animal_pai ',                                                   SE(bPai, 0, -1));
      SQL('  , cod_reprodutor_multiplo_pai ',                                      SE(bPai, 0, -1));
      SQL('  , cod_animal_mae ',                                                   SE(bMae, 0, -1));
      SQL('  , SglLocalCorrente ',                                                 fSGLLOCALCORRENTE);
      SQL(') ', 0);

      // Obtem os dados que atendam aos critérios de pesquisa
      SQL('select ', 0);
      SQL('  te.cod_pessoa_produtor ', 0);
      SQL('  , tae.cod_animal ', 0);
      SQL('  , tae.cod_evento ', 0);
      SQL('  , case when ta.cod_fazenda_manejo is null then '+
          '      ta.cod_animal_manejo '+
          '    else '+
          '      tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
          '    end ',                                                              fCODANIMALMANEJO);
      SQL('  , tr.sgl_raca ',                                                      fSGLRACA);
      SQL('  , dbo.FNT_COMPOSICAO_RACIAL(ta.cod_animal, ta.cod_pessoa_produtor) ', fDESCOMPOSICAORACIAL);
      SQL('  , tca.sgl_categoria_animal ',                                         fSGLCATEGORIAANIMAL);
      SQL('  , ( ' +
          '      select ' +
          '        top 1 ' +
          '        case ' +
          '          when itae.ind_vaca_prenha = ''S'' then ' +
          '            ''Prenha'' ' +
          '          else '+
          '            ''Vazia'' ' +
          '        end ' +
          '      from ' +
          '            tab_evento ite ' +
          '          , tab_animal_evento itae ' +
          '      where ' +
          '            ite.cod_tipo_evento = 28 ' +
          '        and ite.cod_evento_associado = te.cod_evento_associado ' +
          '        and ite.cod_pessoa_produtor = itae.cod_pessoa_produtor ' +
          '        and ite.cod_evento = itae.cod_evento ' +
          '        and itae.cod_pessoa_produtor = tae.cod_pessoa_produtor ' +
          '        and itae.cod_animal = tae.cod_animal ' +
          '      order by ' +
          '        ite.dta_inicio desc ' +
          '    ) as DesDiagPrenhez ',                                              0);
      SQL('  , tte.sgl_tipo_evento ',                                              fSGLTIPOCOBERTURA);
      SQL('  , tte.des_tipo_evento ',                                              fDESTIPOCOBERTURA);
      SQL('  , cast(cast(getdate() as integer) - '+
          '    cast(te.dta_inicio as integer) as varchar(5)) + '' dias'' ',        fDESGESTACAO);
      SQL('  , cast(cast(te.dta_inicio as integer) + ' +
          '    ((cast(te.dta_fim as integer) - '+
          '    cast(te.dta_inicio as integer)) / 2) + '+
          '    tr.qtd_min_dias_gestacao + '+
          '    ((tr.qtd_max_dias_gestacao - '+
          '    tr.qtd_min_dias_gestacao) / 2) as smalldatetime) ',                 SE(bDtaPrevista, 0, -1));
      SQL('  , cast(cast(te.dta_inicio as integer) + '+
          '    ((cast(te.dta_fim as integer) - '+
          '    cast(te.dta_inicio as integer)) / 2) + '+
          '    tr.qtd_min_dias_gestacao + '+
          '    ((tr.qtd_max_dias_gestacao - '+
          '    tr.qtd_min_dias_gestacao) / 2) as smalldatetime) ',                0);
      SQL('  , ( '+
          '      select '+
          '        top 1 '+
          '        ite.cod_evento '+
          '      from '+
          '        tab_evento ite '+
          '        , tab_animal_evento itae '+
          '      where '+
          '        ite.cod_tipo_evento = 30 '+
          '        and ite.cod_pessoa_produtor = itae.cod_pessoa_produtor '+
          '        and ite.cod_evento = itae.cod_evento '+
          '        and itae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '        and itae.cod_animal = tae.cod_animal '+
          '      order by '+
          '        ite.dta_inicio desc '+
          '    ) ',                                                                SE(bEvento, 0, -1));
      SQL('  , cast(te.dta_inicio as integer) + '+
          '    ((cast(te.dta_fim as integer) - '+
          '    cast(te.dta_inicio as integer)) / 2) + '+
          '    tr.qtd_min_dias_gestacao + '+
          '    ((tr.qtd_max_dias_gestacao - '+
          '    tr.qtd_min_dias_gestacao) / 2) - '+
          '    cast(getdate() as integer) ',                                       fDESDIASRESTANTES);
      SQL('  , ta.cod_animal_pai ',                                                SE(bPai, 0, -1));
      SQL('  , ta.cod_reprodutor_multiplo ',                                       SE(bPai, 0, -1));
      SQL('  , ta.cod_animal_mae ',                                                SE(bMae, 0, -1));
      SQL('  , tl.sgl_local ',                                                     fSGLLOCALCORRENTE);
      SQL('from ', 0);
      SQL('  tab_evento te ', 0);
      SQL('  , tab_tipo_evento tte ',                                              [fSGLTIPOCOBERTURA, fDESTIPOCOBERTURA]);
      SQL('  , tab_categoria_animal tca ',                                         0);
      SQL('  , tab_raca tr ',                                                      0);
      SQL('  , tab_fazenda tfm ',                                                  fCODANIMALMANEJO);
      SQL('  , tab_animal ta ', 0);
      SQL('  , tab_animal_evento tae ', 0);
      SQL('  , tab_local tl ',                                                     fSGLLOCALCORRENTE);
      SQL('  , tab_composicao_racial as tcr with (nolock) ',                       SE(IndAgrupRaca1 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                      SE(IndAgrupRaca2 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                      SE(IndAgrupRaca3 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                      SE(IndAgrupRaca4 = 'N', 0, -1));
      SQL('where ', 0);
      SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ', 0);
      SQL('  and tte.cod_tipo_evento = te.cod_tipo_evento ',                       [fSGLTIPOCOBERTURA, fDESTIPOCOBERTURA]);
      SQL('  and tca.cod_categoria_animal = ta.cod_categoria_animal ',            0);
      SQL('  and tca.ind_animal_ativo = :ind_animal_ativo ',            0);
      SQL('  and tr.cod_raca = ta.cod_raca ',                                      0);
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fCODANIMALMANEJO);
      SQL('  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ',                       fCODANIMALMANEJO);
      SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ', 0);
      SQL('  and ta.cod_animal = tae.cod_animal ', 0);
      SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ', 0);
      SQL('  and tae.cod_evento = te.cod_evento ', 0);
      SQL('  and tl.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',               fSGLLOCALCORRENTE);
      SQL('  and tl.cod_local =* ta.cod_local_corrente ',                          fSGLLOCALCORRENTE);
      SQL('  and not exists (select top 1 1 '+
          '                    from tab_animal_evento netae, tab_evento nete '+
          '                   where nete.cod_tipo_evento = 30 '+
          '                     and nete.cod_evento_associado = :cod_evento_estacao_monta '+
          '                     and nete.cod_pessoa_produtor = netae.cod_pessoa_produtor '+
          '                     and nete.cod_evento = netae.cod_evento '+
          '                     and netae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '                     and netae.cod_animal = tae.cod_animal) ',          0);
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and ta.cod_animal = tcr.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and ta.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and ta.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and ta.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;

      if Conexao.CodPapelUsuario = 3 then begin
        SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico or ta.cod_pessoa_tecnico is null) ', 0);
      end;

      if IndAgrupRaca1 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          EQuery.ParamByName('codraca1').AsInteger := CodRaca1;
          EQuery.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          EQuery.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          EQuery.ParamByName('codraca2').AsInteger := CodRaca2;
          EQuery.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          EQuery.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          EQuery.ParamByName('codraca3').AsInteger := CodRaca3;
          EQuery.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          EQuery.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          EQuery.ParamByName('codraca4').AsInteger := CodRaca4;
          EQuery.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          EQuery.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
      end;
      EQuery.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      EQuery.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;
      EQuery.ParamByName('ind_animal_ativo').AsString := 'S';

      if Conexao.CodPapelUsuario = 3 then begin
        EQuery.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;

      // Critérios de pesquisa
      if CodFazendaManejo > 0 then begin
        SQL('  and ta.cod_fazenda_manejo = :cod_fazenda_manejo ', 0);
        EQuery.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
        SQL('  and ta.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        EQuery.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoInicio;
        EQuery.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoFim;
      end;
      if CodTipoEventosCobertura = '' then begin
        SQL('  and te.cod_tipo_evento in (23, 26, 27) ', 0);
      end else begin
        SQL('  and te.cod_tipo_evento in ( '+CodTipoEventosCobertura+' ) ', 0);
      end;
      if CodRacas <> '' then begin
        SQL('  and ta.cod_raca in ( '+CodRacas+' ) ', 0);
      end;
      if CodCategorias <> '' then begin
        SQL('  and ta.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
      end;
      if CodLocais <> '' then begin
        SQL('  and ta.cod_local_corrente in ( '+CodLocais+' ) ', 0);
      end;
      if CodLotes <> '' then begin
        SQL('  and ta.cod_lote_corrente in ( '+CodLotes+' ) ', 0);
      end;
      EQuery.ExecSQL;

      // Mantém apenas o último evento de cobertura sofrido pelo animal
      EQuery.SQL.Text :=
        'delete '+
        '  #tmp_relatorio_previsao_parto '+
        'from '+
        '  ( '+
        '    select '+
        '      cod_animal, max(cod_evento) as cod_evento '+
        '    from '+
        '      #tmp_relatorio_previsao_parto '+
        '    group by '+
        '      cod_animal '+
        '    having '+
        '      count(1) > 1 '+
        '  ) EventosAExcluir '+
        'where '+
        '  #tmp_relatorio_previsao_parto.cod_animal = EventosAExcluir.cod_animal '+
        '  and #tmp_relatorio_previsao_parto.cod_evento < EventosAExcluir.cod_evento ';
      EQuery.ExecSQL;

      // Atualiza informações do último evento de parto do animal
      if bEvento then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  DtaUltimoParto = te.dta_inicio '+
          '  , NumOrdem = tep.ind_ordem_parto '+
          'from '+
          '  tab_evento te '+
          '  , tab_evento_parto tep '+
          'where '+
          '  te.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
          '  and te.cod_evento = tep.cod_evento '+
          '  and tep.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and tep.cod_evento = #tmp_relatorio_previsao_parto.cod_evento_ultimo_parto '+
          '  and #tmp_relatorio_previsao_parto.cod_evento_ultimo_parto is not null ';
        EQuery.ExecSQL;

        // Atualiza a ordem para o parto a ser realizado
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  NumOrdem = isnull(NumOrdem, 0)+1 ';
        EQuery.ExecSQL;
      end;

      // Atualiza informações do pai quando necessário
      if bPai then begin
        // Quando o pai for um touro
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  cod_fazenda_manejo_pai = tap.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = tap.cod_animal_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when tap.cod_fazenda_manejo is null then '+
          '        tap.cod_animal_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + tap.cod_animal_manejo '+
          '    end '+
          '  , NomAnimalPai = tap.nom_animal '+
          'from '+
          '  tab_animal tap '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* tap.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* tap.cod_fazenda_manejo '+
          '  and tap.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and tap.cod_animal = #tmp_relatorio_previsao_parto.cod_animal_pai '+
          '  and #tmp_relatorio_previsao_parto.cod_animal_pai is not null ';
        EQuery.ExecSQL;

        // Quando o pai for um reprodutor múltiplo
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  cod_fazenda_manejo_pai = trm.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = trm.cod_reprodutor_multiplo_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when trm.cod_fazenda_manejo is null then '+
          '        trm.cod_reprodutor_multiplo_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + trm.cod_reprodutor_multiplo_manejo '+
          '    end '+
          'from '+
          '  tab_reprodutor_multiplo trm '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* trm.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* trm.cod_fazenda_manejo '+
          '  and trm.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and trm.cod_reprodutor_multiplo = #tmp_relatorio_previsao_parto.cod_reprodutor_multiplo_pai '+
          '  and #tmp_relatorio_previsao_parto.cod_reprodutor_multiplo_pai is not null ';
        EQuery.ExecSQL;
      end;

      // Atualiza informações da mãe quando necessário
      if bMae then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  CodAnimalManejoMae = '+
          '    case '+
          '      when tam.cod_fazenda_manejo is null then '+
          '        tam.cod_animal_manejo '+
          '      else '+
          '        tfmm.sgl_fazenda + '' '' + tam.cod_animal_manejo '+
          '    end '+
          'from '+
          '  tab_animal tam '+
          '  , tab_fazenda tfmm '+
          'where '+
          '  tfmm.cod_pessoa_produtor =* tam.cod_pessoa_produtor '+
          '  and tfmm.cod_fazenda =* tam.cod_fazenda_manejo '+
          '  and tam.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and tam.cod_animal = #tmp_relatorio_previsao_parto.cod_animal_mae '+
          '  and #tmp_relatorio_previsao_parto.cod_animal_mae is not null ';
        EQuery.ExecSQL;
      end;

      // Caso o campo touro tenha sido selecionado, tenta buscar o pai provável
      // para a possível gestação identificada
      if (IntRelatorios.CampoAssociado(fCODANIMALMANEJOTOURO) = 1) then begin
        // Eventos: Inseminação artificial
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  CodAnimalManejoTouro = dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') '+
          'from '+
          '  tab_evento_insemin_artificial teia '+
          'where '+
          '  teia.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and teia.cod_evento = #tmp_relatorio_previsao_parto.cod_evento ';
        EQuery.ExecSQL;

        // Eventos: Monta controlada
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  CodAnimalManejoTouro = dbo.FNT_BUSCAR_PAI(temc.cod_animal_touro, temc.cod_pessoa_produtor, ''T'') '+
          'from '+
          '  tab_evento_monta_controlada temc '+
          'where '+
          '  temc.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and temc.cod_evento = #tmp_relatorio_previsao_parto.cod_evento ';
        EQuery.ExecSQL;

        // Eventos: Cobertura por regime de pasto
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_previsao_parto '+
          'set '+
          '  CodAnimalManejoTouro = '+
          '    case '+
          '      when cod_reprodutor_multiplo is not null then '+
          '        dbo.FNT_BUSCAR_PAI(tecrp.cod_reprodutor_multiplo, tecrp.cod_pessoa_produtor, ''R'') '+
          '      when cod_animal_touro is not null then '+
          '        dbo.FNT_BUSCAR_PAI(tecrp.cod_animal_touro, tecrp.cod_pessoa_produtor, ''T'') '+
          '    else '+
          '      null '+
          '    end '+
          'from '+
          '  tab_evento_cobertura_reg_pasto tecrp '+
          'where '+
          '  tecrp.cod_pessoa_produtor = #tmp_relatorio_previsao_parto.cod_pessoa_produtor '+
          '  and tecrp.cod_evento = #tmp_relatorio_previsao_parto.cod_evento ';
        EQuery.ExecSQL;
      end;

      // Recupera os dados que serão apresentados no relatório
      EQuery.SQL.Clear;
      SQL('select ', 0);
      SQL('  MesPrevisto ', 0);
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        if (IntRelatorios.ValorCampo('NomField') <> 'DesDiagPrenhez') then begin
          sAux := '  , '+IntRelatorios.ValorCampo('NomField');
          SQL(sAux, SE(not bPersonalizavel
            or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
            or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1));
        end;
        IntRelatorios.IrAoProximo;
      end;
      SQL('  , case when DesDiagPrenhez is null then ''Sem diagnóstico'' ' +
          '         else DesDiagPrenhez end as DesDiagPrenhez ', 0);
      SQL('from ', 0);
      SQL('  #tmp_relatorio_previsao_parto ', 0);
      SQL('where ', 0);
      SQL('  cod_pessoa_produtor is not null ', 0);

      // Critérios referentes aos pais dos animais
      if (DtaPrevistaPartoInicio > 0) and (DtaPrevistaPartoFim > 0) then begin
        SQL('  and ( DtaPrevista >= :DtaPrevistaInicio and DtaPrevista < :DtaPrevistaFim ) ', 0);
        EQuery.ParamByName('DtaPrevistaInicio').AsDateTime := Trunc(DtaPrevistaPartoInicio);
        EQuery.ParamByName('DtaPrevistaFim').AsDateTime := Trunc(DtaPrevistaPartoFim)+1;
      end;
      if (NumOrdemInicio > 0) and (NumOrdemFim > 0) then begin
        SQL('  and ( NumOrdem >= :NumOrdemInicio and NumOrdem < :NumOrdemFim ) ', 0);
        EQuery.ParamByName('NumOrdemInicio').AsInteger := NumOrdemInicio;
        EQuery.ParamByName('NumOrdemFim').AsInteger := NumOrdemFim;
      end;
      if CodFazendaManejoPai > 0 then begin
        SQL('  and cod_fazenda_manejo_pai = :cod_fazenda_manejo_pai ', 0);
        EQuery.ParamByName('cod_fazenda_manejo_pai').AsInteger := CodFazendaManejoPai;
      end;
      if CodAnimalManejoPai <> '' then begin
        SQL('  and cod_animal_manejo_pai = :cod_animal_manejo_pai ', 0);
        EQuery.ParamByName('cod_animal_manejo_pai').AsString := CodAnimalManejoPai;
      end;

      if UpperCase(IndDiagnosticoPrenhez) = 'VAZIA' then
      begin
        SQL('  and DesDiagPrenhez = :DesDiagPrenhez ', 0);
        EQuery.ParamByName('DesDiagPrenhez').AsString := 'Vazia';
      end
      else if UpperCase(IndDiagnosticoPrenhez) = 'PRENHA' then
      begin
        SQL('  and DesDiagPrenhez = :DesDiagPrenhez ', 0);
        EQuery.ParamByName('DesDiagPrenhez').AsString := 'Prenha';

      end
      else if UpperCase(IndDiagnosticoPrenhez) = 'SEM DIAGNOSTICO' then
      begin
        SQL('  and DesDiagPrenhez is null ', 0);
      end;

      // Realiza "order by" por campos selecionados
      SQL('order by ', 0);
      SQL('  MesPrevisto ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := '  , ' + IntRelatorios.ValorCampo('NomField');
        if SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
          and not(bAux) then bAux := True;
        IntRelatorios.IrAoProximo;
      end;

      // Realiza consulta a massa de dados preparada
//      Query.SQL.SaveToFile('c:\tmp\Select.sql');
      EQuery.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      on E: exception do begin
        Rollback;
        iAux := Length(strExceedsTheConfiguredThreshold);
        if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
          Result := idExceedsTheConfiguredThreshold;
        end else begin
          Mensagens.Adicionar(1558, Self.ClassName, NomMetodo, [E.Message]);
          Result := -1558;
        end;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.GerarRelatorioPrevisaoParto(
  CodEventoEstacaoMonta: Integer; CodTipoEventosCobertura: String;
  DtaPrevistaPartoInicio, DtaPrevistaPartoFim: TDateTime; CodRacas,
  CodCategorias, IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; NumOrdemInicio, NumOrdemFim: Integer;
  CodLotes, CodLocais: String; CodFazendaManejo: Integer;
  CodAnimalManejoInicio, CodAnimalManejoFim: String;
  CodFazendaManejoPai: Integer; CodAnimalManejoPai: String;
  Tipo, CodTarefa, CodPessoaProdutor: Integer; IndDiagnosticoPrenhez: String): String;
const
  Metodo: Integer = 470;
  NomeMetodo: String = 'GerarRelatorioPrevisaoParto';
  CodRelatorio: Integer = 18;
  CodTipoTarefa: Integer = 5;
var
  Rel: TRelatorioPadrao;
  Retorno, iAux, iSubTotal, iSubTotalPrenhas, iSubTotalSemDiag, iTotal,
    iTotalPrenhas, iTotalSemDiag: Integer;
  sAux, sQuebra, NomPessoaProdutor: String;
  bAux: Boolean;
  Qry: THerdomQuery;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  if CodTarefa > 0 then
  begin
    Conexao.DefinirProdutorTrabalho(CodPessoaProdutor, NomPessoaProdutor);
  end;
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);
  try
    {Realiza pesquisa de animais de acordo com os critérios informados}
    Retorno := PesquisarRelatorioPrevisaoParto(Qry, CodEventoEstacaoMonta,
      CodTipoEventosCobertura, DtaPrevistaPartoInicio, DtaPrevistaPartoFim,
      CodRacas, CodCategorias, IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
      QtdCompRacialFim1, IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2,
      QtdCompRacialFim2, IndAgrupRaca3, CodRaca3, QtdCompRacialInicio3,
      QtdCompRacialFim3, IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
      QtdCompRacialFim4, NumOrdemInicio, NumOrdemFim, CodLotes, CodLocais,
      CodFazendaManejo, CodAnimalManejoInicio, CodAnimalManejoFim,
      CodFazendaManejoPai, CodAnimalManejoPai, IndDiagnosticoPrenhez, CodTarefa);

    if Retorno < 0 then
    begin
      if Retorno = idExceedsTheConfiguredThreshold then
      begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodEventoEstacaoMonta,
                                                              CodTipoEventosCobertura, DtaPrevistaPartoInicio,
                                                              DtaPrevistaPartoFim, CodRacas, CodCategorias,
                                                              IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                                              QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                              QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
                                                              CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                              IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                                              QtdCompRacialFim4, NumOrdemInicio, NumOrdemFim,
                                                              CodLotes, CodLocais, CodFazendaManejo,
                                                              CodAnimalManejoInicio, CodAnimalManejoFim,
                                                              CodFazendaManejoPai, CodAnimalManejoPai,
                                                              Tipo, Conexao.CodProdutorTrabalho, IndDiagnosticoPrenhez]);
        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodEventoEstacaoMonta,
                                                              CodTipoEventosCobertura, DtaPrevistaPartoInicio,
                                                              DtaPrevistaPartoFim, CodRacas, CodCategorias,
                                                              IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                                              QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                              QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
                                                              CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                              IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                                              QtdCompRacialFim4, NumOrdemInicio, NumOrdemFim,
                                                              CodLotes, CodLocais, CodFazendaManejo,
                                                              CodAnimalManejoInicio, CodAnimalManejoFim,
                                                              CodFazendaManejoPai, CodAnimalManejoPai,
                                                              Tipo, Conexao.CodProdutorTrabalho, IndDiagnosticoPrenhez],
                                                              DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then begin
      Mensagens.Adicionar(1551, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      Rel.TipoDoArquvio := Tipo;

      {Define o relatório em questão e carrega os seus dados específicos}
      Retorno := Rel.CarregarRelatorio(CodRelatorio);
      if Retorno < 0 then Exit;

      {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
      if CodTarefa > 0 then begin
        Rel.CodTarefa := CodTarefa;
      end;

      {Inicializa o procedimento de geração do arquivo de relatório}
      Retorno := Rel.InicializarRelatorio;
      if Retorno < 0 then Exit;

      {Incializa totalizadores (subtotal e total)}
      iSubTotal := 0;
      iSubTotalPrenhas := 0;
      iSubTotalSemDiag := 0;
      iTotal := 0;
      iTotalPrenhas := 0;
      iTotalSemDiag := 0;

      sQuebra := '';
      Qry.First;
      while not Qry.EOF do begin
        if (Rel.LinhasRestantes <= 2) and (Rel.TipoDoArquvio = 1) then begin
          {Verifica se o próximo registro existe, para que o último registro
          do relatório possa ser exibido na próxima folha, e assim o total não
          seja mostrado sozinho nesta folha}
          if Qry.FindNext then begin
            Qry.Prior;
          end else begin
            Rel.NovaPagina;
          end;
        end;
        {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
        Rel.Campos.CarregarValores(Qry);
        {Percorre o(s) campo(s) informado(s) para quebra}
        sAux := FormatDateTime('mm/yyyy', Qry.FieldByName('MesPrevisto').AsDateTime);
        if (sAux <> sQuebra) then begin
          {Se ocorreu mudança na quebra atual ou é a primeira ('')}
          {Apresenta subtotal para quebra concluída, caso não seja a primeira}
          if sQuebra <> '' then begin
            Rel.NovaLinha;
            Rel.Campos.LimparValores;
            Rel.ImprimirTexto(0,
              'Total no mês '+sQuebra+': '+IntToStr(iSubTotal)+
              ' - Prenhas: '+IntToStr(iSubTotalPrenhas)+' '+
              Trim(FloatToStrF(iSubTotalPrenhas / iSubTotal * 100, ffNumber, 11, 2))+
              '% - Sem Diagnóstico: '+IntToStr(iSubTotalSemDiag)+' '+
              Trim(FloatToStrF(iSubTotalSemDiag / iSubTotal * 100, ffNumber, 11, 2))+
              '%');
            {Zera acumulador da quebra}
            iSubTotal := 0;
            iSubTotalPrenhas := 0;
            iSubTotalSemDiag := 0;
          end;
          sQuebra := sAux;
          if (Rel.LinhasRestantes <= 4) and (Rel.TipoDoArquvio = 1) then begin
            {Verifica se a quebra possui somente um registro e se o espaço é su-
            ficiênte para a impressão de título, registro e subtotal, caso
            contrário quebra a página antes da impressão}
            if not Qry.FindNext then begin
              Rel.NovaPagina;
            end else begin
              if sAux <> FormatDateTime('mm/yyyy', Query.FieldByName('MesPrevisto').AsDateTime) then begin
                Rel.NovaPagina;
                Break;
              end;
            end;
            Qry.Prior;
          end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
            {Salta uma linha antes da quebra, caso não seja a primeira da pág.}
            Rel.NovaLinha;
          end;
          {Imprime título da quebra}
  //        Rel.FonteNegrito;
  //        Rel.ImprimirTexto(0, sQuebra);
  //        Rel.FonteNormal;
        end else if (Rel.LinhasRestantes = Rel.LinhasPorPagina) then begin
          {Repete o título da quebra no topo da nova pág. qdo ocorrer quebra de pág.}
  //        Rel.FonteNegrito;
  //        Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
  //        Rel.FonteNormal;
        end;

        {Verifica se o registro a ser apresentado é o último da quebra, caso
        seja faz com que ele possa ser exibido na próxima folha, e assim o
        subtotal e/ou o total não sejam mostrados sozinhos nesta folha}
        if (Rel.LinhasRestantes <= 2) and (Rel.TipoDoArquvio = 1) then begin
          if Qry.FindNext then begin
            if sAux <> FormatDateTime('mm/yyyy', Qry.FieldByName('MesPrevisto').AsDateTime) then begin
              Rel.NovaPagina;
              Break;
            end;
            Query.Prior;
            {Caso uma nova pág. tenha sido criada, força o reinício do procedi-
            mento para que o nome do produtor possa ser impresso no início da nova
            página concatenado com o texto "(continuação)"}
            if Rel.LinhasRestantes = Rel.LinhasPorPagina then begin
              Continue;
            end;
          end;
        end;
        Rel.ImprimirColunasResultSet(Qry);
        Inc(iSubTotal);
        Inc(iTotal);
        if Qry.FieldByName('DesDiagPrenhez').AsString = 'Sem diagnóstico' then begin
          Inc(iSubTotalSemDiag);
          Inc(iTotalSemDiag);
        end else if Qry.FieldByName('DesDiagPrenhez').AsString = 'Prenha' then begin
          Inc(iSubTotalPrenhas);
          Inc(iTotalPrenhas);
        end;
        Qry.Next;
      end;
      {Monta Linhas totalizadoras, caso necessário}
      if Qry.RecordCount > 1 then begin
        {Totalizador da quebra}
        Rel.NovaLinha;
        Rel.Campos.LimparValores;
        Rel.ImprimirTexto(0,
          'Total no mês '+sAux+': '+IntToStr(iSubTotal)+
          ' - Prenhas: '+IntToStr(iSubTotalPrenhas)+' '+
          Trim(FloatToStrF(iSubTotalPrenhas / iSubTotal * 100, ffNumber, 11, 2))+
          '% - Sem Diagnóstico: '+IntToStr(iSubTotalSemDiag)+' '+
          Trim(FloatToStrF(iSubTotalSemDiag / iSubTotal * 100, ffNumber, 11, 2))+
          '%');
      end;
      {Total geral}
      Rel.NovaLinha;
      Rel.Campos.LimparValores;
      Rel.ImprimirTexto(0,
        'Total de Animais: '+IntToStr(iTotal)+
        ' - Prenhas: '+IntToStr(iTotalPrenhas)+' '+
        Trim(FloatToStrF(iTotalPrenhas / iTotal * 100, ffNumber, 11, 2))+
        '% - Sem Diagnóstico: '+IntToStr(iTotalSemDiag)+' '+
        Trim(FloatToStrF(iTotalSemDiag / iTotal * 100, ffNumber, 11, 2))+
        '%');
      {Inicia processamento de encerramento do relatório em questão}
      Retorno := Rel.FinalizarRelatorio;
      if Retorno = 0 then begin
        {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
        Result := Rel.NomeArquivo;
      end;
    finally
      Rel.Free;
    end;
  Finally
    Qry.Free;
  end;
end;

{function TIntEventos.AlterarMontaAutomatica(CodEvento, CodAnimalPai:Integer): Integer;
const
  Metodo: Integer = 472;
  NomeMetodo: String = 'AlterarMontaAutomatica';
  CodTipoEvento: Integer = 32;
var
  Q: THerdomQuery;
  X: Integer;
  CodAnimalFemea: Integer;
  CodAnimalCria: Integer;
  CodEstacaoMonta: Integer;
  IndRM: String;
begin
  Result := -1;
  IndRM := 'N';
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try


      //seleciona a fêmea do evento
      Q.SQL.Clear;
      Q.SQL.Add('select tae.cod_animal, te.cod_evento_associado ' +
                ' from tab_animal_evento tae, ' +
                '      tab_evento te ' +
                '  where ' +
                '  tae.cod_evento =:cod_evento and ' +
                '  tae.cod_pessoa_produtor =:cod_pessoa_produtor and '+
                '  tae.cod_evento = te.cod_evento and ' +
                '  tae.cod_pessoa_produtor = te.cod_pessoa_produtor ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;

      CodAnimalFemea := Q.Fieldbyname('cod_animal').asinteger;
      CodEstacaoMonta := Q.Fieldbyname('cod_evento_associado').asinteger;

      // Verifica se o touro ou RM informados são válidos
      // e participaram de monta com a fêmea do evento
      Q.SQL.Clear;
      Q.SQL.Add('select 1 from '+
                ' (select distinct tem.cod_animal_touro CodAnimal '+
                ' from tab_evento_monta_controlada as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea  '+
                ' and   te.cod_tipo_evento = 27 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' union '+
                ' select distinct tae.cod_animal CodAnimal '+
                ' from tab_evento_insemin_artificial as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' and   te.cod_tipo_evento = 26 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' union '+
                ' select distinct tem.cod_animal_touro as CodAnimal '+
                ' from tab_evento_cobertura_reg_pasto as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' and   te.cod_tipo_evento = 23 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   tem.cod_reprodutor_multiplo is null '+
                ' union '+
                ' select distinct tem.cod_reprodutor_multiplo CodAnimal '+
                ' from tab_evento_cobertura_reg_pasto as tem, '+
                '      tab_evento as te, '+
                '      tab_animal_evento as tae '+
                ' where te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                ' and   te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                ' and   te.cod_evento = tae.cod_evento '+
                ' and   tae.cod_animal = :cod_animal_femea '+
                ' and   te.cod_tipo_evento = 23 '+
                ' and   te.cod_pessoa_produtor = tem.cod_pessoa_produtor '+
                ' and   te.cod_evento = tem.cod_evento '+
                ' and   te.cod_evento_associado = :cod_estacao_monta '+
                ' and   tem.cod_animal_touro is null) as tabela '+
                ' where CodAnimal = :cod_animal_touro ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_estacao_monta').AsInteger := CodEstacaoMonta;
      Q.ParamByName('cod_animal_femea').AsInteger := CodAnimalFemea;
      Q.ParamByName('cod_animal_touro').AsInteger := CodAnimalPai;
      Q.Open;

      if Q.IsEmpty then begin
        Mensagens.Adicionar(1566, Self.ClassName, NomeMetodo, []);
        Result := -1566;
        Exit;
      end;

      //verifica se é touro ou RM
      Q.SQL.Clear;
      Q.SQL.Add('select 1 '+
                ' from tab_reprodutor_multiplo '+
                ' where cod_reprodutor_multiplo = :cod_reprodutor_multiplo '+
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodAnimalPai;
      Q.Open;

      if not Q.IsEmpty then
         IndRM := 'S';

      //busca a cria para que seja alterada a sua filiação
      Q.SQL.Clear;
      Q.SQL.Add('select tac.cod_animal '+
                ' from tab_animal_cria tac '+
                ' where cod_evento in (select cod_evento '+
                '                      from tab_evento_parto '+
                '                      where cod_evento_cobertura =:cod_evento '+
                '                      and   cod_pessoa_produtor =:cod_pessoa_produtor) '+
                ' and cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.Parambyname('cod_evento').asinteger := CodEvento;
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.Open;

      CodAnimalCria := Q.Fieldbyname('cod_animal').asinteger;

      // Abre transação
      beginTran;
      // ------------------------------------------------------------------------------
      // Altera o evento de monta automatica
      // ------------------------------------------------------------------------------
      Q.SQL.Clear;
      Q.SQL.Add('update tab_evento_monta_automatica ' +
                '  set ');
      if IndRM = 'N' then begin
         Q.SQL.Add(' cod_animal_touro = :cod_animal_touro, ');
         Q.SQL.Add(' cod_reprodutor_multiplo = null ');
      end else begin
         Q.SQL.Add(' cod_reprodutor_multiplo = :cod_reprodutor_multiplo, ');
         Q.SQL.Add(' cod_animal_touro = null ');
      end;
      Q.SQL.Add('  where ' +
                '  cod_evento =:cod_evento and ' +
                '  cod_pessoa_produtor =:cod_pessoa_produtor ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      if IndRM = 'N' then
         Q.Parambyname('cod_animal_touro').asinteger := CodAnimalPai;
      if IndRM = 'S' then
         Q.Parambyname('cod_reprodutor_multiplo').asinteger := CodAnimalPai;
      Q.ExecSQL;

      // -------------------------------------------------------------------
      // Altera pai do animal
      // -------------------------------------------------------------------
      Q.SQL.Clear;
      Q.SQL.Add('update tab_animal ' +
                ' set ');
      if IndRM = 'N' then
         Q.SQL.Add(' cod_animal_pai = :cod_animal_pai ');
      if IndRM = 'S' then
         Q.SQL.Add(' cod_reprodutor_multiplo = :cod_reprodutor_multiplo ');
      Q.SQL.Add(' where cod_animal = :cod_animal '+
                ' and   cod_pessoa_produtor = :cod_pessoa_produtor ');
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_animal').AsInteger := CodAnimalCria;
      if IndRM = 'N' then
         Q.ParamByName('cod_animal_pai').AsInteger := CodAnimalPai;
      if IndRM = 'S' then
         Q.ParamByName('cod_reprodutor_multiplo').AsInteger := CodAnimalPai;
      Q.ExecSQL;

      Q.SQL.Clear;}
{$IFDEF MSSQL}
{      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;}
{$ENDIF}

     // Chama proc de composição racial
{     Q.SQL.Clear;}
{$IFDEF MSSQL}
{     Q.SQL.Add('exec spt_calcula_comp_racial :cod_animal, ' +
            '                             :cod_pessoa_produtor, '+
            '                             :cod_animal_pai, '+
            '                             :cod_animal_mae, '+
            '                             :ind_tipo ');}
{$ENDIF}
{     Q.ParamByName('cod_animal').AsInteger := CodAnimalCria;
     Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
     Q.ParamByName('cod_animal_pai').AsInteger := CodAnimalPai;
     Q.ParamByName('cod_animal_mae').AsInteger := CodAnimalFemea;
     Q.ParamByName('ind_tipo').AsInteger := 2;
     Q.ExecSQL;


      // Cofirma transação
      Commit;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1429, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1429;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;}

function TIntEventos.PesquisarMontasParto(CodEventoParto: Integer): Integer;
const
  Metodo: Integer = 473;
  NomeMetodo: String = 'PesquisarMontasParto';
var
  CodEstacaoMonta: Integer;
  CodAnimalFemea: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  try
    //pesquisa a estação de monta do evento de parto
    Query.SQL.Clear;
    Query.SQL.Add('select cod_evento_associado '+
                  'from tab_evento '+
                  'where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  'and   cod_evento = :cod_evento ');

    Query.ParamByName('cod_evento').AsInteger := CodEventoParto;
    Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    Query.Open;

    if Query.IsEmpty then begin
      Mensagens.Adicionar(837, Self.ClassName, NomeMetodo, []);
      Result := -837;
      Exit;
    end;

    CodEstacaoMonta := Query.Fieldbyname('cod_evento_associado').asinteger;

    //pesquisa a fêmea
    Query.SQL.Clear;
    Query.SQL.Add('select cod_animal '+
                  'from tab_animal_evento '+
                  'where cod_pessoa_produtor = :cod_pessoa_produtor '+
                  'and   cod_evento = :cod_evento ');

    Query.ParamByName('cod_evento').AsInteger := CodEventoParto;
    Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    Query.Open;

    CodAnimalFemea := Query.Fieldbyname('cod_animal').asinteger;

    //pesquisa as montas dessa fêmea para a estação
    Query.SQL.Clear;
    Query.SQL.Add('select  te.cod_evento as CodEvento, '+
                  '        tte.sgl_tipo_evento as SglTipoEvento, '+
                  '        tte.des_tipo_evento as DesTipoEvento, '+
                  '        te.dta_inicio as DtaInicio, '+
                  '        te.dta_fim as DtaFim, '+
                  '        te.txt_dados as TxtDados, '+
                  '        tf.sgl_fazenda as SglFazenda '+
                  ' from   tab_animal_evento tae, '+
                  '        tab_evento te, '+
                  '        tab_tipo_evento tte, '+
                  '        tab_fazenda tf '+
                  ' where  te.cod_pessoa_produtor = :cod_pessoa_produtor '+
                  ' and    te.cod_evento_associado = :cod_estacao_monta '+
                  ' and    te.cod_evento = tae.cod_evento '+
                  ' and    te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
                  ' and    tae.cod_animal = :cod_animal_femea '+
                  ' and    te.cod_fazenda = tf.cod_fazenda '+
                  ' and    te.cod_pessoa_produtor = tf.cod_pessoa_produtor '+
                  ' and    te.cod_tipo_evento = tte.cod_tipo_evento '+
                  ' and    te.cod_tipo_evento in (26,27,23) '+
                  ' order by te.dta_inicio ');

    Query.ParamByName('cod_estacao_monta').AsInteger := CodEstacaoMonta;
    Query.ParamByName('cod_animal_femea').AsInteger := CodAnimalFemea;
    Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    Query.Open;

    Result := 0;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(1567, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -1567;
      Exit;
    end;
  end;
end;

function TIntEventos.PesquisarRelatorioFemeasADiagnosticar(EQuery: THerdomQuery;
  CodEventoEstacaoMonta: Integer; CodTipoEventosCobertura: String;
  DtaDiagnosticoPrevisto: TDateTime; CodRacas, IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
  NumOrdemInicio, NumOrdemFim: Integer; CodLotes, CodLocais,
  CodCategorias: String; CodFazendaManejo: Integer; CodAnimalManejoInicio,
  CodAnimalManejoFim: String; CodFazendaManejoPai: Integer;
  CodAnimalManejoPai: String; CodTarefa: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioFemeasADiagnosticar';
  CodRelatorio: Integer = 19;

  fCODANIMALMANEJO: Integer = 1;
  fSGLRACA: Integer = 2;
  fDESCOMPOSICAORACIAL: Integer = 3;
  fSGLCATEGORIAANIMAL: Integer = 4;
  fCODANIMALMANEJOPAI: Integer = 5;
  fNOMANIMALPAI: Integer = 6;
  fCODANIMALMANEJOMAE: Integer = 7;
  fSGLLOTECORRENTE: Integer = 8;
  fSGLLOCALCORRENTE: Integer = 9;
  fDTAULTIMOPARTO: Integer = 10;
  fNUMDIASULTIMOPARTO: Integer = 11;
  fCODMANEJOANIMALCRIA: Integer = 12;
  fINDSEXOCRIA: Integer = 13;
  fDTAULTIMACOBERTURA: Integer = 14;
  fSGLTIPOEVENTOULTIMACOBERTURA: Integer = 15;
  fNUMULTIMACOBERTURA: Integer = 16;
  fNUMDIASULTIMACOBERTURA: Integer = 17;
  fCODANIMALMANEJOULTIMACOBERTURA: Integer = 18;
  fNOMREDUZIDOPESSOAINSEMINADOR: Integer = 19;
  fDESDIAGNOSTICO: Integer = 20;

var
  iAux: Integer;
  Param: TValoresParametro;
  IntRelatorios: TIntRelatorios;
  DtaReferencia: TDateTime;
  bAux, bPersonalizavel, bPai, bMae, bEventoUltimoParto: Boolean; // bDtaPrevista --------
  sAux: String;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        EQuery.SQL.Text := EQuery.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodTipoEventosCobertura <> '' then begin
      Result := VerificaParametroMultiValor(CodTipoEventosCobertura, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLotes <> '' then begin
      Result := VerificaParametroMultiValor(CodLotes, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLocais <> '' then begin
      Result := VerificaParametroMultiValor(CodLocais, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    bEventoUltimoParto :=
      not (bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fDTAULTIMOPARTO) = 1)
      or (IntRelatorios.CampoAssociado(fNUMDIASULTIMOPARTO) = 1)
      or (IntRelatorios.CampoAssociado(fCODMANEJOANIMALCRIA) = 1)
      or (IntRelatorios.CampoAssociado(fINDSEXOCRIA) = 1)
      or ((NumOrdemInicio > 0) and (NumOrdemFim > 0));

    bPai :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOPAI) = 1)
      or (IntRelatorios.CampoAssociado(fNOMANIMALPAI) = 1)
      or (CodFazendaManejoPai > 0)
      or (CodAnimalManejoPai <> '');

    bMae :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOMAE) = 1);

    if DtaDiagnosticoPrevisto > 0 then begin
      DtaReferencia := Trunc(DtaDiagnosticoPrevisto);
    end else begin
      DtaReferencia := Trunc(DtaSistema);
    end;

    try
      // Cria tabela temporária de pesquisa, quando não existir
      EQuery.SQL.Text :=
        'if object_id(''tempdb..#tmp_relatorio_femeas_diagnosticar'') is null '+
        'begin '+
        '  create table #tmp_relatorio_femeas_diagnosticar '+
        '  ( '+
        '    cod_pessoa_produtor int not null '+
        '    , cod_animal int not null '+
        '    , CodAnimalManejo varchar(11) null '+
        '    , SglRaca varchar(3) null '+
        '    , DesComposicaoRacial varchar(50) null '+
        '    , SglCategoriaAnimal varchar(3) null '+
        '    , cod_animal_pai int null '+
        '    , cod_reprodutor_multiplo_pai int null '+
        '    , cod_fazenda_manejo_pai int null '+
        '    , cod_animal_manejo_pai varchar(8) null '+
        '    , CodAnimalManejoPai varchar(11) null '+
        '    , NomAnimalPai varchar(60) null '+
        '    , cod_animal_mae int null '+
        '    , CodAnimalManejoMae varchar(11) null '+
        '    , SglLocalCorrente varchar(2) null '+
        '    , SglLoteCorrente varchar(2) null '+
        '    , cod_evento_ultimo_parto int null '+
        '    , num_ordem_parto int null '+
        '    , DtaUltimoParto smalldatetime null '+
        '    , NumDiasUltimoParto int null '+
        '    , CodManejoAnimalCria varchar(37) null '+
        '    , IndSexoCria char(7) null '+
        '    , cod_evento_ultima_cobertura int null '+
        '    , DtaUltimaCobertura smalldatetime null '+
        '    , SglTipoEventoUltimaCobertura varchar(2) null '+
        '    , NumUltimaCobertura int null '+
        '    , NumDiasUltimaCobertura int null '+
        '    , CodAnimalManejoUltimaCobertura varchar(11) null '+
        '    , NomReduzidoPessoaInseminador varchar(15) null '+
        '    , DesDiagnostico varchar(5) null '+
        '  ) '+
        '  create index idx_tmp_diagnosticar_parto on #tmp_relatorio_femeas_diagnosticar (cod_pessoa_produtor, cod_evento_ultimo_parto) '+
        '  create index idx_tmp_diagnosticar_cobertura on #tmp_relatorio_femeas_diagnosticar (cod_pessoa_produtor, cod_evento_ultima_cobertura) '+
        '  create index idx_tmp_diagnosticar_rm on #tmp_relatorio_femeas_diagnosticar (cod_pessoa_produtor, cod_reprodutor_multiplo_pai) '+
        '  create index idx_tmp_diagnosticar_pai on #tmp_relatorio_femeas_diagnosticar (cod_pessoa_produtor, cod_animal_pai) '+
        '  create index idx_tmp_diagnosticar_mae on #tmp_relatorio_femeas_diagnosticar (cod_pessoa_produtor, cod_animal_mae) '+
        'end ';
//      EQuery.SQL.SaveToFile('c:\tmp\Create.sql');
      EQuery.ExecSQL;

      // Esvazia a tabela temporária
      EQuery.SQL.Text :=
        'truncate table #tmp_relatorio_femeas_diagnosticar ';
//      EQuery.SQL.SaveToFile('c:\tmp\Truncate.sql');
      EQuery.ExecSQL;

      // Define quais campos seram populados
      EQuery.SQL.Clear;
      SQL('insert into #tmp_relatorio_femeas_diagnosticar ', 0);
      SQL('( ', 0);
      SQL('  cod_pessoa_produtor ', 0);
      SQL('  , cod_animal ', 0);
      SQL('  , CodAnimalManejo ',                                                  fCODANIMALMANEJO);
      SQL('  , SglRaca ',                                                          fSGLRACA);
      SQL('  , DesComposicaoRacial ',                                              fDESCOMPOSICAORACIAL);
      SQL('  , SglCategoriaAnimal ',                                               fSGLCATEGORIAANIMAL);
      SQL('  , cod_animal_pai ',                                                   SE(bPai, 0, -1));
      SQL('  , cod_reprodutor_multiplo_pai ',                                      SE(bPai, 0, -1));
      SQL('  , cod_animal_mae ',                                                   SE(bMae, 0, -1));
      SQL('  , SglLocalCorrente ',                                                 fSGLLOCALCORRENTE);
      SQL('  , SglLoteCorrente ',                                                  fSGLLOTECORRENTE);
      SQL('  , DesDiagnostico ',                                                   fDESDIAGNOSTICO);
      SQL('  , cod_evento_ultimo_parto ',                                          SE(bEventoUltimoParto, 0, -1));
      SQL('  , cod_evento_ultima_cobertura ',                                      0);
      SQL('  , NumUltimaCobertura ',                                               fNUMULTIMACOBERTURA);
      SQL(') ', 0);

      // Obtem os dados que atendam aos critérios de pesquisa
      SQL('select ', 0);
      SQL('  tae.cod_pessoa_produtor ', 0);
      SQL('  , tae.cod_animal ', 0);
      SQL('  , case when ta.cod_fazenda_manejo is null then '+
          '      ta.cod_animal_manejo '+
          '    else '+
          '      tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
          '    end ',                                                              fCODANIMALMANEJO);
      SQL('  , tr.sgl_raca ',                                                      fSGLRACA);
      SQL('  , dbo.FNT_COMPOSICAO_RACIAL(ta.cod_pessoa_produtor, ta.cod_animal) ', fDESCOMPOSICAORACIAL);
      SQL('  , tca.sgl_categoria_animal ',                                         fSGLCATEGORIAANIMAL);
      SQL('  , ta.cod_animal_pai ',                                                SE(bPai, 0, -1));
      SQL('  , ta.cod_reprodutor_multiplo ',                                       SE(bPai, 0, -1));
      SQL('  , ta.cod_animal_mae ',                                                SE(bMae, 0, -1));
      SQL('  , tlc.sgl_local ',                                                    fSGLLOCALCORRENTE);
      SQL('  , tlt.sgl_lote ',                                                     fSGLLOTECORRENTE);
      SQL('  , ''_____'' ',                                                        fDESDIAGNOSTICO);
      SQL('  , ( '+
          '      select '+
          '        top 1 '+
          '        ite.cod_evento '+
          '      from '+
          '        tab_evento ite '+
          '        , tab_animal_evento itae '+
          '      where '+
          '        ite.cod_tipo_evento = 30 '+
          '        and ite.cod_pessoa_produtor = itae.cod_pessoa_produtor '+
          '        and ite.cod_evento = itae.cod_evento '+
          '        and itae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '        and itae.cod_animal = tae.cod_animal '+
          '      order by '+
          '        ite.dta_inicio desc '+
          '    ) ',                                                                SE(bEventoUltimoParto, 0, -1));
      SQL('  , max(te.cod_evento) ', 0);
      SQL('  , count(te.cod_evento) ',                                             fNUMULTIMACOBERTURA);
      SQL('from ', 0);
      SQL('  tab_evento te with (nolock) ', 0);
      SQL('  , tab_animal_evento tae with (nolock) ', 0);
      SQL('  , tab_animal ta with (nolock) ', 0);
      SQL('  , tab_fazenda tfm ',                                                  fCODANIMALMANEJO);
      SQL('  , tab_raca tr ',                                                      fSGLRACA);
      SQL('  , tab_categoria_animal tca ',                                         fSGLCATEGORIAANIMAL);
      SQL('  , tab_local tlc ',                                                    fSGLLOCALCORRENTE);
      SQL('  , tab_lote tlt ',                                                     fSGLLOTECORRENTE);
      SQL('  , tab_composicao_racial as tcr with (nolock) ',                       SE(IndAgrupRaca1 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                      SE(IndAgrupRaca2 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                      SE(IndAgrupRaca3 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                      SE(IndAgrupRaca4 = 'N', 0, -1));
      SQL('where ', 0);
      SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ', 0);
      SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ', 0);
      SQL('  and tae.cod_evento = te.cod_evento ', 0);
      SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ', 0);
      SQL('  and ta.cod_animal = tae.cod_animal ', 0);
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fCODANIMALMANEJO);
      SQL('  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ',                       fCODANIMALMANEJO);
      SQL('  and tr.cod_raca = ta.cod_raca ',                                      fSGLRACA);
      SQL('  and tca.cod_categoria_animal =* ta.cod_categoria_animal ',            fSGLCATEGORIAANIMAL);
      SQL('  and tlc.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tlc.cod_fazenda =* ta.cod_fazenda_corrente '+
          '  and tlc.cod_local =* ta.cod_local_corrente ',                         fSGLLOCALCORRENTE);
      SQL('  and tlt.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tlt.cod_fazenda =* ta.cod_fazenda_corrente '+
          '  and tlt.cod_lote =* ta.cod_lote_corrente ',                           fSGLLOTECORRENTE);
      SQL('  and not exists (select top 1 1 '+
          '                    from tab_animal_evento netae with (nolock), tab_evento nete with (nolock) '+
          '                   where nete.cod_tipo_evento = 28 '+
          '                     and nete.cod_evento_associado = :cod_evento_estacao_monta '+
          '                     and nete.cod_pessoa_produtor = netae.cod_pessoa_produtor '+
          '                     and nete.cod_evento = netae.cod_evento '+
          '                     and netae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '                     and netae.cod_animal = tae.cod_animal) ',          0);
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and ta.cod_animal = tcr.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and ta.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and ta.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and ta.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;
      if Conexao.CodPapelUsuario = 3 then begin
         SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico or ta.cod_pessoa_tecnico is null) ', 0);
      end;
      if IndAgrupRaca1 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          EQuery.ParamByName('codraca1').AsInteger := CodRaca1;
          EQuery.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          EQuery.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          EQuery.ParamByName('codraca2').AsInteger := CodRaca2;
          EQuery.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          EQuery.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          EQuery.ParamByName('codraca3').AsInteger := CodRaca3;
          EQuery.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          EQuery.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          EQuery.ParamByName('codraca4').AsInteger := CodRaca4;
          EQuery.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          EQuery.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
      end;
      EQuery.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      EQuery.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;
      if Conexao.CodPapelUsuario = 3 then begin
        EQuery.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;


      // Critérios de pesquisa
      if CodFazendaManejo > 0 then begin
        SQL('  and ta.cod_fazenda_manejo = :cod_fazenda_manejo ', 0);
        EQuery.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
        SQL('  and ta.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        EQuery.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoInicio;
        EQuery.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoFim;
      end;
      if CodTipoEventosCobertura = '' then begin
        SQL('  and te.cod_tipo_evento in (23, 26, 27) ', 0);
      end else begin
        SQL('  and te.cod_tipo_evento in ( '+CodTipoEventosCobertura+' ) ', 0);
      end;
      if CodRacas <> '' then begin
        SQL('  and ta.cod_raca in ( '+CodRacas+' ) ', 0);
      end;
      if CodCategorias <> '' then begin
        SQL('  and ta.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
      end;
      if CodLocais <> '' then begin
        SQL('  and ta.cod_local_corrente in ( '+CodLocais+' ) ', 0);
      end;
      if CodLotes <> '' then begin
        SQL('  and ta.cod_lote_corrente in ( '+CodLotes+' ) ', 0);
      end;

      // Consolidação por último evento de cobertura
      SQL('group by ', 0);
      SQL('  tae.cod_pessoa_produtor ', 0);
      SQL('  , tae.cod_animal ', 0);
      SQL('  , case when ta.cod_fazenda_manejo is null then '+
          '      ta.cod_animal_manejo '+
          '    else '+
          '      tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
          '    end ',                                                              fCODANIMALMANEJO);
      SQL('  , tr.sgl_raca ',                                                      fSGLRACA);
      SQL('  , dbo.FNT_COMPOSICAO_RACIAL(ta.cod_pessoa_produtor, ta.cod_animal) ', fDESCOMPOSICAORACIAL);
      SQL('  , tca.sgl_categoria_animal ',                                         fSGLCATEGORIAANIMAL);
      SQL('  , ta.cod_animal_pai ',                                                SE(bPai, 0, -1));
      SQL('  , ta.cod_reprodutor_multiplo ',                                       SE(bPai, 0, -1));
      SQL('  , ta.cod_animal_mae ',                                                SE(bMae, 0, -1));
      SQL('  , tlc.sgl_local ',                                                    fSGLLOCALCORRENTE);
      SQL('  , tlt.sgl_lote ',                                                     fSGLLOTECORRENTE);
//      EQuery.SQL.SaveToFile('c:\tmp\Insert.sql');
      EQuery.ExecSQL;

      // Atualiza informações referentes a última cobertura
      // Cobertura por insem artificial
      EQuery.SQL.Text :=
        'update '+
        '  #tmp_relatorio_femeas_diagnosticar '+
        'set '+
        '  NumDiasUltimaCobertura = cast(cast( :dta_referencia as smalldatetime) as integer) - cast(te.dta_fim as integer) '+
        '  , DtaUltimaCobertura = te.dta_fim '+
        '  , SglTipoEventoUltimaCobertura = tte.sgl_tipo_evento '+
        '  , CodAnimalManejoUltimaCobertura = dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') '+
        '  , NomReduzidoPessoaInseminador = tps.nom_reduzido_pessoa_secundaria '+
        'from '+
        '  tab_evento_insemin_artificial teia '+
        '  , tab_evento te '+
        '  , tab_tipo_evento tte '+
        '  , tab_pessoa_secundaria tps '+
        'where '+
        '  teia.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
        '  and teia.cod_evento = #tmp_relatorio_femeas_diagnosticar.cod_evento_ultima_cobertura '+
        '  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor '+
        '  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador '+
        '  and te.cod_pessoa_produtor = teia.cod_pessoa_produtor '+
        '  and te.cod_evento = teia.cod_evento '+
        '  and tte.cod_tipo_evento = te.cod_tipo_evento ';
      EQuery.ParamByName('dta_referencia').AsDateTime := DtaReferencia;
//      EQuery.SQL.SaveToFile('c:\tmp\UpdateUltimaCobertura1.sql');
      EQuery.ExecSQL;

      // Atualiza informações referentes a última cobertura
      // Cobertura por monta controlada
      EQuery.SQL.Text :=
        'update '+
        '  #tmp_relatorio_femeas_diagnosticar '+
        'set '+
        '  NumDiasUltimaCobertura = cast(cast( :dta_referencia as smalldatetime) as integer) - cast(te.dta_fim as integer) '+
        '  , DtaUltimaCobertura = te.dta_fim '+
        '  , SglTipoEventoUltimaCobertura = tte.sgl_tipo_evento '+
        '  , CodAnimalManejoUltimaCobertura = dbo.FNT_BUSCAR_PAI(temc.cod_animal_touro, temc.cod_pessoa_produtor, ''T'') '+
        'from '+
        '  tab_evento_monta_controlada temc '+
        '  , tab_evento te '+
        '  , tab_tipo_evento tte '+
        'where '+
        '  temc.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
        '  and temc.cod_evento = #tmp_relatorio_femeas_diagnosticar.cod_evento_ultima_cobertura '+
        '  and te.cod_pessoa_produtor = temc.cod_pessoa_produtor '+
        '  and te.cod_evento = temc.cod_evento '+
        '  and tte.cod_tipo_evento = te.cod_tipo_evento ';
      EQuery.ParamByName('dta_referencia').AsDateTime := DtaReferencia;
//      EQuery.SQL.SaveToFile('c:\tmp\UpdateUltimaCobertura2.sql');
      EQuery.ExecSQL;

      // Atualiza informações referentes a última cobertura
      // Cobertura em regime de pasto
      EQuery.SQL.Text :=
        'update '+
        '  #tmp_relatorio_femeas_diagnosticar '+
        'set '+
        '  NumDiasUltimaCobertura = cast(cast( :dta_referencia as smalldatetime) as integer) - cast(te.dta_fim as integer) '+
        '  , DtaUltimaCobertura = te.dta_fim '+
        '  , SglTipoEventoUltimaCobertura = tte.sgl_tipo_evento '+
        '  , CodAnimalManejoUltimaCobertura = '+
        '    case '+
        '      when tecrp.cod_reprodutor_multiplo is not null then '+
        '        dbo.FNT_BUSCAR_PAI(tecrp.cod_reprodutor_multiplo, tecrp.cod_pessoa_produtor, ''R'') '+
        '      when tecrp.cod_animal_touro is not null then '+
        '        dbo.FNT_BUSCAR_PAI(tecrp.cod_animal_touro, tecrp.cod_pessoa_produtor, ''T'') '+
        '    else '+
        '      null '+
        '    end '+
        'from '+
        '  tab_evento_cobertura_reg_pasto tecrp '+
        '  , tab_evento te '+
        '  , tab_tipo_evento tte '+
        'where '+
        '  tecrp.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
        '  and tecrp.cod_evento = #tmp_relatorio_femeas_diagnosticar.cod_evento_ultima_cobertura '+
        '  and te.cod_pessoa_produtor = tecrp.cod_pessoa_produtor '+
        '  and te.cod_evento = tecrp.cod_evento '+
        '  and tte.cod_tipo_evento = te.cod_tipo_evento ';
      EQuery.ParamByName('dta_referencia').AsDateTime := DtaReferencia;
//      EQuery.SQL.SaveToFile('c:\tmp\UpdateUltimaCobertura3.sql');
      EQuery.ExecSQL;

      // Atualiza informações do último evento de parto do animal
      if bEventoUltimoParto then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_femeas_diagnosticar '+
          'set '+
          '  num_ordem_parto = tep.ind_ordem_parto '+
          '  , NumDiasUltimoParto = cast(cast( :dta_referencia as smalldatetime) as integer) - cast(te.dta_fim as integer) '+
          '  , DtaUltimoParto = te.dta_inicio '+
          '  , CodManejoAnimalCria = replace(dbo.FNT_LISTA_CRIAS(tep.cod_pessoa_produtor, tep.cod_evento, ''M''), '', '', char(13)+char(10)) '+
          '  , IndSexoCria = replace(dbo.FNT_LISTA_CRIAS(tep.cod_pessoa_produtor, tep.cod_evento, ''S''), '', '', char(13)+char(10)) '+
          'from '+
          '  tab_evento te '+
          '  , tab_evento_parto tep '+
          'where '+
          '  tep.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
          '  and tep.cod_evento = #tmp_relatorio_femeas_diagnosticar.cod_evento_ultimo_parto '+
          '  and te.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
          '  and te.cod_evento = tep.cod_evento ';
        EQuery.ParamByName('dta_referencia').AsDatetime := DtaReferencia;
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateEventoParto.sql');
        EQuery.ExecSQL;

        // Atualiza a ordem para o parto a ser realizado
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_femeas_diagnosticar '+
          'set '+
          '  num_ordem_parto = isnull(num_ordem_parto, 0)+1 ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateOrdem.sql');
        EQuery.ExecSQL;
      end;

      // Atualiza informações do pai quando necessário
      if bPai then begin
        // Quando o pai for um touro
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_femeas_diagnosticar '+
          'set '+
          '  cod_fazenda_manejo_pai = tap.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = tap.cod_animal_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when tap.cod_fazenda_manejo is null then '+
          '        tap.cod_animal_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + tap.cod_animal_manejo '+
          '    end '+
          '  , NomAnimalPai = tap.nom_animal '+
          'from '+
          '  tab_animal tap '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* tap.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* tap.cod_fazenda_manejo '+
          '  and tap.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
          '  and tap.cod_animal = #tmp_relatorio_femeas_diagnosticar.cod_animal_pai '+
          '  and #tmp_relatorio_femeas_diagnosticar.cod_animal_pai is not null ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdatePai.sql');
        EQuery.ExecSQL;

        // Quando o pai for um reprodutor múltiplo
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_femeas_diagnosticar '+
          'set '+
          '  cod_fazenda_manejo_pai = trm.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = trm.cod_reprodutor_multiplo_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when trm.cod_fazenda_manejo is null then '+
          '        trm.cod_reprodutor_multiplo_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + trm.cod_reprodutor_multiplo_manejo '+
          '    end '+
          'from '+
          '  tab_reprodutor_multiplo trm '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* trm.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* trm.cod_fazenda_manejo '+
          '  and trm.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
          '  and trm.cod_reprodutor_multiplo = #tmp_relatorio_femeas_diagnosticar.cod_reprodutor_multiplo_pai '+
          '  and #tmp_relatorio_femeas_diagnosticar.cod_reprodutor_multiplo_pai is not null ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdatePaiRM.sql');
        EQuery.ExecSQL;
      end;

      // Atualiza informações da mãe quando necessário
      if bMae then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_femeas_diagnosticar '+
          'set '+
          '  CodAnimalManejoMae = '+
          '    case '+
          '      when tam.cod_fazenda_manejo is null then '+
          '        tam.cod_animal_manejo '+
          '      else '+
          '        tfmm.sgl_fazenda + '' '' + tam.cod_animal_manejo '+
          '    end '+
          'from '+
          '  tab_animal tam '+
          '  , tab_fazenda tfmm '+
          'where '+
          '  tfmm.cod_pessoa_produtor =* tam.cod_pessoa_produtor '+
          '  and tfmm.cod_fazenda =* tam.cod_fazenda_manejo '+
          '  and tam.cod_pessoa_produtor = #tmp_relatorio_femeas_diagnosticar.cod_pessoa_produtor '+
          '  and tam.cod_animal = #tmp_relatorio_femeas_diagnosticar.cod_animal_mae '+
          '  and #tmp_relatorio_femeas_diagnosticar.cod_animal_mae is not null ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateMae.sql');
        EQuery.ExecSQL;
      end;

      // Recupera os dados que serão apresentados no relatório
      EQuery.SQL.Clear;
      SQL('select ', 0);
      SQL('  null ', 0);
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := '  , '+IntRelatorios.ValorCampo('NomField');
        SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1));
        IntRelatorios.IrAoProximo;
      end;
      SQL('from ', 0);
      SQL('  #tmp_relatorio_femeas_diagnosticar ', 0);
      SQL('where ', 0);
      SQL('  NumDiasUltimaCobertura > :NumDiasUltimaCobertura ', 0);
      EQuery.ParamByName('NumDiasUltimaCobertura').AsInteger := Conexao.ProdutorTrabalho.QtdDiasDiagnosticoGestacao;

      // Critérios referentes aos pais dos animais
      if (NumOrdemInicio > 0) and (NumOrdemFim > 0) then begin
        SQL('  and ( num_ordem_parto between :NumOrdemInicio and :NumOrdemFim ) ', 0);
        EQuery.ParamByName('NumOrdemInicio').AsInteger := NumOrdemInicio;
        EQuery.ParamByName('NumOrdemFim').AsInteger := NumOrdemFim;
      end;
      if CodFazendaManejoPai > 0 then begin
        SQL('  and cod_fazenda_manejo_pai = :cod_fazenda_manejo_pai ', 0);
        EQuery.ParamByName('cod_fazenda_manejo_pai').AsInteger := CodFazendaManejoPai;
      end;
      if CodAnimalManejoPai <> '' then begin
        SQL('  and cod_animal_manejo_pai = :cod_animal_manejo_pai ', 0);
        EQuery.ParamByName('cod_animal_manejo_pai').AsString := CodAnimalManejoPai;
      end;

      // Realiza "order by" por campos selecionados
      SQL('order by ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := SE(bAux,'  , ', '  ')+IntRelatorios.ValorCampo('NomField');
        if SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
          and not(bAux) then bAux := True;
        IntRelatorios.IrAoProximo;
      end;

      // Realiza consulta a massa de dados preparada
//      EQuery.SQL.SaveToFile('c:\tmp\Select.sql');
      EQuery.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      on E: exception do begin
        Rollback;
        iAux := Length(strExceedsTheConfiguredThreshold);
        if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
          Result := idExceedsTheConfiguredThreshold;
        end else begin
          Mensagens.Adicionar(1562, Self.ClassName, NomMetodo, [E.Message]);
          Result := -1562;
        end;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.GerarRelatorioFemeasADiagnosticar(
  CodEventoEstacaoMonta: Integer; CodTipoEventosCobertura: String;
  DtaDiagnosticoPrevisto: TDateTime; CodRacas, IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
  NumOrdemInicio, NumOrdemFim: Integer; CodLotes, CodLocais,
  CodCategorias: String; CodFazendaManejo: Integer; CodAnimalManejoInicio,
  CodAnimalManejoFim: String; CodFazendaManejoPai: Integer;
  CodAnimalManejoPai: String; Tipo, CodTarefa, CodPessoaProdutor: Integer): String;
const
  Metodo:        Integer = 475;
  NomeMetodo:    String = 'GerarRelatorioFemeasADiagnosticar';
  CodRelatorio:  Integer = 19;
  CodTipoTarefa: Integer = 5;
var
  Rel: TRelatorioPadrao;
  Retorno, iTotal: Integer;
  Qry: THerdomQuery;
  NomPessoaProdutor: String;
  bAvancou: Boolean;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  if CodTarefa > 0 then
  begin
    Conexao.DefinirProdutorTrabalho(CodPessoaProdutor, NomPessoaProdutor);
  end;
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);

  try
    {Realiza pesquisa de animais de acordo com os critérios informados}
    Retorno := PesquisarRelatorioFemeasADiagnosticar(Qry, CodEventoEstacaoMonta,
                                                     CodTipoEventosCobertura, DtaDiagnosticoPrevisto, CodRacas,
                                                     IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1, QtdCompRacialFim1,
                                                     IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2, QtdCompRacialFim2,
                                                     IndAgrupRaca3, CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                     IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4, QtdCompRacialFim4,
                                                     NumOrdemInicio, NumOrdemFim, CodLotes, CodLocais, CodCategorias,
                                                     CodFazendaManejo, CodAnimalManejoInicio, CodAnimalManejoFim,
                                                     CodFazendaManejoPai, CodAnimalManejoPai, CodTarefa);

    if Retorno < 0 then
    begin
      if Retorno = idExceedsTheConfiguredThreshold then
      begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodEventoEstacaoMonta,
                                                              CodTipoEventosCobertura, DtaDiagnosticoPrevisto,
                                                              CodRacas, IndAgrupRaca1,CodRaca1,
                                                              QtdCompRacialInicio1, QtdCompRacialFim1,
                                                              IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2,
                                                              QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                                              QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4,
                                                              CodRaca4, QtdCompRacialInicio4, QtdCompRacialFim4,
                                                              NumOrdemInicio, NumOrdemFim, CodLotes, CodLocais,
                                                              CodCategorias, CodFazendaManejo, CodAnimalManejoInicio,
                                                              CodAnimalManejoFim, CodFazendaManejoPai,
                                                              CodAnimalManejoPai, Tipo, Conexao.CodProdutorTrabalho]);
        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodEventoEstacaoMonta,
                                                              CodTipoEventosCobertura, DtaDiagnosticoPrevisto,
                                                              CodRacas, IndAgrupRaca1,CodRaca1,
                                                              QtdCompRacialInicio1, QtdCompRacialFim1,
                                                              IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2,
                                                              QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                                              QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4,
                                                              CodRaca4, QtdCompRacialInicio4, QtdCompRacialFim4,
                                                              NumOrdemInicio, NumOrdemFim, CodLotes, CodLocais,
                                                              CodCategorias, CodFazendaManejo, CodAnimalManejoInicio,
                                                              CodAnimalManejoFim, CodFazendaManejoPai,
                                                              CodAnimalManejoPai, Tipo, Conexao.CodProdutorTrabalho],
                                                              DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then begin
      Mensagens.Adicionar(1563, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      Rel.TipoDoArquvio := Tipo;

      {Define o relatório em questão e carrega os seus dados específicos}
      Retorno := Rel.CarregarRelatorio(CodRelatorio);
      if Retorno < 0 then Exit;

      {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
      if CodTarefa > 0 then begin
        Rel.CodTarefa := CodTarefa;
      end;

      {Inicializa o procedimento de geração do arquivo de relatório}
      Retorno := Rel.InicializarRelatorio;
      if Retorno < 0 then Exit;

      {Incializa totalizador}
      iTotal := 0;

      Qry.First;
      while not Qry.EOF do
      begin
        bAvancou := False;
        // Atualiza o campo valor do atributo Campos do relatorio
        // c/ os dados da query
        Rel.Campos.CarregarValores(Qry);
        Rel.Campos.SalvarValores;

        if (Rel.LinhasRestantes <= 2) and (Rel.TipoDoArquvio = 1) then
        begin
          {Verifica se o próximo registro existe, para que o último registro
          do relatório possa ser exibido na próxima folha, e assim o total não
          seja mostrado sozinho nesta folha}
          bAvancou := True;
          Qry.Next;
          if Qry.Eof then
          begin
            Rel.NovaPagina;
          end;
        end;

        if (Rel.LinhasRestantes <= 2) and (Rel.TipoDoArquvio = 1) then
        begin
          if not bAvancou then
          begin
             Qry.Next;
             bAvancou := True;
          end;
          if not Qry.Eof then
          begin
            Rel.Campos.CarregarValores(Qry);
          end;
        end;
        Rel.Campos.RecuperarValores;
        Rel.ImprimirColunas;
        if not bAvancou then
        begin
          Inc(iTotal);
          Qry.Next;
        end;
      end;
      {Monta Linha totalizadora}
      Rel.NovaLinha;
      Rel.Campos.LimparValores;
      Rel.ImprimirTexto(0, 'Total de Animais: '+IntToStr(iTotal));
      {Inicia processamento de encerramento do relatório em questão}
      Retorno := Rel.FinalizarRelatorio;
      if Retorno = 0 then begin
        {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
        Result := Rel.NomeArquivo;
      end;
    finally
      Rel.Free;
    end;
  Finally
    Qry.Free;
  end;
end;

function TIntEventos.PesquisarRelatorioDesempenhoVacas(EQuery: THerdomQuery;
  CodFazendaManejo: Integer; CodAnimalManejoInicio,
  CodAnimalManejoFim: String; CodFazendaManejoPai: Integer;
  CodAnimalManejoPai: String; CodFazendaManejoMae: Integer;
  CodAnimalManejoMae, CodRacas, CodCategorias, CodLocais, CodLotes,
  IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; NumPartoInicio, NumPartoFim,
  NumDiasIntervaloInicio, NumDiasIntervalorFim, QtdPesoDesmameInicio,
  QtdPesoDesmameFim, CodTarefa: Integer): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioDesempenhoVacas';
  CodRelatorio: Integer = 20;

  fCODANIMALMANEJO: Integer = 1;
  fDTANASCIMENTO: Integer = 2;
  fTXTIDADE: Integer = 3;
  fCODANIMALMANEJOPAI: Integer = 4;
  fCODANIMALMANEJOMAE: Integer = 5;
  fTXTIDADEPRIMEIROPARTO: Integer = 6;
  fNUMPARTOS: Integer = 7;
  fNUMDESMAMADOS: Integer = 8;
  fNUMDIASINTERVALOPARTOS: Integer = 9;
  fQTDPESOMEDIODESMAME: Integer = 10;
  fCODMANEJOULTIMACRIA: Integer = 11;
  fINDSEXOULTIMACRIA: Integer = 12;
  fDTANASCIMENTOULTIMACRIA: Integer = 13;
  fCODANIMALMANEJOULTIMACOBERTURA: Integer = 14;
  fSGLTIPOEVENTOULTIMACOBERTURA: Integer = 15;
  fDTAULTIMACOBERTURA: Integer = 16;
  fDTAULTIMODIAGNOSTICO: Integer = 17;
  fDESRESULTADOULTIMODIAGNOSTICO: Integer = 18;
  fSGLRACA: Integer = 19;
  fDESCOMPOSICAORACIAL: Integer = 20;
  fSGLCATEGORIAANIMAL: Integer = 21;
  fNOMANIMALPAI: Integer = 22;
  fSGLLOCALCORRENTE: Integer = 23;
  fSGLLOTECORRENTE: Integer = 24;
  fFAZENDACORRENTE: Integer = 25;

var
  X: Integer;
  Param: TValoresParametro;
  IntRelatorios: TIntRelatorios;
  DtaReferencia: TDateTime;
  bAux, bPersonalizavel, bPai, bMae, bAnimalUltimaCria, bEventoUltimaCobertura,
    bEventoUltimoDiagnostico: Boolean;
  sAux: String;
  iAux: Integer;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        EQuery.SQL.Text := EQuery.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLotes <> '' then begin
      Result := VerificaParametroMultiValor(CodLotes, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLocais <> '' then begin
      Result := VerificaParametroMultiValor(CodLocais, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    bAnimalUltimaCria :=
      not (bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODMANEJOULTIMACRIA) = 1)
      or (IntRelatorios.CampoAssociado(fINDSEXOULTIMACRIA) = 1)
      or (IntRelatorios.CampoAssociado(fDTANASCIMENTOULTIMACRIA) = 1);

    bEventoUltimaCobertura :=
      not (bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOULTIMACOBERTURA) = 1)
      or (IntRelatorios.CampoAssociado(fSGLTIPOEVENTOULTIMACOBERTURA) = 1)
      or (IntRelatorios.CampoAssociado(fDTAULTIMACOBERTURA) = 1);

    bEventoUltimoDiagnostico :=
      not (bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fDTAULTIMODIAGNOSTICO) = 1)
      or (IntRelatorios.CampoAssociado(fDESRESULTADOULTIMODIAGNOSTICO) = 1);

    bPai :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOPAI) = 1)
      or (IntRelatorios.CampoAssociado(fNOMANIMALPAI) = 1)
      or (CodFazendaManejoPai > 0)
      or (CodAnimalManejoPai <> '');

    bMae :=
      not(bPersonalizavel)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOMAE) = 1)
      or (CodFazendaManejoMae > 0)
      or (CodAnimalManejoMae <> '');

    try
      // Cria tabela temporária de pesquisa, quando não existir
      EQuery.SQL.Text :=
        'if object_id(''tempdb..#tmp_relatorio_desempenho_vacas'') is null '+
        'begin '+
        '  create table #tmp_relatorio_desempenho_vacas '+
        '  ( '+
        '      cod_animal int not null '+
        '    , cod_pessoa_produtor int not null '+
        '    , FazendaCorrente varchar(50) null '+
        '    , CodAnimalManejo varchar(11) null '+
        '    , DtaNascimento smalldatetime null '+
        '    , DtaIdade smalldatetime null '+
        '    , TxtIdade varchar(7) null '+
        '    , SglRaca varchar(3) null '+
        '    , DesComposicaoRacial varchar(50) null '+
        '    , SglCategoriaAnimal varchar(3) null '+
        '    , SglLoteCorrente varchar(2) null '+
        '    , SglLocalCorrente varchar(2) null '+
        '    , cod_animal_pai int null '+
        '    , cod_reprodutor_multiplo_pai int null '+
        '    , cod_fazenda_manejo_pai int null '+
        '    , cod_animal_manejo_pai varchar(8) null '+
        '    , CodAnimalManejoPai varchar(11) null '+
        '    , NomAnimalPai varchar(100) null '+
        '    , cod_animal_mae int null '+
        '    , cod_fazenda_manejo_mae int null '+
        '    , cod_animal_manejo_mae varchar(8) null '+
        '    , CodAnimalManejoMae varchar(11) null '+
        '    , DtaIdadePrimeiroParto smalldatetime null '+
        '    , TxtIdadePrimeiroParto varchar(7) null '+
        '    , NumPartos int null '+
        '    , NumDesmamados int null '+
        '    , NumDiasIntervaloPartos int null '+
        '    , QtdPesoMedioDesmame decimal null '+
        '    , cod_animal_ultima_cria int null '+
        '    , CodManejoUltimaCria varchar(11) null '+
        '    , IndSexoUltimaCria char(1) null '+
        '    , DtaNascimentoUltimaCria smalldatetime null '+
        '    , cod_evento_ultima_cobertura int null '+
        '    , CodAnimalManejoUltimaCobertura varchar(11) null '+
        '    , SglTipoEventoUltimaCobertura varchar(2) null '+
        '    , DtaUltimaCobertura smalldatetime null '+
        '    , cod_evento_ultimo_diag int null '+
        '    , DtaUltimoDiagnostico smalldatetime null '+
        '    , DesResultadoUltimoDiagnostico varchar(6) null '+
        '  ) '+
        '  create index idx_tmp_desempenho_vacas_cria on #tmp_relatorio_desempenho_vacas (cod_pessoa_produtor, cod_animal_ultima_cria) '+
        '  create index idx_tmp_desempenho_vacas_cobertura on #tmp_relatorio_desempenho_vacas (cod_pessoa_produtor, cod_evento_ultima_cobertura) '+
        '  create index idx_tmp_desempenho_vacas_diag on #tmp_relatorio_desempenho_vacas (cod_pessoa_produtor, cod_evento_ultimo_diag) '+
        '  create index idx_tmp_desempenho_vacas_rm on #tmp_relatorio_desempenho_vacas (cod_pessoa_produtor, cod_reprodutor_multiplo_pai) '+
        '  create index idx_tmp_desempenho_vacas_pai on #tmp_relatorio_desempenho_vacas (cod_pessoa_produtor, cod_animal_pai) '+
        '  create index idx_tmp_desempenho_vacas_mae on #tmp_relatorio_desempenho_vacas (cod_pessoa_produtor, cod_animal_mae) '+
        'end ';
//      EQuery.SQL.SaveToFile('c:\tmp\Create.sql');
      EQuery.ExecSQL;

      // Esvazia a tabela temporária
      EQuery.SQL.Text :=
        'truncate table #tmp_relatorio_desempenho_vacas ';
//      EQuery.SQL.SaveToFile('c:\tmp\Truncate.sql');
      EQuery.ExecSQL;

      // Define quais campos seram populados
      EQuery.SQL.Clear;
      SQL('insert into #tmp_relatorio_desempenho_vacas ', 0);
      SQL('( ', 0);
      SQL('    cod_animal ', 0);
      SQL('  , cod_pessoa_produtor ', 0);
      SQL('  , FazendaCorrente ',                                                  fFAZENDACORRENTE);
      SQL('  , CodAnimalManejo ',                                                  fCODANIMALMANEJO);
      SQL('  , DtaNascimento ' ,                                                   fDTANASCIMENTO);
      SQL('  , DtaIdade ' ,                                                        fTXTIDADE);
      SQL('  , TxtIdade ' ,                                                        fTXTIDADE);
      SQl('  , SglRaca ',                                                          fSGLRACA);
      SQl('  , DesComposicaoRacial ',                                              fDESCOMPOSICAORACIAL);
      SQl('  , SglCategoriaAnimal ',                                               fSGLCATEGORIAANIMAL);
      SQl('  , SglLoteCorrente ',                                                  fSGLLOTECORRENTE);
      SQl('  , SglLocalCorrente ',                                                 fSGLLOCALCORRENTE);
      SQL('  , cod_animal_pai ',                                                   SE(bPai, 0, -1));
      SQL('  , cod_reprodutor_multiplo_pai ',                                      SE(bPai, 0, -1));
      SQL('  , cod_animal_mae ',                                                   SE(bMae, 0, -1));
      SQL('  , DtaIdadePrimeiroParto ' ,                                           fTXTIDADEPRIMEIROPARTO);
      SQL('  , TxtIdadePrimeiroParto ' ,                                           fTXTIDADEPRIMEIROPARTO);
      SQL('  , NumPartos ' ,                                                       fNUMPARTOS);
      SQL('  , NumDesmamados ' ,                                                   fNUMDESMAMADOS);
      SQL('  , NumDiasIntervaloPartos ' ,                                          fNUMDIASINTERVALOPARTOS);
      SQL('  , QtdPesoMedioDesmame ' ,                                             fQTDPESOMEDIODESMAME);
      SQL('  , cod_animal_ultima_cria ' ,                                          SE(bAnimalUltimaCria, 0, -1));
      SQL('  , cod_evento_ultima_cobertura ' ,                                     SE(bEventoUltimaCobertura, 0, -1));
      SQL('  , cod_evento_ultimo_diag ' ,                                          SE(bEventoUltimoDiagnostico, 0, -1));
      SQL(') ', 0);

      // Obtem os dados que atendam aos critérios de pesquisa
      SQL('select ', 0);
      SQL('    ta.cod_animal ', 0);
      SQL('  , ta.cod_pessoa_produtor ', 0);
      SQL('  , tfm.nom_fazenda ',                                                  fFAZENDACORRENTE);
      SQL('  , case when ta.cod_fazenda_manejo is null then '+
          '      ta.cod_animal_manejo '+
          '    else '+
          '      tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
          '    end ',                                                              fCODANIMALMANEJO);
      SQL('  , ta.dta_nascimento ',                                                fDTANASCIMENTO);
      SQL('  , isnull(ta.dta_desativacao, getdate()) - ta.dta_nascimento ',        fTXTIDADE);
      SQL('  , dbo.FNT_IDADE(ta.dta_nascimento, isnull(ta.dta_desativacao, '+
          '     getdate())) ',                                                     fTXTIDADE);
      SQl('  , tr.sgl_raca ',                                                      fSGLRACA);
      SQl('  , dbo.FNT_COMPOSICAO_RACIAL(ta.cod_animal, ta.cod_pessoa_produtor) ', fDESCOMPOSICAORACIAL);
      SQl('  , tca.sgl_categoria_animal ',                                         fSGLCATEGORIAANIMAL);
      SQl('  , tlt.sgl_lote ',                                                     fSGLLOTECORRENTE);
      SQl('  , tlc.sgl_local ',                                                    fSGLLOCALCORRENTE);
      SQL('  , ta.cod_animal_pai ',                                                SE(bPai, 0, -1));
      SQL('  , ta.cod_reprodutor_multiplo ',                                       SE(bPai, 0, -1));
      SQL('  , ta.cod_animal_mae ',                                                SE(bMae, 0, -1));
      SQL('  , te.dta_inicio - ta.dta_nascimento ',                                                    fTXTIDADEPRIMEIROPARTO);
      SQL('  , dbo.FNT_IDADE(ta.dta_nascimento, te.dta_inicio) ',                  fTXTIDADEPRIMEIROPARTO);
      SQL('  , ( '+
          '      select '+
          '        count(tenp.cod_evento) '+
          '      from '+
          '        tab_evento tenp with (nolock) '+
          '        , tab_animal_evento taep with (nolock) '+
          '      where tenp.cod_tipo_evento = 30 '+
          '        and tenp.cod_pessoa_produtor = taep.cod_pessoa_produtor '+
          '        and tenp.cod_evento = taep.cod_evento '+
          '        and taep.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and taep.cod_animal = ta.cod_animal '+
          '    ) ',                                                                fNUMPARTOS);
      SQL('  , ( '+
          '      select '+
          '        count(tad.cod_animal) '+
          '      from '+
          '        tab_animal tad with (nolock) '+
          '        , tab_animal_cria tacd with (nolock) '+
          '        , tab_evento_parto tepd with (nolock) '+
          '        , tab_animal_evento taed with (nolock) '+
          '      where '+
          '        taed.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and taed.cod_animal = ta.cod_animal '+
          '        and tepd.cod_pessoa_produtor = taed.cod_pessoa_produtor '+
          '        and tepd.cod_evento = taed.cod_evento '+
          '        and tacd.cod_pessoa_produtor = tepd.cod_pessoa_produtor '+
          '        and tacd.cod_evento = tepd.cod_evento '+
          '        and tad.cod_pessoa_produtor = tacd.cod_pessoa_produtor '+
          '        and tad.cod_animal = tacd.cod_animal '+
          '        and tad.cod_categoria_animal != 1 '+
          '    ) ',                                                                fNUMDESMAMADOS);
      SQL('  , ( '+
          '      select '+
          '        top 1 '+
          '        case when count(1) > 1 then '+
          '          sum( '+
          '            cast(tei.dta_inicio as integer) - '+
          '            cast(isnull(teiup.dta_inicio, tei.dta_inicio) as integer) '+
          '          ) / (count(1) - 1) '+
          '        else '+
          '          0 '+
          '        end '+
          '      from '+
          '        tab_evento tei with (nolock) '+
          '        , tab_animal_evento taei with (nolock) '+
          '        , tab_evento teiup with (nolock) '+
          '      where '+
          '        tei.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and tei.cod_tipo_evento = 30 '+
          '        and taei.cod_pessoa_produtor = tei.cod_pessoa_produtor '+
          '        and taei.cod_evento = tei.cod_evento '+
          '        and taei.cod_animal = ta.cod_animal '+
          '        and teiup.cod_pessoa_produtor =* tei.cod_pessoa_produtor '+
          '        and teiup.cod_evento =* ( select top 1 tepup.cod_evento '+
          '                                    from tab_evento tepup with (nolock), tab_animal_evento taepup with (nolock) '+
          '                                   where tepup.cod_tipo_evento = 30 '+
          '                                     and tepup.cod_pessoa_produtor = tei.cod_pessoa_produtor '+
          '                                     and tepup.dta_inicio < tei.dta_inicio '+
          '                                     and taepup.cod_pessoa_produtor = tepup.cod_pessoa_produtor '+
          '                                     and taepup.cod_evento = tepup.cod_evento '+
          '                                     and taepup.cod_animal = taei.cod_animal '+
          '                                   order by tepup.dta_inicio desc ) '+
          '    ) ',                                                                fNUMDIASINTERVALOPARTOS);
      SQL('  , ( '+
          '      select case when avg(dbo.FNT_PESO_ANIMAL(taed.cod_pessoa_produtor, taed.cod_animal, ted.dta_inicio)) is null then 0'+
          '             else avg(dbo.FNT_PESO_ANIMAL(taed.cod_pessoa_produtor, taed.cod_animal, ted.dta_inicio)) end '+
          '      from '+
          '        tab_animal_cria tacd with (nolock) '+
          '        , tab_evento_parto tepp with (nolock) '+
          '        , tab_animal_evento taep with (nolock) '+
          '        , tab_animal_evento taed with (nolock) '+
          '        , tab_evento ted with (nolock) '+
          '      where '+
          '        taep.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and taep.cod_animal = ta.cod_animal '+
          '        and tepp.cod_pessoa_produtor = taep.cod_pessoa_produtor '+
          '        and tepp.cod_evento = taep.cod_evento '+
          '        and tacd.cod_pessoa_produtor = tepp.cod_pessoa_produtor '+
          '        and tacd.cod_evento = tepp.cod_evento '+
          '        and taed.cod_pessoa_produtor = tacd.cod_pessoa_produtor '+
          '        and taed.cod_animal = tacd.cod_animal '+
          '        and ted.cod_pessoa_produtor = taed.cod_pessoa_produtor '+
          '        and ted.cod_evento = taed.cod_evento '+
          '        and ted.cod_tipo_evento = 2 '+
          '    ) ',                                                                fQTDPESOMEDIODESMAME);
      SQL('  , ( '+
          '      select '+
          '        top 1 '+
          '        tac.cod_animal '+
          '      from '+
          '        tab_animal tac with (nolock) '+
          '        , tab_animal_cria tacc with (nolock) '+
          '        , tab_evento_parto tepc with (nolock) '+
          '        , tab_animal_evento taec with (nolock) '+
          '      where '+
          '        taec.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and taec.cod_animal = ta.cod_animal '+
          '        and tepc.cod_pessoa_produtor = taec.cod_pessoa_produtor '+
          '        and tepc.cod_evento = taec.cod_evento '+
          '        and tacc.cod_pessoa_produtor = tepc.cod_pessoa_produtor '+
          '        and tacc.cod_evento = tepc.cod_evento '+
          '        and tac.cod_pessoa_produtor = tacc.cod_pessoa_produtor '+
          '        and tac.cod_animal = tacc.cod_animal '+
          '      order by '+
          '        tac.dta_nascimento desc '+
          '    ) ',                                                                SE(bAnimalUltimaCria, 0, -1));
      SQL('  , ( '+
          '      select '+
          '        top 1 '+
          '        ite.cod_evento '+
          '      from '+
          '        tab_evento ite with (nolock) '+
          '        , tab_animal_evento itae with (nolock) '+
          '      where '+
          '        ite.cod_tipo_evento in (23, 26, 27) '+
          '        and ite.cod_pessoa_produtor = itae.cod_pessoa_produtor '+
          '        and ite.cod_evento = itae.cod_evento '+
          '        and itae.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and itae.cod_animal = ta.cod_animal '+
          '      order by '+
          '        ite.dta_inicio desc '+
          '    ) ',                                                                SE(bEventoUltimaCobertura, 0, -1));
      SQL('  , ( '+
          '      select '+
          '        top 1 '+
          '        ite.cod_evento '+
          '      from '+
          '        tab_evento ite with (nolock) '+
          '        , tab_animal_evento itae with (nolock) '+
          '      where '+
          '        ite.cod_tipo_evento = 28 '+
          '        and ite.cod_pessoa_produtor = itae.cod_pessoa_produtor '+
          '        and ite.cod_evento = itae.cod_evento '+
          '        and itae.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '        and itae.cod_animal = ta.cod_animal '+
          '      order by '+
          '        ite.dta_inicio desc '+
          '    ) ',                                                                SE(bEventoUltimoDiagnostico, 0, -1));
      SQL('from ', 0);
      SQL('  tab_animal ta with (nolock) ', 0);

      if (SQL('  , tab_fazenda tfm ',                                              fCODANIMALMANEJO)) then begin
      end else if (SQL('  , tab_fazenda tfm ',                                     fFAZENDACORRENTE)) then begin
      end;

      SQL('  , tab_evento te with (nolock) ', 0);
      SQl('  , tab_raca tr ',                                                      fSGLRACA);
      SQl('  , tab_categoria_animal tca ',                                         fSGLCATEGORIAANIMAL);
      SQl('  , tab_lote tlt ',                                                     fSGLLOTECORRENTE);
      SQl('  , tab_local tlc ',                                                    fSGLLOCALCORRENTE);
      SQL('  , tab_composicao_racial as tcr with (nolock) ',                       SE(IndAgrupRaca1 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                      SE(IndAgrupRaca2 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                      SE(IndAgrupRaca3 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                      SE(IndAgrupRaca4 = 'N', 0, -1));
      SQL('where ', 0);
      SQL('  ta.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor ',              fCODANIMALMANEJO);
      SQL('  and tfm.cod_fazenda =* ta.cod_fazenda_corrente ',                     fCODANIMALMANEJO);
      SQL('  and te.cod_pessoa_produtor = ta.cod_pessoa_produtor ', 0);
      SQL('  and te.cod_evento = ( select min(te.cod_evento) '+
          '                          from tab_evento te with (nolock), tab_animal_evento tae with (nolock) '+
          '                         where te.cod_tipo_evento = 30 '+
          '                           and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
          '                           and tae.cod_evento = te.cod_evento '+
          '                           and tae.cod_pessoa_produtor = ta.cod_pessoa_produtor '+
          '                           and tae.cod_animal = ta.cod_animal ) ', 0);

      SQL('  and tr.cod_raca = ta.cod_raca ',                                      fSGLRACA);
      SQL('  and tca.cod_categoria_animal =* ta.cod_categoria_animal ',            fSGLCATEGORIAANIMAL);
      SQL('  and tlc.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tlc.cod_fazenda =* ta.cod_fazenda_corrente '+
          '  and tlc.cod_local =* ta.cod_local_corrente ',                         fSGLLOCALCORRENTE);
      SQL('  and tlt.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tlt.cod_fazenda =* ta.cod_fazenda_corrente '+
          '  and tlt.cod_lote =* ta.cod_lote_corrente ',                           fSGLLOTECORRENTE);
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and ta.cod_animal = tcr.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and ta.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and ta.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and ta.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and ta.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;
      if Conexao.CodPapelUsuario = 3 then begin
         SQL('  and (ta.cod_pessoa_tecnico = :CodPessoaTecnico or ta.cod_pessoa_tecnico is null) ', 0);
      end;      
      if IndAgrupRaca1 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and ta.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          EQuery.ParamByName('codraca1').AsInteger := CodRaca1;
          EQuery.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          EQuery.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          EQuery.ParamByName('codraca2').AsInteger := CodRaca2;
          EQuery.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          EQuery.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          EQuery.ParamByName('codraca3').AsInteger := CodRaca3;
          EQuery.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          EQuery.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          EQuery.ParamByName('codraca4').AsInteger := CodRaca4;
          EQuery.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          EQuery.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
      end;
      EQuery.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if Conexao.CodPapelUsuario = 3 then begin
        EQuery.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;

      // Critérios de pesquisa
      if CodFazendaManejo > 0 then begin
        SQL('  and ta.cod_fazenda_manejo = :cod_fazenda_manejo ', 0);
        EQuery.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
        SQL('  and ta.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        EQuery.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoInicio;
        EQuery.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoFim;
      end;
      if CodRacas <> '' then begin
        SQL('  and ta.cod_raca in ( '+CodRacas+' ) ', 0);
      end;
      if CodCategorias <> '' then begin
        SQL('  and ta.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
      end;
      if CodLocais <> '' then begin
        SQL('  and ta.cod_local_corrente in ( '+CodLocais+' ) ', 0);
      end;
      if CodLotes <> '' then begin
        SQL('  and ta.cod_lote_corrente in ( '+CodLotes+' ) ', 0);
      end;
//      EQuery.SQL.SaveToFile('c:\tmp\Insert.sql');
      EQuery.ExecSQL;

      if bAnimalUltimaCria then begin
        // Atualiza informações referentes a última cria
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  CodManejoUltimaCria = tfm.sgl_fazenda + '' '' + ta.cod_animal_manejo '+
          '  , IndSexoUltimaCria = ta.ind_sexo '+
          '  , DtaNascimentoUltimaCria = ta.dta_nascimento '+
          'from '+
          '  tab_animal ta '+
          '  , tab_fazenda tfm '+
          'where '+
          '  ta.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and ta.cod_animal = #tmp_relatorio_desempenho_vacas.cod_animal_ultima_cria '+
          '  and #tmp_relatorio_desempenho_vacas.cod_animal_ultima_cria is not null '+
          '  and tfm.cod_pessoa_produtor =* ta.cod_pessoa_produtor '+
          '  and tfm.cod_fazenda =* ta.cod_fazenda_manejo ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateCria.sql');
        EQuery.ExecSQL;
      end;

      // Atualiza informações referentes a última cobertura
      if bEventoUltimaCobertura then begin
        // Cobertura por insem artificial
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  CodAnimalManejoUltimaCobertura = dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') '+
          '  , SglTipoEventoUltimaCobertura = tte.sgl_tipo_evento '+
          '  , DtaUltimaCobertura = te.dta_fim '+
          'from '+
          '  tab_evento_insemin_artificial teia '+
          '  , tab_evento te '+
          '  , tab_tipo_evento tte '+
          'where '+
          '  teia.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and teia.cod_evento = #tmp_relatorio_desempenho_vacas.cod_evento_ultima_cobertura '+
          '  and te.cod_pessoa_produtor = teia.cod_pessoa_produtor '+
          '  and te.cod_evento = teia.cod_evento '+
          '  and tte.cod_tipo_evento = te.cod_tipo_evento  ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateUltimaCobertura1.sql');
        EQuery.ExecSQL;

        // Cobertura por monta controlada
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  CodAnimalManejoUltimaCobertura = dbo.FNT_BUSCAR_PAI(temc.cod_animal_touro, temc.cod_pessoa_produtor, ''T'') '+
          '  , SglTipoEventoUltimaCobertura = tte.sgl_tipo_evento '+
          '  , DtaUltimaCobertura = te.dta_fim '+
          'from '+
          '  tab_evento_monta_controlada temc '+
          '  , tab_evento te '+
          '  , tab_tipo_evento tte '+
          'where '+
          '  temc.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and temc.cod_evento = #tmp_relatorio_desempenho_vacas.cod_evento_ultima_cobertura '+
          '  and te.cod_pessoa_produtor = temc.cod_pessoa_produtor '+
          '  and te.cod_evento = temc.cod_evento '+
          '  and tte.cod_tipo_evento = te.cod_tipo_evento ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateUltimaCobertura2.sql');
        EQuery.ExecSQL;

        // Cobertura em regime de pasto
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  CodAnimalManejoUltimaCobertura = '+
          '    case '+
          '      when tecrp.cod_reprodutor_multiplo is not null then '+
          '        dbo.FNT_BUSCAR_PAI(tecrp.cod_reprodutor_multiplo, tecrp.cod_pessoa_produtor, ''R'') '+
          '      when tecrp.cod_animal_touro is not null then '+
          '        dbo.FNT_BUSCAR_PAI(tecrp.cod_animal_touro, tecrp.cod_pessoa_produtor, ''T'') '+
          '    else '+
          '      null '+
          '    end '+
          '  , SglTipoEventoUltimaCobertura = tte.sgl_tipo_evento '+
          '  , DtaUltimaCobertura = te.dta_fim '+
          'from '+
          '  tab_evento_cobertura_reg_pasto tecrp '+
          '  , tab_evento te '+
          '  , tab_tipo_evento tte '+
          'where '+
          '  tecrp.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and tecrp.cod_evento = #tmp_relatorio_desempenho_vacas.cod_evento_ultima_cobertura '+
          '  and te.cod_pessoa_produtor = tecrp.cod_pessoa_produtor '+
          '  and te.cod_evento = tecrp.cod_evento '+
          '  and tte.cod_tipo_evento = te.cod_tipo_evento ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateUltimaCobertura3.sql');
        EQuery.ExecSQL;
      end;

      // Atualiza informações do último evento de diagnóstico de prenhez do animal
      if bEventoUltimoDiagnostico then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  DtaUltimoDiagnostico = te.dta_inicio '+
          '  , DesResultadoUltimoDiagnostico = '+
          '    case '+
          '      when tae.ind_vaca_prenha = ''S'' then '+
          '        ''Prenha'' '+
          '      else '+
          '        ''Vazia'' '+
          '    end '+
          'from '+
          '  tab_evento te '+
          '  , tab_animal_evento tae '+
          'where '+
          '      tae.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and tae.cod_animal = #tmp_relatorio_desempenho_vacas.cod_animal '+
          '  and tae.cod_evento = #tmp_relatorio_desempenho_vacas.cod_evento_ultimo_diag '+
          '  and te.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '  and te.cod_evento = tae.cod_evento '+
          '  and te.cod_tipo_evento = 28 ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateEventoDiag.sql');
        EQuery.ExecSQL;
      end;

      // Atualiza informações do pai quando necessário
      if bPai then begin
        // Quando o pai for um touro
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  cod_fazenda_manejo_pai = tap.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = tap.cod_animal_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when tap.cod_fazenda_manejo is null then '+
          '        tap.cod_animal_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + tap.cod_animal_manejo '+
          '    end '+
          '  , NomAnimalPai = tap.nom_animal '+
          'from '+
          '  tab_animal tap '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* tap.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* tap.cod_fazenda_manejo '+
          '  and tap.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and tap.cod_animal = #tmp_relatorio_desempenho_vacas.cod_animal_pai '+
          '  and #tmp_relatorio_desempenho_vacas.cod_animal_pai is not null ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdatePai.sql');
        EQuery.ExecSQL;

        // Quando o pai for um reprodutor múltiplo
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  cod_fazenda_manejo_pai = trm.cod_fazenda_manejo '+
          '  , cod_animal_manejo_pai = trm.cod_reprodutor_multiplo_manejo '+
          '  , CodAnimalManejoPai = '+
          '    case '+
          '      when trm.cod_fazenda_manejo is null then '+
          '        trm.cod_reprodutor_multiplo_manejo '+
          '      else '+
          '        tfmp.sgl_fazenda + '' '' + trm.cod_reprodutor_multiplo_manejo '+
          '    end '+
          'from '+
          '  tab_reprodutor_multiplo trm '+
          '  , tab_fazenda tfmp '+
          'where '+
          '  tfmp.cod_pessoa_produtor =* trm.cod_pessoa_produtor '+
          '  and tfmp.cod_fazenda =* trm.cod_fazenda_manejo '+
          '  and trm.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and trm.cod_reprodutor_multiplo = #tmp_relatorio_desempenho_vacas.cod_reprodutor_multiplo_pai '+
          '  and #tmp_relatorio_desempenho_vacas.cod_reprodutor_multiplo_pai is not null ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdatePaiRM.sql');
        EQuery.ExecSQL;
      end;

      // Atualiza informações da mãe quando necessário
      if bMae then begin
        EQuery.SQL.Text :=
          'update '+
          '  #tmp_relatorio_desempenho_vacas '+
          'set '+
          '  cod_fazenda_manejo_mae = tam.cod_fazenda_manejo '+
          '  , cod_animal_manejo_mae = tam.cod_animal_manejo '+
          '  , CodAnimalManejoMae = '+
          '    case '+
          '      when tam.cod_fazenda_manejo is null then '+
          '        tam.cod_animal_manejo '+
          '      else '+
          '        tfmm.sgl_fazenda + '' '' + tam.cod_animal_manejo '+
          '    end '+
          'from '+
          '  tab_animal tam '+
          '  , tab_fazenda tfmm '+
          'where '+
          '  tfmm.cod_pessoa_produtor =* tam.cod_pessoa_produtor '+
          '  and tfmm.cod_fazenda =* tam.cod_fazenda_manejo '+
          '  and tam.cod_pessoa_produtor = #tmp_relatorio_desempenho_vacas.cod_pessoa_produtor '+
          '  and tam.cod_animal = #tmp_relatorio_desempenho_vacas.cod_animal_mae '+
          '  and #tmp_relatorio_desempenho_vacas.cod_animal_mae is not null ';
//        EQuery.SQL.SaveToFile('c:\tmp\UpdateMae.sql');
        EQuery.ExecSQL;
      end;

      // Recupera os dados que serão apresentados no relatório
      EQuery.SQL.Clear;
      SQL('select ', 0);
      SQL('  null ', 0);
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := '  , '+IntRelatorios.ValorCampo('NomField');
        SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1));
        IntRelatorios.IrAoProximo;
      end;
      if IntRelatorios.CampoAssociado(fTXTIDADE) = 1 then begin
        SQL('  , DtaIdade ', 0);
      end;
      if IntRelatorios.CampoAssociado(fTXTIDADEPRIMEIROPARTO) = 1 then begin
        SQL('  , DtaIdadePrimeiroParto ', 0);
      end;
      SQL('from ', 0);
      SQL('  #tmp_relatorio_desempenho_vacas ', 0);
      SQL('where ', 0);
      SQL('  cod_pessoa_produtor is not null ', 0);

      // Critérios referentes ao resultado da pesquisa
      if (NumPartoInicio > 0) and (NumPartoFim > 0) then begin
        SQL('  and ( NumPartos between :NumPartoInicio and :NumPartoFim ) ', 0);
        EQuery.ParamByName('NumPartoInicio').AsInteger := NumPartoInicio;
        EQuery.ParamByName('NumPartoFim').AsInteger := NumPartoFim;
      end;
      if (NumDiasIntervaloInicio > 0) and (NumDiasIntervalorFim > 0) then begin
        SQL('  and ( NumDiasIntervaloPartos between :NumDiasIntervaloInicio and :NumDiasIntervalorFim ) ', 0);
        EQuery.ParamByName('NumDiasIntervaloInicio').AsInteger := NumDiasIntervaloInicio;
        EQuery.ParamByName('NumDiasIntervalorFim').AsInteger := NumDiasIntervalorFim;
      end;
      if (QtdPesoDesmameInicio > 0) and (QtdPesoDesmameFim > 0) then begin
        SQL('  and ( QtdPesoMedioDesmame between :QtdPesoDesmameInicio and :QtdPesoDesmameFim ) ', 0);
        EQuery.ParamByName('QtdPesoDesmameInicio').AsInteger := QtdPesoDesmameInicio;
        EQuery.ParamByName('QtdPesoDesmameFim').AsInteger := QtdPesoDesmameFim;
      end;
      if CodFazendaManejoPai > 0 then begin
        SQL('  and cod_fazenda_manejo_pai = :cod_fazenda_manejo_pai ', 0);
        EQuery.ParamByName('cod_fazenda_manejo_pai').AsInteger := CodFazendaManejoPai;
      end;
      if CodAnimalManejoPai <> '' then begin
        SQL('  and cod_animal_manejo_pai = :cod_animal_manejo_pai ', 0);
        EQuery.ParamByName('cod_animal_manejo_pai').AsString := CodAnimalManejoPai;
      end;
      if CodFazendaManejoMae > 0 then begin
        SQL('  and cod_fazenda_manejo_mae = :cod_fazenda_manejo_mae ', 0);
        EQuery.ParamByName('cod_fazenda_manejo_mae').AsInteger := CodFazendaManejoMae;
      end;
      if CodAnimalManejoMae <> '' then begin
        SQL('  and cod_animal_manejo_mae = :cod_animal_manejo_mae ', 0);
        EQuery.ParamByName('cod_animal_manejo_mae').AsString := CodAnimalManejoMae;
      end;

      // Realiza "order by" por campos selecionados
      SQL('order by ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := SE(bAux,'  , ', '  ')+IntRelatorios.ValorCampo('NomField');
        if SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
          and not(bAux) then bAux := True;
        IntRelatorios.IrAoProximo;
      end;

      // Realiza consulta a massa de dados preparada
//      EQuery.SQL.SaveToFile('c:\tmp\Select.sql');
      EQuery.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      on E: exception do begin
        Rollback;
        iAux := Length(strExceedsTheConfiguredThreshold);
        if (CodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
          Result := idExceedsTheConfiguredThreshold;
        end else begin
          Mensagens.Adicionar(1575, Self.ClassName, NomMetodo, [E.Message]);
          Result := -1575;
        end;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.GerarRelatorioDesempenhoVacas(
  CodFazendaManejo: Integer; CodAnimalManejoInicio,
  CodAnimalManejoFim: String; CodFazendaManejoPai: Integer;
  CodAnimalManejoPai: String; CodFazendaManejoMae: Integer;
  CodAnimalManejoMae, CodRacas, CodCategorias, CodLocais, CodLotes,
  IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; NumPartoInicio, NumPartoFim,
  NumDiasIntervaloInicio, NumDiasIntervalorFim, QtdPesoDesmameInicio,
  QtdPesoDesmameFim, Tipo, CodTarefa, CodPessoaProdutor: Integer): String;
type
  TCamposSumarizados = (csDtaIdade, csDtaIdadePrimeiroParto, csNumPartos,
    csNumDesmamados, csNumDiasIntervaloPartos, csQtdPesoMedioDesmame);
const
  Metodo: Integer = 476;
  NomeMetodo: String = 'GerarRelatorioDesempenhoVacas';
  CodRelatorio: Integer = 20;
  CodTipoTarefa: Integer = 5;
  Field: Array [TCamposSumarizados] of String = ('DtaIdade',
    'DtaIdadePrimeiroParto', 'NumPartos', 'NumDesmamados',
    'NumDiasIntervaloPartos', 'QtdPesoMedioDesmame');
  FieldShow: Array [TCamposSumarizados] of String = ('TxtIdade',
    'TxtIdadePrimeiroParto', 'NumPartos', 'NumDesmamados',
    'NumDiasIntervaloPartos', 'QtdPesoMedioDesmame');
var
  Q, Qry: THerdomQuery;
  Rel: TRelatorioPadrao;
  Campo: TCamposSumarizados;
  bAux, bAuxLinha: Boolean;
  Retorno, iAux, iNumVacas: Integer;
  sMedia, sMinimo, sMaximo: Array [TCamposSumarizados] of Variant;
  NomPessoaProdutor: String;
  cDtaIdade, cDta1, cDta2, cDtaMedia: TDateTime;

  procedure AtualizarMedia(Campo: TCamposSumarizados);
  begin
    if Assigned(Qry.FindField(Field[Campo])) then begin
      if VarIsEmpty(sMedia[Campo]) then begin
        sMedia[Campo] := Qry.FieldByName(Field[Campo]).Value;
      end else begin
        if (not Qry.FieldByName(Field[Campo]).IsNull) or (Qry.Eof) then begin
          if ((Campo = csDtaIdade) or (Campo = csDtaIdadePrimeiroParto)) then
          begin
            if Qry.Eof then
            begin
              cDta1 := VarToDateTime(sMinimo[Campo]);
              cDta2 := VarToDateTime(sMaximo[Campo]);
              cDtaMedia := (cDta1 + cDta2) / 2;
              sMedia[Campo] := cDtaMedia;
            end;
          end
          else
          begin
            sMedia[Campo] := sMedia[Campo] + Qry.FieldByName(Field[Campo]).Value;
          end;
        end
        else
        begin
          sMedia[Campo] := sMedia[Campo];
        end;
      end;
    end;
  end;

  procedure AtualizarMinimo(Campo: TCamposSumarizados);
  begin
    if Assigned(Qry.FindField(Field[Campo])) then begin
      if VarIsEmpty(sMinimo[Campo]) then begin
        sMinimo[Campo] := Qry.FieldByName(Field[Campo]).Value;
      end else if Qry.FieldByName(Field[Campo]).Value < sMinimo[Campo] then begin
        sMinimo[Campo] := Qry.FieldByName(Field[Campo]).Value;
      end;
    end;
  end;

  procedure AtualizarMaximo(Campo: TCamposSumarizados);
  begin
    if Assigned(Qry.FindField(Field[Campo])) then begin
      if VarIsEmpty(sMaximo[Campo]) then begin
        sMaximo[Campo] := Qry.FieldByName(Field[Campo]).Value;
      end else if Qry.FieldByName(Field[Campo]).Value > sMaximo[Campo] then begin
        sMaximo[campo] := Qry.FieldByName(Field[Campo]).Value;
      end;
    end;
  end;

begin
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  if CodTarefa > 0 then
  begin
    Conexao.DefinirProdutorTrabalho(CodPessoaProdutor, NomPessoaProdutor);
  end;
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);
  try
    {Realiza pesquisa de animais de acordo com os critérios informados}
    Retorno := PesquisarRelatorioDesempenhoVacas(Qry, CodFazendaManejo,
                                                 CodAnimalManejoInicio, CodAnimalManejoFim, CodFazendaManejoPai,
                                                 CodAnimalManejoPai, CodFazendaManejoMae, CodAnimalManejoMae, CodRacas,
                                                 CodCategorias, CodLocais, CodLotes, IndAgrupRaca1, CodRaca1,
                                                 QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                 QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
                                                 QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
                                                 QtdCompRacialInicio4, QtdCompRacialFim4, NumPartoInicio, NumPartoFim,
                                                 NumDiasIntervaloInicio, NumDiasIntervalorFim, QtdPesoDesmameInicio,
                                                 QtdPesoDesmameFim, CodTarefa);
    if Retorno < 0 then begin
      if Retorno = idExceedsTheConfiguredThreshold then begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodFazendaManejo, CodAnimalManejoInicio,
                                                              CodAnimalManejoFim, CodFazendaManejoPai,
                                                              CodAnimalManejoPai, CodFazendaManejoMae,
                                                              CodAnimalManejoMae, CodRacas, CodCategorias, CodLocais,
                                                              CodLotes, IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                                              QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                              QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
                                                              CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                              IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                                              QtdCompRacialFim4, NumPartoInicio, NumPartoFim,
                                                              NumDiasIntervaloInicio, NumDiasIntervalorFim, QtdPesoDesmameInicio,
                                                              QtdPesoDesmameFim, Tipo, Conexao.CodProdutorTrabalho]);

        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomeMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio, CodFazendaManejo, CodAnimalManejoInicio,
                                                              CodAnimalManejoFim, CodFazendaManejoPai,
                                                              CodAnimalManejoPai, CodFazendaManejoMae,
                                                              CodAnimalManejoMae, CodRacas, CodCategorias, CodLocais,
                                                              CodLotes, IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1,
                                                              QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
                                                              QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3,
                                                              CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
                                                              IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4,
                                                              QtdCompRacialFim4, NumPartoInicio, NumPartoFim,
                                                              NumDiasIntervaloInicio, NumDiasIntervalorFim, QtdPesoDesmameInicio,
                                                              QtdPesoDesmameFim, Tipo, Conexao.CodProdutorTrabalho],
                                                              DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomeMetodo, []);
        end;
      end;
      Exit;
    end;

    

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then begin
      Mensagens.Adicionar(1568, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      try
        Q := THerdomQuery.Create(Conexao, nil);
        try
          Rel.TipoDoArquvio := Tipo;

          {Define o relatório em questão e carrega os seus dados específicos}
          Retorno := Rel.CarregarRelatorio(CodRelatorio);
          if Retorno < 0 then Exit;

          {Inicializa o procedimento de geração do arquivo de relatório}
          Retorno := Rel.InicializarRelatorio;
          if Retorno < 0 then Exit;

          {Inicializa sumarizadores}
          for Campo := Low(sMedia) to High(sMedia) do begin
            sMedia[Campo] := Unassigned;
            sMinimo[Campo] := Unassigned;
            sMaximo[Campo] := Unassigned;
          end;
          iNumVacas := 0;

          Qry.First;
          while not Qry.EOF do begin
            {Apresenta registro}
            Rel.ImprimirColunasResultSet(Qry);
            {Atualiza sumarizadores}
            for Campo := Low(sMedia) to High(sMedia) do begin
              AtualizarMedia(Campo);
              AtualizarMinimo(Campo);
              AtualizarMaximo(Campo);
            end;
            Inc(iNumVacas);
            {Avança ao próximo registro}
            Qry.Next;
          end;
          AtualizarMedia(csDtaIdade);
          AtualizarMedia(csDtaIdadePrimeiroParto);          
          {Auxiliar para obtendo das idades como texto}
          Q.SQL.Clear;
          Q.SQL.Text := 'select dbo.FNT_IDADE(0, :idade ) ';
          {Monta linha sumarizadora: média}
          bAux := False;
          bAuxLinha := False;
          Rel.NovaLinha;
          Rel.Campos.LimparValores;
          for Campo := Low(sMedia) to High(sMedia) do begin
            if Assigned(Qry.FindField(Field[Campo])) then begin
              if (Campo = csDtaIdade) or (Campo = csDtaIdadePrimeiroParto) then begin
                Q.Close;
                Q.ParamByName('idade').AsDateTime :=  Trunc(VarToDateTime(sMedia[Campo]));
                Q.Open;
                Rel.Campos.ValorCampo[FieldShow[Campo]] := Q.Fields[0].AsString;
              end else if (Campo = csQtdPesoMedioDesmame) then begin
                if VarIsEmpty(sMedia[Campo]) or VarIsNull(sMedia[Campo]) then begin
                  Rel.Campos.ValorCampo[FieldShow[Campo]] := FloatToStrF(0.0,
                    ffNumber, 6, 1);
                end else begin
                  Rel.Campos.ValorCampo[FieldShow[Campo]] := FloatToStrF(
                    sMedia[Campo] / iNumVacas, ffNumber, 6, 1);
                end;
              end else begin
                Rel.Campos.ValorCampo[FieldShow[Campo]] := sMedia[Campo] div iNumVacas;
              end;
              bAuxLinha := True;
              bAux := True;
            end;
          end;
          if bAux then begin
            Rel.ImprimirTextoTotalizador('Média');
          end;
          {Monta linha sumarizadora: mínimo}
          bAux := False;
          Rel.Campos.LimparValores;
          for Campo := Low(sMinimo) to High(sMinimo) do begin
            if Assigned(Qry.FindField(Field[Campo])) then begin
              if (Campo = csDtaIdade) or (Campo = csDtaIdadePrimeiroParto) then begin
                Q.Close;
                Q.ParamByName('idade').AsDateTime := sMinimo[Campo];
                Q.Open;
                Rel.Campos.ValorCampo[FieldShow[Campo]] := Q.Fields[0].AsString;
              end else if (Campo = csQtdPesoMedioDesmame) then begin
                if VarIsEmpty(sMinimo[Campo]) or VarIsNull(sMinimo[Campo]) then begin
                  Rel.Campos.ValorCampo[FieldShow[Campo]] := FloatToStrF(0.0,
                    ffNumber, 6, 1);
                end else begin
                  Rel.Campos.ValorCampo[FieldShow[Campo]] := FloatToStrF(
                    sMinimo[Campo] / iNumVacas, ffNumber, 6, 1);
                end;
              end else begin
                Rel.Campos.ValorCampo[FieldShow[Campo]] := sMinimo[Campo];
              end;
              bAuxLinha := True;
              bAux := True;
            end;
          end;
          if bAux then begin
            Rel.ImprimirTextoTotalizador('Mínimo');
          end;
          {Monta linha sumarizadora: máximo}
          bAux := False;
          Rel.Campos.LimparValores;
          for Campo := Low(sMaximo) to High(sMaximo) do begin
            if Assigned(Qry.FindField(Field[Campo])) then begin
              if (Campo = csDtaIdade) or (Campo = csDtaIdadePrimeiroParto) then begin
                Q.Close;
                Q.ParamByName('idade').AsDateTime := sMaximo[Campo];
                Q.Open;
                Rel.Campos.ValorCampo[FieldShow[Campo]] := Q.Fields[0].AsString;
              end else if (Campo = csQtdPesoMedioDesmame) then begin
                if VarIsEmpty(sMaximo[Campo]) or VarIsNull(sMaximo[Campo]) then begin
                  Rel.Campos.ValorCampo[FieldShow[Campo]] := FloatToStrF(0.0,
                    ffNumber, 6, 1);
                end else begin
                  Rel.Campos.ValorCampo[FieldShow[Campo]] := FloatToStrF(
                    sMaximo[Campo] / iNumVacas, ffNumber, 6, 1);
                end;
              end else begin
                Rel.Campos.ValorCampo[FieldShow[Campo]] := sMaximo[Campo];
              end;
              bAuxLinha := True;
              bAux := True;
            end;
          end;
          if bAux then begin
            Rel.ImprimirTextoTotalizador('Máximo');
          end;
          if bAuxLinha then begin
            Rel.NovaLinha;
          end;
          {Monta Linha totalizadora de número de animais}
          Rel.Campos.LimparValores;
          Rel.ImprimirTexto(0, 'Total de Vacas: '+IntToStr(iNumVacas));
          {Inicia processamento de encerramento do relatório em questão}
          Retorno := Rel.FinalizarRelatorio;
          if Retorno = 0 then begin
            {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
            Result := Rel.NomeArquivo;
          end;
        finally
          Q.Free;
        end;
      except
        On E: exception do begin
          Rollback;
          Mensagens.Adicionar(1576, Self.ClassName, NomeMetodo, [E.Message]);
          Result := '';
          Exit;
        end;
      end;
    finally
      Rel.Free;
    end;
  Finally
    Qry.Free;
  end;
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_1(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
    // Quantidade de fêmeas em monta (total de fêmeas com evento estação de
    // monta)
    '( '+
    '  select '+
    '    count(tae.cod_animal) '+
    '  from '+
    '    tab_animal_evento tae with (nolock) '+
    '  where '+
    '    tae.cod_pessoa_produtor = :cod_pessoa_produtor '+
    '    and tae.cod_evento = :cod_evento_estacao_monta '+
    '  ) as QtdFemeasEmMonta '+

    // Quantidade de fêmeas cobertas por IA / MC
    // Somente vacas e com uma única cobertura
    ', ( '+
    '  select '+
    '    count(distinct tae.cod_animal) '+
    '  from '+
    '    tab_evento te with (nolock) '+
    '    , tab_animal_evento tae with (nolock) '+
    '  where '+
    '    te.cod_pessoa_produtor = :cod_pessoa_produtor '+
    '    and te.cod_tipo_evento in (26, 27) '+
    '    and te.cod_evento_associado = :cod_evento_estacao_monta '+
    '    and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
    '    and tae.cod_evento = te.cod_evento '+
    '    and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
    '    and not exists ( '+
    '      select '+
    '        top 1 1 '+
    '      from '+
    '        tab_evento rpta with (nolock) '+
    '        , tab_animal_evento rptae with (nolock) '+
    '      where '+
    '        rpta.cod_tipo_evento = 23 '+
    '        and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
    '        and rpta.cod_evento = rptae.cod_evento '+
    '        and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
    '        and rptae.cod_animal = tae.cod_animal '+
    '      ) '+ // -- não sofream cob. por RP
    '    and ( '+
    '      select '+
    '        count(pte.cod_evento) '+
    '      from '+
    '        tab_evento pte with (nolock) '+
    '        , tab_animal_evento ptae with (nolock) '+
    '      where '+
    '        pte.cod_tipo_evento = 30 '+
    '        and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
    '        and pte.cod_evento = ptae.cod_evento '+
    '        and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
    '        and ptae.cod_animal = tae.cod_animal '+
    '      ) > 1 '+ // -- Não são primíparas
    '    and ( '+
    '      select '+
    '        count(c1te.cod_evento) '+
    '      from '+
    '        tab_evento c1te with (nolock) '+
    '        , tab_animal_evento c1tae with (nolock) '+
    '      where '+
    '        c1te.cod_tipo_evento in (26, 27) '+
    '        and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
    '        and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
    '        and c1te.cod_evento = c1tae.cod_evento '+
    '        and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
    '        and c1tae.cod_animal = tae.cod_animal '+
    '      ) = 1 '+ // -- Só receberam 1 (um) evento de cobertura
    '  ) as QtdCobIAMCVaca1 '+

    // Quantidade de fêmeas cobertas por IA / MC
    // Somente vacas e com duas coberturas
    ', ( '+
    '  select '+
    '    count(distinct tae.cod_animal) '+
    '  from '+
    '    tab_evento te with (nolock) '+
    '    , tab_animal_evento tae with (nolock) '+
    '  where '+
    '    te.cod_pessoa_produtor = :cod_pessoa_produtor '+
    '    and te.cod_tipo_evento in (26, 27) '+
    '    and te.cod_evento_associado = :cod_evento_estacao_monta '+
    '    and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
    '    and tae.cod_evento = te.cod_evento '+
    '    and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
    '    and not exists ( '+
    '      select '+
    '        top 1 1 '+
    '      from '+
    '        tab_evento rpta with (nolock) '+
    '        , tab_animal_evento rptae with (nolock) '+
    '      where '+
    '        rpta.cod_tipo_evento = 23 '+
    '        and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
    '        and rpta.cod_evento = rptae.cod_evento '+
    '        and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
    '        and rptae.cod_animal = tae.cod_animal '+
    '      ) '+ // -- não sofream cob. por RP
    '    and ( '+
    '      select '+
    '        count(pte.cod_evento) '+
    '      from '+
    '        tab_evento pte with (nolock) '+
    '        , tab_animal_evento ptae with (nolock) '+
    '      where '+
    '        pte.cod_tipo_evento = 30 '+
    '        and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
    '        and pte.cod_evento = ptae.cod_evento '+
    '        and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
    '        and ptae.cod_animal = tae.cod_animal '+
    '      ) > 1  '+ // -- Não são primíparas
    '    and ( '+
    '      select '+
    '        count(c1te.cod_evento) '+
    '      from '+
    '        tab_evento c1te with (nolock) '+
    '        , tab_animal_evento c1tae with (nolock) '+
    '      where '+
    '        c1te.cod_tipo_evento in (26, 27) '+
    '        and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
    '        and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
    '        and c1te.cod_evento = c1tae.cod_evento '+
    '        and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
    '        and c1tae.cod_animal = tae.cod_animal '+
    '      ) = 2 '+ // -- Só receberam 2 (dois) eventos de cobertura
    '  ) as QtdCobIAMCVaca2 ');
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_2(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
      // Quantidade de fêmeas cobertas por IA / MC
      // Somente vacas e com mais de duas coberturas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) > 1 '+ // -- Não são primíparas
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) > 2 '+ // -- Receberam mais do que 2 (dois) eventos de cobertura
      '   ) as QtdCobIAMCVaca3 '+

      // Quantidade de fêmeas cobertas por IA / MC
      // Somente novilhas e com uma única cobertura
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.cod_categoria_animal = 5 '+ // -- somente novilhas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Só receberam 1 (um) evento de cobertura
      '   ) as QtdCobIAMCNovilha1 '+

      // Quantidade de fêmeas cobertas por IA / MC
      // Somente novilhas e com duas coberturas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.cod_categoria_animal = 5 '+ // -- somente novilhas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) = 2 '+ // -- Só receberam 2 (dois) eventos de cobertura
      '   ) as QtdCobIAMCNovilha2 '
   );
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_3(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
      // Quantidade de fêmeas cobertas por IA / MC
      // Somente novilhas e com mais de duas coberturas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.cod_categoria_animal = 5 '+ // -- somente novilhas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) > 2 '+ // -- Receberam mais do que 2 (dois) eventos de cobertura
      '   ) as QtdCobIAMCNovilha3 '+

      // Quantidade de fêmeas cobertas por IA / MC
      // Somente primíparas e com uma única cobertura
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Somente primíparas
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Só receberam 1 (um) evento de cobertura
      '   ) as QtdCobIAMCPrimipara1 '+

      // Quantidade de fêmeas cobertas por IA / MC
      // Somente primíparas e com duas coberturas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Somente primíparas
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) = 2 '+ // -- Só receberam 2 (dois) eventos de cobertura
      '   ) as QtdCobIAMCPrimipara2 '
   );
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_4(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
      // Quantidade de fêmeas cobertas por IA / MC
      // Somente primíparas e com mais de duas coberturas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento in (26, 27) '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento = 23 '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por RP
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Somente primíparas
      '     and ( '+
      '       select '+
      '         count(c1te.cod_evento) '+
      '       from '+
      '         tab_evento c1te with (nolock) '+
      '         , tab_animal_evento c1tae with (nolock) '+
      '       where '+
      '         c1te.cod_tipo_evento in (26, 27) '+
      '         and c1te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and c1te.cod_pessoa_produtor = c1tae.cod_pessoa_produtor '+
      '         and c1te.cod_evento = c1tae.cod_evento '+
      '         and c1tae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and c1tae.cod_animal = tae.cod_animal '+
      '       ) > 2 '+ // -- Receberam mais do que 2 (dois) eventos de cobertura
      '   ) as QtdCobIAMCPrimipara3 '+

      // Quantidade de fêmeas cobertas por RP
      // Somente vacas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento = 23 '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento in (26, 27) '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por IA ou MC
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) > 1 '+ // -- Não são primíparas
      '   ) as QtdCobRPVaca '+

      // Quantidade de fêmeas cobertas por RP
      // Somente novilhas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento = 23 '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.cod_categoria_animal = 5 '+ // -- somente novilhas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento in (26, 27) '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por IA ou MC
      '   ) as QtdCobRPNovilha '
   );
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_5(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
      // Quantidade de fêmeas cobertas por RP
      // Somente primíparas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento = 23 '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento in (26, 27) '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- não sofream cob. por IA ou MC
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Somente primíparas
      '   ) as QtdCobRPPrimipara '+

      // Quantidade de fêmeas cobertas por IA, MC e RP
      // Somente vacas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento = 23 '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento in (26, 27) '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ //  -- Sofream cob. por IA ou MC também
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) > 1 '+ // -- Não são primíparas
      '   ) as QtdCobIAMCRPVaca '+

      // Quantidade de fêmeas cobertas por IA, MC e RP
      // Somente novilhas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento = 23 '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.cod_categoria_animal = 5 '+ // -- somente novilhas
      '     and exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento in (26, 27) '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- Sofream cob. por IA ou MC também
      '   ) as QtdCobIAMCRPNovilha '+

      // Quantidade de fêmeas cobertas por IA, MC e RP
      // Somente primíparas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_tipo_evento = 23 '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- somente vacas
      '     and exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento rpta with (nolock) '+
      '         , tab_animal_evento rptae with (nolock) '+
      '       where '+
      '         rpta.cod_tipo_evento in (26, 27) '+
      '         and rpta.cod_pessoa_produtor = rptae.cod_pessoa_produtor '+
      '         and rpta.cod_evento = rptae.cod_evento '+
      '         and rptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and rptae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- Sofream cob. por IA ou MC também
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) > 1 '+ // -- Somente primíparas
      ' ) as QtdCobIAMCRPPrimipara '+

      // Quantidade de sêmen utilizada para cobertura por inseminação artificial
      ' , ( '+
      '   select '+
      '     sum(teia.qtd_doses) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_evento_insemin_artificial teia '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 26 '+
      '     and teia.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and teia.cod_evento = te.cod_evento '+
      '   ) as QtdDosesSemenUtilizadas '+

      // Quantidade de fêmeas em anestro (fêemas que não presentes na estação
      // de monta e que não receberam nenhum tipo de cobertura
      ' , ( '+
      '   select '+
      '     count(tae.cod_animal) '+
      '   from '+
      '     tab_animal_evento tae with (nolock) '+
      '   where '+
      '     tae.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and tae.cod_evento = :cod_evento_estacao_monta '+
      '     and not exists ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento ete with (nolock) '+
      '         , tab_animal_evento etae with (nolock) '+
      '       where '+
      '         ete.cod_tipo_evento in (23, 26, 27) '+
      '         and ete.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ete.cod_evento_associado = tae.cod_evento '+
      '         and ete.cod_pessoa_produtor = etae.cod_pessoa_produtor '+
      '         and ete.cod_evento = etae.cod_evento '+
      '         and etae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and etae.cod_animal = tae.cod_animal '+
      '       ) '+ // -- Animais da estação que não sofreram nenhuma cobertura
      '   ) as QtdFemeasEmAnestro '
   );
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_6(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
      // Quantidade de fêmeas diagnosticadas
      // Somente vacas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 28 '+
      '     and tae.cod_pessoa_produtor = te.cod_evento '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- Somente vacas
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) > 1 '+ // -- Não são primíparas
      '   ) as QtdDiagVaca '+

      // Quantidade de fêmeas diagnosticadas
      // Somente novilhas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 28 '+
      '     and tae.cod_pessoa_produtor = te.cod_evento '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.cod_categoria_animal = 5 '+ // -- Somente novilhas
      '   ) as QtdDiagNovilha '+

      // Quantidade de fêmeas diagnosticadas
      // Somente primíparas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 28 '+
      '     and tae.cod_pessoa_produtor = te.cod_evento '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and isnull(tae.cod_categoria_animal, 0) != 5 '+ // -- Somente vacas
      '     and ( '+
      '       select '+
      '         count(pte.cod_evento) '+
      '       from '+
      '         tab_evento pte with (nolock) '+
      '         , tab_animal_evento ptae with (nolock) '+
      '       where '+
      '         pte.cod_tipo_evento = 30 '+
      '         and pte.cod_pessoa_produtor = ptae.cod_pessoa_produtor '+
      '         and pte.cod_evento = ptae.cod_evento '+
      '         and ptae.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
      '         and ptae.cod_animal = tae.cod_animal '+
      '       ) = 1 '+ // -- Somente primíparas
      '   ) as QtdDiagPrimiparas '+

      // Quantidade de fêmeas diagnosticadas prenhas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 28 '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.ind_vaca_prenha = ''S'' '+
      '   ) as QtdFemeasPrenhas '+

      // Quantidade de fêmeas diagnósticas vazias
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 28 '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.ind_vaca_prenha = ''N'' '+
      '   ) as QtdFemeasVazias '
   );
end;

procedure PesquisarResumoEstacaoMonta_MontaSQL_7(EQuery: THerdomQuery);
begin
   EQuery.SQL.Add(
      // Quantidade de fêmeas que não foram diagnosticadas
      ' , ( '+
      '   select '+
      '     count(distinct tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento = :cod_evento_estacao_monta '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and not exists '+
      '     ( '+
      '       select '+
      '         top 1 1 '+
      '       from '+
      '         tab_evento te with (nolock) '+
      '         , tab_animal_evento tae with (nolock) '+
      '       where '+
      '         te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '         and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '         and te.cod_tipo_evento = 28 '+
      '         and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '         and tae.cod_evento = te.cod_evento '+
      '     ) '+
      '   ) as QtdFemeasSemDiag '+

      // Quantidade de bezerros nascidos
      ' , ( '+
      '   select '+
      '     count(tac.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_cria tac with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 30 '+
      '     and tac.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tac.cod_evento = te.cod_evento '+
      '   ) as QtdBezerrosNascidos '+

      // Quantidade de bezerros desmamados
      ' , ( '+
      '   select '+
      '     count(ta.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_cria tac with (nolock) '+
      '     , tab_animal ta with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 30 '+
      '     and tac.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tac.cod_evento = te.cod_evento '+
      '     and ta.cod_pessoa_produtor = tac.cod_pessoa_produtor '+
      '     and ta.cod_animal = tac.cod_animal '+
      '     and ta.cod_categoria_animal != 1 '+
      '   ) as QtdBezerrosDesmamados '+

      // Peso médio no desmame
      ' , ( '+
      '     select '+
      '       avg( '+
      '         dbo.FNT_PESO_ANIMAL(taed.cod_pessoa_produtor, taed.cod_animal, ted.dta_inicio) '+
      '       ) '+
      '     from '+
      '       tab_evento tep with (nolock) '+
      '       , tab_animal_cria tac '+
      '       , tab_animal_evento taed  with (nolock)'+
      '       , tab_evento ted with (nolock) '+
      '     where '+
      '       tep.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '       and tep.cod_evento_associado = :cod_evento_estacao_monta '+
      '       and tep.cod_tipo_evento = 30 '+
      '       and tac.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
      '       and tac.cod_evento = tep.cod_evento '+
      '       and taed.cod_pessoa_produtor = tac.cod_pessoa_produtor '+
      '       and taed.cod_animal = tac.cod_animal '+
      '       and ted.cod_pessoa_produtor = taed.cod_pessoa_produtor '+
      '       and ted.cod_evento = taed.cod_evento '+
      '       and ted.cod_tipo_evento = :cod_evento_estacao_monta '+
      '   ) as QtdPesoMedioDesmame '+

      // Número que deviam ter parido, mas não pariram
      ' , ( '+
      '   select '+
      '     count(tae.cod_animal) '+
      '   from '+
      '     tab_evento te with (nolock) '+
      '     , tab_animal_evento tae with (nolock) '+
      '   where '+
      '     te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '     and te.cod_evento_associado = :cod_evento_estacao_monta '+
      '     and te.cod_tipo_evento = 28 '+
      '     and tae.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '     and tae.cod_evento = te.cod_evento '+
      '     and tae.ind_vaca_prenha = ''S'' '+
      '     and '+
      '         ( '+
      '         select '+
      '           top 1 '+
      '           cast(getdate() - teuc.dta_fim as integer) '+
      '         from '+
      '           tab_evento teuc with (nolock) '+
      '           , tab_animal_evento taeuc with (nolock) '+
      '         where '+
      '           teuc.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '           and teuc.cod_evento_associado = :cod_evento_estacao_monta '+
      '           and teuc.cod_tipo_evento in ( 23, 26, 27 ) '+
      '           and taeuc.cod_pessoa_produtor = teuc.cod_pessoa_produtor '+
      '           and taeuc.cod_evento = teuc.cod_evento '+
      '           and taeuc.cod_animal = tae.cod_animal '+
      '         order by '+
      '           teuc.dta_fim desc '+
      '         ) '+
      '         > '+
      '         ( '+
      '         select '+
      '           isnull(max(cast(val_parametro_sistema as integer)), 300) '+
      '         from '+
      '           tab_parametro_sistema '+
      '         where '+
      '           cod_parametro_sistema = 60 '+
      '         ) '+
      '     and not exists ( '+
      '         select '+
      '           1 '+
      '         from '+
      '           tab_evento tep with (nolock) '+
      '           , tab_animal_evento taep with (nolock) '+
      '         where '+
      '           tep.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '           and tep.cod_evento_associado = :cod_evento_estacao_monta '+
      '           and tep.cod_tipo_evento = 30 '+
      '           and taep.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
      '           and taep.cod_evento = tep.cod_evento '+
      '           and taep.cod_animal = tae.cod_animal '+
      '         ) '+
      '   ) as QtdFemeasNaoParidas '
   );
end;

function TIntEventos.PesquisarResumoEstacaoMonta(EQuery: THerdomQuery;
                                                 ECodEventoEstacaoMonta,
                                                 ECodPessoaProdutor,
                                                 ECodTarefa: Integer): Integer;
const
  Metodo: Integer = 480;
  NomeMetodo: String = 'PesquisarResumoEstacaoMonta';
var
  NomPessoaProdutor: String;
  iAux: Integer;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se a query passada como parâmetro foi criada!
  if EQuery = nil then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  if ECodTarefa > 0 then
  begin
    Conexao.DefinirProdutorTrabalho(ECodPessoaProdutor, NomPessoaProdutor);
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  try
    EQuery.SQL.Clear;
    // Consistindo estação de monta
    EQuery.SQL.Text :=
      'select '+
      '  te.dta_inicio '+
      'from '+
      '  tab_evento te '+
      '  , tab_evento_estacao_monta teem '+
      'where '+
      '  te.cod_pessoa_produtor = :cod_pessoa_produtor '+
      '  and te.cod_tipo_evento = 24 '+
      '  and te.cod_evento = :cod_evento '+
      '  and teem.cod_pessoa_produtor = te.cod_pessoa_produtor '+
      '  and teem.cod_evento = te.cod_evento ';
    EQuery.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    EQuery.ParamByName('cod_evento').AsInteger := ECodEventoEstacaoMonta;
    EQuery.Open;
    if EQuery.IsEmpty then begin
      Mensagens.Adicionar(1585, Self.ClassName, NomeMetodo, []);
      Result := -1585;
      Exit;
    end;

    EQuery.SQL.Clear;
    EQuery.SQL.Text :=
{IFDEF MSSQL}
      'select ';
      PesquisarResumoEstacaoMonta_MontaSQL_1(EQuery);
      PesquisarResumoEstacaoMonta_MontaSQL_2(EQuery);
      PesquisarResumoEstacaoMonta_MontaSQL_3(EQuery);
      PesquisarResumoEstacaoMonta_MontaSQL_4(EQuery);
      PesquisarResumoEstacaoMonta_MontaSQL_5(EQuery);
      PesquisarResumoEstacaoMonta_MontaSQL_6(EQuery);
      PesquisarResumoEstacaoMonta_MontaSQL_7(EQuery);
{ENDIF}
    EQuery.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    EQuery.ParamByName('cod_evento_estacao_monta').AsInteger := ECodEventoEstacaoMonta;
    EQuery.Open;
    Result := 0;
  except
    on E: exception do begin
      iAux := Length(strExceedsTheConfiguredThreshold);
      if (ECodTarefa = -1) and (Copy(E.Message, 1, iAux) = strExceedsTheConfiguredThreshold) then begin
        Result := idExceedsTheConfiguredThreshold;
      end else begin
        Mensagens.Adicionar(1584, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1584;
      end;
      Exit;
    end;
  end;

end;

function TIntEventos.PesquisarRelatorioAvaliacaoInseminacao(
  CodEventoEstacaoMonta, CodFazendaManejoTouro: Integer;
  CodAnimalManejoTouroInicio, CodAnimalManejoTouroFim, NomAnimalTouro,
  DesApelidoTouro, NumPartida, CodRacas, CodCategorias: String;
  IndAgrupRaca1: String; CodRaca1: Integer; QtdCompRacialInicio1,
  QtdCompRacialFim1: Double; IndAgrupRaca2: String; CodRaca2: Integer;
  QtdCompRacialInicio2, QtdCompRacialFim2: Double; IndAgrupRaca3: String;
  CodRaca3: Integer; QtdCompRacialInicio3, QtdCompRacialFim3: Double;
  IndAgrupRaca4: String; CodRaca4: Integer; QtdCompRacialInicio4,
  QtdCompRacialFim4: Double; NumOrdemPartoInicio, NumOrdemPartoFim: Integer;
  CodInseminadores: String): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioAvaliacaoInseminacao';
  CodRelatorio: Integer = 21;

  fNOMINSEMINADOR: Integer = 1;
  fCODANIMALMANEJOTOURO: Integer = 2;
  fQTDINSEMINADAS: Integer = 3;
  fQTDNAORETORNADAS: Integer = 4;
  fQTDPRENHASPOR1: Integer = 5;
  fQTDPRENHASPOR2: Integer = 6;
  fQTDPRENHASPOR3: Integer = 7;
  fINDSERVICO: Integer = 8;
  fQTDPRENHAS: Integer = 9;
  fSGLCATEGORIAANIMAL: Integer = 10;
  fSGLRACA: Integer = 11;
  fNUMPARTIDA: Integer = 12;
  fQTDDIAGNOSTICADAS: Integer = 13;
  fNOMANIMALTOURO: Integer = 14;
  fDESAPELIDOTOURO: Integer = 15;
  fDESCOMPOSICAORACIAL: Integer = 16;
  fNUMORDEMPARTO: Integer = 17;
  fCodManejoFemea: Integer = 18;

var
  X: Integer;
  Param: TValoresParametro;
  IntRelatorios: TIntRelatorios;
  bPersonalizavel, bTa, bTat, bTaf, bAux: Boolean;
  sAux: String;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        Query.SQL.Text := Query.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodInseminadores <> '' then begin
      Result := VerificaParametroMultiValor(CodInseminadores, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    bTa :=
      (IntRelatorios.CampoAssociado(fCodManejoFemea) = 1);

    bTat :=
      (IntRelatorios.CampoAssociado(fNOMANIMALTOURO) = 1)
      or (IntRelatorios.CampoAssociado(fDESAPELIDOTOURO) = 1)
      or (CodFazendaManejoTouro > 0)
      or (CodAnimalManejoTouroInicio <> '')
      or (CodAnimalManejoTouroFim <> '')
      or (NomAnimalTouro <> '')
      or (DesApelidoTouro <> '');

    bTaf :=
      (IntRelatorios.CampoAssociado(fSGLCATEGORIAANIMAL) = 1)
      or (IntRelatorios.CampoAssociado(fSGLRACA) = 1)
      or (CodCategorias <> '')
      or (CodRacas <> '')
      or (IndAgrupRaca1 = 'S') or (IndAgrupRaca1 = 'N')
      or (IndAgrupRaca2 = 'S') or (IndAgrupRaca2 = 'N')
      or (IndAgrupRaca3 = 'S') or (IndAgrupRaca3 = 'N')
      or (IndAgrupRaca4 = 'S') or (IndAgrupRaca4 = 'N');

    try
      Query.SQL.Clear;

{$IFDEF MSSQL}
      // Cria tabela temporária de pesquisa, quando não existir
      Query.SQL.Text :=
        'if object_id(''tempdb..#tmp_avaliacao_inseminacao'') is null '+
        'begin '+
        '  create table #tmp_avaliacao_inseminacao ( '+
        '      cod_pessoa_produtor int not null '+
        '    , cod_animal_femea int null '+
        '    , CodManejoFemea varchar(11) null '+
        '    , NomInseminador varchar(50) null '+
        '    , CodAnimalManejoTouro varchar(11) null '+
        '    , NomAnimalTouro varchar(60) null '+
        '    , DesApelidoTouro varchar(20) null '+
        '    , NumPartida varchar(8) null '+
        '    , NumOrdemParto int null '+
        '    , QtdDoses int null '+
        '    , QtdInseminadas int null '+
        '    , QtdDiagnosticadas int null '+
        '    , QtdNaoRetornadas int null '+
        '    , QtdPrenhas int null '+
        '    , QtdPrenhasPor1 int null '+
        '    , QtdPrenhasPor2 int null '+
        '    , QtdPrenhasPor3 int null '+
        '    , SglCategoriaAnimal varchar(3) null '+
        '    , SglRaca varchar(3) null '+
        '    , DesComposicaoRacial varchar(50) null '+
        '    , DtaInicio datetime null '+
        '  ) '+
        'end ';
//      Query.SQL.SaveToFile('C:\Tmp\Create.sql');
      Query.ExecSQL;

      // Esvazia a tabela temporária
      Query.SQL.Text :=
        'truncate table #tmp_avaliacao_inseminacao ';
      Query.ExecSQL;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas Inseminadas
      // ----------------------------------------------------------------------------------------------------------- //
      Query.SQL.Clear;
      SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
      SQL('( ',                                                                        0);
      SQL('    cod_pessoa_produtor ',                                                  0);
      SQL('  , cod_animal_femea ',                                                     0);
      SQL('  , CodManejoFemea ',                                                     fCodManejoFemea);
      SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
      SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
      SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
      SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
      SQL('  , NumPartida ',                                                           fNUMPARTIDA);
      SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
      SQL('  , SglRaca ',                                                              fSGLRACA);
      SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
      SQL('  , NumOrdemParto ',                                                        fNUMORDEMPARTO);
      SQL('  , QtdInseminadas ',                                                       fQTDINSEMINADAS);
      SQL('  , QtdDoses ',                                                             fINDSERVICO);
      SQL('  , DtaInicio ',                                                            0);
      SQL(') ',                                                                        0);
      SQL('select ',                                                                   0);
      SQL('  tae.cod_pessoa_produtor ',                                                0);
      SQL('  , tae.cod_animal ',                                                       0);
      SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
      SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
      SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
          '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
      SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
      SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
      SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
      SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
      SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
      SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
          '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
      SQL('  , ( '+
          '    select '+
          '      count(tep.cod_evento) '+
          '    from '+
          '      tab_evento tep with (nolock) '+
          '      , tab_animal_evento taep with (nolock) '+
          '    where '+
          '      tep.cod_pessoa_produtor = tae.cod_pessoa_produtor '+
          '      and tep.cod_tipo_evento = 30 '+
          '      and taep.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
          '      and taep.cod_evento = tep.cod_evento '+
          '      and taep.cod_animal = tae.cod_animal '+
          '    ) ',                                                                    fNUMORDEMPARTO);
      SQL('  , count(distinct tae.cod_animal) ',                                       fQTDINSEMINADAS);
      SQL('  , sum(qtd_doses) ',                                                       fINDSERVICO);
      SQL('  , te.dta_inicio ',                                                        0);
      SQL('from ',                                                                     0);
      SQL('  tab_evento te with (nolock) ',                                            0);
      SQL('  , tab_evento_insemin_artificial teia ',                                   0);
      SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
      SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
      SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
      SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
      SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
      SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
      SQL('  , tab_raca tr ',                                                          fSGLRACA);
      SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
      SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
      SQL('where ',                                                                    0);
      SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
      SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
      SQL('  and te.cod_tipo_evento = 26 ',                                            0);
      SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
      SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
      SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
      SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
      SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
      SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
      SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
      SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
      SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
      SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
      SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
      SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));      
      SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
      SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
      SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
      SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;
      if Conexao.CodPapelUsuario = 3 then begin
         SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
      end;
      if IndAgrupRaca1 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          Query.ParamByName('codraca1').AsInteger := CodRaca1;
          Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          Query.ParamByName('codraca2').AsInteger := CodRaca2;
          Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          Query.ParamByName('codraca3').AsInteger := CodRaca3;
          Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          Query.ParamByName('codraca4').AsInteger := CodRaca4;
          Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
      end;
      Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;
      if Conexao.CodPapelUsuario = 3 then begin
        Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;

      // Critérios específicos de pesquisa
      if (CodFazendaManejoTouro > 0) then begin
        SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
        Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
      end;
      if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
        SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
        Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
      end;
      if (NomAnimalTouro <> '') then begin
        SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
        Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
      end;
      if (DesApelidoTouro <> '') then begin
        SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
        Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
      end;
      if (CodCategorias <> '') then begin
        SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
      end;
      if (CodRacas <> '') then begin
        SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
      end;
      if (NumPartida <> '') then begin
        SQL('  and teia.num_partida = :num_partida ', 0);
        Query.ParamByName('num_partida').AsString := NumPartida;
      end;
      if (CodInseminadores <> '') then begin
        SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
      end;
      SQL('group by ',                                                                 0);
      SQL('    tae.cod_pessoa_produtor ',                                              0);
      SQL('  , tae.cod_animal ',                                                       0);
      SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
      SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
      SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
      SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
      SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
      SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
      SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
      SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
      SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
      SQL('  , te.dta_inicio ',                                                        0);
//      Query.SQL.SaveToFile('C:\Tmp\InsertInseminadas.sql');
      Query.ExecSQL;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas Diagnosticadas (prenhas ou não), ou seja, que receberam um evento de diagnóstico de prenhez
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDDIAGNOSTICADAS) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                       fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdDiagnosticadas ',                                                    0);
        SQL('  , DtaInicio ',                                                            0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taed.cod_animal) ',                                      0);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('    tab_evento te with (nolock) ',                                          0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taed with (nolock) ',                                 0);
        SQL('  , tab_evento ted with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taed.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taed.cod_animal = tae.cod_animal ',                                   0);
        SQL('  and ted.cod_pessoa_produtor = taed.cod_pessoa_produtor ',                 0);
        SQL('  and ted.cod_evento = taed.cod_evento ',                                   0);
        SQL('  and ted.cod_tipo_evento = 28 ',                                           0);
        SQL('  and ted.cod_evento_associado = te.cod_evento_associado ',                 0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;

        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertDiagnosticadas.sql');
        Query.ExecSQL;
      end;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas Diagnosticadas Prenhas por uma única cobertura
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDNAORETORNADAS) = 1)
        or (IntRelatorios.CampoAssociado(fINDSERVICO) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHAS) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHASPOR1) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                       fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdNaoRetornadas ',                                                     [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , QtdPrenhas ',                                                           fQTDPRENHAS);
        SQL('  , QtdPrenhasPor1 ',                                                       fQTDPRENHASPOR1);
        SQL('  , DtaInicio ',                                                            0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taed.cod_animal) ',                                      [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , count(distinct taed.cod_animal) ',                                      fQTDPRENHAS);
        SQL('  , count(distinct taed.cod_animal) ',                                      fQTDPRENHASPOR1);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('  tab_evento te with (nolock) ',                                            0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taed with (nolock) ',                                 0);
        SQL('  , tab_evento ted with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taed.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taed.cod_animal = tae.cod_animal ',                                   0);
        SQL('  and taed.ind_vaca_prenha = ''S'' ',                                       0);
        SQL('  and ted.cod_pessoa_produtor = taed.cod_pessoa_produtor ',                 0);
        SQL('  and ted.cod_evento = taed.cod_evento ',                                   0);
        SQL('  and ted.cod_tipo_evento = 28 ',                                           0);
        SQL('  and ted.cod_evento_associado = te.cod_evento_associado ',                 0);
        SQL('  and ( '+
            '      select '+
            '        count(tex.cod_evento) '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = ted.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = ted.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taed.cod_animal '+
            '      ) = 1 ',                                                              0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;

        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertDiagPrenhaPor1.sql');
        Query.ExecSQL;
      end;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas Diagnosticadas Prenhas por duas coberturas
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDNAORETORNADAS) = 1)
        or (IntRelatorios.CampoAssociado(fINDSERVICO) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHAS) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHASPOR2) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                       fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdNaoRetornadas ',                                                     [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , QtdPrenhas ',                                                           fQTDPRENHAS);
        SQL('  , QtdPrenhasPor2 ',                                                       fQTDPRENHASPOR2);
        SQL('  , DtaInicio ',                                                            0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taed.cod_animal) ',                                      [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , count(distinct taed.cod_animal) ',                                      fQTDPRENHAS);
        SQL('  , count(distinct taed.cod_animal) ',                                      fQTDPRENHASPOR2);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('  tab_evento te with (nolock) ',                                            0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taed with (nolock) ',                                 0);
        SQL('  , tab_evento ted with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taed.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taed.cod_animal = tae.cod_animal ',                                   0);
        SQL('  and taed.ind_vaca_prenha = ''S'' ',                                       0);
        SQL('  and ted.cod_pessoa_produtor = taed.cod_pessoa_produtor ',                 0);
        SQL('  and ted.cod_evento = taed.cod_evento ',                                   0);
        SQL('  and ted.cod_tipo_evento = 28 ',                                           0);
        SQL('  and ted.cod_evento_associado = te.cod_evento_associado ',                 0);
        SQL('  and ( '+
            '      select '+
            '        count(tex.cod_evento) '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = ted.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = ted.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taed.cod_animal '+
            '      ) = 2 ',                                                              0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;
        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertDiagPrenhaPor2.sql');
        Query.ExecSQL;
      end;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas Diagnosticadas Prenhas por mais de duas coberturas
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDNAORETORNADAS) = 1)
        or (IntRelatorios.CampoAssociado(fINDSERVICO) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHAS) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHASPOR3) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                       fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdNaoRetornadas ',                                                     [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , QtdPrenhas ',                                                           fQTDPRENHAS);
        SQL('  , QtdPrenhasPor3 ',                                                       fQTDPRENHASPOR3);
        SQL('  , DtaInicio ',                                                            0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taed.cod_animal) ',                                      [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , count(distinct taed.cod_animal) ',                                      fQTDPRENHAS);
        SQL('  , count(distinct taed.cod_animal) ',                                      fQTDPRENHASPOR3);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('  tab_evento te with (nolock) ',                                            0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taed with (nolock) ',                                 0);
        SQL('  , tab_evento ted with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taed.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taed.cod_animal = tae.cod_animal ',                                   0);
        SQL('  and taed.ind_vaca_prenha = ''S'' ',                                       0);
        SQL('  and ted.cod_pessoa_produtor = taed.cod_pessoa_produtor ',                 0);
        SQL('  and ted.cod_evento = taed.cod_evento ',                                   0);
        SQL('  and ted.cod_tipo_evento = 28 ',                                           0);
        SQL('  and ted.cod_evento_associado = te.cod_evento_associado ',                 0);
        SQL('  and ( '+
            '      select '+
            '        count(tex.cod_evento) '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = ted.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = ted.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taed.cod_animal '+
            '      ) > 2 ',                                                              0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;

        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertDiagPrenhaPor3.sql');
        Query.ExecSQL;
      end;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas cobertas com uma única cobertura a mais de 25 dias, e sem um
      // novo evento de cobertura, não sendo submetidas a diagnóstico de prenhez
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDNAORETORNADAS) = 1)
        or (IntRelatorios.CampoAssociado(fINDSERVICO) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHASPOR1) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                     fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdNaoRetornadas ',                                                     [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , QtdPrenhasPor1 ',                                                       fQTDPRENHASPOR1);
        SQL('  , DtaInicio ',                                                        0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taec.cod_animal) ',                                      [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , count(distinct taec.cod_animal) ',                                      fQTDPRENHASPOR1);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('  tab_evento te with (nolock) ',                                            0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taec with (nolock) ',                                 0);
        SQL('  , tab_evento tec with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taec.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taec.cod_animal = tae.cod_animal ',                                   0);
        // Cobertas a mais de 25 dias
        SQL('  and tec.cod_pessoa_produtor = taec.cod_pessoa_produtor ',                 0);
        SQL('  and tec.cod_evento = taec.cod_evento ',                                   0);
        SQL('  and tec.cod_tipo_evento = 26 ',                                           0);
        SQL('  and tec.dta_inicio <= cast(getdate() as integer) - 25 ',                  0);
        SQL('  and tec.cod_evento_associado = te.cod_evento_associado ',                 0);
        // Sem nova cobertura dentro dos últimos 24 dias
        SQL('  and not exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and tex.dta_inicio > cast(getdate() as integer) - 25 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) ',                                                                  0);
        // Sem diagnóstico de prenhez
        SQL('  and not exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 28 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) ',                                                                  0);
        // com um única cobertura
        SQL('  and ( '+
            '      select '+
            '        count(tex.cod_evento) '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) = 1 ',                                                              0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;


        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertNaoRetornadaPor1.sql');
        Query.ExecSQL;
      end;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas cobertas com duas coberturas a mais de 25 dias, e sem um
      // novo evento de cobertura, não sendo submetidas a diagnóstico de prenhez
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDNAORETORNADAS) = 1)
        or (IntRelatorios.CampoAssociado(fINDSERVICO) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHASPOR2) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                       fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdNaoRetornadas ',                                                     [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , QtdPrenhasPor2 ',                                                       fQTDPRENHASPOR2);
        SQL('  , DtaInicio ',                                                            0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taec.cod_animal) ',                                      [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , count(distinct taec.cod_animal) ',                                      fQTDPRENHASPOR2);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('  tab_evento te with (nolock) ',                                            0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taec with (nolock) ',                                 0);
        SQL('  , tab_evento tec with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taec.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taec.cod_animal = tae.cod_animal ',                                   0);
        // Cobertas a mais de 25 dias
        SQL('  and tec.cod_pessoa_produtor = taec.cod_pessoa_produtor ',                 0);
        SQL('  and tec.cod_evento = taec.cod_evento ',                                   0);
        SQL('  and tec.cod_tipo_evento = 26 ',                                           0);
        SQL('  and tec.dta_inicio <= cast(getdate() as integer) - 25 ',                  0);
        SQL('  and tec.cod_evento_associado = te.cod_evento_associado ',                 0);
        // Sem nova cobertura dentro dos últimos 24 dias
        SQL('  and not exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and tex.dta_inicio > cast(getdate() as integer) - 25 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) ',                                                                  0);
        // Sem diagnóstico de prenhez
        SQL('  and not exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 28 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) ',                                                                  0);
        // com duas coberturas
        SQL('  and ( '+
            '      select '+
            '        count(tex.cod_evento) '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) = 2 ',                                                              0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if Conexao.CodPapelUsuario = 3 then begin
         SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;

        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertNaoRetornadaPor2.sql');
        Query.ExecSQL;
      end;

      // ----------------------------------------------------------------------------------------------------------- //
      // Fêmeas cobertas com mais de duas coberturas a mais de 25 dias, e sem um
      // novo evento de cobertura, não sendo submetidas a diagnóstico de prenhez
      // ----------------------------------------------------------------------------------------------------------- //
      if (IntRelatorios.CampoAssociado(fQTDNAORETORNADAS) = 1)
        or (IntRelatorios.CampoAssociado(fINDSERVICO) = 1)
        or (IntRelatorios.CampoAssociado(fQTDPRENHASPOR3) = 1) then begin
        Query.SQL.Clear;
        SQL('insert into #tmp_avaliacao_inseminacao ',                                   0);
        SQL('( ',                                                                        0);
        SQL('    cod_pessoa_produtor ',                                                  0);
        SQL('  , CodManejoFemea ',                                                       fCodManejoFemea);
        SQL('  , NomInseminador ',                                                       fNOMINSEMINADOR);
        SQL('  , CodAnimalManejoTouro ',                                                 fCODANIMALMANEJOTOURO);
        SQL('  , NomAnimalTouro ',                                                       fNOMANIMALTOURO);
        SQL('  , DesApelidoTouro ',                                                      fDESAPELIDOTOURO);
        SQL('  , NumPartida ',                                                           fNUMPARTIDA);
        SQL('  , SglCategoriaAnimal ',                                                   fSGLCATEGORIAANIMAL);
        SQL('  , SglRaca ',                                                              fSGLRACA);
        SQL('  , DesComposicaoRacial ',                                                  fDESCOMPOSICAORACIAL);
        SQL('  , QtdNaoRetornadas ',                                                     [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , QtdPrenhasPor3 ',                                                       fQTDPRENHASPOR3);
        SQL('  , DtaInicio ',                                                            0);
        SQL(') ',                                                                        0);
        SQL('select ',                                                                   0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , isnull(tf.sgl_fazenda + '' '', '''') + ta.cod_animal_manejo as CodManejoFemea ', fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, '+
            '    teia.cod_pessoa_produtor, ''T'') ',                                     fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, '+
            '    tae.cod_pessoa_produtor) ',                                             fDESCOMPOSICAORACIAL);
        SQL('  , count(distinct taec.cod_animal) ',                                      [fQTDNAORETORNADAS, fINDSERVICO]);
        SQL('  , count(distinct taec.cod_animal) ',                                      fQTDPRENHASPOR3);
        SQL('  , te.dta_inicio ',                                                        0);
        SQL('from ',                                                                     0);
        SQL('  tab_evento te with (nolock) ',                                            0);
        SQL('  , tab_evento_insemin_artificial teia ',                                   0);
        SQL('  , tab_animal tat with (nolock) ',                                         SE(bTat, 0, -1));
        SQL('  , tab_pessoa_secundaria tps ',                                            fNOMINSEMINADOR);
        SQL('  , tab_animal_evento tae with (nolock) ',                                  0);
        SQL('  , tab_animal taf with (nolock) ',                                         SE(bTaf, 0, -1));
        SQL('  , tab_animal ta with (nolock) ',                                          SE(bTa, 0, -1));
        SQL('  , tab_fazenda tf  ',                                                      SE(bTa, 0, -1));
        SQL('  , tab_raca tr ',                                                          fSGLRACA);
        SQL('  , tab_categoria_animal tca ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tab_composicao_racial as tcr with (nolock) ',                           SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ',                          SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ',                          SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ',                          SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('  , tab_animal_evento taec with (nolock) ',                                 0);
        SQL('  , tab_evento tec with (nolock) ',                                         0);
        SQL('where ',                                                                    0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor  ',                         0);
        SQL('  and te.cod_evento_associado = :cod_evento_estacao_monta ',                0);
        SQL('  and te.cod_tipo_evento = 26 ',                                            0);
        SQL('  and teia.cod_pessoa_produtor = te.cod_pessoa_produtor ',                  0);
        SQL('  and teia.cod_evento = te.cod_evento ',                                    0);
        SQL('  and tat.cod_pessoa_produtor = teia.cod_pessoa_produtor ',                 SE(bTat, 0, -1));
        SQL('  and tat.cod_animal = teia.cod_animal ',                                   SE(bTat, 0, -1));
        SQL('  and tps.cod_pessoa_produtor =* teia.cod_pessoa_produtor ',                fNOMINSEMINADOR);
        SQL('  and tps.cod_pessoa_secundaria =* teia.cod_pessoa_sec_inseminador ',       fNOMINSEMINADOR);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ',                   0);
        SQL('  and tae.cod_evento = te.cod_evento ',                                     0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                  SE(bTaf, 0, -1));
        SQL('  and taf.cod_animal = tae.cod_animal ',                                    SE(bTaf, 0, -1));
        SQL('  and ta.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                   SE(bTa, 0, -1));
        SQL('  and ta.cod_animal = tae.cod_animal ',                                     SE(bTa, 0, -1));
        SQL('  and tf.cod_pessoa_produtor = ta.cod_pessoa_produtor ' ,                   SE(bTa, 0, -1));
        SQL('  and tf.cod_fazenda = ta.cod_fazenda_manejo ' ,                            SE(bTa, 0, -1));
        SQL('  and tr.cod_raca = taf.cod_raca ',                                         fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ',               fSGLCATEGORIAANIMAL);
        SQL('  and taec.cod_pessoa_produtor = tae.cod_pessoa_produtor ',                 0);
        SQL('  and taec.cod_animal = tae.cod_animal ',                                   0);
        // Cobertas a mais de 25 dias
        SQL('  and tec.cod_pessoa_produtor = taec.cod_pessoa_produtor ',                 0);
        SQL('  and tec.cod_evento = taec.cod_evento ',                                   0);
        SQL('  and tec.cod_tipo_evento = 26 ',                                           0);
        SQL('  and tec.dta_inicio <= cast(getdate() as integer) - 25 ',                  0);
        SQL('  and tec.cod_evento_associado = te.cod_evento_associado ',                 0);
        // Sem nova cobertura dentro dos últimos 24 dias
        SQL('  and not exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and tex.dta_inicio > cast(getdate() as integer) - 25 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) ',                                                                  0);
        // Sem diagnóstico de prenhez
        SQL('  and not exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 28 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) ',                                                                  0);
        // com mais do que duas coberturas
        SQL('  and ( '+
            '      select '+
            '        count(tex.cod_evento) '+
            '      from '+
            '        tab_evento tex with (nolock) '+
            '        , tab_animal_evento taex with (nolock) '+
            '      where '+
            '        tex.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and tex.cod_evento_associado = tec.cod_evento_associado '+
            '        and tex.cod_tipo_evento = 26 '+
            '        and taex.cod_pessoa_produtor = tex.cod_pessoa_produtor '+
            '        and taex.cod_evento = tex.cod_evento '+
            '        and taex.cod_animal = taec.cod_animal '+
            '      ) > 2 ',                                                              0);
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;

        if Conexao.CodPapelUsuario = 3 then begin
          SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
        end;

        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Query.ParamByName('cod_evento_estacao_monta').AsInteger := CodEventoEstacaoMonta;

        if Conexao.CodPapelUsuario = 3 then begin
          Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
        end;

        // Critérios específicos de pesquisa
        if (CodFazendaManejoTouro > 0) then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
          Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
        end;
        if (CodAnimalManejoTouroInicio <> '') and (CodAnimalManejoTouroFim <> '') then begin
          SQL('  and tat.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
          Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoTouroInicio;
          Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoTouroFim;
        end;
        if (NomAnimalTouro <> '') then begin
          SQL('  and tat.nom_animal like :nom_animal_touro ', 0);
          Query.ParamByName('nom_animal_touro').AsString := NomAnimalTouro + '%';
        end;
        if (DesApelidoTouro <> '') then begin
          SQL('  and tat.des_apelido like :des_apelido_touro ', 0);
          Query.ParamByName('des_apelido_touro').AsString := DesApelidoTouro + '%';
        end;
        if (CodCategorias <> '') then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if (CodRacas <> '') then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if (NumPartida <> '') then begin
          SQL('  and teia.num_partida = :num_partida ', 0);
          Query.ParamByName('num_partida').AsString := NumPartida;
        end;
        if (CodInseminadores <> '') then begin
          SQL('  and teia.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
        end;
        SQL('group by ',                                                                 0);
        SQL('    tae.cod_pessoa_produtor ',                                              0);
        SQL('  , tf.sgl_fazenda ',                                                       fCodManejoFemea);
        SQL('  , ta.cod_animal_manejo ',                                                 fCodManejoFemea);
        SQL('  , tps.nom_pessoa_secundaria ',                                            fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(teia.cod_animal, teia.cod_pessoa_produtor, ''T'') ', fCODANIMALMANEJOTOURO);
        SQL('  , tat.nom_animal ',                                                       fNOMANIMALTOURO);
        SQL('  , tat.des_apelido ',                                                      fDESAPELIDOTOURO);
        SQL('  , teia.num_partida ',                                                     fNUMPARTIDA);
        SQL('  , tca.sgl_categoria_animal ',                                             fSGLCATEGORIAANIMAL);
        SQL('  , tr.sgl_raca ',                                                          fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(tae.cod_animal, tae.cod_pessoa_produtor) ',   fDESCOMPOSICAORACIAL);
        SQL('  , te.dta_inicio ',                                                        0);
//        Query.SQL.SaveToFile('C:\Tmp\InsertNaoRetornadaPor3.sql');
        Query.ExecSQL;
      end;

      // Recupera os dados que serão apresentados no relatório
      Query.SQL.Clear;
      SQL('select ', 0);
      SQL('  null ', 0);
      SQL('  , CodManejoFemea ',                              fCodManejoFemea);
      SQL('  , NomInseminador ',                              fNOMINSEMINADOR);
      SQL('  , CodAnimalManejoTouro ',                        fCODANIMALMANEJOTOURO);
      SQL('  , NomAnimalTouro ',                              fNOMANIMALTOURO);
      SQL('  , DesApelidoTouro ',                             fDESAPELIDOTOURO);
      SQL('  , NumPartida ',                                  fNUMPARTIDA);
      SQL('  , SglCategoriaAnimal ',                          fSGLCATEGORIAANIMAL);
      SQL('  , SglRaca ',                                     fSGLRACA);
      SQL('  , DesComposicaoRacial ',                         fDESCOMPOSICAORACIAL);
      SQL('  , isnull(NumOrdemParto, 0) as NumOrdemParto ',   fNUMORDEMPARTO);
      SQL('  , sum(QtdInseminadas) as QtdInseminadas ',       fQTDINSEMINADAS);
      SQL('  , sum(QtdDiagnosticadas) as QtdDiagnosticadas ', fQTDDIAGNOSTICADAS);
      SQL('  , sum(QtdNaoRetornadas) as QtdNaoRetornadas ',   fQTDNAORETORNADAS);
      SQL('  , sum(QtdPrenhasPor1) as QtdPrenhasPor1 ',       fQTDPRENHASPOR1);
      SQL('  , sum(QtdPrenhasPor2) as QtdPrenhasPor2 ',       fQTDPRENHASPOR2);
      SQL('  , sum(QtdPrenhasPor3) as QtdPrenhasPor3 ',       fQTDPRENHASPOR3);
      SQL('  , sum(QtdPrenhas) as QtdPrenhas ',               fQTDPRENHAS);
      SQL('  , case when sum(QtdNaoRetornadas) > 0 then '+
          '      sum(QtdDoses) / sum(QtdNaoRetornadas) '+
          '    else '+
          '      null '+
          '    end as IndServico ',                           fINDSERVICO);
      SQL('from ', 0);
      SQL('  #tmp_avaliacao_inseminacao ', 0);
      SQL('where ', 0);
      SQL('  cod_pessoa_produtor is not null ', 0);

      // Críterios sobre o resultado obtido
      if (NumOrdemPartoInicio > 0) and (NumOrdemPartoFim > 0) then begin
        SQL('  and NumOrdemParto between :NumOrdemPartoInicio and :NumOrdemPartoFim ', 0);
        Query.ParamByName('NumOrdemPartoInicio').AsInteger := NumOrdemPartoInicio;
        Query.ParamByName('NumOrdemPartoFim').AsInteger := NumOrdemPartoFim;
      end;

      // Consolida o resultado sumarizando, quando necessário
      if SQL('group by ', [fCodManejoFemea, fNOMINSEMINADOR, fCODANIMALMANEJOTOURO,
        fNOMANIMALTOURO, fDESAPELIDOTOURO, fNUMPARTIDA, fSGLCATEGORIAANIMAL,
        fSGLRACA, fDESCOMPOSICAORACIAL, fNUMORDEMPARTO]) then begin
        bAux := SQL('  CodManejoFemea ',         fCodManejoFemea);
        if bAux then begin
          SQL('  , NomInseminador ',             fNOMINSEMINADOR);
        end else begin
          bAux := SQL('  NomInseminador ',       fNOMINSEMINADOR);
        end;

        if bAux then begin
          SQL('  , CodAnimalManejoTouro ',       fCODANIMALMANEJOTOURO);
        end else begin
          bAux := SQL('  CodAnimalManejoTouro ', fCODANIMALMANEJOTOURO);
        end;

        if bAux then begin
          SQL('  , NomAnimalTouro ',             fNOMANIMALTOURO);
        end else begin
          bAux := SQL('  NomAnimalTouro ',       fNOMANIMALTOURO);
        end;
        if bAux then begin
          SQL('  , DesApelidoTouro ',            fDESAPELIDOTOURO);
        end else begin
          bAux := SQL('  DesApelidoTouro ',      fDESAPELIDOTOURO);
        end;
        if bAux then begin
          SQL('  , NumPartida ',                 fNUMPARTIDA);
        end else begin
          bAux := SQL('  NumPartida ',           fNUMPARTIDA);
        end;
        if bAux then begin
          SQL('  , SglCategoriaAnimal ',         fSGLCATEGORIAANIMAL);
        end else begin
          bAux := SQL('  SglCategoriaAnimal ',   fSGLCATEGORIAANIMAL);
        end;
        if bAux then begin
          SQL('  , SglRaca ',                    fSGLRACA);
        end else begin
          bAux := SQL('  SglRaca ',              fSGLRACA);
        end;
        if bAux then begin
          SQL('  , DesComposicaoRacial ',        fDESCOMPOSICAORACIAL);
        end else begin
          bAux := SQL('  DesComposicaoRacial ',  fDESCOMPOSICAORACIAL);
        end;
        if bAux then begin
          SQL('  , isnull(NumOrdemParto, 0) ',   fNUMORDEMPARTO);
        end else begin
          SQL('  isnull(NumOrdemParto, 0) ',     fNUMORDEMPARTO);
        end;
      end;

      // Realiza "order by" por campos selecionados
      SQL('order by ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := SE(bAux,'  , ', '  ')+IntRelatorios.ValorCampo('NomField');
        if SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
          and not(bAux) then bAux := True;
        IntRelatorios.IrAoProximo;
      end;
{$ENDIF}

      // Realiza consulta a massa de dados preparada
//      Query.SQL.SaveToFile('c:\tmp\Select.sql');
      Query.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1587, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1587;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.GerarRelatorioAvaliacaoInseminacao(CodEventoEstacaoMonta,
  CodFazendaManejoTouro: Integer; CodAnimalManejoTouroInicio,
  CodAnimalManejoTouroFim, NomAnimalTouro, DesApelidoTouro, NumPartida,
  CodRacas, CodCategorias: String; IndAgrupRaca1: String; CodRaca1: Integer;
  QtdCompRacialInicio1, QtdCompRacialFim1: Double; IndAgrupRaca2: String;
  CodRaca2: Integer; QtdCompRacialInicio2, QtdCompRacialFim2: Double;
  IndAgrupRaca3: String; CodRaca3: Integer; QtdCompRacialInicio3,
  QtdCompRacialFim3: Double; IndAgrupRaca4: String; CodRaca4: Integer;
  QtdCompRacialInicio4, QtdCompRacialFim4: Double; NumOrdemPartoInicio,
  NumOrdemPartoFim: Integer; CodInseminadores: String;
  Tipo, QtdQuebraRelatorio: Integer): String;
const
  Metodo: Integer = 481;
  NomeMetodo: String = 'GerarRelatorioAvaliacaoInseminacao';
  CodRelatorio: Integer = 21;
var
  Rel: TRelatorioPadrao;
  Retorno, iAux: Integer;
  // iTotalAnimais: Integer;
  iSubTotalNaoRetornadas, iTotalNaoRetornadas: Integer;
  iSubTotalPrenhas, iTotalPrenhas: Integer;
  iSubTotalPrenhasPor1, iTotalPrenhasPor1: Integer;
  iSubTotalPrenhasPor2, iTotalPrenhasPor2: Integer;
  iSubTotalPrenhasPor3, iTotalPrenhasPor3: Integer;
  iSubTotalOrdemParto, iTotalOrdemParto: Integer;
  iSubTotalDiagnosticadas, iTotalDiagnosticadas: Integer;
  iSubTotalInseminadas, iTotalInseminadas: Integer;
  sQuebra, sAux: String;
  IntRelatorios: TIntRelatorios;
  vAux: Array [1..2] of Variant;
begin
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  IntRelatorios := TIntRelatorios.Create;
  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Retorno := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Buscar(CodRelatorio);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Pesquisar(CodRelatorio);
    if Retorno < 0 then Exit;

    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    {Realiza pesquisa de animais de acordo com os critérios informados}
    Retorno := PesquisarRelatorioAvaliacaoInseminacao(CodEventoEstacaoMonta,
      CodFazendaManejoTouro, CodAnimalManejoTouroInicio, CodAnimalManejoTouroFim,
      NomAnimalTouro, DesApelidoTouro, NumPartida, CodRacas, CodCategorias,
      IndAgrupRaca1, CodRaca1, QtdCompRacialInicio1, QtdCompRacialFim1,
      IndAgrupRaca2, CodRaca2, QtdCompRacialInicio2, QtdCompRacialFim2,
      IndAgrupRaca3, CodRaca3, QtdCompRacialInicio3, QtdCompRacialFim3,
      IndAgrupRaca4, CodRaca4, QtdCompRacialInicio4, QtdCompRacialFim4,
      NumOrdemPartoInicio, NumOrdemPartoFim, CodInseminadores);
    if Retorno < 0 then Exit;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Query.IsEmpty then begin
      Mensagens.Adicionar(1586, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel.TipoDoArquvio := Tipo;

    {Define o relatório em questão e carrega os seus dados específicos}
    Retorno := Rel.CarregarRelatorio(CodRelatorio);
    if Retorno < 0 then Exit;

    {Consiste se número de campos do relatório é maior ou igual ao de quebras}
    if Rel.Campos.NumCampos < QtdQuebraRelatorio then begin
      Mensagens.Adicionar(1119, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    {Desabilita a apresentação dos campos selecionados para quebra}
    Rel.Campos.IrAoPrimeiro;
    for iAux := 1 to QtdQuebraRelatorio do begin
      Rel.Campos.DesabilitarCampo(Rel.campos.campo.NomField);
      Rel.Campos.IrAoProximo;
    end;

    {Inicializa o procedimento de geração do arquivo de relatório}
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    {Iniciando totalizadores (subtotais e totais)}
    // iTotalAnimais := 0;
    iSubTotalNaoRetornadas := 0; iTotalNaoRetornadas := 0;
    iSubTotalPrenhas := 0; iTotalPrenhas := 0;
    iSubTotalPrenhasPor1 := 0; iTotalPrenhasPor1 := 0;
    iSubTotalPrenhasPor2 := 0; iTotalPrenhasPor2 := 0;
    iSubTotalPrenhasPor3 := 0; iTotalPrenhasPor3 := 0;
    iSubTotalOrdemParto := 0; iTotalOrdemParto := 0;
    iSubTotalDiagnosticadas := 0; iTotalDiagnosticadas := 0;
    iSubTotalInseminadas := 0; iTotalInseminadas := 0;

    sQuebra := '';
    Query.First;
    while not Query.EOF do begin
      {Realiza tratamento de quebras somente para formato PDF -> Tipo = 1}
      if Tipo = 1 then begin
        if Rel.LinhasRestantes <= 2 then begin
          {Verifica se o próximo registro existe, para que o último registro
          do relatório possa ser exibido na próxima folha, e assim o total não
          seja mostrado sozinho nesta folha}
          if Query.FindNext then begin
            Query.Prior;
          end else begin
            Rel.NovaPagina;
          end;
        end;
        if QtdQuebraRelatorio > 0 then begin
          {Atualiza o campo valor do atributo Campos do relatorio c/ os dados da query}
          Rel.Campos.CarregarValores(Query);
          {Percorre o(s) campo(s) informado(s) para quebra}
          sAux := '';
          for iAux := 1 to QtdQuebraRelatorio do begin
            {Concatena o valor dos campos de quebra, montando o título}
            vAux[iAux] := Rel.Campos.ValorCampoIdx[iAux-1];
            sAux := SE(sAux = '', sAux, sAux + ' / ') +
              TrataQuebra(Rel.Campos.TextoTituloIdx[iAux-1]) + ': ' +
              Rel.Campos.ValorCampoIdx[iAux-1];
          end;
          if (sAux <> sQuebra) then begin
            {Se ocorreu mudança na quebra atual ou é a primeira ('')}
            {Apresenta subtotal para quebra concluída, caso não seja a primeira}
            if sQuebra <> '' then begin
              {Confirma se o subtotal deve ser apresentado}
              if Rel.Campos.NumCampos > (QtdQuebraRelatorio+1) then begin
                Rel.NovaLinha;
                Rel.Campos.LimparValores;
                // Se o usuário selecionou o campo QtdNaoRetornadas para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(4) = 1) then Rel.Campos.ValorCampo['QtdNaoRetornadas'] := iSubTotalNaoRetornadas;
                // Se o usuário selecionou o campo QtdPrenhas para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(9) = 1) then Rel.Campos.ValorCampo['QtdPrenhas'] := iSubTotalPrenhas;
                // Se o usuário selecionou o campo QtdPrenhasPor1 para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(5) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor1'] := iSubTotalPrenhasPor1;
                // Se o usuário selecionou o campo QtdPrenhasPor2 para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(6) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor2'] := iSubTotalPrenhasPor2;
                // Se o usuário selecionou o campo QtdPrenhasPor3 para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(7) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor3'] := iSubTotalPrenhasPor3;
                // Se o usuário selecionou o campo NumOrdemParto para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(17) = 1) then Rel.Campos.ValorCampo['NumOrdemParto'] := iSubTotalOrdemParto;
                // Se o usuário selecionou o campo QtdDiagnosticadas para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(13) = 1) then Rel.Campos.ValorCampo['QtdDiagnosticadas'] := iSubTotalDiagnosticadas;
                // Se o usuário selecionou o campo QtdInseminadas para ser mostrado no relatório...
                if (IntRelatorios.CampoAssociado(3) = 1) then Rel.Campos.ValorCampo['QtdInseminadas'] := iSubTotalInseminadas;

                Rel.ImprimirTextoTotalizador('Sub-total');
              end;
              {Zera acumuladores da quebra}
              iSubTotalNaoRetornadas := 0;
              iSubTotalPrenhas := 0;
              iSubTotalPrenhasPor1 := 0;
              iSubTotalPrenhasPor2 := 0;
              iSubTotalPrenhasPor3 := 0;
              iSubTotalOrdemParto := 0;
              iSubTotalDiagnosticadas := 0;
              iSubTotalInseminadas := 0;
            end;
            sQuebra := sAux;
            if Rel.LinhasRestantes <= 4 then begin
              {Verifica se a quebra possui somente um registro e se o espaço é su-
              ficiente para a impressão de título, registro e subtotal, caso
              contrário quebra a página antes da impressão}
              if not Query.FindNext then begin
                Rel.NovaPagina;
              end else begin
                Rel.Campos.CarregarValores(Query);
                for iAux := 1 to QtdQuebraRelatorio do begin
                  if vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1] then begin
                    Rel.NovaPagina;
                    Break;
                  end;
                end;
              end;
              Query.Prior;
            end else if Rel.LinhasRestantes < Rel.LinhasPorPagina then begin
              {Salta uma linha antes da quebra, caso não seja a primeira da pág.}
              Rel.NovaLinha;
            end;
            {Imprime título da quebra}
            Rel.FonteNegrito;
            Rel.ImprimirTexto(0, sQuebra);
            Rel.FonteNormal;
          end else if (Rel.LinhasRestantes = Rel.LinhasPorPagina) then begin
            {Repete o título da quebra no topo da nova pág. qdo ocorrer quebra de pág.}
            Rel.FonteNegrito;
            Rel.ImprimirTexto(0, sQuebra + ' (continuação)');
            Rel.FonteNormal;
          end;
        end;
        {Verifica se o registro a ser apresentado é o último da quebra, caso
        seja faz com que ele possa ser exibido na próxima folha, e assim o
        subtotal e/ou o total não sejam mostrados sozinhos nesta folha}
        if (Rel.LinhasRestantes <= 2) and (QtdQuebraRelatorio > 0) then begin
          if Query.FindNext then begin
            Rel.Campos.CarregarValores(Query);
            for iAux := 1 to QtdQuebraRelatorio do begin
              if vAux[iAux] <> Rel.Campos.ValorCampoIdx[iAux-1] then begin
                Rel.NovaPagina;
                Break;
              end;
            end;
            Query.Prior;
            {Caso uma nova pág. tenha sido criada, força o reinício do procedi-
            mento para que o nome do produtor possa ser impresso no início da nova
            página concatenado com o texto "(continuação)"}
            if Rel.LinhasRestantes = Rel.LinhasPorPagina then begin
              Continue;
            end;
          end;
        end;

        // Se o usuário selecionou o campo QtdNaoRetornadas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(4) = 1) then begin
          Inc(iSubTotalNaoRetornadas, Query.FieldByName('QtdNaoRetornadas').AsInteger);
          Inc(iTotalNaoRetornadas, Query.FieldByName('QtdNaoRetornadas').AsInteger);
        end;
        // Se o usuário selecionou o campo QtdPrenhas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(9) = 1) then begin
          Inc(iSubTotalPrenhas, Query.FieldByName('QtdPrenhas').AsInteger);
          Inc(iTotalPrenhas, Query.FieldByName('QtdPrenhas').AsInteger);
        end;
        // Se o usuário selecionou o campo QtdPrenhasPor1 para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(5) = 1) then begin
          Inc(iSubTotalPrenhasPor1, Query.FieldByName('QtdPrenhasPor1').AsInteger);
          Inc(iTotalPrenhasPor1, Query.FieldByName('QtdPrenhasPor1').AsInteger);
        end;
        // Se o usuário selecionou o campo QtdPrenhasPor2 para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(6) = 1) then begin
          Inc(iSubTotalPrenhasPor2, Query.FieldByName('QtdPrenhasPor2').AsInteger);
          Inc(iTotalPrenhasPor2, Query.FieldByName('QtdPrenhasPor2').AsInteger);
        end;
        // Se o usuário selecionou o campo QtdPrenhasPor3 para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(7) = 1) then begin
          Inc(iSubTotalPrenhasPor3, Query.FieldByName('QtdPrenhasPor3').AsInteger);
          Inc(iTotalPrenhasPor3, Query.FieldByName('QtdPrenhasPor3').AsInteger);
        end;
        // Se o usuário selecionou o campo NumOrdemParto para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(17) = 1) then begin
          Inc(iSubTotalOrdemParto, Query.FieldByName('NumOrdemParto').AsInteger);
          Inc(iTotalOrdemParto, Query.FieldByName('NumOrdemParto').AsInteger);
        end;
        // Se o usuário selecionou o campo QtdDiagnosticadas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(13) = 1) then begin
          Inc(iSubTotalDiagnosticadas, Query.FieldByName('QtdDiagnosticadas').AsInteger);
          Inc(iTotalDiagnosticadas, Query.FieldByName('QtdDiagnosticadas').AsInteger);
        end;
        // Se o usuário selecionou o campo QtdInseminadas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(3) = 1) then begin
          Inc(iSubTotalInseminadas, Query.FieldByName('QtdInseminadas').AsInteger);
          Inc(iTotalInseminadas, Query.FieldByName('QtdInseminadas').AsInteger);
        end;
      end; // if (Tipo = 1)
      Rel.ImprimirColunasResultSet(Query);
      // Inc(iTotalAnimais);
      Query.Next;
    end; // while

    {Realiza tratamento de quebras somente para formato PDF}
    if Tipo = 1 then begin
      {Monta Linhas totalizadoras, caso necessário}
      if Query.RecordCount > 1 then begin
        {Confirma se o subtotal deve ser apresentado}
        if ((Rel.Campos.NumCampos > (QtdQuebraRelatorio+1)) and (QtdQuebraRelatorio <> 0)) then begin
          Rel.NovaLinha;
          Rel.Campos.LimparValores;
          // Se o usuário selecionou o campo QtdNaoRetornadas para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(4) = 1) then Rel.Campos.ValorCampo['QtdNaoRetornadas'] := iSubTotalNaoRetornadas;
          // Se o usuário selecionou o campo QtdPrenhas para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(9) = 1) then Rel.Campos.ValorCampo['QtdPrenhas'] := iSubTotalPrenhas;
          // Se o usuário selecionou o campo QtdPrenhasPor1 para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(5) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor1'] := iSubTotalPrenhasPor1;
          // Se o usuário selecionou o campo QtdPrenhasPor2 para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(6) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor2'] := iSubTotalPrenhasPor2;
          // Se o usuário selecionou o campo QtdPrenhasPor3 para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(7) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor3'] := iSubTotalPrenhasPor3;
          // Se o usuário selecionou o campo NumOrdemParto para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(17) = 1) then Rel.Campos.ValorCampo['NumOrdemParto'] := iSubTotalOrdemParto;
          // Se o usuário selecionou o campo QtdDiagnosticadas para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(13) = 1) then Rel.Campos.ValorCampo['QtdDiagnosticadas'] := iSubTotalDiagnosticadas;
          // Se o usuário selecionou o campo QtdInseminadas para ser mostrado no relatório...
          if (IntRelatorios.CampoAssociado(3) = 1) then Rel.Campos.ValorCampo['QtdInseminadas'] := iSubTotalInseminadas;

          Rel.ImprimirTextoTotalizador('Sub-total');
        end;
        Rel.NovaLinha;
        Rel.Campos.LimparValores;
        // Se o usuário selecionou o campo QtdNaoRetornadas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(4) = 1) then Rel.Campos.ValorCampo['QtdNaoRetornadas'] := iTotalNaoRetornadas;
        // Se o usuário selecionou o campo QtdPrenhas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(9) = 1) then Rel.Campos.ValorCampo['QtdPrenhas'] := iTotalPrenhas;
        // Se o usuário selecionou o campo QtdPrenhasPor1 para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(5) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor1'] := iTotalPrenhasPor1;
        // Se o usuário selecionou o campo QtdPrenhasPor2 para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(6) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor2'] := iTotalPrenhasPor2;
        // Se o usuário selecionou o campo QtdPrenhasPor3 para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(7) = 1) then Rel.Campos.ValorCampo['QtdPrenhasPor3'] := iTotalPrenhasPor3;
        // Se o usuário selecionou o campo NumOrdemParto para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(17) = 1) then Rel.Campos.ValorCampo['NumOrdemParto'] := iTotalOrdemParto;
        // Se o usuário selecionou o campo QtdDiagnosticadas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(13) = 1) then Rel.Campos.ValorCampo['QtdDiagnosticadas'] := iTotalDiagnosticadas;
        // Se o usuário selecionou o campo QtdInseminadas para ser mostrado no relatório...
        if (IntRelatorios.CampoAssociado(3) = 1) then Rel.Campos.ValorCampo['QtdInseminadas'] := iTotalInseminadas;

        Rel.ImprimirTextoTotalizador('Total');
      end;
    end;

    Retorno := Rel.FinalizarRelatorio;
    {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
    if Retorno = 0 then begin
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
    IntRelatorios.Free;
  end;
end;

function TIntEventos.PesquisarRelatorioConsultaReprodutiva(
  CodFazendaManejo: Integer; CodAnimalManejoInicio,
  CodAnimalManejoFim: String; CodFazenda: Integer; CodEstacoes, CodRacas,
  CodCategorias, CodLocais, CodLotes, IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
  NumPartosInicio, NumPartosFim: Integer; CodTipoCoberturas: String;
  NumCoberturasInicio, NumCoberturasFim: Integer; DtaCoberturaInicio,
  DtaCoberturaFim, DtaDiagnosticoInicio, DtaDiagnosticoFim: TDateTime;
  IndVacaPrenha, CodInseminadores: String; CodFazendaManejoTouro: Integer;
  CodAnimalManejoTouro: String; DtaUltimoPartoInicio,
  DtaUltimoPartoFim: TDateTime): Integer;
const
  NomMetodo: String = 'PesquisarRelatorioConsultaReprodutiva';
  CodRelatorio: Integer = 22;

  fCODANIMALMANEJO: Integer = 1;
  fDTANASCIMENTO: Integer = 2;
  fTXTIDADE: Integer = 3;
  fCODANIMALMANEJOPAI: Integer = 4;
  fCODANIMALMANEJOMAE: Integer = 5;
  fSGLRACA: Integer = 6;
  fDESCOMPOSICAORACIAL: Integer = 7;
  fSGLCATEGORIAANIMAL: Integer = 8;
  fSGLLOCALCORRENTE: Integer = 9;
  fSGLLOTECORRENTE: Integer = 10;
  fSGLESTACAOMONTA: Integer = 11;
  fDESESTACAOMONTA: Integer = 12;
  fSGLTIPOEVENTO: Integer = 13;
  fDESTIPOEVENTO: Integer = 14;
  fDTAEVENTO: Integer = 15;
  fDESRESULTADODIAGNOSTICO: Integer = 16;
  fNOMINSEMINADOR: Integer = 17;
  fCODANIMALMANEJOTOURO: Integer = 18;

var
  X: Integer;
  Param: TValoresParametro;
  IntRelatorios: TIntRelatorios;
  bPersonalizavel, bEventoRelacionado, bTouro, bIA, bAux: Boolean;
  sAux: String;

  function SQL(Linha: String; VerificaCampo: Integer): Boolean; overload;
  begin
    Result := False;
    if (VerificaCampo <> -1) then begin
      Result := (VerificaCampo = 0) or not(bPersonalizavel)
        or (IntRelatorios.CampoAssociado(VerificaCampo) = 1);
      if Result then begin
        Query.SQL.Text := Query.SQL.Text + Linha;
      end;
    end;
  end;

  function SQL(Linha: String; VerificaCampos: Array Of Integer): Boolean; overload;
  var
    iAuxPesquisa: Integer;
  begin
    iAuxPesquisa := 0;
    Result := not(bPersonalizavel);
    while (iAuxPesquisa < Length(VerificaCampos)) and (not Result) do begin
      Result :=
        (IntRelatorios.CampoAssociado(VerificaCampos[iAuxPesquisa]) = 1);
      Inc(iAuxPesquisa);
    end;
    if Result then begin
      SQL(Linha, 0);
    end;
  end;

begin
  {----------------------------------------------------------------------------
  * notas sobre esta função

    Esta função contrói uma query de acordo com  os  campos  selecionados  pelo
  usuário o relatório, levando em conta também os critérios por  ele  informado
  para a seleção dos animais do relatório.
    Para isto algumas procedures internas foram  criadas  visando  facilitar  o
  procedimento principal. As function´s criadas são:

  SQL('<linha a ser inserida no SQL da query>', <número do campo do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se o <número do campo do relatório> for 0 (zero) ou o  usuário  tiver
  selecionado esse campo para ser apresentado no relatório, quando o valor "-1"
  é a linha é descosiderada imediantamente, não sendo incluída.

  SQL('<linha a ser inserida no SQL da query>', <lista de campos do relatório>)
  - Esta função condiciona a inclusão da <linha a ser inserida no SQL da query>
  somente se pelo menos um dos campo da <lista de campos do relatório> tiver
  sido selecionada pelo usuário para ser apresentado no relatório.

  Ambas as funções retornam verdadeiro (TRUE) quando uma  linha  é  inserida  e
  falso (FALSE) quando não.
  ----------------------------------------------------------------------------}
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  Param := TValoresParametro.Create(TValorParametro);
  try
    {Consistindo parametros multivalorados}
    Param.Clear;
    if CodEstacoes <> '' then begin
      Result := VerificaParametroMultiValor(CodEstacoes, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodRacas <> '' then begin
      Result := VerificaParametroMultiValor(CodRacas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodCategorias <> '' then begin
      Result := VerificaParametroMultiValor(CodCategorias, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLotes <> '' then begin
      Result := VerificaParametroMultiValor(CodLotes, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodLocais <> '' then begin
      Result := VerificaParametroMultiValor(CodLocais, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodTipoCoberturas <> '' then begin
      Result := VerificaParametroMultiValor(CodTipoCoberturas, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
    if CodInseminadores <> '' then begin
      Result := VerificaParametroMultiValor(CodInseminadores, Param);
      if Result < 0 then Exit;
      Param.Clear;
    end;
  Finally
    Param.Free;
  end;

  IntRelatorios := TIntRelatorios.Create;
  try
    Result := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Result < 0 then Exit;
    Result := IntRelatorios.Buscar(CodRelatorio);
    if Result < 0 then Exit;
    Result := IntRelatorios.Pesquisar(CodRelatorio);
    if Result < 0 then Exit;

    bPersonalizavel := (IntRelatorios.IntRelatorio.IndPersonalizavel = 'S');

    bTouro :=
      (IntRelatorios.CampoAssociado(fCODANIMALMANEJOTOURO) = 1)
      or (CodFazendaManejoTouro > 0)
      or (CodAnimalManejoTouro <> '');

    bIA := bTouro
      or (IntRelatorios.CampoAssociado(fNOMINSEMINADOR) = 1)
      or (CodInseminadores <> '');

    bEventoRelacionado := bTouro or bIA
      or (IntRelatorios.CampoAssociado(fSGLTIPOEVENTO) = 1)
      or (IntRelatorios.CampoAssociado(fDESTIPOEVENTO) = 1)
      or (IntRelatorios.CampoAssociado(fDTAEVENTO) = 1)
      or (IntRelatorios.CampoAssociado(fDESRESULTADODIAGNOSTICO) = 1)
      or (IntRelatorios.CampoAssociado(fNOMINSEMINADOR) = 1)
      or (IntRelatorios.CampoAssociado(fCODANIMALMANEJOTOURO) = 1)
      or (CodInseminadores <> '')
      or (CodTipoCoberturas <> '');

    try
      Query.SQL.Clear;
{$IFDEF MSSQL}
      SQL('select ', 0);
      SQL('  distinct null ', 0);
      SQL('  , case when taf.cod_fazenda_manejo is null then '+
          '      taf.cod_animal_manejo '+
          '    else '+
          '      tfmf.sgl_fazenda + '' '' + taf.cod_animal_manejo '+
          '    end as CodAnimalManejo ',   fCODANIMALMANEJO);
      SQL('  , taf.dta_nascimento as DtaNascimento ', fDTANASCIMENTO);
      SQL('  , dbo.FNT_IDADE(taf.dta_nascimento, getdate()) as TxtIdade ', fTXTIDADE);
      SQL('  , case when taf.cod_reprodutor_multiplo is not null then '+
          '      dbo.FNT_BUSCAR_PAI(taf.cod_reprodutor_multiplo, taf.cod_pessoa_produtor, ''R'') '+
          '    else '+
          '      dbo.FNT_BUSCAR_PAI(taf.cod_animal_pai, taf.cod_pessoa_produtor, ''T'') '+
          '    end as CodAnimalManejoPai ', fCODANIMALMANEJOPAI);
      SQL('  , dbo.FNT_BUSCAR_PAI(taf.cod_animal_mae, taf.cod_pessoa_produtor, ''T'') as CodAnimalManejoMae ', fCODANIMALMANEJOMAE);
      SQL('  , tr.sgl_raca as SglRaca ', fSGLRACA);
      SQL('  , dbo.FNT_COMPOSICAO_RACIAL(taf.cod_animal, taf.cod_pessoa_produtor) as DesComposicaoRacial ', fDESCOMPOSICAORACIAL);
      SQL('  , tca.sgl_categoria_animal as SglCategoriaAnimal ', fSGLCATEGORIAANIMAL);
      SQL('  , tlt.sgl_lote as SglLoteCorrente ', fSGLLOTECORRENTE);
      SQL('  , tlc.sgl_local as SglLocalCorrente ', fSGLLOCALCORRENTE);
      SQL('  , teem.sgl_estacao_monta as SglEstacaoMonta ', fSGLESTACAOMONTA);
      SQL('  , teem.des_estacao_monta as DesEstacaoMonta ', fDESESTACAOMONTA);
      SQL('  , tter.sgl_tipo_evento as SglTipoEvento ', fSGLTIPOEVENTO);
      SQL('  , tter.des_tipo_evento as DesTipoEvento ', fDESTIPOEVENTO);
      SQL('  , ter.dta_inicio as DtaEvento ', fDTAEVENTO);
      SQL('  , case when taer.ind_vaca_prenha = ''S'' then '+
          '      ''Prenha'' '+
          '    when taer.ind_vaca_prenha = ''N'' then '+
          '      ''Vazia '' '+
          '    else '+
          '      null '+
          '    end as DesResultadoDiagnostico ', fDESRESULTADODIAGNOSTICO);
      SQL('  , tpsr.nom_pessoa_secundaria as NomInseminador ', fNOMINSEMINADOR);
      SQL('  , dbo.FNT_BUSCAR_PAI(teiar.cod_animal, teiar.cod_pessoa_produtor, ''T'') as CodAnimalManejoTouro ', fCODANIMALMANEJOTOURO);
      SQL('from ', 0);
      SQL('  tab_evento te with (nolock) ', 0);
      SQL('  , tab_evento_estacao_monta teem ', [fSGLESTACAOMONTA, fDESESTACAOMONTA]);
      SQL('  , tab_animal_evento tae with (nolock) ', 0);
      SQL('  , tab_animal taf with (nolock) ', 0);
      SQL('  , tab_fazenda tfmf ', fCODANIMALMANEJO);
      SQL('  , tab_raca tr ', fSGLRACA);
      SQL('  , tab_categoria_animal tca ', fSGLCATEGORIAANIMAL);
      SQL('  , tab_local tlc ', fSGLLOCALCORRENTE);
      SQL('  , tab_lote tlt ', fSGLLOTECORRENTE);
      SQL('  , tab_evento ter with (nolock) ', SE(bEventoRelacionado, 0, -1));
      SQL('  , tab_evento_insemin_artificial teiar ', SE(bIA, 0, -1));
      SQL('  , tab_animal tat with (nolock) ', SE((CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> ''), 0, -1));
      SQL('  , tab_pessoa_secundaria tpsr ', fNOMINSEMINADOR);
      SQL('  , tab_tipo_evento tter ', [fSGLTIPOEVENTO, fDESTIPOEVENTO]);
      SQL('  , tab_animal_evento taer with (nolock) ', SE(bEventoRelacionado, 0, -1));
      SQL('  , tab_composicao_racial as tcr with (nolock) ', SE(IndAgrupRaca1 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr2 with (nolock) ', SE(IndAgrupRaca2 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr3 with (nolock) ', SE(IndAgrupRaca3 = 'N', 0, -1));
      SQL('  , tab_composicao_racial as tcr4 with (nolock) ', SE(IndAgrupRaca4 = 'N', 0, -1));
      SQL('where ', 0);
      SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
      SQL('  and te.cod_tipo_evento = 24 ', 0);
      SQL('  and teem.cod_pessoa_produtor = te.cod_pessoa_produtor ', [fSGLESTACAOMONTA, fDESESTACAOMONTA]);
      SQL('  and teem.cod_evento = te.cod_evento ', [fSGLESTACAOMONTA, fDESESTACAOMONTA]);
      SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ', 0);
      SQL('  and tae.cod_evento = te.cod_evento ', 0);
      SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ', 0);
      SQL('  and taf.cod_animal = tae.cod_animal ', 0);
      SQL('  and tfmf.cod_pessoa_produtor =* taf.cod_pessoa_produtor ', fCODANIMALMANEJO);
      SQL('  and tfmf.cod_fazenda =* taf.cod_fazenda_manejo ', fCODANIMALMANEJO);
      SQL('  and tr.cod_raca = taf.cod_raca ', fSGLRACA);
      SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ', fSGLCATEGORIAANIMAL);
      SQL('  and tlt.cod_pessoa_produtor =* taf.cod_pessoa_produtor ', fSGLLOTECORRENTE);
      SQL('  and tlt.cod_fazenda =* taf.cod_fazenda_corrente ', fSGLLOTECORRENTE);
      SQL('  and tlt.cod_lote =* taf.cod_lote_corrente ', fSGLLOTECORRENTE);
      SQL('  and tlc.cod_pessoa_produtor =* taf.cod_pessoa_produtor ', fSGLLOCALCORRENTE);
      SQL('  and tlc.cod_fazenda =* taf.cod_fazenda_corrente ', fSGLLOCALCORRENTE);
      SQL('  and tlc.cod_local =* taf.cod_local_corrente ', fSGLLOCALCORRENTE);
      SQL('  and ter.cod_pessoa_produtor = te.cod_pessoa_produtor ', SE(bEventoRelacionado, 0, -1));
      SQL('  and ter.cod_evento_associado = te.cod_evento ', SE(bEventoRelacionado, 0, -1));
      SQL('  and teiar.cod_pessoa_produtor = ter.cod_pessoa_produtor ', SE(bIA, 0, -1));
      SQL('  and teiar.cod_evento = ter.cod_evento ', SE(bIA, 0, -1));
      SQL('  and tat.cod_pessoa_produtor = teiar.cod_pessoa_produtor ', SE((CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> ''), 0, -1));
      SQL('  and tat.cod_animal = teiar.cod_animal ', SE((CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> ''), 0, -1));
      SQL('  and tpsr.cod_pessoa_produtor =* teiar.cod_pessoa_produtor ', fNOMINSEMINADOR);
      SQL('  and tpsr.cod_pessoa_secundaria =* teiar.cod_pessoa_sec_inseminador ', fNOMINSEMINADOR);
      SQL('  and tter.cod_tipo_evento = ter.cod_tipo_evento ', [fSGLTIPOEVENTO, fDESTIPOEVENTO]);
      SQL('  and taer.cod_pessoa_produtor = ter.cod_pessoa_produtor ', SE(bEventoRelacionado, 0, -1));
      SQL('  and taer.cod_evento = ter.cod_evento ', SE(bEventoRelacionado, 0, -1));
      SQL('  and taer.cod_animal = tae.cod_animal ', SE(bEventoRelacionado, 0, -1));
      if IndAgrupRaca1 = 'N' then begin
         SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
         SQL('  and tcr.cod_raca = :codraca1  ',0);
         SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
      end;
      if IndAgrupRaca2 = 'N' then begin
         SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
         SQL('  and tcr2.cod_raca = :codraca2  ',0);
         SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
      end;
      if IndAgrupRaca3 = 'N' then begin
         SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
         SQL('  and tcr3.cod_raca = :codraca3  ',0);
         SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
      end;
      if IndAgrupRaca4 = 'N' then begin
         SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
         SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
         SQL('  and tcr4.cod_raca = :codraca4  ',0);
         SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
      end;
      if Conexao.CodPapelUsuario = 3 then begin
         SQL('  and (taf.cod_pessoa_tecnico = :CodPessoaTecnico or taf.cod_pessoa_tecnico is null) ', 0);
      end;
      if IndAgrupRaca1 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca1 ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
       end;
      if IndAgrupRaca2 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca2 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
      end;
      if IndAgrupRaca3 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca3 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
      end;
      if IndAgrupRaca4 = 'S' then begin
         SQL(' and taf.cod_animal in (select cod_animal ' +
             ' from tab_composicao_racial as tcr with (nolock), ' +
             ' tab_composicao_agrup_racas as tacr with (nolock) ' +
             ' where tacr.cod_agrupamento_racas = :codraca4 ' +
             ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
             ' and   tacr.cod_raca = tcr.cod_raca ' +
             ' group by cod_animal ' +
             ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
      end;
      if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
          Query.ParamByName('codraca1').AsInteger := CodRaca1;
          Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
          Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
      end;
      if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
          Query.ParamByName('codraca2').AsInteger := CodRaca2;
          Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
          Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
      end;
      if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
          Query.ParamByName('codraca3').AsInteger := CodRaca3;
          Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
          Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
      end;
      if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
          Query.ParamByName('codraca4').AsInteger := CodRaca4;
          Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
          Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
      end;
      Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if Conexao.CodPapelUsuario = 3 then begin
        Query.ParamByName('CodPessoaTecnico').AsInteger := Conexao.CodPessoa;
      end;

      // Critérios
      if CodFazenda > 0 then begin
        SQL('  and te.cod_fazenda = :cod_fazenda ', 0);
        Query.ParamByName('cod_fazenda').AsInteger := CodFazenda;
      end;
      if CodFazendaManejo > 0 then begin
        SQL('  and taf.cod_fazenda_manejo = :cod_fazenda_manejo ', 0);
        Query.ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
      end;
      if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
        SQL('  and taf.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        Query.ParamByName('cod_animal_manejo_inicio').AsString := CodAnimalManejoInicio;
        Query.ParamByName('cod_animal_manejo_fim').AsString := CodAnimalManejoFim;
      end;
      if CodLocais <> '' then begin
        SQL('  and taf.cod_local_corrente in ( '+CodLocais+' ) ', 0);
      end;
      if CodLotes <> '' then begin
        SQL('  and taf.cod_lote_corrente in ( '+CodLotes+' ) ', 0);
      end;
      if CodCategorias <> '' then begin
        SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
      end;
      if CodRacas <> '' then begin
        SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
      end;
      if CodEstacoes <> '' then begin
        SQL('  and te.cod_evento in ( '+CodEstacoes+' ) ', 0);
      end;
      if CodTipoCoberturas <> '' then begin
        SQL('  and ter.cod_tipo_evento in ( '+CodTipoCoberturas+' ) ', 0);
      end;
      if CodInseminadores <> '' then begin
        SQL('  and teiar.cod_pessoa_sec_inseminador in ( '+CodInseminadores+' ) ', 0);
      end;
      if IndVacaPrenha = 'S' then begin
        SQL('  and ter.cod_tipo_evento = 28 ', 0);
        SQL('  and taer.ind_vaca_prenha = ''S'' ', 0);
      end else if IndVacaPrenha = 'N' then begin
        SQL('  and ter.cod_tipo_evento = 28 ', 0);
        SQL('  and taer.ind_vaca_prenha = ''N'' ', 0);
      end;
      if CodFazendaManejoTouro > 0 then begin
        SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
        Query.ParamByName('cod_fazenda_manejo_touro').AsInteger := CodFazendaManejoTouro;
      end;
      if CodAnimalManejoTouro <> '' then begin
        SQL('  and tat.cod_animal_manejo = :cod_animal_manejo_touro ', 0);
        Query.ParamByName('cod_animal_manejo_touro').AsString := CodAnimalManejoTouro;
      end;
      if (NumPartosInicio > 0) and (NumPartosFim > 0) then begin
        SQL('  and ( '+
            '      select '+
            '        count(tep.cod_evento) '+
            '      from '+
            '        tab_evento tep with (nolock) '+
            '        , tab_animal_evento taep with (nolock) '+
            '      where '+
            '        tep.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
            '        and tep.cod_tipo_evento = 30 '+
            '        and taep.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
            '        and taep.cod_evento = tep.cod_evento '+
            '        and taep.cod_animal = taf.cod_animal '+
            '      ) between :num_partos_inicio and :num_partos_fim ', 0);
        Query.ParamByName('num_partos_inicio').AsInteger := NumPartosInicio;
        Query.ParamByName('num_partos_fim').AsInteger := NumPartosFim;
      end;
      if (NumCoberturasInicio > 0) and (NumCoberturasFim > 0) then begin
        SQL('  and ( '+
            '      select '+
            '        count(tec.cod_evento) '+
            '      from '+
            '        tab_evento tec with (nolock) '+
            '        , tab_animal_evento taec with (nolock) '+
            '      where '+
            '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
            '        and tec.cod_tipo_evento in ( 23, 26, 27 ) '+
            '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and taec.cod_evento = tec.cod_evento '+
            '        and taec.cod_animal = taf.cod_animal '+
            '      ) between :num_coberturas_inicio and :num_coberturas_fim ', 0);
        Query.ParamByName('num_coberturas_inicio').AsInteger := NumCoberturasInicio;
        Query.ParamByName('num_coberturas_fim').AsInteger := NumCoberturasFim;
      end;
      if (DtaCoberturaInicio > 0) and (DtaCoberturaFim > 0) then begin
        SQL('  and exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tec with (nolock) '+
            '        , tab_animal_evento taec with (nolock) '+
            '      where '+
            '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
            '        and tec.cod_tipo_evento in ( 23, 26, 27 ) '+
            '        and tec.dta_inicio between :dta_cobertura_inicio and :dta_cobertura_fim '+
            '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and taec.cod_evento = tec.cod_evento '+
            '        and taec.cod_animal = taf.cod_animal '+
            '      ) ', 0);
        Query.ParamByName('dta_cobertura_inicio').AsDateTime := DtaCoberturaInicio;
        Query.ParamByName('dta_cobertura_fim').AsDateTime := DtaCoberturaFim;
      end;
      if (DtaDiagnosticoInicio > 0) and (DtaDiagnosticoFim > 0) then begin
        SQL('  and exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tec with (nolock) '+
            '        , tab_animal_evento taec with (nolock) '+
            '      where '+
            '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
            '        and tec.cod_tipo_evento = 28 '+
            '        and tec.dta_inicio between :dta_diagnostico_inicio and :dta_diagnostico_fim '+
            '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and taec.cod_evento = tec.cod_evento '+
            '        and taec.cod_animal = taf.cod_animal '+
            '      ) ', 0);
        Query.ParamByName('dta_diagnostico_inicio').AsDateTime := DtaDiagnosticoInicio;
        Query.ParamByName('dta_diagnostico_fim').AsDateTime := DtaDiagnosticoFim;
      end;
      if (DtaUltimoPartoInicio > 0) and (DtaUltimoPartoFim > 0) then begin
        SQL('  and exists ( '+
            '      select '+
            '        top 1 1 '+
            '      from '+
            '        tab_evento tec with (nolock) '+
            '        , tab_animal_evento taec with (nolock) '+
            '      where '+
            '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
            '        and tec.cod_tipo_evento = 30 '+
            '        and tec.dta_inicio between :dta_parto_inicio and :dta_parto_fim '+
            '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
            '        and taec.cod_evento = tec.cod_evento '+
            '        and taec.cod_animal = taf.cod_animal '+
            '      ) ', 0);
        Query.ParamByName('dta_parto_inicio').AsDateTime := DtaUltimoPartoInicio;
        Query.ParamByName('dta_parto_fim').AsDateTime := DtaUltimoPartoFim;
      end;

      if (IntRelatorios.CampoAssociado(fNOMINSEMINADOR) <> 1)
        and (CodInseminadores = '') and bTouro then begin
        SQL('union ', 0);
        SQL('select ', 0);
        SQL('  distinct null ', 0);
        SQL('  , case when taf.cod_fazenda_manejo is null then '+
            '      taf.cod_animal_manejo '+
            '    else '+
            '      tfmf.sgl_fazenda + '' '' + taf.cod_animal_manejo '+
            '    end as CodAnimalManejo ',   fCODANIMALMANEJO);
        SQL('  , taf.dta_nascimento as DtaNascimento ', fDTANASCIMENTO);
        SQL('  , dbo.FNT_IDADE(taf.dta_nascimento, getdate()) as TxtIdade ', fTXTIDADE);
        SQL('  , case when taf.cod_reprodutor_multiplo is not null then '+
            '      dbo.FNT_BUSCAR_PAI(taf.cod_reprodutor_multiplo, taf.cod_pessoa_produtor, ''R'') '+
            '    else '+
            '      dbo.FNT_BUSCAR_PAI(taf.cod_animal_pai, taf.cod_pessoa_produtor, ''T'') '+
            '    end as CodAnimalManejoPai ', fCODANIMALMANEJOPAI);
        SQL('  , dbo.FNT_BUSCAR_PAI(taf.cod_animal_mae, taf.cod_pessoa_produtor, ''T'') as CodAnimalManejoMae ', fCODANIMALMANEJOMAE);
        SQL('  , tr.sgl_raca as SglRaca ', fSGLRACA);
        SQL('  , dbo.FNT_COMPOSICAO_RACIAL(taf.cod_animal, taf.cod_pessoa_produtor) as DesComposicaoRacial ', fDESCOMPOSICAORACIAL);
        SQL('  , tca.sgl_categoria_animal as SglCategoriaAnimal ', fSGLCATEGORIAANIMAL);
        SQL('  , tlt.sgl_lote as SglLoteCorrente ', fSGLLOTECORRENTE);
        SQL('  , tlc.sgl_local as SglLocalCorrente ', fSGLLOCALCORRENTE);
        SQL('  , teem.sgl_estacao_monta as SglEstacaoMonta ', fSGLESTACAOMONTA);
        SQL('  , teem.des_estacao_monta as DesEstacaoMonta ', fDESESTACAOMONTA);
        SQL('  , tter.sgl_tipo_evento as SglTipoEvento ', fSGLTIPOEVENTO);
        SQL('  , tter.des_tipo_evento as DesTipoEvento ', fDESTIPOEVENTO);
        SQL('  , ter.dta_inicio as DtaEvento ', fDTAEVENTO);
        SQL('  , case when taer.ind_vaca_prenha = ''S'' then '+
            '      ''Prenha'' '+
            '    when taer.ind_vaca_prenha = ''N'' then '+
            '      ''Vazia '' '+
            '    else '+
            '      null '+
            '    end as DesResultadoDiagnostico ', fDESRESULTADODIAGNOSTICO);
        SQL('  , null as NomInseminador ', fNOMINSEMINADOR);
        SQL('  , dbo.FNT_BUSCAR_PAI(temcr.cod_animal_touro, temcr.cod_pessoa_produtor, ''T'') as CodAnimalManejoTouro ', fCODANIMALMANEJOTOURO);
        SQL('from ', 0);
        SQL('  tab_evento te with (nolock) ', 0);
        SQL('  , tab_evento_estacao_monta teem ', [fSGLESTACAOMONTA, fDESESTACAOMONTA]);
        SQL('  , tab_animal_evento tae with (nolock) ', 0);
        SQL('  , tab_animal taf with (nolock) ', 0);
        SQL('  , tab_fazenda tfmf ', fCODANIMALMANEJO);
        SQL('  , tab_raca tr ', fSGLRACA);
        SQL('  , tab_categoria_animal tca ', fSGLCATEGORIAANIMAL);
        SQL('  , tab_local tlc ', fSGLLOCALCORRENTE);
        SQL('  , tab_lote tlt ', fSGLLOTECORRENTE);
        SQL('  , tab_evento ter with (nolock) ', SE(bEventoRelacionado, 0, -1));
        SQL('  , tab_evento_monta_controlada temcr ', SE(bTouro, 0, -1));
        SQL('  , tab_animal tat with (nolock) ', SE((CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> ''), 0, -1));
        SQL('  , tab_tipo_evento tter ', [fSGLTIPOEVENTO, fDESTIPOEVENTO]);
        SQL('  , tab_animal_evento taer with (nolock) ', SE(bEventoRelacionado, 0, -1));
        SQL('  , tab_composicao_racial as tcr with (nolock) ', SE(IndAgrupRaca1 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr2 with (nolock) ', SE(IndAgrupRaca2 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr3 with (nolock) ', SE(IndAgrupRaca3 = 'N', 0, -1));
        SQL('  , tab_composicao_racial as tcr4 with (nolock) ', SE(IndAgrupRaca4 = 'N', 0, -1));
        SQL('where ', 0);
        SQL('  te.cod_pessoa_produtor = :cod_pessoa_produtor ', 0);
        SQL('  and te.cod_tipo_evento = 24 ', 0);
        SQL('  and teem.cod_pessoa_produtor = te.cod_pessoa_produtor ', [fSGLESTACAOMONTA, fDESESTACAOMONTA]);
        SQL('  and teem.cod_evento = te.cod_evento ', [fSGLESTACAOMONTA, fDESESTACAOMONTA]);
        SQL('  and tae.cod_pessoa_produtor = te.cod_pessoa_produtor ', 0);
        SQL('  and tae.cod_evento = te.cod_evento ', 0);
        SQL('  and taf.cod_pessoa_produtor = tae.cod_pessoa_produtor ', 0);
        SQL('  and taf.cod_animal = tae.cod_animal ', 0);
        SQL('  and tfmf.cod_pessoa_produtor =* taf.cod_pessoa_produtor ', fCODANIMALMANEJO);
        SQL('  and tfmf.cod_fazenda =* taf.cod_fazenda_manejo ', fCODANIMALMANEJO);
        SQL('  and tr.cod_raca = taf.cod_raca ', fSGLRACA);
        SQL('  and tca.cod_categoria_animal =* taf.cod_categoria_animal ', fSGLCATEGORIAANIMAL);
        SQL('  and tlt.cod_pessoa_produtor =* taf.cod_pessoa_produtor ', fSGLLOTECORRENTE);
        SQL('  and tlt.cod_fazenda =* taf.cod_fazenda_corrente ', fSGLLOTECORRENTE);
        SQL('  and tlt.cod_lote =* taf.cod_lote_corrente ', fSGLLOTECORRENTE);
        SQL('  and tlc.cod_pessoa_produtor =* taf.cod_pessoa_produtor ', fSGLLOCALCORRENTE);
        SQL('  and tlc.cod_fazenda =* taf.cod_fazenda_corrente ', fSGLLOCALCORRENTE);
        SQL('  and tlc.cod_local =* taf.cod_local_corrente ', fSGLLOCALCORRENTE);
        SQL('  and ter.cod_pessoa_produtor = te.cod_pessoa_produtor ', SE(bEventoRelacionado, 0, -1));
        SQL('  and ter.cod_evento_associado = te.cod_evento ', SE(bEventoRelacionado, 0, -1));
        SQL('  and temcr.cod_pessoa_produtor = ter.cod_pessoa_produtor ', SE(bTouro, 0, -1));
        SQL('  and temcr.cod_evento = ter.cod_evento ', SE(bTouro, 0, -1));
        SQL('  and tat.cod_pessoa_produtor = temcr.cod_pessoa_produtor ', SE((CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> ''), 0, -1));
        SQL('  and tat.cod_animal = temcr.cod_animal_touro ', SE((CodFazendaManejoTouro > 0) or (CodAnimalManejoTouro <> ''), 0, -1));
        SQL('  and tter.cod_tipo_evento = ter.cod_tipo_evento ', [fSGLTIPOEVENTO, fDESTIPOEVENTO]);
        SQL('  and taer.cod_pessoa_produtor = ter.cod_pessoa_produtor ', SE(bEventoRelacionado, 0, -1));
        SQL('  and taer.cod_evento = ter.cod_evento ', SE(bEventoRelacionado, 0, -1));
        SQL('  and taer.cod_animal = tae.cod_animal ', SE(bEventoRelacionado, 0, -1));
        if IndAgrupRaca1 = 'N' then begin
           SQL('  and taf.cod_animal = tcr.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr.cod_pessoa_produtor  ',0);
           SQL('  and tcr.cod_raca = :codraca1  ',0);
           SQL('  and tcr.qtd_composicao_racial between :qtdcompracialinicio1 and :qtdcompracialfim1  ',0);
        end;
        if IndAgrupRaca2 = 'N' then begin
           SQL('  and taf.cod_animal = tcr2.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr2.cod_pessoa_produtor  ',0);
           SQL('  and tcr2.cod_raca = :codraca2  ',0);
           SQL('  and tcr2.qtd_composicao_racial between :qtdcompracialinicio2 and :qtdcompracialfim2  ',0);
        end;
        if IndAgrupRaca3 = 'N' then begin
           SQL('  and taf.cod_animal = tcr3.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr3.cod_pessoa_produtor  ',0);
           SQL('  and tcr3.cod_raca = :codraca3  ',0);
           SQL('  and tcr3.qtd_composicao_racial between :qtdcompracialinicio3 and :qtdcompracialfim3  ',0);
        end;
        if IndAgrupRaca4 = 'N' then begin
           SQL('  and taf.cod_animal = tcr4.cod_animal  ',0);
           SQL('  and taf.cod_pessoa_produtor = tcr4.cod_pessoa_produtor  ',0);
           SQL('  and tcr4.cod_raca = :codraca4  ',0);
           SQL('  and tcr4.qtd_composicao_racial between :qtdcompracialinicio4 and :qtdcompracialfim4  ',0);
        end;
        if IndAgrupRaca1 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca1 ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio1 and :qtdcompracialfim1) ',0);
         end;
        if IndAgrupRaca2 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca2 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio2 and :qtdcompracialfim2) ',0);
        end;
        if IndAgrupRaca3 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca3 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio3 and :qtdcompracialfim3) ',0);
        end;
        if IndAgrupRaca4 = 'S' then begin
           SQL(' and taf.cod_animal in (select cod_animal ' +
               ' from tab_composicao_racial as tcr with (nolock), ' +
               ' tab_composicao_agrup_racas as tacr with (nolock) ' +
               ' where tacr.cod_agrupamento_racas = :codraca4 ' +
               ' and   tcr.cod_pessoa_produtor = :cod_pessoa_produtor ' +
               ' and   tacr.cod_raca = tcr.cod_raca ' +
               ' group by cod_animal ' +
               ' having sum(qtd_composicao_racial) between :qtdcompracialinicio4 and :qtdcompracialfim4) ',0);
        end;
        if (IndAgrupRaca1 = 'N') or (IndAgrupRaca1 = 'S') then begin
            Query.ParamByName('codraca1').AsInteger := CodRaca1;
            Query.ParamByName('qtdcompracialinicio1').Asfloat := QtdCompRacialInicio1;
            Query.ParamByName('qtdcompracialfim1').Asfloat := QtdCompRacialFim1;
        end;
        if (IndAgrupRaca2 = 'N') or (IndAgrupRaca2 = 'S') then begin
            Query.ParamByName('codraca2').AsInteger := CodRaca2;
            Query.ParamByName('qtdcompracialinicio2').Asfloat := QtdCompRacialInicio2;
            Query.ParamByName('qtdcompracialfim2').Asfloat := QtdCompRacialFim2;
        end;
        if (IndAgrupRaca3 = 'N') or (IndAgrupRaca3 = 'S') then begin
            Query.ParamByName('codraca3').AsInteger := CodRaca3;
            Query.ParamByName('qtdcompracialinicio3').Asfloat := QtdCompRacialInicio3;
            Query.ParamByName('qtdcompracialfim3').Asfloat := QtdCompRacialFim3;
        end;
        if (IndAgrupRaca4 = 'N') or (IndAgrupRaca4 = 'S') then begin
            Query.ParamByName('codraca4').AsInteger := CodRaca4;
            Query.ParamByName('qtdcompracialinicio4').Asfloat := QtdCompRacialInicio4;
            Query.ParamByName('qtdcompracialfim4').Asfloat := QtdCompRacialFim4;
        end;
        Query.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

        // Critérios
        if CodFazenda > 0 then begin
          SQL('  and te.cod_fazenda = :cod_fazenda ', 0);
        end;
        if CodFazendaManejo > 0 then begin
          SQL('  and taf.cod_fazenda_manejo = :cod_fazenda_manejo ', 0);
        end;
        if (CodAnimalManejoInicio <> '') and (CodAnimalManejoFim <> '') then begin
          SQL('  and taf.cod_animal_manejo between :cod_animal_manejo_inicio and :cod_animal_manejo_fim ', 0);
        end;
        if CodLocais <> '' then begin
          SQL('  and taf.cod_local_corrente in ( '+CodLocais+' ) ', 0);
        end;
        if CodLotes <> '' then begin
          SQL('  and taf.cod_lote_corrente in ( '+CodLotes+' ) ', 0);
        end;
        if CodCategorias <> '' then begin
          SQL('  and taf.cod_categoria_animal in ( '+CodCategorias+' ) ', 0);
        end;
        if CodRacas <> '' then begin
          SQL('  and taf.cod_raca in ( '+CodRacas+' ) ', 0);
        end;
        if CodEstacoes <> '' then begin
          SQL('  and te.cod_evento in ( '+CodEstacoes+' ) ', 0);
        end;
        if CodTipoCoberturas <> '' then begin
          SQL('  and ter.cod_tipo_evento in ( '+CodTipoCoberturas+' ) ', 0);
        end;
        if IndVacaPrenha = 'S' then begin
          SQL('  and ter.cod_tipo_evento = 28 ', 0);
          SQL('  and taer.ind_vaca_prenha = ''S'' ', 0);
        end else if IndVacaPrenha = 'N' then begin
          SQL('  and ter.cod_tipo_evento = 28 ', 0);
          SQL('  and taer.ind_vaca_prenha = ''N'' ', 0);
        end;
        if CodFazendaManejoTouro > 0 then begin
          SQL('  and tat.cod_fazenda_manejo = :cod_fazenda_manejo_touro ', 0);
        end;
        if CodAnimalManejoTouro <> '' then begin
          SQL('  and tat.cod_animal_manejo = :cod_animal_manejo_touro ', 0);
        end;
        if (NumPartosInicio > 0) and (NumPartosFim > 0) then begin
          SQL('  and ( '+
              '      select '+
              '        count(tep.cod_evento) '+
              '      from '+
              '        tab_evento tep with (nolock) '+
              '        , tab_animal_evento taep with (nolock) '+
              '      where '+
              '        tep.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
              '        and tep.cod_tipo_evento = 30 '+
              '        and taep.cod_pessoa_produtor = tep.cod_pessoa_produtor '+
              '        and taep.cod_evento = tep.cod_evento '+
              '        and taep.cod_animal = taf.cod_animal '+
              '      ) between :num_partos_inicio and :num_partos_fim ', 0);
        end;
        if (NumCoberturasInicio > 0) and (NumCoberturasFim > 0) then begin
          SQL('  and ( '+
              '      select '+
              '        count(tec.cod_evento) '+
              '      from '+
              '        tab_evento tec with (nolock) '+
              '        , tab_animal_evento taec with (nolock) '+
              '      where '+
              '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
              '        and tec.cod_tipo_evento in ( 23, 26, 27 ) '+
              '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
              '        and taec.cod_evento = tec.cod_evento '+
              '        and taec.cod_animal = taf.cod_animal '+
              '      ) between :num_coberturas_inicio and :num_coberturas_fim ', 0);
        end;
        if (DtaCoberturaInicio > 0) and (DtaCoberturaFim > 0) then begin
          SQL('  and exists ( '+
              '      select '+
              '        top 1 1 '+
              '      from '+
              '        tab_evento tec with (nolock) '+
              '        , tab_animal_evento taec with (nolock) '+
              '      where '+
              '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
              '        and tec.cod_tipo_evento in ( 23, 26, 27 ) '+
              '        and tec.dta_inicio between :dta_cobertura_inicio and :dta_cobertura_fim '+
              '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
              '        and taec.cod_evento = tec.cod_evento '+
              '        and taec.cod_animal = taf.cod_animal '+
              '      ) ', 0);
        end;
        if (DtaDiagnosticoInicio > 0) and (DtaDiagnosticoFim > 0) then begin
          SQL('  and exists ( '+
              '      select '+
              '        top 1 1 '+
              '      from '+
              '        tab_evento tec with (nolock) '+
              '        , tab_animal_evento taec with (nolock) '+
              '      where '+
              '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
              '        and tec.cod_tipo_evento = 28 '+
              '        and tec.dta_inicio between :dta_diagnostico_inicio and :dta_diagnostico_fim '+
              '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
              '        and taec.cod_evento = tec.cod_evento '+
              '        and taec.cod_animal = taf.cod_animal '+
              '      ) ', 0);
        end;
        if (DtaUltimoPartoInicio > 0) and (DtaUltimoPartoFim > 0) then begin
          SQL('  and exists ( '+
              '      select '+
              '        top 1 1 '+
              '      from '+
              '        tab_evento tec with (nolock) '+
              '        , tab_animal_evento taec with (nolock) '+
              '      where '+
              '        tec.cod_pessoa_produtor = taf.cod_pessoa_produtor '+
              '        and tec.cod_tipo_evento = 30 '+
              '        and tec.dta_inicio between :dta_parto_inicio and :dta_parto_fim '+
              '        and taec.cod_pessoa_produtor = tec.cod_pessoa_produtor '+
              '        and taec.cod_evento = tec.cod_evento '+
              '        and taec.cod_animal = taf.cod_animal '+
              '      ) ', 0);
        end;
      end;

      // Realiza "order by" por campos selecionados
      SQL('order by ', 0);
      bAux := False;
      IntRelatorios.IrAoPrimeiro;
      while not IntRelatorios.EOF do begin
        sAux := SE(bAux,'  , ', '  ')+IntRelatorios.ValorCampo('NomField');
        if SQL(sAux, SE(not bPersonalizavel
          or (IntRelatorios.ValorCampo('IndCampoObrigatorio') = 'S')
          or (IntRelatorios.ValorCampo('IndSelecaoUsuario') = 'S'), 0, -1))
          and not(bAux) then bAux := True;
        IntRelatorios.IrAoProximo;
      end;
{$ENDIF}

      // Disponibiliza pesquisa
      Query.Open;

      // Identifica procedimento como bem sucedido
      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1653, Self.ClassName, NomMetodo, [E.Message]);
        Result := -1653;
        Exit;
      end;
    end;
  finally
    IntRelatorios.Free;
  end;
end;

function TIntEventos.GerarRelatorioConsultaReprodutiva(
  CodFazendaManejo: Integer; CodAnimalManejoInicio,
  CodAnimalManejoFim: String; CodFazenda: Integer; CodEstacoes, CodRacas,
  CodCategorias, CodLocais, CodLotes, IndAgrupRaca1: String;
  CodRaca1: Integer; QtdCompRacialInicio1, QtdCompRacialFim1: Double;
  IndAgrupRaca2: String; CodRaca2: Integer; QtdCompRacialInicio2,
  QtdCompRacialFim2: Double; IndAgrupRaca3: String; CodRaca3: Integer;
  QtdCompRacialInicio3, QtdCompRacialFim3: Double; IndAgrupRaca4: String;
  CodRaca4: Integer; QtdCompRacialInicio4, QtdCompRacialFim4: Double;
  NumPartosInicio, NumPartosFim: Integer; CodTipoCoberturas: String;
  NumCoberturasInicio, NumCoberturasFim: Integer; DtaCoberturaInicio,
  DtaCoberturaFim, DtaDiagnosticoInicio, DtaDiagnosticoFim: TDateTime;
  IndVacaPrenha, CodInseminadores: String; CodFazendaManejoTouro: Integer;
  CodAnimalManejoTouro: String; DtaUltimoPartoInicio,
  DtaUltimoPartoFim: TDateTime; Tipo: Integer): String;
const
  Metodo: Integer = 482;
  NomeMetodo: String = 'GerarRelatorioConsultaReprodutiva';
  CodRelatorio: Integer = 22;
var
  Rel: TRelatorioPadrao;
  Retorno, iTotal: Integer;
  iTotalPrenhas, iTotalVazias: Integer;
  iTotalSemDiagnostico: Integer;
  IntRelatorios: TIntRelatorios;
begin
  Result := '';

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Exit;
  end;

  IntRelatorios := TIntRelatorios.Create;
  Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
  try
    Retorno := IntRelatorios.Inicializar(Conexao, Mensagens);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Buscar(CodRelatorio);
    if Retorno < 0 then Exit;
    Retorno := IntRelatorios.Pesquisar(CodRelatorio);
    if Retorno < 0 then Exit;

    {Realiza pesquisa de animais de acordo com os critérios informados}
    Retorno := PesquisarRelatorioConsultaReprodutiva(CodFazendaManejo,
      CodAnimalManejoInicio, CodAnimalManejoFim, CodFazenda, CodEstacoes,
      CodRacas, CodCategorias, CodLocais, CodLotes, IndAgrupRaca1, CodRaca1,
      QtdCompRacialInicio1, QtdCompRacialFim1, IndAgrupRaca2, CodRaca2,
      QtdCompRacialInicio2, QtdCompRacialFim2, IndAgrupRaca3, CodRaca3,
      QtdCompRacialInicio3, QtdCompRacialFim3, IndAgrupRaca4, CodRaca4,
      QtdCompRacialInicio4, QtdCompRacialFim4, NumPartosInicio, NumPartosFim,
      CodTipoCoberturas, NumCoberturasInicio, NumCoberturasFim,
      DtaCoberturaInicio, DtaCoberturaFim, DtaDiagnosticoInicio,
      DtaDiagnosticoFim, IndVacaPrenha, CodInseminadores, CodFazendaManejoTouro,
      CodAnimalManejoTouro, DtaUltimoPartoInicio, DtaUltimoPartoFim);
    if Retorno < 0 then Exit;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Query.IsEmpty then begin
      {Nenhum registro foi encontrado na pesquisa realizada para o relatório de consulta reprodutiva!}
      Mensagens.Adicionar(1652, Self.ClassName, NomeMetodo, []);
      Exit;
    end;

    Rel.TipoDoArquvio := Tipo;

    {Define o relatório em questão e carrega os seus dados específicos}
    Retorno := Rel.CarregarRelatorio(CodRelatorio);
    if Retorno < 0 then Exit;

    {Inicializa o procedimento de geração do arquivo de relatório}
    Retorno := Rel.InicializarRelatorio;
    if Retorno < 0 then Exit;

    {Iniciando totalizadores}
    iTotal := 0;
    iTotalPrenhas := 0;
    iTotalVazias := 0;
    iTotalSemDiagnostico := 0;

    Query.First;

    {Se o usuário selecionou o campo "Resultado Diagnóstico" para ser mostrado no relatório,
       vamos totalizar "Total prenhas", "Total vazias" e "Total sem diagnóstico"}
    if (IntRelatorios.CampoAssociado(16) = 1) then begin
      while not Query.EOF do begin
        Rel.ImprimirColunasResultSet(Query);
        if (Rel.Campos.ValorCampo['DesResultadoDiagnostico'] = 'Prenha') then Inc(iTotalPrenhas);
        if (Rel.Campos.ValorCampo['DesResultadoDiagnostico'] = 'Vazia') then Inc(iTotalVazias);
        if (Rel.Campos.ValorCampo['DesResultadoDiagnostico'] = '') then Inc(iTotalSemDiagnostico);
        Inc(iTotal);
        Query.Next;
      end;
    end
    {Se o usuário não selecionou o campo "Resultado Diagnóstico" para ser mostrado no relatório,
       não vamos totalizar "Total prenhas", "Total vazias" e "Total sem diagnóstico"}
    else begin
      while not Query.EOF do begin
        Rel.ImprimirColunasResultSet(Query);
        Inc(iTotal);
        Query.Next;
      end;
    end;

    {Monta Linha totalizadora}
    Rel.NovaLinha;
    Rel.Campos.LimparValores;
    Rel.ImprimirTexto(0, 'Total de Animais: '+IntToStr(iTotal));

    {Se o usuário selecionou o campo "Resultado Diagnóstico" para ser mostrado no relatório,
       vamos imprimir as linhas que apresentam o total de prenhas e o total de vazias}
    if (IntRelatorios.CampoAssociado(16) = 1) then begin
      Rel.NovaLinha;
      Rel.Campos.LimparValores;
      Rel.ImprimirTexto(0, 'Total de Prenhas: ' + IntToStr(iTotalPrenhas));
      Rel.NovaLinha;
      Rel.Campos.LimparValores;
      Rel.ImprimirTexto(0, 'Total de Vazias: ' + IntToStr(iTotalVazias));
      Rel.NovaLinha;
      Rel.Campos.LimparValores;
      Rel.ImprimirTexto(0, 'Total de animais sem diagnóstico: ' + IntToStr(iTotalSemDiagnostico));
    end;

    {Inicia processamento de encerramento do relatório em questão}
    Retorno := Rel.FinalizarRelatorio;
    if Retorno = 0 then begin
      {Se a finalização foi bem sucedida retorna o nome do arquivo gerado}
      Result := Rel.NomeArquivo;
    end;
  finally
    Rel.Free;
    IntRelatorios.Free;
  end;
end;

function TIntEventos.InserirDescarte(DtaEvento: TDateTime; TxtObservacao: String;
CodFazenda,CodMotivoDescarte: Integer): Integer;
const
  Metodo: Integer = 483;
  NomeMetodo: String = 'InserirDescarte';
  CodTipoEvento: Integer = 33;
var
  Q: THerdomQuery;
  CodEvento: Integer;
  NomFazenda, TxtDados: String;
begin
  Result := -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then Exit;

  // Trata campo Observação
  Result := TrataString(TxtObservacao, 255, 'Observação');
  if Result < 0 then Exit;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      // verifica de o motivo de descarte é válido
      Q.SQL.Clear;
      Q.SQL.Add('select 1 ' +
                ' from tab_motivo_descarte ' +
                ' where cod_motivo_descarte =:cod_motivo_descarte ' +
                ' and   dta_fim_validade is null ');
     Q.ParamByName('cod_motivo_descarte').asinteger := CodMotivoDescarte;
     Q.Open;

     if Q.IsEmpty then begin
       Mensagens.Adicionar(1598, Self.ClassName, NomeMetodo, []);
       Result := -1598;
       Exit;
     end;

      // Abre transação
      beginTran;

      // -------------------------------------------------------------------
      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      // -------------------------------------------------------------------
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaEvento, DtaEvento, TxtDados, TxtObservacao, CodFazenda);

      if CodEvento < 0 then begin
        Rollback;
        Exit;
      end;

      // -------------------------------------------------------------------
      // Insere dados específicos do evento Descarte
      // -------------------------------------------------------------------
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('insert into tab_evento_descarte ' +
                '  (cod_pessoa_produtor ' +
                '   , cod_evento ' +
                '   , cod_motivo_descarte) ' +
                'values ' +
                '  (:cod_pessoa_produtor ' +
                '   , :cod_evento ' +
                '   , :cod_motivo_descarte) ');
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.ParamByName('cod_motivo_descarte').AsInteger := CodMotivoDescarte;
      Q.ExecSQL;

      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.Sql.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
      Q.Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').asinteger := CodEvento;
      Q.ExecSQL;
{$ENDIF}
      // Cofirma transação
      Commit;

      // Retorna código do registro inserido
      Result := CodEvento;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(1599, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -1599;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

function TIntEventos.BuscaDadosAnimal(CodAnimal:Integer; var DadosAnimal: TDadosAnimal): Integer;
const
  NomeMetodo : String = 'BuscaDadosAnimal';
var
  Q : THerdomQuery;
begin
  Result := 0;
  DadosAnimal.CodAnimal            := -1;
  DadosAnimal.CodFazendaManejo     := -1;
  DadosAnimal.CodAnimalManejo      := '';
  DadosAnimal.CodAnimalCertificadora := '';
  DadosAnimal.CodPaisSisbov        := -1;
  DadosAnimal.CodEstadoSisbov      := -1;
  DadosAnimal.CodMicroRegiaoSisbov := -1;
  DadosAnimal.CodAnimalSisbov      := -1;
  DadosAnimal.NumDVSisbov          := -1;
  DadosAnimal.CodSituacaoSisbov    := '';
  DadosAnimal.DtaIdentificacaoSisbov := 0;
  DadosAnimal.NumImovelIdentificacao := '';
  DadosAnimal.CodPropriedadeIdentificacao := -1;
  DadosAnimal.CodFazendaIdentificacao := -1;
  DadosAnimal.DtaNascimento                    := 0;
  DadosAnimal.NumImovelNascimento := '';
  DadosAnimal.CodPropriedadeNascimento := -1;
  DadosAnimal.CodFazendaNascimento := -1;
  DadosAnimal.DtaCompra := 0;
  DadosAnimal.CodPessoaSecundariaCriador := -1;
  DadosAnimal.NomAnimal := '';
  DadosAnimal.DesApelido := '';
  DadosAnimal.CodAssociacaoRaca := -1;
  DadosAnimal.CodGrauSangue := -1;
  DadosAnimal.CodEspecie           := -1;
  DadosAnimal.CodAptidao           := -1;
  DadosAnimal.CodRaca              := -1;
  DadosAnimal.CodPelagem           := -1;
  DadosAnimal.IndSexo              := '';
  DadosAnimal.CodTipoOrigem        := -1;
  DadosAnimal.CodAnimalPai         := -1;
  DadosAnimal.CodAnimalMae         := -1;
  DadosAnimal.CodAnimalReceptor    := -1;
  DadosAnimal.IndAnimalCastrado                := '';
  DadosAnimal.CodRegimeAlimentar               := -1;
  DadosAnimal.CodCategoriaAnimal               := -1;
  DadosAnimal.CodTipoLugar                     := -1;
  DadosAnimal.CodLoteCorrente                  := -1;
  DadosAnimal.CodLocalCorrente                 := -1;
  DadosAnimal.CodFazendaCorrente               := -1;
  DadosAnimal.NumImovelCorrente                := '';
  DadosAnimal.CodPropriedadeCorrente           := -1;
  DadosAnimal.NumCNPJCPFCorrente               := '';
  DadosAnimal.CodPessoaCorrente                := -1;
  DadosAnimal.CodPessoaSecundariaCorrente      := -1;
  DadosAnimal.DtaUltimoEvento                  := 0;
  DadosAnimal.DtaUltimoEventoAnterior          := 0;
  DadosAnimal.DtaAplicacaoUltimoEvento         := 0;
  DadosAnimal.DtaAplicacaoUltimoEventoAnterior := 0;
  DadosAnimal.CodRegistroLog                   := -1;
  DadosAnimal.DtaEfetivacaoCadastro            := 0;
  DadosAnimal.CodArquivoSisbov                 := -1;
  DadosAnimal.CodAnimalAssociado               := -1;
  DadosAnimal.QtdPesoAnimal                    := 0;
  DadosAnimal.NumTransponder                   := '';
  DadosAnimal.CodTipoIdentificador1            := -1;
  DadosAnimal.CodPosicaoIdentificador1         := -1;
  DadosAnimal.CodTipoIdentificador2            := -1;
  DadosAnimal.CodPosicaoIdentificador2         := -1;
  DadosAnimal.CodTipoIdentificador3            := -1;
  DadosAnimal.CodPosicaoIdentificador3         := -1;
  DadosAnimal.CodTipoIdentificador4            := -1;
  DadosAnimal.CodPosicaoIdentificador4         := -1;
  DadosAnimal.NumGta                           := '';
  DadosAnimal.DtaEmissaoGta                    := 0;
  DadosAnimal.NumnotaFiscal                    := -1;
  DadosAnimal.IndAptoCobertura                 := '';
  DadosAnimal.IndTouroApto                     := '';
  DadosAnimal.IndVacaPrenha                    := '';
  DadosAnimal.DtaDesativacao                   := 0;

  // Obtem dados do animal
  Q := THerdomQuery.Create(conexao, nil);
  try
    try


      // Verifica o país informado
      Q.SQL.Clear;
{$IFDEF MSSQL}
      Q.SQL.Add('select cod_animal, ' +
                '       cod_fazenda_manejo, ' +
                '       cod_animal_manejo, ' +
                '       cod_animal_certificadora, ' +
                '       cod_pais_sisbov, ' +
                '       cod_estado_sisbov, ' +
                '       cod_micro_regiao_sisbov, ' +
                '       cod_animal_sisbov, ' +
                '       num_dv_sisbov, ' +
                '       cod_situacao_sisbov, ' +
                '       dta_identificacao_sisbov, ' +
                '       num_imovel_identificacao, ' +
                '       cod_propriedade_identificacao, ' +
                '       cod_fazenda_identificacao, ' +
                '       dta_nascimento, ' +
                '       num_imovel_nascimento, ' +
                '       cod_propriedade_nascimento, ' +
                '       cod_fazenda_nascimento, ' +
                '       dta_compra, ' +
                '       cod_pessoa_secundaria_criador, ' +
                '       nom_animal, ' +
                '       des_apelido, ' +
                '       cod_associacao_raca, ' +
                '       cod_grau_sangue, ' +
                '       cod_especie, ' +
                '       cod_aptidao, ' +
                '       cod_raca, ' +
                '       cod_pelagem, ' +
                '       ind_sexo, ' +
                '       cod_tipo_origem, ' +
                '       cod_animal_pai, ' +
                '       cod_animal_mae, ' +
                '       cod_animal_receptor, ' +
                '       ind_animal_castrado, ' +
                '       cod_regime_alimentar, ' +
                '       cod_categoria_animal, ' +
                '       cod_tipo_lugar, ' +
                '       cod_lote_corrente, ' +
                '       cod_local_corrente, ' +
                '       cod_fazenda_corrente, ' +
                '       num_imovel_corrente, ' +
                '       cod_propriedade_corrente, ' +
                '       num_cnpj_cpf_corrente, ' +
                '       cod_pessoa_corrente, ' +
                '       cod_pessoa_secundaria_corrente, ' +
                '       dta_ultimo_evento, ' +
                '       dta_aplicacao_ultimo_evento, ' +
                '       num_transponder, ' +
                '       cod_tipo_identificador_1, ' +
                '       cod_posicao_identificador_1, ' +
                '       cod_tipo_identificador_2, ' +
                '       cod_posicao_identificador_2, ' +
                '       cod_tipo_identificador_3, ' +
                '       cod_posicao_identificador_3, ' +
                '       cod_tipo_identificador_4, ' +
                '       cod_posicao_identificador_4, ' +
                '       num_gta, ' +
                '       dta_emissao_gta, ' +
                '       num_nota_fiscal, ' +
                '       cod_registro_log, ' +
                '       dta_efetivacao_cadastro, ' +
                '       cod_arquivo_sisbov, ' +
                '       -1 as cod_animal_associado, ' +
                '       ind_apto_cobertura, ' +
                '       dta_desativacao ' +
                '  from tab_animal ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and dta_fim_validade is null ');
      if CodAnimal > 0 then begin
        Q.SQL.Add('   and cod_animal = :cod_animal ');
      end;
{$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      if CodAnimal > 0 then begin
        Q.ParamByName('cod_animal').AsInteger := CodAnimal;
      end;
      Q.Open;
      if Q.IsEmpty then begin
         if CodAnimal > 0 then begin
            Mensagens.Adicionar(692, Self.ClassName, NomeMetodo, []);
            Result := -692;
            Exit;
         end;
      end;

      DadosAnimal.CodAnimal                   := Q.FieldByName('cod_animal').AsInteger;
      DadosAnimal.CodFazendaManejo            := Q.FieldByName('cod_fazenda_manejo').AsInteger;
      DadosAnimal.CodAnimalManejo             := Q.FieldByName('cod_animal_manejo').AsString;
      DadosAnimal.CodAnimalCertificadora      := Q.FieldByName('cod_animal_certificadora').AsString;
      DadosAnimal.CodPaisSisbov               := Q.FieldByName('cod_pais_sisbov').AsInteger;
      DadosAnimal.CodEstadoSisbov             := Q.FieldByName('cod_estado_sisbov').AsInteger;
      DadosAnimal.CodMicroRegiaoSisbov        := Q.FieldByName('cod_micro_regiao_sisbov').AsInteger;
      DadosAnimal.CodAnimalSisbov             := Q.FieldByName('cod_animal_sisbov').AsInteger;
      DadosAnimal.NumDVSisbov                 := Q.FieldByName('num_dv_sisbov').AsInteger;
      DadosAnimal.CodSituacaoSisbov           := Q.FieldByName('cod_situacao_sisbov').AsString;
      DadosAnimal.DtaIdentificacaoSisbov      := Trunc(Q.FieldByName('dta_identificacao_sisbov').AsDateTime);
      DadosAnimal.NumImovelIdentificacao      := Q.FieldByName('num_imovel_identificacao').AsString;
      DadosAnimal.CodPropriedadeIdentificacao := Q.FieldByName('cod_propriedade_identificacao').AsInteger;
      DadosAnimal.CodFazendaIdentificacao     := Q.FieldByName('cod_fazenda_identificacao').AsInteger;
      DadosAnimal.DtaNascimento               := Q.FieldByName('dta_nascimento').AsDateTime;
      DadosAnimal.NumImovelNascimento         := Q.FieldByName('num_imovel_nascimento').AsString;
      DadosAnimal.CodPropriedadeNascimento    := Q.FieldByName('cod_propriedade_nascimento').AsInteger;
      DadosAnimal.CodFazendaNascimento        := Q.FieldByName('cod_fazenda_nascimento').AsInteger;
      DadosAnimal.DtaCompra                   := Q.FieldByName('dta_compra').AsDatetime;
      DadosAnimal.CodPessoaSecundariaCriador  := Q.FieldByName('cod_pessoa_secundaria_criador').AsInteger;
      DadosAnimal.NomAnimal                   := Q.FieldByName('nom_animal').AsString;
      DadosAnimal.DesApelido                  := Q.FieldByName('des_apelido').AsString;
      DadosAnimal.CodAssociacaoRaca           := Q.FieldByName('cod_associacao_raca').AsInteger;
      DadosAnimal.CodGrauSangue               := Q.FieldByName('cod_grau_sangue').AsInteger;
      DadosAnimal.CodEspecie                  := Q.FieldByName('cod_especie').AsInteger;
      DadosAnimal.CodAptidao                  := Q.FieldByName('cod_aptidao').AsInteger;
      DadosAnimal.CodRaca                     := Q.FieldByName('cod_raca').AsInteger;
      DadosAnimal.CodPelagem                  := Q.FieldByName('cod_pelagem').AsInteger;
      DadosAnimal.IndSexo                     := Q.FieldByName('ind_sexo').AsString;
      DadosAnimal.CodTipoOrigem               := Q.FieldByName('cod_tipo_origem').AsInteger;
      DadosAnimal.CodAnimalPai                := Q.FieldByName('cod_animal_pai').AsInteger;
      DadosAnimal.CodAnimalMae                := Q.FieldByName('cod_animal_mae').AsInteger;
      DadosAnimal.CodAnimalReceptor           := Q.FieldByName('cod_animal_receptor').AsInteger;
      DadosAnimal.IndAnimalCastrado           := Q.FieldByName('ind_animal_castrado').AsString;
      DadosAnimal.CodRegimeAlimentar          := Q.FieldByName('cod_regime_alimentar').AsInteger;
      DadosAnimal.CodCategoriaAnimal          := Q.FieldByName('cod_categoria_animal').AsInteger;
      DadosAnimal.CodTipoLugar                := Q.FieldByName('cod_tipo_lugar').AsInteger;
      DadosAnimal.CodLoteCorrente             := Q.FieldByName('cod_lote_corrente').AsInteger;
      DadosAnimal.CodLocalCorrente            := Q.FieldByName('cod_local_corrente').AsInteger;
      DadosAnimal.CodFazendaCorrente          := Q.FieldByName('cod_fazenda_corrente').AsInteger;
      DadosAnimal.NumImovelCorrente           := Q.FieldByName('num_imovel_corrente').AsString;
      DadosAnimal.CodPropriedadeCorrente      := Q.FieldByName('cod_propriedade_corrente').AsInteger;
      DadosAnimal.NumCNPJCPFCorrente          := Q.FieldByName('num_cnpj_cpf_corrente').AsString;
      DadosAnimal.CodPessoaCorrente           := Q.FieldByName('cod_pessoa_corrente').AsInteger;
      DadosAnimal.CodPessoaSecundariaCorrente := Q.FieldByName('cod_pessoa_secundaria_corrente').AsInteger;
      DadosAnimal.DtaUltimoEvento             := Q.FieldByName('dta_ultimo_evento').AsDatetime;
      DadosAnimal.DtaAplicacaoUltimoEvento    := Q.FieldByName('dta_aplicacao_ultimo_evento').AsDatetime;
      DadosAnimal.NumTransponder              := Q.FieldByName('num_transponder').AsString;
      DadosAnimal.CodTipoIdentificador1       := Q.FieldByName('cod_tipo_identificador_1').AsInteger;
      DadosAnimal.CodPosicaoIdentificador1    := Q.FieldByName('cod_posicao_identificador_1').AsInteger;
      DadosAnimal.CodTipoIdentificador2       := Q.FieldByName('cod_tipo_identificador_2').AsInteger;
      DadosAnimal.CodPosicaoIdentificador2    := Q.FieldByName('cod_posicao_identificador_2').AsInteger;
      DadosAnimal.CodTipoIdentificador3       := Q.FieldByName('cod_tipo_identificador_3').AsInteger;
      DadosAnimal.CodPosicaoIdentificador3    := Q.FieldByName('cod_posicao_identificador_3').AsInteger;
      DadosAnimal.CodTipoIdentificador4       := Q.FieldByName('cod_tipo_identificador_4').AsInteger;
      DadosAnimal.CodPosicaoIdentificador4    := Q.FieldByName('cod_posicao_identificador_4').AsInteger;
      DadosAnimal.NumGta                      := Q.FieldByName('num_gta').AsString;
      DadosAnimal.DtaEmissaoGta               := Q.FieldByName('dta_emissao_gta').AsDateTime;
      DadosAnimal.NumnotaFiscal               := Q.FieldByName('num_nota_fiscal').AsInteger;
      DadosAnimal.CodRegistroLog              := Q.FieldByName('cod_registro_log').AsInteger;
      DadosAnimal.DtaEfetivacaoCadastro       := Q.FieldByName('dta_efetivacao_cadastro').AsDateTime;
      DadosAnimal.CodArquivoSisbov            := Q.FieldByName('cod_arquivo_sisbov').AsInteger;
      DadosAnimal.CodAnimalAssociado          := Q.FieldByName('cod_animal_associado').AsInteger;
      DadosAnimal.IndAptoCobertura            := Q.FieldByName('ind_apto_cobertura').AsString;
      DadosAnimal.DtaDesativacao              := Q.FieldByName('dta_desativacao').AsDateTime;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(693, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -693;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

procedure TIntEventos.MontaQueryInsertAnimalEvento;
begin
  FQueryAux1.SQLConnection := Conexao.SQLConnection;

  FQueryAux1.SQL.Clear;
  {$IFDEF MSSQL}
  FQueryAux1.SQL.Add('insert into tab_animal_evento ' +
                      '      (cod_pessoa_produtor, ' +
                      '       cod_evento, ' +
                      '       cod_animal, ' +
                      '       ind_animal_castrado, ' +
                      '       cod_regime_alimentar, ' +
                      '       cod_categoria_animal, ' +
                      '       cod_tipo_lugar, ' +
                      '       cod_lote_corrente, ' +
                      '       cod_local_corrente, ' +
                      '       cod_fazenda_corrente, ' +
                      '       num_imovel_corrente, ' +
                      '       cod_propriedade_corrente, ' +
                      '       num_cnpj_cpf_corrente, ' +
                      '       cod_pessoa_corrente, ' +
                      '       cod_pessoa_secundaria_corrente, ' +
                      '       ind_apto_cobertura, ' +
                      '       dta_desativacao, ' +
                      '       dta_ultimo_evento, ' +
                      '       dta_aplicacao_ultimo_evento, ' +
                      '       dta_aplicacao_evento, ' +
                      '       cod_animal_associado ) ' +
                      'values ' +
                      '      (:cod_pessoa_produtor, ' +
                      '       :cod_evento, ' +
                      '       :cod_animal, ' +
                      '       :ind_animal_castrado, ' +
                      '       :cod_regime_alimentar, ' +
                      '       :cod_categoria_animal, ' +
                      '       :cod_tipo_lugar, ' +
                      '       :cod_lote_corrente, ' +
                      '       :cod_local_corrente, ' +
                      '       :cod_fazenda_corrente, ' +
                      '       :num_imovel_corrente, ' +
                      '       :cod_propriedade_corrente, ' +
                      '       :num_cnpj_cpf_corrente, ' +
                      '       :cod_pessoa_corrente, ' +
                      '       :cod_pessoa_secundaria_corrente, ' +
                      '       :ind_apto_cobertura, ' +
                      '       :dta_desativacao, ' +
                      '       :dta_ultimo_evento, ' +
                      '       :dta_aplicacao_ultimo_evento, ' +
                      '       :dta_aplicacao_evento, ' +
                      '       :cod_animal_associado ) ');
  {$ENDIF}
end;

function TIntEventos.InserirAnimalEvento(CodEvento: Integer; DtaAplicacaoEvento: TDateTime;
  DadosAnimal: TDadosAnimal): Integer;
const
  NomeMetodo : String = 'InserirAnimalEvento';
begin
  try
    FQueryAux1.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
    FQueryAux1.ParamByName('cod_evento').AsInteger := CodEvento;
    FQueryAux1.ParamByName('cod_animal').AsInteger := DadosAnimal.CodAnimal;

    if DadosAnimal.IndAnimalCastrado <> '' then begin
      FQueryAux1.ParamByName('ind_animal_castrado').AsString := DadosAnimal.IndAnimalCastrado;
    end Else begin
      FQueryAux1.ParamByName('ind_animal_castrado').DataType := ftString;
      FQueryAux1.ParamByName('ind_animal_castrado').Clear;
    end;

    if DadosAnimal.CodRegimeAlimentar > 0 then begin
      FQueryAux1.ParamByName('cod_regime_alimentar').AsInteger := DadosAnimal.CodRegimeAlimentar;
    end Else begin
      FQueryAux1.ParamByName('cod_regime_alimentar').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_regime_alimentar').Clear;
    end;

    if DadosAnimal.CodCategoriaAnimal > 0 then begin
      FQueryAux1.ParamByName('cod_categoria_animal').AsInteger := DadosAnimal.CodCategoriaAnimal;
    end Else begin
      FQueryAux1.ParamByName('cod_categoria_animal').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_categoria_animal').Clear;
    end;

    if DadosAnimal.CodTipoLugar > 0 then begin
      FQueryAux1.ParamByName('cod_tipo_lugar').AsInteger := DadosAnimal.CodTipoLugar;
    end Else begin
      FQueryAux1.ParamByName('cod_tipo_lugar').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_tipo_lugar').Clear;
    end;

    if DadosAnimal.CodLoteCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_lote_corrente').AsInteger := DadosAnimal.CodLoteCorrente;
    end Else begin
      FQueryAux1.ParamByName('cod_lote_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_lote_corrente').Clear;
    end;

    if DadosAnimal.CodLocalCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_local_corrente').AsInteger := DadosAnimal.CodLocalCorrente;
    end Else begin
      FQueryAux1.ParamByName('cod_local_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_local_corrente').Clear;
    end;

    if DadosAnimal.CodFazendaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_fazenda_corrente').AsInteger := DadosAnimal.CodFazendaCorrente;
    end Else begin
      FQueryAux1.ParamByName('cod_fazenda_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_fazenda_corrente').Clear;
    end;

    if DadosAnimal.NumImovelCorrente <> '' then begin
      FQueryAux1.ParamByName('num_imovel_corrente').AsString := DadosAnimal.NumImovelCorrente;
    end Else begin
      FQueryAux1.ParamByName('num_imovel_corrente').DataType := ftString;
      FQueryAux1.ParamByName('num_imovel_corrente').Clear;
    end;

    if DadosAnimal.CodPropriedadeCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_propriedade_corrente').AsInteger := DadosAnimal.CodPropriedadeCorrente;
    end Else begin
      FQueryAux1.ParamByName('cod_propriedade_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_propriedade_corrente').Clear;
    end;

    if DadosAnimal.NumCNPJCPFCorrente <> '' then begin
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').AsString := DadosAnimal.NumCNPJCPFCorrente;
    end Else begin
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').DataType := ftString;
      FQueryAux1.ParamByName('num_cnpj_cpf_corrente').Clear;
    end;

    if DadosAnimal.CodPessoaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_pessoa_corrente').AsInteger := DadosAnimal.CodPessoaCorrente;
    end Else begin
      FQueryAux1.ParamByName('cod_pessoa_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_pessoa_corrente').Clear;
    end;

    if DadosAnimal.CodPessoaSecundariaCorrente > 0 then begin
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').AsInteger := DadosAnimal.CodPessoaSecundariaCorrente;
    end Else begin
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_pessoa_secundaria_corrente').Clear;
    end;

    FQueryAux1.ParamByName('ind_apto_cobertura').AsString := DadosAnimal.IndAptoCobertura;

    if DadosAnimal.DtaDesativacao > 0 then begin
      FQueryAux1.ParamByName('dta_desativacao').AsDateTime := DadosAnimal.DtaDesativacao;
    end Else begin
      FQueryAux1.ParamByName('dta_desativacao').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_desativacao').Clear;
    end;

    if DadosAnimal.DtaUltimoEvento > 0 then begin
      FQueryAux1.ParamByName('dta_ultimo_evento').AsDateTime := DadosAnimal.DtaUltimoEvento;
    end Else begin
      FQueryAux1.ParamByName('dta_ultimo_evento').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_ultimo_evento').Clear;
    end;

    if DadosAnimal.DtaAplicacaoUltimoEvento > 0 then begin
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').AsDateTime := DadosAnimal.DtaAplicacaoUltimoEvento;
    end Else begin
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').DataType := ftDateTime;
      FQueryAux1.ParamByName('dta_aplicacao_ultimo_evento').Clear;
    end;

    FQueryAux1.ParamByName('dta_aplicacao_evento').AsDateTime := DtaAplicacaoEvento;

    if DadosAnimal.CodAnimalAssociado > 0 then begin
      FQueryAux1.ParamByName('cod_animal_associado').AsInteger := DadosAnimal.CodAnimalAssociado;
    end Else begin
      FQueryAux1.ParamByName('cod_animal_associado').DataType := ftInteger;
      FQueryAux1.ParamByName('cod_animal_associado').Clear;
    end;

    FQueryAux1.ExecSQL;
    Result := 0;
  except
    On E: exception do begin
      Rollback;
      Mensagens.Adicionar(860, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -860;
      Exit;
    end;
  end;
end;

function TIntEventos.InserirEnvioCertificado(CodPessoaProdutor: Integer;
  NomServicoEnvio, NumConhecimento: String): Integer;
const
  NomeMetodo: String = 'InserirEnvioCertificado';
var
  QueryLocal: THerdomQuery;
  CodEvento: Integer;
begin
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Result := -1;
    Exit;
  end;

  if Length(NomServicoEnvio) > 15 then
  begin
    Mensagens.Adicionar(2072, Self.ClassName, NomeMetodo, []);
    Result := -2072;
    Exit;    
  end;

  if Length(NumConhecimento) > 15 then
  begin
    Mensagens.Adicionar(2073, Self.ClassName, NomeMetodo, []);
    Result := -2073;
    Exit;
  end;

  try
    beginTran;

    // Insere o evento
    CodEvento := InserirEvento(CodPessoaProdutor, 35,
      Now, Now, '', '', -1);
    if CodEvento < 0 then
    begin
      Result := CodEvento;
      Exit;
    end;

    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Insere a capa do evento
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('INSERT INTO tab_evento_envio_certificado (');
        SQL.Add('  cod_pessoa_produtor,');
        SQL.Add('  cod_evento,');
        SQL.Add('  nom_servico_envio,');
        SQL.Add('  num_conhecimento');
        SQL.Add(') VALUES (');
        SQL.Add('  :cod_pessoa_produtor,');
        SQL.Add('  :cod_evento,');
        SQL.Add('  :nom_servico_envio,');
        SQL.Add('  :num_conhecimento');
        SQL.Add(')');

        ParamByName('cod_pessoa_produtor').AsInteger := CodPessoaProdutor;
        ParamByName('cod_evento').AsInteger := CodEvento;
        AtribuiParametro(QueryLocal, NomServicoEnvio, 'nom_servico_envio', '');
        AtribuiParametro(QueryLocal, NumConhecimento, 'num_conhecimento', '');

        ExecSQL;
      end;
    finally
      QueryLocal.Free;
    end;

    Commit;
    Result := CodEvento;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(2002, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2002;
    end;
  end;
end;

function TIntEventos.InserirErroAplicacaoEvento(CodEvento: Integer;
  CodAnimal: Integer; DesApelido: String; CodFazendaManejo: Integer;
  CodAnimalManejo, CodAnimalCertificadora, CodSituacaoSisbov: String;
  CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodAnimalSisbov,
  NumDVSisbov, CodRaca: Integer; IndSexo: String; CodTipoOrigem,
  CodCategoriaAnimal, CodLocalCorrente, CodLoteCorrente, CodTipoLugar,
  QtdPesoAnimal: Integer; IndTouroApto, IndVacaPrenha, TxtMensagem,
  IndOperacaoRemocao: String; CodTipoMensagem: Integer): Integer;
const
  NomeMetodo : String = 'InserirErroAplicacaoEvento';
var
  QueryLocal: THerdomQuery;
begin
  try
    QueryLocal := THerdomQuery.Create(conexao, nil);
    try
      // Exclui o registro de erro anterior do animal se exsitir algum
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('delete from tab_erro_aplicacao_evento');
        SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   and cod_evento = :cod_evento');
        SQL.Add('   and cod_animal = :cod_animal');
        SQL.Add('   and ind_operacao_remocao = :ind_operacao_remocao');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_animal').AsInteger := CodAnimal;
        ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
        ExecSQL;
      end;

      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('insert into tab_erro_aplicacao_evento');
        SQL.Add('      (cod_pessoa_produtor,');
        SQL.Add('       cod_evento,');
        SQL.Add('       cod_animal,');
        SQL.Add('       cod_tipo_mensagem,');
        SQL.Add('       ind_operacao_remocao,');
        SQL.Add('       dta_aplicacao_evento,');
        SQL.Add('       txt_mensagem,');
        SQL.Add('       des_apelido,');
        SQL.Add('       cod_fazenda_manejo,');
        SQL.Add('       cod_animal_manejo,');
        SQL.Add('       cod_animal_certificadora,');
        SQL.Add('       cod_situacao_sisbov,');
        SQL.Add('       cod_pais_sisbov,');
        SQL.Add('       cod_estado_sisbov,');
        SQL.Add('       cod_micro_regiao_sisbov,');
        SQL.Add('       cod_animal_sisbov,');
        SQL.Add('       num_dv_sisbov,');
        SQL.Add('       cod_raca,');
        SQL.Add('       ind_sexo,');
        SQL.Add('       cod_tipo_origem,');
        SQL.Add('       cod_categoria_animal,');
        SQL.Add('       cod_local_corrente,');
        SQL.Add('       cod_lote_corrente,');
        SQL.Add('       cod_tipo_lugar,');
        SQL.Add('       qtd_peso_animal,');
        SQL.Add('       ind_touro_apto,');
        SQL.Add('       ind_vaca_prenha)');
        SQL.Add('values');
        SQL.Add('      (:cod_pessoa_produtor,');
        SQL.Add('       :cod_evento,');
        SQL.Add('       :cod_animal,');
        SQL.Add('       :cod_tipo_mensagem,');
        SQL.Add('       :ind_operacao_remocao,');
        SQL.Add('       :dta_aplicacao_evento,');
        SQL.Add('       :txt_mensagem,');
        SQL.Add('       :des_apelido,');
        SQL.Add('       :cod_fazenda_manejo,');
        SQL.Add('       :cod_animal_manejo,');
        SQL.Add('       :cod_animal_certificadora,');
        SQL.Add('       :cod_situacao_sisbov,');
        SQL.Add('       :cod_pais_sisbov,');
        SQL.Add('       :cod_estado_sisbov,');
        SQL.Add('       :cod_micro_regiao_sisbov,');
        SQL.Add('       :cod_animal_sisbov,');
        SQL.Add('       :num_dv_sisbov,');
        SQL.Add('       :cod_raca,');
        SQL.Add('       :ind_sexo,');
        SQL.Add('       :cod_tipo_origem,');
        SQL.Add('       :cod_categoria_animal,');
        SQL.Add('       :cod_local_corrente,');
        SQL.Add('       :cod_lote_corrente,');
        SQL.Add('       :cod_tipo_lugar,');
        SQL.Add('       :qtd_peso_animal,');
        SQL.Add('       :ind_touro_apto,');
        SQL.Add('       :ind_vaca_prenha)');

        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_tipo_mensagem').AsInteger := CodTipoMensagem;
        ParamByName('cod_animal').AsInteger := CodAnimal;
        ParamByName('ind_operacao_remocao').AsString := IndOperacaoRemocao;
        ParamByName('dta_aplicacao_evento').AsDateTime := Now;
        ParamByName('txt_mensagem').AsMemo := TxtMensagem;
        ParamByName('des_apelido').AsString := DesApelido;
        ParamByName('cod_fazenda_manejo').AsInteger := CodFazendaManejo;
        ParamByName('cod_animal_manejo').AsString := CodAnimalManejo;
        ParamByName('cod_animal_certificadora').AsString := CodAnimalCertificadora;
        ParamByName('cod_situacao_sisbov').AsString := CodSituacaoSisbov;
        ParamByName('cod_pais_sisbov').AsInteger := CodPaisSisbov;
        ParamByName('cod_estado_sisbov').AsInteger := CodEstadoSisbov;
        ParamByName('cod_micro_regiao_sisbov').AsInteger := CodMicroRegiaoSisbov;
        ParamByName('cod_animal_sisbov').AsInteger := CodAnimalSisbov;
        ParamByName('num_dv_sisbov').AsInteger := NumDVSisbov;
        ParamByName('cod_raca').AsInteger := CodRaca;
        ParamByName('ind_sexo').AsString := IndSexo;
        ParamByName('cod_tipo_origem').AsInteger := CodTipoOrigem;
        ParamByName('cod_categoria_animal').AsInteger := CodCategoriaAnimal;
        ParamByName('cod_local_corrente').AsInteger := CodLocalCorrente;
        ParamByName('cod_lote_corrente').AsInteger := CodLoteCorrente;
        ParamByName('cod_tipo_lugar').AsInteger := CodTipoLugar;
        ParamByName('qtd_peso_animal').AsFloat := QtdPesoAnimal;
        ParamByName('ind_touro_apto').AsString := IndTouroApto;
        ParamByName('ind_vaca_prenha').AsString := IndVacaPrenha;
        ExecSQL;
      end;

      Result := 0;
    finally
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(859, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -859;
      Exit;
    end;
  end;
end;

function TIntEventos.InserirAnimaisVendidos(CodEvento: Integer): Integer;
const
  NomeMetodo: String = 'InserirAnimaisVendidor';
var
  Q2, Q3, QueryLocal: THerdomQuery;
  CodProdutorDestino,

  CodFazendaDestino,
  CodLocal,
  CodCategoriaAnimal,
  CodRegimeAlimentar,
  ProdutorTrabalho: Integer;
  NumGTA,
  NumImovelNascimento: String;
  DtaEmissaoGTA,
  DtaVenda: TDateTime;
  Animais: TIntAnimais;
  QtdErrados,
  CodARaca, QtdAplicados: Integer;
  StrNrSisBov, NumRGD, CodAnimalCertificadora, NomePessoaProdutor: String;
  RetornoCDASisbov: RetornoConsultarDadosAnimal;
  SoapSisbov: TIntSoapSisbov;
begin
  Animais := nil;
//  RetornoCDASisbov := nil;
  CodARaca := 0;
  NumRGD   := '';

  QtdErrados := 0;
  QtdAplicados := 0;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Result := -1;
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(603) then begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  ProdutorTrabalho := Conexao.CodProdutorTrabalho;
  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    Q2         := THerdomQuery.Create(Conexao, nil);
    Q3         := THerdomQuery.Create(Conexao, nil);
    SoapSisbov := TIntSoapSisbov.Create;
    try
      // Verifica se o evento está efetivado
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select dta_inicio,');
        SQL.Add('       cod_situacao_sisbov');
        SQL.Add('  from tab_evento');
        SQL.Add(' where cod_evento = :cod_evento');
        SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor');
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(2015, Self.ClassName, NomeMetodo,
            [IntToStr(CodEvento)]);
          Result := -2015;
          Exit;
        end;

        DtaVenda := FieldByName('dta_inicio').AsDateTime;
      end;

      // Verifica se a propriedade de destino do evento se encontra na base de
      // dados da certificadora
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select tevc.cod_pessoa, ');
        SQL.Add('       tf.cod_propriedade_rural, ');
        SQL.Add('       tf.cod_fazenda, ');
        SQL.Add('       tevc.num_gta, ');
        SQL.Add('       tevc.dta_emissao_gta ');
        SQL.Add('  from tab_evento_venda_criador tevc, ');
        SQL.Add('       tab_fazenda tf ');
        SQL.Add(' where tf.cod_pessoa_produtor = tevc.cod_pessoa ');
        SQL.Add('   and tf.cod_propriedade_rural = tevc.cod_propriedade_rural ');
        SQL.Add('   and tevc.cod_evento = :cod_evento ');
        SQL.Add('   and tevc.cod_pessoa_produtor = :cod_pessoa_produtor ');
        SQL.Add('   and tf.dta_fim_validade is null ');
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(2010, Self.ClassName, NomeMetodo,
            [IntToStr(CodEvento)]);
          Result := -2010;
          Exit;
        end;

        CodFazendaDestino       := FieldByName('cod_fazenda').AsInteger;
        CodProdutorDestino      := FieldByName('cod_pessoa').AsInteger;
        NumGTA                  := FieldByName('num_gta').AsString;
        DtaEmissaoGTA := FieldByName('dta_emissao_gta').AsDateTime;
      end;

{      // Verifica se a propriedade de destino foi exportada para o SISBOV
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select 1');
        SQL.Add('  from tab_localizacao_sisbov');
        SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   and cod_propriedade_rural = :cod_propriedade_rural');
        SQL.Add('   and cod_arquivo_sisbov is not null');
        ParamByName('cod_pessoa_produtor').AsInteger := CodProdutorDestino;
        ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeDestino;

        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(2012, Self.ClassName, NomeMetodo,
            [IntToStr(CodEvento)]);
          Result := -2012;
          Exit;
        end;
      end;
} // Daniel - 20/09/2005 -> removida a consistência pois o sistema irá inserir
  // animais não rastreados

      // Obtem o local principal do produtor
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select cod_local');
        SQL.Add('  from tab_local');
        SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   and cod_fazenda = :cod_fazenda');
        SQL.Add('   and ind_principal = ''S''');
        SQL.Add('   and dta_fim_validade is null');
        ParamByName('cod_pessoa_produtor').AsInteger := CodProdutorDestino;
        ParamByName('cod_fazenda').AsInteger := CodFazendaDestino;

        Open;

        CodLocal := FieldByName('cod_local').AsInteger;
      end;

      BeginTran;
      // Exclui os erros do ultimo processamento do evento
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('delete from tab_erro_aplicacao_evento');
        SQL.Add(' where cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   and cod_evento = :cod_evento');
        SQL.Add('   and ind_operacao_remocao = ''N''');
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ExecSQL;
      end;

      Commit;

      // Prepara a query para buscar os dados dos animais do evento
      with QueryLocal do
      begin
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('select ta.cod_animal,');
        SQL.Add('       ta.cod_fazenda_manejo,');
        SQL.Add('       ta.cod_tipo_origem,');
        SQL.Add('       ta.cod_local_corrente,');
        SQL.Add('       ta.cod_lote_corrente,');
        SQL.Add('       ta.cod_tipo_lugar,');
        SQL.Add('       ta.cod_animal_manejo, -- CodAnimalManejo');
        SQL.Add('       ta.cod_animal_certificadora, -- CodAnimalCertificadora');
        SQL.Add('       isNull(ta.cod_pais_sisbov, -1) as cod_pais_sisbov, -- CodPaisSISBOV');
        SQL.Add('       isNull(ta.cod_estado_sisbov, -1) as cod_estado_sisbov, -- CodEstadoSISBOV');
        SQL.Add('       isNull(ta.cod_micro_regiao_sisbov, -2) as cod_micro_regiao_sisbov, -- CodMicroRegiaoSISBOV');
        SQL.Add('       isNull(ta.cod_animal_sisbov, -1) as cod_animal_sisbov, -- CodAnimalSISBOV');
        SQL.Add('       isNull(CAST(ta.num_dv_sisbov AS INTEGER), -1) as num_dv_sisbov, -- NumDvSISBOV');
        SQL.Add('       ta.cod_situacao_sisbov, -- CodSituacaoSISBOV');
        SQL.Add('       ta.dta_identificacao_sisbov, -- DtaIdentificacaoSISBOV');
        SQL.Add('       ta.num_imovel_identificacao, -- NumImovelIdentificacao');
        SQL.Add('       isNull(ta.cod_propriedade_identificacao, -1) as cod_propriedade_identificacao, -- CodPropriedadeIdentificacao');
        SQL.Add('       isNull(ta.cod_fazenda_identificacao, -1) as cod_fazenda_identificacao, -- CodFazendaIdentificacao');
        SQL.Add('       ta.dta_nascimento, -- DtaNascimento');
        SQL.Add('       ta.num_imovel_nascimento, -- NumImovelNascimento');
        SQL.Add('       isNull(ta.cod_propriedade_nascimento, -1) as cod_propriedade_nascimento, -- CodPropriedadeNascimento');
        SQL.Add('       ta.nom_animal, -- NomAnimal');
        SQL.Add('       ta.des_apelido, -- DesApelido');
        SQL.Add('       IsNull(ta.cod_associacao_raca, -1) as cod_associacao_raca, -- CodAssociacaoRaca');
        SQL.Add('       IsNull(ta.cod_grau_sangue, -1) as cod_grau_sangue, -- CodGrauSangue');
        SQL.Add('       ta.num_rgd, -- NumRGD');
        SQL.Add('       ta.num_transponder, -- NumTransponder');
        SQL.Add('       ta.cod_tipo_identificador_1, -- CodTipoIdentificador1');
        SQL.Add('       ta.cod_posicao_identificador_1, -- CodPosicaoIdentificador1');
        SQL.Add('       ta.cod_tipo_identificador_2, -- CodTipoIdentificador2');
        SQL.Add('       ta.cod_posicao_identificador_2, -- CodPosicaoIdentificador2');
        SQL.Add('       ta.cod_tipo_identificador_3, -- CodTipoIdentificador3');
        SQL.Add('       ta.cod_posicao_identificador_3, -- CodPosicaoIdentificador3');
        SQL.Add('       ta.cod_tipo_identificador_4, -- CodTipoIdentificador4');
        SQL.Add('       ta.cod_posicao_identificador_4, -- CodPosicaoIdentificador4');
        SQL.Add('       ta.cod_especie, -- CodEspecie');
        SQL.Add('       ta.cod_aptidao, -- CodAptidao');
        SQL.Add('       ta.cod_raca, -- CodRaca');
        SQL.Add('       ta.cod_pelagem, -- CodPelagem');
        SQL.Add('       ta.ind_sexo, -- IndSexo');
        SQL.Add('       ta.ind_animal_castrado, -- IndAnimalCastrado');
        SQL.Add('       ta.cod_regime_alimentar, -- CodRegimeAlimentar');
        SQL.Add('       tae.cod_categoria_animal -- CodCategoriaAnimal');
        SQL.Add('  from tab_animal_evento tae,');
        SQL.Add('       tab_animal ta');
        SQL.Add(' where (ta.cod_pessoa_produtor = :cod_pessoa_produtor or ');
        SQL.Add('        ta.cod_pessoa_corrente = :cod_pessoa_produtor )');
        SQL.Add('   and tae.cod_evento = :cod_evento');
        SQL.Add('   and (ta.cod_pessoa_produtor = tae.cod_pessoa_produtor or ');
        SQL.Add('        ta.cod_pessoa_corrente = tae.cod_pessoa_produtor) ');
        SQL.Add('   and ta.cod_animal = tae.cod_animal');
{$ENDIF}
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        Open;

        // Verifica se existem animais no evento
        if IsEmpty then
        begin
          Mensagens.Adicionar(2011, Self.ClassName, NomeMetodo,[IntToStr(CodEvento)]);
          Result := -2011;
          Exit;
        end;

        BeginTran;
        // Insere os animais do evento para o produtor de destino
        Animais := TIntAnimais.Create;
        Animais.Inicializar(Conexao, Mensagens);

        while not QueryLocal.Eof do
        begin
          try
            RetornoCDASisbov := nil;

            // Muda o produtor de trabalho para inserir os animais
            Result := Conexao.DefinirProdutorTrabalho(CodProdutorDestino, NomePessoaProdutor);
            if Result < 0 then
            begin
              Exit;
            end;
            if Result > 0 then
            begin
              Mensagens.Adicionar(2021, Self.ClassName, NomeMetodo,
                [IntToStr(QtdAplicados), IntToStr(QtdErrados)]);
              Result := -2021;
              Exit;
            end;

            // trocar vaca parida e em lactação para vaca solteiro e seca respectivamente
            CodCategoriaAnimal := FieldByName('cod_categoria_animal').AsInteger;
            if CodCategoriaAnimal = 6 then
            begin
              CodCategoriaAnimal := 7;
            end
            else
            if CodCategoriaAnimal = 8 then
            begin
              CodCategoriaAnimal := 9;
            end;
            CodRegimeAlimentar := 99;

            NumImovelNascimento := '';
            if FieldByName('cod_propriedade_nascimento').AsInteger <= 0 then
            begin
              NumImovelNascimento := FieldByName('num_imovel_nascimento').AsString;
            end;

            if FieldByName('cod_situacao_sisbov').AsString = 'N' then
            begin
              CodAnimalCertificadora := '';
            end
            else
            begin
              CodAnimalCertificadora := FieldByName('cod_animal_certificadora').AsString;
            end;

            // Se o codigo micro região sisbov for igual -1, retira-se o codigo micro regiao
            // e insere no início o código do país, de acordo com as novas implementações do sisbov
            StrNrSisBov := '';
            if FieldByName('cod_micro_regiao_sisbov').AsString = '-1' then begin
              StrNrSisBov := StrNrSisBov + '105' +
                                 PadL(FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                 PadL(FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                 PadL(FieldByName('num_dv_sisbov').AsString, '0', 1);
            end else begin
              // Se o codigo micro região sisbov for igual 0, muda para 00. De acordo
              // com as novas implementações do sisbov
              if FieldByName('cod_micro_regiao_sisbov').AsString = '0' then begin
                StrNrSisBov := StrNrSisBov + '105' +
                                 PadL(FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                 '00' +
                                 PadL(FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                 PadL(FieldByName('num_dv_sisbov').AsString, '0', 1);
              end else begin
                StrNrSisBov := StrNrSisBov + '105' +
                                 PadL(FieldByName('cod_estado_sisbov').AsString, '0', 2) +
                                 PadL(FieldByName('cod_micro_regiao_sisbov').AsString, '0', 2) +
                                 PadL(FieldByName('cod_animal_sisbov').AsString, '0', 9) +
                                 PadL(FieldByName('num_dv_sisbov').AsString, '0', 1);
              end;
            end;

            //-------------------------------------------------------
            // Busca no sistema SISBOV o código autenticação do animal
            // para impressao posteriormente do DIA
            SoapSisbov.Inicializar(Conexao, Mensagens);
            // Conectado := SoapSisbov.conectado('Animais');

            try
              RetornoCDASisbov := SoapSisbov.consultarDadosAnimal(
                               Descriptografar(ValorParametro(118))
                             , Descriptografar(ValorParametro(119))
                             , StrNrSisBov);
            except
              on E: Exception do
              begin
                Mensagens.Adicionar(2391, Self.ClassName, NomeMetodo, [StrNrSisBov]);
                Result := -2391;
              end;
            end;

            If RetornoCDASisbov <> nil then begin
              If RetornoCDASisbov.Status = 1 then begin
                if RetornoCDASisbov.numeroDefinitivo <> 'true' then begin
                  CodARaca := 1;
                  NumRGD   := RetornoCDASisbov.numeroDefinitivo;
                end else if RetornoCDASisbov.numeroProvisorio <> 'true' then begin
                  CodARaca := 1;
                  NumRGD   := RetornoCDASisbov.numeroProvisorio;
                end;

                Q2.SQL.Clear;
                Q2.SQL.Add(' select cod_raca from ' +
                           '    tab_raca ' +
                           ' where des_raca = :des_raca ');

                Q2.ParamByName('des_raca').AsString := RetornoCDASisbov.raca;
                Q2.Open;

                if not Q2.IsEmpty then begin
                  Q3.SQL.Clear;
                  Q3.SQL.Add(' select cod_tipo_identificador_1  ' +
                             '    ,   cod_tipo_identificador_2  ' +
                             ' from   tab_identificacao_dupla tid ' +
                             '    ,   tab_ident_dupla_tipo_ident tit ' +
                             ' where  tid.cod_identificacao_dupla_sisbov = :cod_identificacao_dupla_sisbov ' +
                             '   and  tid.cod_identificacao_dupla = tit.cod_identificacao_dupla ' +
                             '   and  tit.ind_ident_default_sisbov = ''S'' ');

                  Q3.ParamByName('cod_identificacao_dupla_sisbov').AsString := RetornoCDASisbov.tipoIdentificacao;
                  Q3.Open;

                  if not Q3.IsEmpty then begin
                    Result := Animais.InserirComprado(CodFazendaDestino,
                      FieldByName('cod_animal_manejo').AsString,
                      CodAnimalCertificadora,
                      FieldByName('cod_pais_sisbov').AsInteger,
                      FieldByName('cod_estado_sisbov').AsInteger,
                      FieldByName('cod_micro_regiao_sisbov').AsInteger,
                      FieldByName('cod_animal_sisbov').AsInteger,
                      FieldByName('num_dv_sisbov').AsInteger,
                      FieldByName('cod_situacao_sisbov').AsString,
                      EncodeDate(StrToInt(copy(RetornoCDASisbov.dataIdentificacao,1,4)), StrToInt(copy(RetornoCDASisbov.dataIdentificacao,6,2)), StrToInt(copy(RetornoCDASisbov.dataIdentificacao,9,2))),
                      FieldByName('num_imovel_identificacao').AsString,
                      FieldByName('cod_propriedade_identificacao').AsInteger,
                      FieldByName('cod_fazenda_identificacao').AsInteger,
                      EncodeDate(StrToInt(copy(RetornoCDASisbov.dataNascimento,1,4)), StrToInt(copy(RetornoCDASisbov.dataNascimento,6,2)), StrToInt(copy(RetornoCDASisbov.dataNascimento,9,2))),
                      NumImovelNascimento,
                      FieldByName('cod_propriedade_nascimento').AsInteger,
                      DtaVenda, // Data da venda
                      -1, // CodPessoaSecundária
                      FieldByName('nom_animal').AsString,
                      FieldByName('des_apelido').AsString,
                      CodARaca,
                      FieldByName('cod_grau_sangue').AsInteger,
                      NumRGD,
                      FieldByName('num_transponder').AsString,
                      FieldByName('cod_tipo_identificador_1').AsInteger,
                      FieldByName('cod_posicao_identificador_1').AsInteger,
                      FieldByName('cod_tipo_identificador_2').AsInteger,
                      FieldByName('cod_posicao_identificador_2').AsInteger,
                      FieldByName('cod_tipo_identificador_3').AsInteger,
                      FieldByName('cod_posicao_identificador_3').AsInteger,
                      FieldByName('cod_tipo_identificador_4').AsInteger,
                      FieldByName('cod_posicao_identificador_4').AsInteger,
                      FieldByName('cod_especie').AsInteger,
                      FieldByName('cod_aptidao').AsInteger,
                      Q2.FieldByName('cod_raca').AsInteger,
                      FieldByName('cod_pelagem').AsInteger,
                      Copy(RetornoCDASisbov.sexo,1,1),
                      -1, // CodFazendaMenejoPai
                      '', // CodAnimalPai
                      -1, // CodFazendaMenejoMae
                      '', // CodAnimalMae,
                      -1, // CodFazendaMenejoReceptor
                      '', // CodAnimalReceptor
                      FieldByName('ind_animal_castrado').AsString,
                      CodRegimeAlimentar,
                      CodCategoriaAnimal,
                      1, // CodTipoLugar: Fazenda do produtor
                      -1, // CodLoteCorrente
                      CodLocal,
                      CodFazendaDestino, // CodFazendaCorrente
                      -1, // CodPropriedadeCorrente
                      '', // NumCNPJCPFCorrente
                      -1, // CodPessoaCorrente
                      '',
                      NumGTA,
                      DtaEmissaoGTA,
                      -1, // NumnotaFiscal
                      'N', // IndCodigoSISBOVReservado
                      -1, // CodPessoaTécnico
                      '', // NumCNPJTécnico
                      FieldByName('cod_animal').AsInteger,
                      'S'); // IndChamadaInterna

                      if Result >= 0 then begin
                        Q2.SQL.Clear;
                        {$IFDEF MSSQL}
                           Q2.SQL.Add('update tab_animal ' +
                                      '   set ind_transmissao_sisbov  = ''S'' ' +
                                      '    ,  cod_autenticacao_sisbov = :cod_autenticacao_sisbov ' +
                                      '    ,  dta_insercao_sisbov     = :dta_insercao_sisbov ' +
                                      '    ,  cod_id_transacao_sisbov = :cod_id_transacao ' +
                                      ' where cod_animal              = :cod_animal ');
                        {$ENDIF}
                        Q2.ParamByName('cod_animal').AsInteger               := FieldByName('cod_animal').AsInteger;
                        Q2.ParamByName('cod_id_transacao').AsInteger         := RetornoCDASisbov.idTransacao;
                        Q2.ParamByName('dta_insercao_sisbov').AsString       := RetornoCDASisbov.dataInclusao;
                        Q2.ParamByName('cod_autenticacao_sisbov').AsString   := RetornoCDASisbov.dia;

                        Q2.ExecSQL;

                        // Este procedimento foi retirado porque o sisbov não retorna mais a data de
                        // previsão de abate e também porque da data de inserção sisbov passou para a tab_animal
//                        Q2.SQL.Clear;
//                        {$IFDEF MSSQL}
//                        Q2.SQL.Add('update tab_codigo_sisbov ' +
//                                  '   set dta_liberacao_abate     = :dta_liberacao_abate ' +
//                                  ' where cod_pais_sisbov         = :cod_pais_sisbov ' +
//                                  ' and   cod_estado_sisbov       = :cod_estado_sisbov ' +
//                                  ' and   cod_micro_regiao_sisbov = :cod_micro_regiao_sisbov ' +
//                                  ' and   cod_animal_sisbov       = :cod_animal_sisbov ');
//                        {$ENDIF}

//                        Q2.ParamByName('cod_pais_sisbov').AsInteger         := FieldByName('cod_pais_sisbov').AsInteger;
//                        Q2.ParamByName('cod_estado_sisbov').AsInteger       := FieldByName('cod_estado_sisbov').AsInteger;
//                        Q2.ParamByName('cod_micro_regiao_sisbov').AsInteger := FieldByName('cod_micro_regiao_sisbov').AsInteger;
//                        Q2.ParamByName('cod_animal_sisbov').AsInteger       := FieldByName('cod_animal_sisbov').AsInteger;

//                        if Length(Trim(RetornoCDASisbov.dataLiberacaoAbate)) > 0 then begin
//                          Q2.ParamByName('dta_liberacao_abate').AsString    := RetornoCDASisbov.dataLiberacaoAbate;
//                        end else begin
//                          Q2.ParamByName('dta_liberacao_abate').Datatype := ftDateTime;
//                          Q2.ParamByName('dta_liberacao_abate').Clear;
//                        end;

//                        Q2.ExecSQL;
                      end;
                  end else begin
                    Mensagens.Adicionar(2392, Self.ClassName, NomeMetodo, [StrNrSisBov]);
                    Result := -2392;
                  end;
                end else begin
                  Mensagens.Adicionar(2390, Self.ClassName, NomeMetodo, [StrNrSisBov]);
                  Result := -2390;
                end;
              end else begin
                Result := Animais.InserirComprado(CodFazendaDestino,
                  FieldByName('cod_animal_manejo').AsString,
                  CodAnimalCertificadora,
                  FieldByName('cod_pais_sisbov').AsInteger,
                  FieldByName('cod_estado_sisbov').AsInteger,
                  FieldByName('cod_micro_regiao_sisbov').AsInteger,
                  FieldByName('cod_animal_sisbov').AsInteger,
                  FieldByName('num_dv_sisbov').AsInteger,
                  FieldByName('cod_situacao_sisbov').AsString,
                  FieldByName('dta_identificacao_sisbov').AsDateTime,
                  FieldByName('num_imovel_identificacao').AsString,
                  FieldByName('cod_propriedade_identificacao').AsInteger,
                  FieldByName('cod_fazenda_identificacao').AsInteger,
                  FieldByName('dta_nascimento').AsDateTime,
                  NumImovelNascimento,
                  FieldByName('cod_propriedade_nascimento').AsInteger,
                  DtaVenda, // Data da venda
                  -1, // CodPessoaSecundária
                  FieldByName('nom_animal').AsString,
                  FieldByName('des_apelido').AsString,
                  FieldByName('cod_associacao_raca').AsInteger,
                  FieldByName('cod_grau_sangue').AsInteger,
                  FieldByName('num_rgd').AsString,
                  FieldByName('num_transponder').AsString,
                  FieldByName('cod_tipo_identificador_1').AsInteger,
                  FieldByName('cod_posicao_identificador_1').AsInteger,
                  FieldByName('cod_tipo_identificador_2').AsInteger,
                  FieldByName('cod_posicao_identificador_2').AsInteger,
                  FieldByName('cod_tipo_identificador_3').AsInteger,
                  FieldByName('cod_posicao_identificador_3').AsInteger,
                  FieldByName('cod_tipo_identificador_4').AsInteger,
                  FieldByName('cod_posicao_identificador_4').AsInteger,
                  FieldByName('cod_especie').AsInteger,
                  FieldByName('cod_aptidao').AsInteger,
                  FieldByName('cod_raca').AsInteger,
                  FieldByName('cod_pelagem').AsInteger,
                  FieldByName('ind_sexo').AsString,
                  -1, // CodFazendaMenejoPai
                  '', // CodAnimalPai
                  -1, // CodFazendaMenejoMae
                  '', // CodAnimalMae,
                  -1, // CodFazendaMenejoReceptor
                  '', // CodAnimalReceptor
                  FieldByName('ind_animal_castrado').AsString,
                  CodRegimeAlimentar,
                  CodCategoriaAnimal,
                  1, // CodTipoLugar: Fazenda do produtor
                  -1, // CodLoteCorrente
                  CodLocal,
                  CodFazendaDestino, // CodFazendaCorrente
                  -1, // CodPropriedadeCorrente
                  '', // NumCNPJCPFCorrente
                  -1, // CodPessoaCorrente
                  '',
                  NumGTA,
                  DtaEmissaoGTA,
                  -1, // NumnotaFiscal
                  'N', // IndCodigoSISBOVReservado
                  -1, // CodPessoaTécnico
                  '', // NumCNPJTécnico
                  FieldByName('cod_animal').AsInteger,
                  'S'); // IndChamadaInterna
              end;
            end else begin
              Mensagens.Adicionar(2391, Self.ClassName, NomeMetodo, [StrNrSisBov]);
              Result := -2391;
            end;
          finally
            // Volta ao produtor de trabalho
            Conexao.DefinirProdutorTrabalho(ProdutorTrabalho, NomePessoaProdutor);
          end;

          // Insere o erro caso ocorra
          if Result < 0 then
          begin
            Inc(QtdErrados);
            Result := InserirErroAplicacaoEvento(CodEvento,
              FieldByName('cod_animal').AsInteger,
              FieldByName('des_apelido').AsString,
              FieldByName('cod_fazenda_manejo').AsInteger,
              FieldByName('cod_animal_manejo').AsString,
              FieldByName('cod_animal_certificadora').AsString,
              FieldByName('cod_situacao_sisbov').AsString,
              FieldByName('cod_pais_sisbov').AsInteger,
              FieldByName('cod_estado_sisbov').AsInteger,
              FieldByName('cod_micro_regiao_sisbov').AsInteger,
              FieldByName('cod_animal_sisbov').AsInteger,
              FieldByName('num_dv_sisbov').AsInteger,
              FieldByName('cod_raca').AsInteger,
              FieldByName('ind_sexo').AsString,
              FieldByName('cod_tipo_origem').AsInteger,
              FieldByName('cod_categoria_animal').AsInteger,
              FieldByName('cod_local_corrente').AsInteger,
              FieldByName('cod_lote_corrente').AsInteger,
              FieldByName('cod_tipo_lugar').AsInteger,
              0,
              '',
              '',
              Mensagens.Items[Mensagens.Count - 1].Texto,
              'S',
              1);

            if Result < 0 then
            begin
              Exit;
            end;
          end
          else
          begin
            Inc(QtdAplicados);
          end;

          Mensagens.Clear;
          Next;
        end;
      end;
    finally
      QueryLocal.Free;
      Q2.Free;
      Q3.Free;
      SoapSisbov.Free;

      if Assigned(Animais) then
      begin
        Animais.Free;
      end;
    end;

    Commit;

    if QtdErrados > 0 then
    begin
      Mensagens.Adicionar(2020, Self.ClassName, NomeMetodo,
        [IntToStr(QtdAplicados), IntToStr(QtdErrados)]);
      Result := -2020;
    end
    else
    begin
      Mensagens.Adicionar(2019, Self.ClassName, NomeMetodo,
        [IntToStr(QtdAplicados)]);
      Result := 0;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(2009, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2009;
    end;
  end;
end;

{ Insere um evento de morte e retorna o código do evento. Caso exista um evento
  na mesma data e com o mesmo tipo de tipo de morte e causa de morte retorna o
  código deste evento.

Parametros:
  StrDataEvento: Data da morte do animal.
  TipoMorte: Tipo da morte do animal tab_tipo_morte
  CausaMorte: Causa da morte do animal tab_causa_morte
  CodFazenda: Código da fazenda onde o animal morreu.

Retorno:
  > 0 - código do evento que o animal deve ser inserido.
  < 0 - código do erro ocorrido.}
function TIntEventos.InserirMorteCargaInicial(StrDtaEvento, TipoMorte,
  CausaMorte: String; CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'InserirMorteCargaInicial';
  CodTipoEvento: Integer = 12;
var
  QueryLocal: THerdomQuery;
  DtaEvento: TDateTime;
  CodTipoMorte,
  CodCausaMorte: Integer;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Obtem a data da morte do animal
      try
        DtaEvento := EncodeDate(
          StrToInt(Copy(StrDtaEvento, 5, 4)),  // Ano
          StrToInt(Copy(StrDtaEvento, 3, 2)),  // Mes
          StrToInt(Copy(StrDtaEvento, 1, 2))); // Dia
      except
        on E: exception do
        begin
          raise exception.Create('Data da morte inválida: [' + E.Message + ']');
        end;
      end;

      // Obtem o código do tipo da morte
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT cod_tipo_morte');
        SQL.Add('  FROM tab_tipo_morte');
        SQL.Add(' WHERE cod_tipo_morte_sisbov = :cod_tipo_morte_sisbov');
        ParamByName('cod_tipo_morte_sisbov').AsString := Trim(TipoMorte);

        Open;
        if IsEmpty then
        begin
          raise exception.Create('Tipo de morte "' + TipoMorte + '" inválido.');
        end;

        CodTipoMorte := FieldByName('cod_tipo_morte').AsInteger;
      end;

      // Obtem o código da causa da morte
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT cod_causa_morte');
        SQL.Add('  FROM tab_causa_morte');
        SQL.Add(' WHERE des_causa_morte = :des_causa_morte');
        ParamByName('des_causa_morte').AsString := Trim(CausaMorte);

        Open;
        if IsEmpty then
        begin
          raise exception.Create('Causa da morte "' + CausaMorte +
            '" inválida.');
        end;

        CodCausaMorte := FieldByName('cod_causa_morte').AsInteger;
      end;

      // Obtem o código da causa da morte
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT 1');
        SQL.Add('  FROM tab_fazenda');
        SQL.Add(' WHERE cod_fazenda = :cod_fazenda');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');
        ParamByName('cod_fazenda').AsInteger := CodFazenda;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

        Open;
        if IsEmpty then
        begin
          raise exception.Create('Fazenda inválida.');
        end;
      end;

      // Verifica se existe um evento para o produtor/propriedade com as
      // mesmas caracteristicas
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT te.cod_evento');
        SQL.Add('  FROM tab_evento te, tab_evento_morte tem');
        SQL.Add(' WHERE te.cod_evento = tem.cod_evento');
        SQL.Add('   AND te.cod_pessoa_produtor = tem.cod_pessoa_produtor');
        SQL.Add('   AND te.cod_tipo_evento = 12');
        SQL.Add('   AND te.dta_inicio = :dta_inicio');
        SQL.Add('   AND te.cod_fazenda = :cod_fazenda');
        SQL.Add('   AND te.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND tem.cod_tipo_morte = :cod_tipo_morte');
        SQL.Add('   AND tem.cod_causa_morte = :cod_causa_morte');
        SQL.Add('   AND te.cod_situacao_sisbov <> ''I''');
        ParamByName('dta_inicio').AsDateTime := DtaEvento;
        ParamByName('cod_fazenda').AsInteger := CodFazenda;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_tipo_morte').AsInteger := CodTipoMorte;
        ParamByName('cod_causa_morte').AsInteger := CodCausaMorte;
        Open;

        if not IsEmpty then
        begin
          // Se o evento existie então o retorna
          Result := FieldByName('cod_evento').AsInteger;
          Exit;
        end;
      end;

      // Insere o evento
      Result := InserirMorte(DtaEvento, '', CodTipoMorte, CodCausaMorte,
        CodFazenda);
    finally
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2086, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2086;
      Exit;
    end;
  end;
end;

{ Insere um evento de venda para criador e retorna o código do evento. Caso
  exista um evento com os mesmos dados o código deste evento é retornado.

Parametros:
  StrDtaSaidaOrigem: data de saida do animal
  StrDtaChegadaDestino: Data de chegada do animal
  TipoInscricaoDestino: Tipo de inscrição do produtor de destino NIRF ou INCRA
  IDDestino: NIRF/INCRA do produtor + código da localização SISBOV
  CodFazenda: Código da fazenda de origem do evento

Retorno:
  > 0 - código do evento
  < 0 - código de erro}
function TIntEventos.InserirVendaCriadorCargaInicial(StrDtaSaidaOrigem,
  StrDtaChegadaDestino, StrDtaEmissaoGTA, TipoInscricaoDestino,
  IDDestino: String; CodFazenda: Integer): Integer;
const
  NomeMetodo: String = 'InserirVendaCriadorCargaInicial';
  CodTipoEvento: Integer = 9;
var
  QueryLocal: THerdomQuery;
  DtaEmissaoGTA,
  DtaChegadaDestino,
  DtaSaidaOrigem: TDateTime;
  CodPropriedadeRural,
  CodEvento,
  CodPessoa,
  CodLocalizacaoSISBOV: Integer;
  NomFazenda,
  TxtDados,
  CNPJ,
  Nome,
  NIRF: String;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  // Trata fazenda
  Result := VerificaFazenda(CodFazenda, False, 'Fazenda', NomFazenda);
  if Result < 0 then
  begin
    Exit;
  end;

  // Obtem a data de saida do animal
  try
    DtaSaidaOrigem := EncodeDate(
      StrToInt(Copy(StrDtaSaidaOrigem, 5, 4)),  // Ano
      StrToInt(Copy(StrDtaSaidaOrigem, 3, 2)),  // Mes
      StrToInt(Copy(StrDtaSaidaOrigem, 1, 2))); // Dia
  except
    on E: exception do
    begin
      raise exception.Create('Data de saida inválida: [' + E.Message + ']');
    end;
  end;

  // Obtem a data de chegada do animal
  try
    DtaChegadaDestino := EncodeDate(
      StrToInt(Copy(StrDtaChegadaDestino, 5, 4)),  // Ano
      StrToInt(Copy(StrDtaChegadaDestino, 3, 2)),  // Mes
      StrToInt(Copy(StrDtaChegadaDestino, 1, 2))); // Dia
  except
    on E: exception do
    begin
      raise exception.Create('Data de chegada inválida: [' + E.Message + ']');
    end;
  end;

  // Obtem a data de emissão do GTA
  try
    DtaEmissaoGTA := EncodeDate(
      StrToInt(Copy(StrDtaEmissaoGTA, 5, 4)),  // Ano
      StrToInt(Copy(StrDtaEmissaoGTA, 3, 2)),  // Mes
      StrToInt(Copy(StrDtaEmissaoGTA, 1, 2))); // Dia
  except
    on E: exception do
    begin
      raise exception.Create('Data de emissão do GTA inválida: ['
        + E.Message + ']');
    end;
  end;

  // Consiste datas
  if DtaChegadaDestino < DtaSaidaOrigem then
  begin
    Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
    Result := -1007;
    Exit;
  end;

  // Verifica Propriedade Rural
  NIRF := Trim(Copy(IDDestino, 1, 13));
  try
    CodLocalizacaoSISBOV := StrToInt(Trim(Copy(IDDestino, 14, 10)));
  except
    on E: exception do
    begin
      raise exception.Create('ID DESTINO "' + IDDestino + '" inválido: '
        + E.Message);
    end;
  end;
  
  if (Trim(TipoInscricaoDestino) <> 'NIRF')
    and (Trim(TipoInscricaoDestino) <> 'INCRA') then 
  begin
    raise exception.Create('Tipo de inscrição destino "' + TipoInscricaoDestino
      + '" inválida.');
  end;

  if not ValidaNirfIncra(NIRF, True) then
  begin
    Mensagens.Adicionar(494, Self.ClassName, NomeMetodo, [NIRF]);
    Result := -494;
    Exit;
  end;

  // Descrevendo TxtDados
  TxtDados := '';

  // Gravando dados
  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Verifica se o código da localização SISBOV está correto
      // e obtem os dados do produtor
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT tls.cod_pessoa_produtor,');
        SQL.Add('       tls.cod_propriedade_rural,');
        SQL.Add('       tls.cod_localizacao_sisbov,');
        SQL.Add('       tp.num_cnpj_cpf');
        SQL.Add('  FROM tab_localizacao_sisbov tls,');
        SQL.Add('       tab_propriedade_rural tpr,');
        SQL.Add('       tab_pessoa tp');
        SQL.Add(' WHERE tls.cod_pessoa_produtor = tp.cod_pessoa');
        SQL.Add('   AND tls.cod_propriedade_rural = tpr.cod_propriedade_rural');
        SQL.Add('   AND tls.cod_localizacao_sisbov = :cod_localizacao_sisbov');
        SQL.Add('   AND tpr.num_imovel_receita_federal = :num_imovel_receita_federal');
        ParamByName('num_imovel_receita_federal').AsString := NIRF;
        ParamByName('cod_localizacao_sisbov').AsInteger := CodLocalizacaoSISBOV;
        Open;

        if IsEmpty then
        begin
          raise exception.Create('Código de localização SISBOV "' +
            IntToStr(CodLocalizacaoSISBOV) + '" e NIRF "' +
            NIRF + '" inválidos.');
        end;

        CodPessoa := FieldByName('cod_pessoa_produtor').AsInteger;
        CNPJ := FieldByName('num_cnpj_cpf').AsString;
      end;

      CodPropriedadeRural := -1;
      Result := VerificaPropriedadeRural(CodPropriedadeRural, True, 'Propriedade rural',
        NIRF, CodLocalizacaoSISBOV, Nome, CodPessoa);
      if CodPropriedadeRural <= 0 then
      begin
        raise exception.Create('A propriedade com o NIRF/INCRA "' + NIRF
          + '" e código de exportação "' + IntToStr(CodLocalizacaoSISBOV)
          + '" não foi encontrada.');
      end;

      if Result < 0 then
      begin
        Exit;
      end;

      // Verifica se existe um evento com os mesmos dados
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT te.cod_evento');
        SQL.Add('  FROM tab_evento te, tab_evento_venda_criador tevc');
        SQL.Add(' WHERE te.cod_evento = tevc.cod_evento');
        SQL.Add('   AND te.cod_pessoa_produtor = tevc.cod_pessoa_produtor');
        SQL.Add('   AND te.cod_tipo_evento = 9');
        SQL.Add('   AND te.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND te.dta_inicio = :dta_inicio');
        SQL.Add('   AND te.dta_fim = :dta_fim');
        SQL.Add('   AND tevc.num_imovel_receita_federal = :num_imovel_receita_federal');
        SQL.Add('   AND tevc.cod_propriedade_rural = :cod_propriedade_rural');
        SQL.Add('   AND tevc.dta_emissao_gta = :dta_emissao_gta');
        SQL.Add('   AND tevc.cod_pessoa = :cod_pessoa');
        SQL.Add('   AND te.cod_situacao_sisbov <> ''I''');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('dta_inicio').AsDateTime := DtaSaidaOrigem;
        ParamByName('dta_fim').AsDateTime := DtaChegadaDestino;
        ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
        ParamByName('num_imovel_receita_federal').AsString := NIRF;
        ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
        ParamByName('cod_pessoa').AsInteger := CodPessoa;

        Open;
        // Se existir retorna o código do evento
        if not IsEmpty then
        begin
          Result := FieldByName('cod_evento').AsInteger;
          Exit; 
        end;
      end;

      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, '', CodFazenda);

      if CodEvento < 0 then
      begin
        Exit;
      end;

      // Insere dados específicos do evento venda criador
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('insert into tab_evento_venda_criador (');
        SQL.Add('  cod_pessoa_produtor,');
        SQL.Add('  cod_evento,');
        SQL.Add('  num_imovel_receita_federal,');
        SQL.Add('  cod_propriedade_rural,');
        SQL.Add('  cod_pessoa,');
        SQL.Add('  dta_emissao_gta,');
        SQL.Add('  num_gta,');
        SQL.Add('  num_cnpj_cpf_pessoa_secundaria');
        SQL.Add(' ) values (');
        SQL.Add('  :cod_pessoa_produtor,');
        SQL.Add('  :cod_evento,');
        SQL.Add('  :num_imovel_receita_federal,');
        SQL.Add('  :cod_propriedade_rural,');
        SQL.Add('  :cod_pessoa,');
        SQL.Add('  :dta_emissao_gta,');
        SQL.Add('  :num_gta,');
        SQL.Add('  :num_cnpj_cpf_pessoa_secundaria');
        SQL.Add(')');

        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('num_imovel_receita_federal').AsString := NIRF;
        ParamByName('cod_propriedade_rural').AsInteger := CodPropriedadeRural;
        ParamByName('cod_pessoa').AsInteger := CodPessoa;
        ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
        ParamByName('num_gta').AsString := '0000000000';
        ParamByName('num_cnpj_cpf_pessoa_secundaria').AsString := CNPJ;
        ExecSQL;
      end;

      // Obtem a descrição do evento
      with QueryLocal do
      begin
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
{$ENDIF}
        Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').asinteger := CodEvento;
        ExecSQL;
      end;

      // Retorna código do registro inserido
      Result := CodEvento;
    finally
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2087, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2087;
      Exit;
    end;
  end;
end;

function TIntEventos.InserirVendaFrigorificoCargaInicial(StrDtaSaidaOrigem,
  StrDtaChegadaDestino, StrDtaEmissaoGTA, IDDestino: String;
  CodFazenda: Integer): Integer;
const
  Metodo: Integer = 322;
  NomeMetodo: String = 'InserirVendaFrigorificoCargaInicial';
  CodTipoEvento: Integer = 10;
var
  QueryLocal: THerdomQuery;
  CodEvento,
  CodPessoa: Integer;
  DtaEmissaoGTA,
  DtaSaidaOrigem,
  DtaChegadaDestino: TDateTime;
  NomFazenda,
  TxtDados,
  CNPJ: String;
  Pessoas: TIntPessoas;
begin
  Result := -1;
  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(Metodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomeMetodo, []);
    Result := -188;
    Exit;
  end;

  // Gravando dados
  try
    // Verifica se produtor de trabalho foi definido
    if Conexao.CodProdutorTrabalho = -1 then
    begin
      Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
      Result := -307;
      Exit;
    end;

    // Trata fazenda
    Result := VerificaFazenda(CodFazenda, True, 'Fazenda', NomFazenda);
    if Result < 0 then
    begin
      Exit;
    end;

    // Obtem a data de saida do animal
    try
      DtaSaidaOrigem := EncodeDate(
        StrToInt(Copy(StrDtaSaidaOrigem, 5, 4)),  // Ano
        StrToInt(Copy(StrDtaSaidaOrigem, 3, 2)),  // Mes
        StrToInt(Copy(StrDtaSaidaOrigem, 1, 2))); // Dia
    except
      on E: exception do
      begin
        raise exception.Create('Data de saida inválida: [' + E.Message + ']');
      end;
    end;

    // Obtem a data de chegada do animal
    try
      DtaChegadaDestino := EncodeDate(
        StrToInt(Copy(StrDtaChegadaDestino, 5, 4)),  // Ano
        StrToInt(Copy(StrDtaChegadaDestino, 3, 2)),  // Mes
        StrToInt(Copy(StrDtaChegadaDestino, 1, 2))); // Dia
    except
      on E: exception do
      begin
        raise exception.Create('Data de chegada inválida: [' + E.Message + ']');
      end;
    end;

    // Obtem a data de emissão do GTA
    try
      DtaEmissaoGTA := EncodeDate(
        StrToInt(Copy(StrDtaEmissaoGTA, 5, 4)),  // Ano
        StrToInt(Copy(StrDtaEmissaoGTA, 3, 2)),  // Mes
        StrToInt(Copy(StrDtaEmissaoGTA, 1, 2))); // Dia
    except
      on E: exception do
      begin
        raise exception.Create('Data de emissão do GTA inválida: ['
          + E.Message + ']');
      end;
    end;

    // Consiste datas
    if DtaChegadaDestino < DtaSaidaOrigem then
    begin
      Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
      Result := -1007;
      Exit;
    end;

    // Verifica Propriedade Rural
    CNPJ := Trim(IDDestino);

    if (not ehNumerico(CNPJ)) or (not ValidaCnpjCpf(CNPJ, True, True, 'N')) then
    begin
      raise exception.Create('CNPJ inválido.');
    end;

    // Descrevendo TxtDados
    TxtDados := '';

    CodPessoa := BuscarFrigorifico(CNPJ);
    // Se a pessoa não foi encontrada então a insere na base.
    if CodPessoa <= 0 then
    begin
      Pessoas := TIntPessoas.Create;
      try
        Pessoas.Inicializar(Conexao, Mensagens);
        Result := Pessoas.Inserir(CNPJ, 'Frigorifico', 'J', CNPJ, 0, '', 6, '',
          -1, '', '', '', -1, '', '', '', '', 0);
        if Result < 0 then
        begin
          Exit;
        end;

        CodPessoa := Result;
      finally
        Pessoas.Free;
      end;
    end;

    QueryLocal := THerdomQuery.Create(Conexao, nil);
    try
      // Verifica se existe um registro na mesma condição.
      with QueryLocal do
      begin
        SQL.Add('SELECT te.cod_evento');
        SQL.Add('  FROM tab_evento te,');
        SQL.Add('       tab_evento_venda_frigorifico tevf');
        SQL.Add(' WHERE te.cod_tipo_evento = 10');
        SQL.Add('   AND te.cod_pessoa_produtor = tevf.cod_pessoa_produtor');
        SQL.Add('   AND te.cod_evento = tevf.cod_evento');
        SQL.Add('   AND te.dta_inicio = :dta_inicio');
        SQL.Add('   AND te.dta_fim = :dta_fim');
        SQL.Add('   AND te.cod_fazenda = :cod_fazenda');
        SQL.Add('   AND te.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND tevf.cod_pessoa = :cod_pessoa');
        SQL.Add('   AND tevf.dta_emissao_gta = :dta_emissao_gta');
        SQL.Add('   AND te.cod_situacao_sisbov <> ''I''');
        ParamByName('dta_inicio').AsDateTime := DtaSaidaOrigem;
        ParamByName('dta_fim').AsDateTime := DtaChegadaDestino;
        ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
        ParamByName('cod_fazenda').AsInteger := CodFazenda;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_pessoa').AsInteger := CodPessoa;
        Open;

        if not IsEmpty then
        begin
          Result := FieldByName('cod_evento').AsInteger;
          Exit;
        end;
      end;

      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, '', CodFazenda);

      if CodEvento < 0 then
      begin
        Exit;
      end;

      // Insere dados específicos do evento mudanca de local
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('insert into tab_evento_venda_frigorifico (');
        SQL.Add('  cod_pessoa_produtor,');
        SQL.Add('  cod_evento,');
        SQL.Add('  num_cnpj_cpf_frigorifico,');
        SQL.Add('  cod_pessoa,');
        SQL.Add('  dta_emissao_gta,');
        SQL.Add('  num_gta');
        SQL.Add(') values (');
        SQL.Add('  :cod_pessoa_produtor,');
        SQL.Add('  :cod_evento,');
        SQL.Add('  :num_cnpj_cpf_frigorifico,');
        SQL.Add('  :cod_pessoa,');
        SQL.Add('  :dta_emissao_gta,');
        SQL.Add('  :num_gta');
        SQL.Add(')');
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('num_cnpj_cpf_frigorifico').AsString := CNPJ;
        ParamByName('cod_pessoa').AsInteger := CodPessoa;
        ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
        ParamByName('num_gta').AsString := '0000000000';
        ExecSQL;
      end;

      with QueryLocal do
      begin
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
{$ENDIF}
        Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').asinteger := CodEvento;
        ExecSQL;
      end;

      // Retorna código do registro inserido
      Result := CodEvento;
    finally
      QueryLocal.Free;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2088, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2088;
      Exit;
    end;
  end;
end;

{ Obtem os dados do lugar de origem ou destino de acordo com os parametros
  do arquivo SISBOV.

Parametros:
  CsLugar: Tipo de origem da movimentação: PROP, FRIG ou AGL
  TipoInscricaoLugar: Tipo de inscrição da propriedade NIRF ou INCRA
  IdLugar: Identificador do lugar, se CsLugar for -
    PROP - NIRF ou INCRA da propriedade + código de localização SISBOV da
           propriedade
    FRIG - CNPJ do frigorífico
    AGL  - CNPJ da aglomeração de animais
  CodTipoLugar: Tipo de lugar onde o animal esta atualmente tab_tipo_lugar
  CNPJ: Parametro de retorno. CNPJ do frigorifico ou da aglomeração se o CsLugar
    for FRIG ou AGL
  NIRF: Parametro de retorno. NIRF/INCRA da propriedade se o CsLugar for PROP.
  CodLocalizacaoSISBOV: Parametro de retorno. Código de localização SISBOV da
    propriedade se o CsLugar for PROP
  CodPropriedade: Parametro de retorno. Código da propriedade
    se o CsLugar for PROP e o CodTipoLugar for 2
  CodFazenda: Parametro de retorno. Código da propriedade
    se o CsLugar for PROP e o CodTipoLugar for 1

retorno:
  Sem retorno.

exceptions:
  exceptin caso ocorra algum erro.}
procedure TIntEventos.ObtemLugarCargaInicial(CsLugar, TipoInscricaoLugar,
  IdLugar: String; var CodTipoLugar: Integer; var CNPJ, NIRF: String;
  var CodLocalizacaoSISBOV, CodPropriedade, CodFazenda: Integer);
var
  QueryLocal: THerdomQuery;
begin
  QueryLocal := THerdomQuery.Create(Conexao, nil);
  try
    CNPJ := '';
    NIRF := '';
    CodLocalizacaoSISBOV := -1;
    CodPropriedade := -1;
    CodFazenda := -1;
    if Trim(CsLugar) = 'PROP' then
    begin
      NIRF := Copy(Trim(IDLugar), 1, 13);
      try
        CodLocalizacaoSISBOV := StrToInt(Copy(IDLugar, 14, 10));
      except
        on E: exception do
        begin
          raise exception.Create('ID Lugar "' + IDLugar + '" inválido: '
            + E.Message);
        end;
      end;

      // Obtem o código da fazenda
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT tf.cod_fazenda,');
        SQL.Add('       tpr.cod_propriedade_rural,');
        SQL.Add('       tls.cod_pessoa_produtor,');
        SQL.Add('       tpr.num_imovel_receita_federal');
        SQL.Add('  FROM tab_localizacao_sisbov tls,');
        SQL.Add('       tab_fazenda tf,');
        SQL.Add('       tab_propriedade_rural tpr');
        SQL.Add(' WHERE tls.cod_pessoa_produtor = tf.cod_pessoa_produtor');
        SQL.Add('   AND tls.cod_propriedade_rural = tf.cod_propriedade_rural');
        SQL.Add('   AND tls.cod_propriedade_rural = tpr.cod_propriedade_rural');
        SQL.Add('   AND tls.cod_localizacao_sisbov = :cod_localizacao_sisbov');
        SQL.Add('   AND tpr.num_imovel_receita_federal = :num_imovel_receita_federal');
        ParamByName('cod_localizacao_sisbov').AsInteger := CodLocalizacaoSISBOV;
        ParamByName('num_imovel_receita_federal').AsString := NIRF;
        Open;

        if IsEmpty then
        begin
          raise exception.Create('Localização SISBOV "'
            + IntToStr(CodLocalizacaoSISBOV) + '" não encontrado.');
        end;

        if FieldByName('cod_pessoa_produtor').AsInteger = Conexao.CodProdutorTrabalho then
        begin
          CodTipoLugar := 1;
          CodFazenda := FieldByName('cod_fazenda').AsInteger;
        end
        else
        begin
          CodTipoLugar := 2;
          CodPropriedade := FieldByName('cod_propriedade_rural').AsInteger;
        end;
      end;
    end
    else
    if (Trim(CsLugar) = 'FRIG')
      or (Trim(CsLugar) = 'AGL') then
    begin
      CNPJ := IdLugar;
      CodTipoLugar := 3;
    end
    else
    begin
      raise exception.Create('Parametro CsLugar "' + CsLugar + '" inválido.');
    end;
  finally
    QueryLocal.Free;
  end;
end;

{ Inserire um evento de transferencia durante o processo de carga inicial.
  Este método deve ser usado sómente quando a origem e o destino forem
  diferentes de PROP --> PROP e PROP --> FRIG. Nesses caso deve ser
  inserido uma venda para driador e uma venda para frigorífico respectivamente.

  Caso já exista um evento com as mesmas características então o código deste
  evento é retornado. 

Parametros:
  StrDtaSaidaOrigem:
  StrDtaChegadaDestino:
  StrDtaEmissaoGTA:
  CodAptidao:
  CsOrigem:
  TipoInscricaoOrigem:
  IdOrigem:
  CsDestino:
  TipoInscricaoDestino:
  IdDestino:

Retorno:
  > 0 código do evento.
  < 0 código do erro ocorrido.}
function TIntEventos.InserirTransferenciaCargaInicial(StrDtaSaidaOrigem,
  StrDtaChegadaDestino, StrDtaEmissaoGTA: String; CodAptidao: Integer;
  CsOrigem, TipoInscricaoOrigem, IdOrigem, CsDestino, TipoInscricaoDestino,
  IdDestino: String): Integer;
const
  NomeMetodo: String = 'InserirTransferenciaCargaInicial';
  CodTipoEvento: Integer = 8;
  COD_REGIME_NAO_ESPECIFICADO: Integer = 99;
var
  QueryLocal: THerdomQuery;
  CodEvento,
  CodTipoLugarOrigem,
  CodTipoLugarDestino,
  CodRegAlimentarMamando,
  CodRegAlimentarDesmamado,
  CodFazendaOrigem,
  CodPropriedadeOrigem,
  CodLocalizacaoSISBOVO,
  CodPropriedadeDestino,
  CodFazendaDestino,
  CodLocalOrigem,
  CodLocalDestino,
  CodPessoaOrigem,
  CodPessoaSecundariaOrigem,
  CodPessoaDestino,
  CodPessoaSecundariaDestino,
  CodLocalizacaoSISBOVD: Integer;
  DtaSaidaOrigem,
  DtaChegadaDestino,
  DtaEmissaoGTA: TDateTime;
  NumImovelOrigem,
  NumImovelDestino,
  TxtDados,
  NomPropriedadeO,
  NomPessoaO,
  NumCNPJCPFOrigem,
  NumCNPJCPFDestino,
  CNPJO,
  CNPJFO,
  NomFazendaO,
  DesLocalO,
  DesLoteO,
  NomPropriedadeD,
  NomPessoaD,
  CNPJD,
  CNPJFD,
  NomFazendaD,
  DesLocalD,
  DesLoteD,
  DesRegM,
  DesRegD: String;
  Animais: TIntAnimais;
begin
  Result := -1;

  // Inicializa as variaveis
  CodRegAlimentarMamando := COD_REGIME_NAO_ESPECIFICADO;
  CodRegAlimentarDesmamado := COD_REGIME_NAO_ESPECIFICADO;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    Animais := TIntAnimais.Create;
    try
      Animais.Inicializar(Conexao, Mensagens);
      
      // Obtem a data de saida do animal
      try
        DtaSaidaOrigem := EncodeDate(
          StrToInt(Copy(StrDtaSaidaOrigem, 5, 4)),  // Ano
          StrToInt(Copy(StrDtaSaidaOrigem, 3, 2)),  // Mes
          StrToInt(Copy(StrDtaSaidaOrigem, 1, 2))); // Dia
      except
        on E: exception do
        begin
          raise exception.Create('Data de saida inválida: [' + E.Message + ']');
        end;
      end;

      // Obtem a data de chegada do animal
      try
        DtaChegadaDestino := EncodeDate(
          StrToInt(Copy(StrDtaChegadaDestino, 5, 4)),  // Ano
          StrToInt(Copy(StrDtaChegadaDestino, 3, 2)),  // Mes
          StrToInt(Copy(StrDtaChegadaDestino, 1, 2))); // Dia
      except
        on E: exception do
        begin
          raise exception.Create('Data de chegada inválida: [' + E.Message + ']');
        end;
      end;

      // Obtem a data de emissão do GTA
      try
        DtaEmissaoGTA := EncodeDate(
          StrToInt(Copy(StrDtaEmissaoGTA, 5, 4)),  // Ano
          StrToInt(Copy(StrDtaEmissaoGTA, 3, 2)),  // Mes
          StrToInt(Copy(StrDtaEmissaoGTA, 1, 2))); // Dia
      except
        on E: exception do
        begin
          raise exception.Create('Data de emissão do GTA inválida: ['
            + E.Message + ']');
        end;
      end;

      // Consiste datas
      if DtaChegadaDestino < DtaSaidaOrigem then
      begin
        Mensagens.Adicionar(1007, Self.ClassName, NomeMetodo, []);
        Result := -1007;
        Exit;
      end;

      // Consiste Aptidão
//      Result := VerificaAptidao(CodAptidao);
//      if Result < 0 then
//      begin
//        Exit;
//      end;

      // Consiste se o regime alimentar mamando se aplica a aptidao
//      if CodRegAlimentarMamando > 0 then
//      begin
//        Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
//          CodRegAlimentarMamando);
//        if Result < 0 then
//        begin
//          Exit;
//        end;
//      end;

      // Consiste se o regime alimentar desmamado se aplica a aptidao
//      Result := ConsistirMudancaRegimeAlimentar(CodAptidao,
//        CodRegAlimentarDesmamado);
//      if Result < 0 then
//      begin
//        Exit;
//      end;

      // Obtem os dados da origem
      ObtemLugarCargaInicial(CsOrigem, TipoInscricaoOrigem, IdOrigem,
        CodTipoLugarOrigem, NumCNPJCPFOrigem, NumImovelOrigem,
        CodLocalizacaoSISBOVO, CodPropriedadeOrigem, CodFazendaOrigem);
      CodLocalOrigem := -1;
      if CodTipoLugarOrigem = 1 then
      begin
        CodLocalOrigem := Animais.ObtemLocalPrincipal(
          Conexao.CodProdutorTrabalho, CodFazendaOrigem);
        NumImovelOrigem := '';
      end;

      // Obtem os dados do destino
      ObtemLugarCargaInicial(CsDestino, TipoInscricaoDestino, IdDestino,
        CodTipoLugarDestino, NumCNPJCPFDestino, NumImovelDestino,
        CodLocalizacaoSISBOVD, CodPropriedadeDestino, CodFazendaDestino);
      CodLocalDestino := -1;
      if CodTipoLugarDestino = 1 then
      begin
        CodLocalDestino := Animais.ObtemLocalPrincipal(
          Conexao.CodProdutorTrabalho, CodFazendaDestino);
        NumImovelDestino := '';
      end;

      // Consiste lugar origem
      Result := VerificaLugar(CodTipoLugarOrigem, -1, CodLocalOrigem,
        CodFazendaOrigem, NumImovelOrigem, CodLocalizacaoSISBOVO,
        NomPropriedadeO, NomPessoaO, CNPJO, CNPJFO, NomFazendaO, DesLocalO,
        DesLoteO, CodPropriedadeOrigem, NumCNPJCPFOrigem, CodPessoaOrigem,
        CodPessoaSecundariaOrigem, 'Origem');
      if Result < 0 then
      begin
        Exit;
      end;
      NumCNPJCPFOrigem := CNPJO;

      // Consiste lugar destino
      Result := VerificaLugar(CodTipoLugarDestino, -1, CodLocalDestino,
        CodFazendaDestino, NumImovelDestino, CodLocalizacaoSISBOVD,
        NomPropriedadeD, NomPessoaD, CNPJD, CNPJFD, NomFazendaD, DesLocalD,
        DesLoteD, CodPropriedadeDestino, NumCNPJCPFDestino, CodPessoaDestino,
        CodPessoaSecundariaDestino, 'Destino');
      if Result < 0 then
      begin
        Exit;
      end;
      NumCNPJCPFDestino := CNPJD;

      // Consiste se o regime alimentar pode ser aplicado ao local
      case CodTipoLugarDestino of
        1: begin
          Result := VerificaLocalRegAlimentar(CodFazendaDestino,
            CodLocalDestino, CodRegAlimentarMamando, DesRegM);
          if Result < 0 then
          begin
            Exit;
          end;

          Result := VerificaLocalRegAlimentar(CodFazendaDestino,
            CodLocalDestino, CodRegAlimentarDesmamado, DesRegD);
          if Result < 0 then
          begin
            Exit;
          end;
        end;
        2, 3: begin
          Result := BuscarDesRegimeAlimentar(CodRegAlimentarMamando, DesRegM);
          if Result < 0 then
          begin
            Exit;
          end;

          Result := BuscarDesRegimeAlimentar(CodRegAlimentarDesmamado, DesRegD);
          if Result < 0 then
          begin
            Exit;
          end;
        end;
      end;

      // Verifica DtaEmissaoGTA
      if DtaEmissaoGTA > DtaSaidaOrigem then
      begin
        Mensagens.Adicionar(1008, Self.ClassName, NomeMetodo, []);
        Result := -1008;
        Exit;
      end;

      // Descrevendo TxtDados
      TxtDados := '';

      // Insere dados comuns a todos os tipos de eventos, recebendo o número
      // do evento inserido (capa do evento)
      CodEvento := InserirEvento(Conexao.CodProdutorTrabalho, CodTipoEvento,
        DtaSaidaOrigem, DtaChegadaDestino, TxtDados, '',
        CodFazendaOrigem);
      if CodEvento < 0 then
      begin
        Exit;
      end;

      if (CodPropriedadeOrigem <= 0) and (NumImovelOrigem <> '') then
      begin
        VerificaPropriedadeRural(CodPropriedadeOrigem, True,
          'Propriedade origem ', NumImovelOrigem, CodLocalizacaoSISBOVO,
          NomPropriedadeO, CodPessoaOrigem);
      end;

      if (CodPropriedadeDestino <= 0) and (NumImovelDestino <> '') then
      begin
        VerificaPropriedadeRural(CodPropriedadeDestino, True,
          'Propriedade destino ', NumImovelDestino, CodLocalizacaoSISBOVD,
          NomPropriedadeD, CodPessoaDestino);
      end;
      
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT te.cod_evento');
        SQL.Add('  FROM tab_evento te, tab_evento_transferencia tet');
        SQL.Add(' WHERE te.cod_evento = tet.cod_evento');
        SQL.Add('   AND te.cod_pessoa_produtor = tet.cod_pessoa_produtor');
        SQL.Add('   AND te.cod_tipo_evento = 8');
        SQL.Add('   AND te.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('   AND te.dta_inicio = :dta_inicio');
        SQL.Add('   AND te.dta_fim = :dta_fim');
        SQL.Add('   AND tet.cod_aptidao = :cod_aptidao');
        SQL.Add('   AND tet.cod_tipo_lugar_origem = :cod_tipo_lugar_origem');
        SQL.Add('   AND te.cod_situacao_sisbov <> ''I''');
        if CodFazendaOrigem > -1 then
        begin
          SQL.Add('   AND tet.cod_fazenda_origem = :cod_fazenda_origem');
        end;
        if NumImovelOrigem <> '' then
        begin
          SQL.Add('   AND tet.num_imovel_origem = :num_imovel_origem');
        end;
        if CodPropriedadeOrigem > -1 then
        begin
          SQL.Add('   AND tet.cod_propriedade_origem = :cod_propriedade_origem');
        end;
        if NumCNPJCPFOrigem <> '' then
        begin
          SQL.Add('   AND tet.num_cnpj_cpf_origem = :num_cnpj_cpf_origem');
        end;
        if CodPessoaOrigem > -1 then
        begin
          SQL.Add('   AND tet.cod_pessoa_origem = :cod_pessoa_origem');
        end;
        SQL.Add('   AND tet.cod_tipo_lugar_destino = :cod_tipo_lugar_destino');
        if CodFazendaDestino > -1 then
        begin
          SQL.Add('   AND tet.cod_fazenda_destino = :cod_fazenda_destino');
        end;
        if CodLocalDestino > -1 then
        begin
          SQL.Add('   AND tet.cod_local_destino = :cod_local_destino');
        end;
        if NumImovelDestino <> '' then
        begin
          SQL.Add('   AND tet.num_imovel_destino = :num_imovel_destino');
        end;
        if CodPropriedadeDestino > -1 then
        begin
          SQL.Add('   AND tet.cod_propriedade_destino = :cod_propriedade_destino');
        end;
        if NumCNPJCPFDestino <> '' then
        begin
          SQL.Add('   AND tet.num_cnpj_cpf_destino = :num_cnpj_cpf_destino');
        end;
        if CodPessoaDestino > -1 then
        begin
          SQL.Add('   AND tet.cod_pessoa_destino = :cod_pessoa_destino');
        end;
        SQL.Add('   AND tet.dta_emissao_gta = :dta_emissao_gta');

        ParamByName('cod_pessoa_produtor').AsInteger :=
          Conexao.CodProdutorTrabalho;
        ParamByName('dta_inicio').AsDateTime := DtaSaidaOrigem;
        ParamByName('dta_fim').AsDateTime := DtaChegadaDestino;
        ParamByName('cod_aptidao').AsInteger := CodAptidao;
        ParamByName('cod_tipo_lugar_origem').AsInteger := CodTipoLugarOrigem;
        if CodFazendaOrigem > -1 then
        begin
          ParamByName('cod_fazenda_origem').AsInteger := CodFazendaOrigem;
        end;
        if NumImovelOrigem <> '' then
        begin
          ParamByName('num_imovel_origem').AsString := NumImovelOrigem;
        end;
        if CodPropriedadeOrigem > -1 then
        begin
          ParamByName('cod_propriedade_origem').AsInteger :=
            CodPropriedadeOrigem;
        end;
        if NumCNPJCPFOrigem <> '' then
        begin
          ParamByName('num_cnpj_cpf_origem').AsString := NumCNPJCPFOrigem;
        end;
        if CodPessoaOrigem > -1 then
        begin
          ParamByName('cod_pessoa_origem').AsInteger := CodPessoaOrigem;
        end;
        ParamByName('cod_tipo_lugar_destino').AsInteger := CodTipoLugarDestino;
        if CodFazendaDestino > -1 then
        begin
          ParamByName('cod_fazenda_destino').AsInteger := CodFazendaDestino;
        end;
        if CodLocalDestino > -1 then
        begin
          ParamByName('cod_local_destino').AsInteger := CodLocalDestino;
        end;
        if NumImovelDestino <> '' then
        begin
          ParamByName('num_imovel_destino').AsString := NumImovelDestino;
        end;
        if CodPropriedadeDestino > -1 then
        begin
          ParamByName('cod_propriedade_destino').AsInteger :=
            CodPropriedadeDestino;
        end;
        if NumCNPJCPFDestino <> '' then
        begin
          ParamByName('num_cnpj_cpf_destino').AsString := NumCNPJCPFDestino;
        end;
        if CodPessoaDestino > -1 then
        begin
          ParamByName('cod_pessoa_destino').AsInteger := CodPessoaDestino;
        end;
        ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;

        Open;
        if not IsEmpty then
        begin
          Result := FieldByName('cod_evento').AsInteger;
          Exit;
        end;
      end;

      // Insere dados específicos do evento mudanca de local
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('insert into tab_evento_transferencia (');
        SQL.Add('  cod_pessoa_produtor,');
        SQL.Add('  cod_evento,');
        SQL.Add('  cod_aptidao,');
        SQL.Add('  cod_tipo_lugar_origem,');
        SQL.Add('  cod_fazenda_origem,');
        SQL.Add('  num_imovel_origem,');
        SQL.Add('  cod_propriedade_origem,');
        SQL.Add('  num_cnpj_cpf_origem,');
        SQL.Add('  cod_pessoa_origem,');
        SQL.Add('  cod_tipo_lugar_destino,');
        SQL.Add('  cod_fazenda_destino,');
        SQL.Add('  cod_local_destino,');
        SQL.Add('  num_imovel_destino,');
        SQL.Add('  cod_propriedade_destino,');
        SQL.Add('  num_cnpj_cpf_destino,');
        SQL.Add('  cod_pessoa_destino,');
        SQL.Add('  cod_reg_alimentar_mamando,');
        SQL.Add('  cod_reg_alimentar_desmamado,');
        SQL.Add('  num_gta,');
        SQL.Add('  dta_emissao_gta');
        SQL.Add(') values (');
        SQL.Add('  :cod_pessoa_produtor,');
        SQL.Add('  :cod_evento,');
        SQL.Add('  :cod_aptidao,');
        SQL.Add('  :cod_tipo_lugar_origem,');
        SQL.Add('  :cod_fazenda_origem,');
        SQL.Add('  :num_imovel_origem,');
        SQL.Add('  :cod_propriedade_origem,');
        SQL.Add('  :num_cnpj_cpf_origem,');
        SQL.Add('  :cod_pessoa_origem,');
        SQL.Add('  :cod_tipo_lugar_destino,');
        SQL.Add('  :cod_fazenda_destino,');
        SQL.Add('  :cod_local_destino,');
        SQL.Add('  :num_imovel_destino,');
        SQL.Add('  :cod_propriedade_destino,');
        SQL.Add('  :num_cnpj_cpf_destino,');
        SQL.Add('  :cod_pessoa_destino,');
        SQL.Add('  :cod_reg_alimentar_mamando,');
        SQL.Add('  :cod_reg_alimentar_desmamado,');
        SQL.Add('  :num_gta,');
        SQL.Add('  :dta_emissao_gta');
        SQL.Add(')');

        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_aptidao').AsInteger := CodAptidao;
        ParamByName('cod_tipo_lugar_origem').AsInteger := CodTipoLugarOrigem;
        AtribuiParametro(QueryLocal, CodFazendaOrigem, 'cod_fazenda_origem', -1);
        AtribuiParametro(QueryLocal, NumImovelOrigem, 'num_imovel_origem', '');
        AtribuiParametro(QueryLocal, CodPropriedadeOrigem, 'cod_propriedade_origem', -1);
        AtribuiParametro(QueryLocal, NumCNPJCPFOrigem, 'num_cnpj_cpf_origem', '');
        AtribuiParametro(QueryLocal, CodPessoaOrigem, 'cod_pessoa_origem', -1);
        AtribuiParametro(QueryLocal, CodFazendaDestino, 'cod_fazenda_destino', -1);
        ParamByName('cod_tipo_lugar_destino').AsInteger := CodTipoLugarDestino;
        AtribuiParametro(QueryLocal, CodLocalDestino, 'cod_local_destino', -1);
        AtribuiParametro(QueryLocal, NumImovelDestino, 'num_imovel_destino', '');
        AtribuiParametro(QueryLocal, CodPropriedadeDestino, 'cod_propriedade_destino', -1);
        AtribuiParametro(QueryLocal, NumCNPJCPFDestino, 'num_cnpj_cpf_destino', '');
        AtribuiParametro(QueryLocal, CodPessoaDestino, 'cod_pessoa_destino', -1);
        ParamByName('cod_reg_alimentar_mamando').AsInteger := CodRegAlimentarMamando;
        ParamByName('cod_reg_alimentar_desmamado').AsInteger := CodRegAlimentarDesmamado;
        ParamByName('dta_emissao_gta').AsDateTime := DtaEmissaoGTA;
        ParamByName('num_gta').AsString := '0000000000';

        ExecSQL;
      end;

      with QueryLocal do
      begin
        SQL.Clear;
{$IFDEF MSSQL}
        SQL.Add('execute dbo.spt_calcula_txt_dados :cod_evento, :cod_pessoa_produtor ');
{$ENDIF}
        Parambyname('cod_pessoa_produtor').asinteger := Conexao.CodProdutorTrabalho;
        ParamByName('cod_evento').asinteger := CodEvento;
        ExecSQL;
      end;

      // Retorna código do registro inserido
      Result := CodEvento;
    finally
      QueryLocal.Free;
      Animais.Free;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2089, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2089;
      Exit;
    end;
  end;
end;

{ Verifica qual o tipo de evento deve ser inserido e chama um dos métodos:
    InserirMorteCargaInicial
    InserirVendaCriadorCargaInicial
    InserirVendaFrigorificoCargaInicial
    InserirTransferenciaCargaInicial

Parametros:
  StrDtaSaidaOrigem: Atributo DTA_SAIDA do arquivo de importação de animais
  StrDtaChegadaDestino: Atributo DTA_CHEGADA do arquivo de importação de animais
  StrDtaEmissaoGTA: Atributo DTA_EMISSAO do arquivo de importação de animais
  CsOrigem: Atributo CS_ORIGEM do arquivo de importação de animais
  TipoInscricaoOrigem: Atributo TIPO_INSCRICAO_ORIGEM do arquivo de importação
    de animais
  IdOrigem: Atributo ID_ORIGEM do arquivo de importação de animais
  CsDestino: Atributo CS_DESTINO do arquivo de importação de animais
  TipoInscricaoDestino: Atributo TIPO_INSCRICAO_DESTINO do arquivo de
    importação de animais
  IdDestino: Atributo ID_DESTINO do arquivo de importação de animais
  DtaMorte: Atributo DT_MORTE do arquivo de importação de animais
  TipoMorte: Atributo TIPO_MORTE do arquivo de importação de animais
  CausaMorte: Atributo CAUSA_MORTE do arquivo de importação de animais
  CodAptidao: Código da aptidão do animal. Necessário sómente no caso do evento
    de transferência.
    
Retorno:
  > 0 Código do evento inserido
  < 0 código do erro ocorrido}
function TIntEventos.InserirEventoCargaInicial(StrDtaSaidaOrigem,
  StrDtaChegadaDestino, StrDtaEmissaoGTA, CsOrigem, TipoInscricaoOrigem,
  IdOrigem, CsDestino, TipoInscricaoDestino, IdDestino, DtaMorte,
  TipoMorte, CausaMorte: String; CodFazenda, CodAptidao: Integer): Integer;
const
  NomeMetodo: String = 'InserirEventoCargaInicial';
begin
  try
    // Verifica se é um evento de morte
    if (Trim(DtaMorte) <> '')
      or (Trim(TipoMorte) <> '')
      or (Trim(CausaMorte) <> '') then
    begin
      // Neste caso não pode ser informado o valor de nenhum outro tipo de evento
      if (Trim(StrDtaSaidaOrigem) <> '')
        or (Trim(StrDtaChegadaDestino) <> '')
        or (Trim(StrDtaEmissaoGTA) <> '')
        or (Trim(CsOrigem) <> '')
        or (Trim(TipoInscricaoOrigem) <> '')
        or (Trim(IdOrigem) <> '')
        or (Trim(CsDestino) <> '')
        or (Trim(TipoInscricaoDestino) <> '')
        or (Trim(IdDestino) <> '') then
      begin
        raise exception.Create('Não é permitido informar os dados de outro tipo'
         + ' de evento junto com o evento de morte.');
      end;

      Result := InserirMorteCargaInicial(DtaMorte, TipoMorte, CausaMorte,
        CodFazenda);
    end
    else
    begin
      // Verifica qual é o tipo de venda
      if (Trim(CsOrigem) = 'PROP') and (Trim(CsDestino) = 'PROP') then
      begin
        // Venda para criador
        Result := InserirVendaCriadorCargaInicial(StrDtaSaidaOrigem,
          StrDtaChegadaDestino, StrDtaEmissaoGTA, TipoInscricaoOrigem,
          IdDestino, CodFazenda);
      end
      else
      if (Trim(CsOrigem) = 'PROP') and (Trim(CsDestino) = 'FRIG') then
      begin
        // Venda para frigorífico
        Result := InserirVendaFrigorificoCargaInicial(StrDtaSaidaOrigem,
          StrDtaChegadaDestino, StrDtaEmissaoGTA, IdDestino, CodFazenda);
      end
      else
      begin
        // Transferência
        Result := InserirTransferenciaCargaInicial(StrDtaSaidaOrigem,
          StrDtaChegadaDestino, StrDtaEmissaoGTA, CodAptidao, CsOrigem,
          TipoInscricaoOrigem, IdOrigem, CsDestino, TipoInscricaoDestino,
          IdDestino);
      end;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2090, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2090;
    end;
  end;
end;

{ Efetiva os eventos inseridos pela carga inicial.

Retorno:
  >= 0 se não der nenhum erro.
  <= 0 se ocorrer algum erro.}
function TIntEventos.EfetivarEventosCargaInicial(
  CodArquivoSISBOV: Integer): Integer;
const
  NomeMetodo: String = 'EfetivarEventosCargaInicial';
var
  QueryLocal, QueryUpdate: THerdomQuery;
  NomeProdutor: String;
begin
  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    QueryUpdate := THerdomQuery.Create(Conexao, nil);
    try
      with QueryUpdate do
      begin
        SQL.Clear;
        SQL.Add('UPDATE tab_animal_evento');
        SQL.Add('   SET cod_arquivo_sisbov = :cod_arquivo_sisbov');
        SQL.Add(' WHERE cod_evento = :cod_evento');
        SQL.Add('   AND cod_pessoa_produtor = :cod_pessoa_produtor');
      end;

      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT cod_evento,');
        SQL.Add('       cod_pessoa_produtor');
        SQL.Add('  FROM tab_evento');
        SQL.Add(' WHERE cod_situacao_sisbov = ''P''');

        Open;
        while not Eof do
        begin
          Result := Conexao.DefinirProdutorTrabalho(
            FieldByName('cod_pessoa_produtor').AsInteger, NomeProdutor);
          if Result < 0 then
          begin
            Exit;
          end;

          Result := EfetivarCadastro(FieldByName('cod_evento').AsInteger);
          if Result < 0 then
          begin
            Exit;
          end;

          // Exporta o evento
          QueryUpdate.ParamByName('cod_evento').AsInteger :=
            FieldByName('cod_evento').AsInteger;
          QueryUpdate.ParamByName('cod_pessoa_produtor').AsInteger :=
            Conexao.CodProdutorTrabalho;
          QueryUpdate.ParamByName('cod_arquivo_sisbov').AsInteger :=
            CodArquivoSISBOV;
          QueryUpdate.ExecSQL;

          Next;
        end;
      end;
      
      Result := 0;
    finally
      QueryLocal.Free;
      QueryUpdate.Free;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2090, Self.ClassName, NomeMetodo, [E.Message]);
      Result := -2090;
    end;
  end;
end;

function TIntEventos.GerarRelatorioResumoEstacaoMonta(ECodEventoEstacaoMonta,
                                                      ECodProdutorTrabalho,
                                                      ECodTarefa: Integer): String;
const
  NomMetodo: String = 'GerarRelatorioResumoEstacaoMonta';
  CodMetodo: Integer = 1;
  CodRelatorio: Integer = 28;
  CodTipoTarefa: Integer = 5;
var
  Retorno: Integer;
  Qry,
  qAux: THerdomQuery;
  Rel: TRelatorioPadrao;
  strLinha: String;

  QtdFemeasCoberturasIAMC1,
  QtdFemeasCoberturasIAMC2,
  QtdFemeasCoberturasIAMC3,
  QtdFemeasCobertasIAMC,
  QtdFemeasCobertasRP,
  QtdFemeasCobertasIAMCRP,
  QtdFemeasCobertas,
  QtdFemeasDiag,
  PercentualPerdaErrosDiag: Integer;
begin
  Result := '';

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomMetodo);
    Exit;
  end;

  // Verifica se usuário pode executar método
  if not Conexao.PodeExecutarMetodo(CodMetodo) then
  begin
    Mensagens.Adicionar(188, Self.ClassName, NomMetodo, []);
    Exit;
  end;

  Qry := THerdomQuery.Create(Conexao, nil);
  qAux := THerdomQuery.Create(Conexao, nil);
  try
    {Realiza pesquisa de eventos de acordo com os critérios informados}
    Retorno := PesquisarResumoEstacaoMonta(Qry,
                                           ECodEventoEstacaoMonta,
                                           ECodProdutorTrabalho,
                                           ECodTarefa);

    if Retorno < 0 then begin
      if Retorno = idExceedsTheConfiguredThreshold then begin
        // Verifica se o arquivo se se encontra na lista de tarefas para processamento
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio,
                                                              ECodEventoEstacaoMonta,
                                                              Conexao.CodProdutorTrabalho]);
        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(1994, Self.ClassName, NomMetodo, []);
          end;
          Exit;
        end;

        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodRelatorio,
                                                              ECodEventoEstacaoMonta,
                                                              Conexao.CodProdutorTrabalho], DtaSistema);

        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(1995, Self.Classname, NomMetodo, []);
        end;
      end;
      Exit;
    end;

    {Verifica se a pesquisa é válida (se existe algum registro)}
    if Qry.IsEmpty then begin
      Mensagens.Adicionar(1114, Self.ClassName, NomMetodo, []);
      Exit;
    end;

    Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
    try
      Rel.TipoDoArquvio := 1;

      {Verifica se execução do procedimento está ocorrendo sobre uma tarefa}
      if ECodTarefa > 0 then begin
        Rel.CodTarefa := ECodTarefa;
      end;

      qAux.SQL.Clear;
      qAux.SQL.Add(' select sgl_estacao_monta, des_estacao_monta from tab_evento_estacao_monta ');
      qAux.SQL.Add('  where cod_pessoa_produtor = :cod_pessoa_produtor ');
      qAux.SQL.Add('    and cod_evento = :cod_evento ');
      qAux.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      qAux.ParamByName('cod_evento').AsInteger          := ECodEventoEstacaoMonta;
      qAux.Open;

      if qAux.IsEmpty then
      begin
        Mensagens.Adicionar(1585, Self.ClassName, NomMetodo, []);
        Result := '';
        Exit;
      end;

      Rel.TxtSubTitulo := qAux.FieldByName('sgl_estacao_monta').AsString + ' - ' + qAux.FieldByName('des_estacao_monta').AsString;
      Rel.FormatarTxtDados := False;
      Rel.PrimeiraLinhaNegritoTxtDados := True;
      Rel.CodTamanhoFonteTxtDados := 2;

      //Monta a CAPA do relatório.
      Rel.CodOrientacao   := 1;
      Rel.CodTamanhoFonte := 2;
      Rel.QtdColunas      := 1;
      Rel.TxtTitulo       := 'Resumo da Estação de Monta';

      {Inicializa o procedimento de geração do arquivo de relatório}
      Retorno := Rel.InicializarRelatorio;
      if Retorno < 0 then
      begin
        Exit;
      end;

      QtdFemeasCoberturasIAMC1 := Qry.FieldByName('QtdCobIAMCVaca1').AsInteger + Qry.FieldByName('QtdCobIAMCNovilha1').AsInteger + Qry.FieldByName('QtdCobIAMCPrimipara1').AsInteger;
      QtdFemeasCoberturasIAMC2 := Qry.FieldByName('QtdCobIAMCVaca2').AsInteger + Qry.FieldByName('QtdCobIAMCNovilha2').AsInteger + Qry.FieldByName('QtdCobIAMCPrimipara2').AsInteger;
      QtdFemeasCoberturasIAMC3 := Qry.FieldByName('QtdCobIAMCVaca3').AsInteger + Qry.FieldByName('QtdCobIAMCNovilha3').AsInteger + Qry.FieldByName('QtdCobIAMCPrimipara3').AsInteger;
      QtdFemeasCobertasIAMC    := QtdFemeasCoberturasIAMC1 + QtdFemeasCoberturasIAMC2 + QtdFemeasCoberturasIAMC3;
      QtdFemeasCobertasRP      := Qry.FieldByName('QtdCobRPVaca').AsInteger + Qry.FieldByName('QtdCobRPNovilha').AsInteger + Qry.FieldByName('QtdCobRPPrimipara').AsInteger;
      QtdFemeasCobertasIAMCRP  := Qry.FieldByName('QtdCobIAMCRPVaca').AsInteger + Qry.FieldByName('QtdCobIAMCRPNovilha').AsInteger + Qry.FieldByName('QtdCobIAMCRPPrimipara').AsInteger;
      QtdFemeasCobertas        := QtdFemeasCobertasIAMC + QtdFemeasCobertasRP + QtdFemeasCobertasIAMCRP;
      QtdFemeasDiag            := Qry.FieldByName('QtdDiagVaca').AsInteger + Qry.FieldByName('QtdDiagNovilha').AsInteger + Qry.FieldByName('QtdDiagPrimiparas').AsInteger;
      PercentualPerdaErrosDiag := Qry.FieldByName('QtdFemeasPrenhas').AsInteger;

      Rel.InicializarQuadro('N');
      Rel.FonteNegrito;
      strLinha := PadR(RedimensionaString('Produtor: ' + Conexao.ProdutorTrabalho.NomProdutor, 45), ' ', 60);
      if UpperCase(Conexao.ProdutorTrabalho.CodNatureza) = 'F' then
      begin
        strLinha := strLinha + 'CPF: ' + Conexao.ProdutorTrabalho.NumCPFCNPJFormatado;
      end
      else
      begin
        strLinha := strLinha + 'CNPJ: ' + Conexao.ProdutorTrabalho.NumCPFCNPJFormatado;
      end;
      Rel.ImprimirTexto(01, strLinha);
      strLinha := 'Fazenda:  ' + Conexao.FazendaTrabalho.NomFazenda;
      Rel.ImprimirTexto(01, strLinha);
      Rel.FinalizarQuadro;

      Rel.NovaLinha;

      Rel.InicializarQuadro('S');
      strLinha := PadR('Descrição', ' ', 60);
      strLinha := strLinha + PadR('Quantidade', ' ', 15);
      strLinha := strLinha + PadR('Fêmeas monta', ' ', 15);
      Rel.ImprimirTexto(01, strLinha);
      Rel.FinalizarQuadro;
      Rel.FonteNormal;

      // Quantidade de fêmeas em monta
      strLinha := PadR('Quantidade de fêmeas em monta', ' ', 60);
      strLinha := StrLinha + FormatFloat('000', Qry.FieldByName('QtdFemeasEmMonta').Value);
      Rel.ImprimirTexto(01, strLinha);

      Rel.NovaLinha;

      // Quantidade de fêmeas cobertas
      strLinha := PadR('Quantidade de fêmeas cobertas', ' ', 60);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCobertas), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCobertas / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente
      strLinha := '   ' + PadR('Por IA/MC somente', ' ', 57);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCobertasIAMC), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCobertasIAMC / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Uma cobertura
      strLinha := '   ' + '   ' + PadR('Uma cobertura', ' ', 54);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCoberturasIAMC1), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCoberturasIAMC1 / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Uma cobertura -> Vacas
      strLinha := '   ' + '   ' + '   ' + PadR('Vacas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCVaca1').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCVaca1').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Uma cobertura -> Novilhas
      strLinha := '   ' + '   ' + '   ' + PadR('Novilhas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCNovilha1').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCNovilha1').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Uma cobertura -> Primíparas
      strLinha := '   ' + '   ' + '   ' + PadR('Primíparas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCPrimipara1').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCPrimipara1').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Duas coberturas
      strLinha := '   ' + '   ' + PadR('Duas coberturas', ' ', 54);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCoberturasIAMC2), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCoberturasIAMC2 / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Duas coberturas -> Vacas
      strLinha := '   ' + '   ' + '   ' + PadR('Vacas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCVaca2').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCVaca2').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Duas coberturas -> Novilhas
      strLinha := '   ' + '   ' + '   ' + PadR('Novilhas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCNovilha2').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCNovilha2').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Duas coberturas -> Primíparas
      strLinha := '   ' + '   ' + '   ' + PadR('Primíparas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCPrimipara2').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCPrimipara2').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Três ou mais coberturas
      strLinha := '   ' + '   ' + PadR('Duas coberturas', ' ', 54);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCoberturasIAMC3), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCoberturasIAMC3 / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Três ou mais coberturas -> Vacas
      strLinha := '   ' + '   ' + '   ' + PadR('Vacas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCVaca3').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCVaca3').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Três ou mais coberturas -> Novilhas
      strLinha := '   ' + '   ' + '   ' + PadR('Novilhas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCNovilha3').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCNovilha3').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC somente -> Três ou mais coberturas -> Primíparas
      strLinha := '   ' + '   ' + '   ' + PadR('Primíparas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCPrimipara3').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCPrimipara3').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por RP somente
      strLinha := '   ' + PadR('Por RP somente', ' ', 57);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCobertasRP), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCobertasRP / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por RP somente -> Vacas
      strLinha := '   ' + '   ' + '   ' + PadR('Vacas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobRPVaca').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobRPVaca').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por RP somente -> Novilhas
      strLinha := '   ' + '   ' + '   ' + PadR('Novilhas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobRPNovilha').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobRPNovilha').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por RP somente -> Primíparas
      strLinha := '   ' + '   ' + '   ' + PadR('Primíparas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobRPPrimipara').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobRPPrimipara').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC/RP
      strLinha := '   ' + PadR('Por IA/MC/RP', ' ', 57);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasCobertasIAMCRP), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasCobertasIAMCRP / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC/RP -> Vacas
      strLinha := '   ' + '   ' + '   ' + PadR('Vacas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCRPVaca').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCRPVaca').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC/RP -> Novilhas
      strLinha := '   ' + '   ' + '   ' + PadR('Novilhas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCRPNovilha').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCRPNovilha').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas cobertas por IA/MC/RP -> Primíparas
      strLinha := '   ' + '   ' + '   ' + PadR('Primíparas', ' ', 51);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdCobIAMCRPPrimipara').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdCobIAMCRPPrimipara').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      Rel.NovaLinha;
      // Número de doses de sêmen utilizadas
      strLinha := '   ' + PadR('Número de doses de sêmen utilizadas', ' ', 57);
      strLinha := strLinha + FormatFloat('000', Qry.FieldByName('QtdDosesSemenUtilizadas').Value);
      Rel.ImprimirTexto(01, strLinha);

      Rel.NovaLinha;
      // Quantidade de Fêmeas em anestro
      strLinha := PadR('Quantidade de fêmeas em anestro', ' ', 60);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdFemeasEmAnestro').AsInteger), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdFemeasEmAnestro').AsInteger / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Quantidade de Fêmeas diagnosticadas
      strLinha := PadR('Quantidade de fêmeas diagnosticadas', ' ', 60);
      strLinha := strLinha + PadR(FormatFloat('000', QtdFemeasDiag), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', QtdFemeasDiag / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas diagnosticadas -> Vacas
      strLinha := '   ' + '   ' + PadR('Vacas', ' ', 54);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdDiagVaca').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdDiagVaca').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas diagnosticadas -> Novilhas
      strLinha := '   ' + '   ' + PadR('Novilhas', ' ', 54);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdDiagNovilha').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdDiagNovilha').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Fêmeas diagnosticadas -> Primíparas
      strLinha := '   ' + '   ' + PadR('Primíparas', ' ', 54);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdDiagPrimiparas').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdDiagPrimiparas').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      Rel.NovaLinha;
      // Quantidade de Fêmeas prenhas
      strLinha := PadR('Quantidade de fêmeas prenhas', ' ', 60);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdFemeasPrenhas').Value), ' ', 15);
       strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdFemeasPrenhas').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Quantidade de Fêmeas vazias
      strLinha := PadR('Quantidade de fêmeas vazias', ' ', 60);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdFemeasVazias').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdFemeasVazias').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Quantidade de fêmeas sem diagnóstico
      strLinha := PadR('Quantidade de fêmeas sem diagnóstico', ' ', 60);
      strLinha := strLinha + PadR(FormatFloat('000', Qry.FieldByName('QtdFemeasSemDiag').Value), ' ', 15);
      strLinha := strLinha + FormatFloat('0.00', Qry.FieldByName('QtdFemeasSemDiag').Value / Qry.FieldByName('QtdFemeasEmMonta').Value * 100) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      // Quantidade de bezerros nascidos
      strLinha := PadR('Quantidade de bezerros nascidos', ' ', 60);
      strLinha := strLinha + FormatFloat('000', Qry.FieldByName('QtdBezerrosNascidos').Value);
      Rel.ImprimirTexto(01, strLinha);      

      // Quantidade de bezerros desmamados
      strLinha := PadR('Quantidade de bezerros desmamados', ' ', 60);
      strLinha := strLinha + FormatFloat('000', Qry.FieldByName('QtdBezerrosDesmamados').Value);
      Rel.ImprimirTexto(01, strLinha);

      Rel.NovaLinha;

      // Peso médio ao desmame
      strLinha := PadR('Peso médio ao desmame (Kg.)', ' ', 60);
      strLinha := strLinha + FormatFloat('0.00', SE(Qry.FieldByName('QtdPesoMedioDesmame').IsNull, 0, Qry.FieldByName('QtdPesoMedioDesmame').AsInteger));
      Rel.ImprimirTexto(01, strLinha);
            
      // Perdas de gestação + diagnóstico errado
      strLinha := PadR('Perdas de gestação + disgnósticos errados', ' ', 60);
      strLinha := strLinha + FormatFloat('0.00', PercentualPerdaErrosDiag) + ' %';
      Rel.ImprimirTexto(01, strLinha);

      Retorno := Rel.FinalizarRelatorio;
      { Se a finalização foi bem sucedida retorna o nome do arquivo gerado }
      if Retorno = 0 then begin
        Result := Rel.NomeArquivo;
      end;
    finally
      Rel.Free;
    end;
  Finally
    Qry.Free;
    qAux.Free;
  end;
end;

function TIntEventos.InserirDesmame(EDtaEvento: TDateTime;
                                    ECodAptidao,
                                    ECodRegimeAlimentarDestino: Integer;
                                    ETxtObservacao: String;
                                    ECodFazenda,
                                    ECodTarefa: Integer): Integer;
const
  NomMetodo: String = 'InserirDesmame';
var
  Qry: THerdomQuery;
  CodEvento: Integer;                                    
begin
  Result := InserirDesmame(EDtaEvento,
                           ECodAptidao,
                           ECodRegimeAlimentarDestino,
                           ETxtObservacao,
                           ECodFazenda);
  if Result < 0 then
  begin
    Exit;
  end
  else
  begin
    CodEvento := Result;
  end;  

  if ECodTarefa > 0 then
  begin
    Qry := THerdomQuery.Create(Conexao, nil);
    try
      try
        with Qry do
        begin
          SQL.Clear;
          SQL.Add(' select cod_tipo_tarefa ');
          SQL.Add('   from tab_tarefa ');
          SQL.Add('  where cod_tarefa = :cod_tarefa ');
          ParamByName('cod_tarefa').AsInteger := ECodTarefa;
          Open;

          if IsEmpty then
          begin
            Mensagens.Adicionar(1329, Self.ClassName, NomMetodo, []);
            Result := -1329;
            RollBack;
            Exit;
          end;

          if FieldByName('cod_tipo_tarefa').AsInteger <> 7 then
          begin
            Mensagens.Adicionar(1339, Self.ClassName, NomMetodo, []);
            Result := -1339;
            RollBack;
            Exit;
          end;

          SQL.Clear;
          SQL.Add(' update tab_evento ');
          SQL.Add('    set cod_tarefa = :cod_tarefa ');
          SQL.Add('  where cod_evento = :cod_evento ');
          ParamByName('cod_tarefa').AsInteger := ECodTarefa;
          ParamByName('cod_evento').AsInteger := CodEvento;
          ExecSQL;

          Commit;

          Result := CodEvento;
        end;
      except
        on E:Exception do
        begin
          Mensagens.Adicionar(2242, Self.ClassName, NomMetodo, [E.Message]);
          Result := -2242;
          RollBack;
          Exit;
        end;
      end;
    finally
      Qry.Free;
    end;
  end;
end;

function TIntEventos.RelatorioFormularioSaidaAnimal(CodEvento: Integer): String;
const
  NomeMetodo: String = 'RelatorioFormularioSaidaAnimal';
var
  Q, QueryLocal: THerdomQuery;
  CodigoDeBarras: TCodigoDeBarras2De5Intercalado;
  ImprimeCabecalho, ImprimirRodape: boolean;
  PDF : TPrintPDF;
  NroPagx, NroPagy, LinhaImp : Double;
  Coef: Extended;
  Bmp : TBitMap;
  QtdPaginas, ProdutorTrabalho: Integer;
  Rel: TRelatorioPadrao;

  function RetiraEspacosEmBranco(Texto: String): String;
  var
    ipTxt: Integer;
  begin
    Result := '';
    for ipTxt := 1 to Length(Texto) do begin
      if Texto[ipTxt] <> #32 then begin
        Result := Result + Texto[ipTxt];
      end;
    end;
  end;

begin
  ImprimirRodape := false;
  LinhaImp := 0;
  NroPagx  := 567;
  NroPagy  := 839;
  QtdPaginas := 1;
  Rel := nil;

  Try
    Coef := StrToFloat(ValorParametro(124));
  Except
    Coef := 28.3501;
  End;


  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Result := '';
    Exit;
  end;

  ProdutorTrabalho := Conexao.CodProdutorTrabalho;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    Q := THerdomQuery.Create(Conexao, nil);
    try
      // Verifica se o evento está efetivado
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select dta_inicio,');
        SQL.Add('       cod_situacao_sisbov');
        SQL.Add('  from tab_evento');
        SQL.Add(' where cod_evento = :cod_evento');
        SQL.Add('   and cod_pessoa_produtor = :cod_pessoa_produtor');
        ParamByName('cod_evento').AsInteger := CodEvento;
        ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;

        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(2015, Self.ClassName, NomeMetodo, [IntToStr(CodEvento)]);
          Exit;
        end;
      end;

      // Verifica se a propriedade de destino do evento se encontra na base de
      // dados da certificadora
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('select te.cod_pessoa_produtor ');
        SQL.Add('    ,  te.cod_tipo_evento ');
        SQL.Add('    ,  tpo.nom_pessoa   as nom_pessoa_origem ');
        SQL.Add('    ,  tpo.num_cnpj_cpf as cpf_cnpj_origem ');
        SQL.Add('    -- Nome da propriedade origem ');
        SQL.Add('    ,  CASE WHEN te.cod_fazenda is null THEN ');
        SQL.Add('	  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('             (select tpr1.nom_propriedade_rural ');
        SQL.Add('               from  tab_evento_transferencia tef1 ');
        SQL.Add('                  ,  tab_propriedade_rural tpr1 ');
        SQL.Add('               where tef1.cod_pessoa_produtor    = te.cod_pessoa_produtor ');
        SQL.Add('                 and tef1.cod_evento             = te.cod_evento ');
        SQL.Add('                 and tef1.cod_propriedade_origem = tpr1.cod_propriedade_rural ');
        SQL.Add('                 and tpr1.dta_fim_validade is null) ');
        SQL.Add('          ELSE ');
        SQL.Add('             '''' ');
        SQL.Add('          END ');
        SQL.Add('       ELSE ');
        SQL.Add('          (select   nom_propriedade_rural ');
        SQL.Add('              from  tab_fazenda tf1 ');
        SQL.Add('                 ,  tab_propriedade_rural tpr1 ');
        SQL.Add('              where tf1.cod_pessoa_produtor   = te.cod_pessoa_produtor ');
        SQL.Add('                and tf1.cod_fazenda           = te.cod_fazenda ');
        SQL.Add('                and tf1.cod_propriedade_rural = tpr1.cod_propriedade_rural ');
        SQL.Add('                and tf1.dta_fim_validade is null) ');
        SQL.Add('       END as nom_propriedade_origem ');
        SQL.Add('    -- ');
        SQL.Add('    -- Nome do municipio e estado da propriedade rural origem ');
        SQL.Add('    ,  CASE WHEN te.cod_fazenda is null THEN ');
        SQL.Add('	  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('             (select tm2.nom_municipio + '' - '' + te2.sgl_estado ');
        SQL.Add('               from  tab_evento_transferencia tef2 ');
        SQL.Add('                  ,  tab_propriedade_rural tpr2 ');
        SQL.Add('                  ,  tab_municipio tm2 ');
        SQL.Add('                  ,  tab_estado te2 ');
        SQL.Add('               where tef2.cod_pessoa_produtor    = te.cod_pessoa_produtor ');
        SQL.Add('                 and tef2.cod_evento             = te.cod_evento ');
        SQL.Add('                 and tef2.cod_propriedade_origem = tpr2.cod_propriedade_rural ');
        SQL.Add('                 and tpr2.cod_municipio          = tm2.cod_municipio ');
        SQL.Add('                 and tpr2.cod_estado             = te2.cod_estado ');
        SQL.Add('                 and tpr2.dta_fim_validade is null) ');
        SQL.Add('          ELSE ');
        SQL.Add('             '''' ');
        SQL.Add('          END ');
        SQL.Add('       ELSE ');
        SQL.Add('          (select   tm2.nom_municipio + '' - '' + te2.sgl_estado ');
        SQL.Add('              from  tab_fazenda tf2 ');
        SQL.Add('                 ,  tab_propriedade_rural tpr2 ');
        SQL.Add('                 ,  tab_municipio tm2 ');
        SQL.Add('                 ,  tab_estado te2 ');
        SQL.Add('              where tf2.cod_pessoa_produtor    = te.cod_pessoa_produtor ');
        SQL.Add('                and tf2.cod_fazenda            = te.cod_fazenda ');
        SQL.Add('                and tf2.cod_propriedade_rural  = tpr2.cod_propriedade_rural ');
        SQL.Add('                and tpr2.cod_municipio         = tm2.cod_municipio ');
        SQL.Add('                and tpr2.cod_estado            = te2.cod_estado ');
        SQL.Add('                and tf2.dta_fim_validade is null) ');
        SQL.Add('       END as municipio_propriedade_origem ');
        SQL.Add('    -- ');
        SQL.Add('    -- Inscrição Estadual origem ');
        SQL.Add('    ,  CASE WHEN te.cod_fazenda is null THEN ');
        SQL.Add('	  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('             (select tf3.num_propriedade_rural ');
        SQL.Add('               from  tab_evento_transferencia tef3 ');
        SQL.Add('                  ,  tab_fazenda tf3 ');
        SQL.Add('               where tef3.cod_pessoa_produtor    = te.cod_pessoa_produtor ');
        SQL.Add('                 and tef3.cod_evento             = te.cod_evento ');
        SQL.Add('                 and tef3.cod_pessoa_origem      = tf3.cod_pessoa_produtor ');
        SQL.Add('                 and tef3.cod_propriedade_origem = tf3.cod_propriedade_rural ');
        SQL.Add('                 and tf3.dta_fim_validade is null) ');
        SQL.Add('          ELSE ');
        SQL.Add('             '''' ');
        SQL.Add('          END ');
        SQL.Add('       ELSE ');
        SQL.Add('          (select   tf3.num_propriedade_rural ');
        SQL.Add('              from  tab_fazenda tf3 ');
        SQL.Add('              where te.cod_pessoa_produtor = tf3.cod_pessoa_produtor ');
        SQL.Add('                and te.cod_fazenda         = tf3.cod_fazenda ');
        SQL.Add('                and tf3.dta_fim_validade is null) ');
        SQL.Add('       END as num_inscricao_origem ');
        SQL.Add('    -- ');
        SQL.Add('    -- Produtor/Frigorifico de destino ');
        SQL.Add('    ,  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('          (select CASE WHEN tef4.cod_tipo_lugar_destino = 1 THEN ');
        SQL.Add('			                tpo.nom_pessoa ');
        SQL.Add('		               ELSE ');
        SQL.Add('			                tp4.nom_pessoa ');
        SQL.Add('                  END ');
        SQL.Add('            from  tab_evento_transferencia tef4 ');
        SQL.Add('               ,  tab_pessoa tp4 ');
        SQL.Add('            where tef4.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        SQL.Add('              and tef4.cod_evento          = te.cod_evento ');
        SQL.Add('              and tef4.cod_pessoa_destino  *= tp4.cod_pessoa ');
        SQL.Add('              and tp4.dta_fim_validade is null) ');
        SQL.Add('       WHEN te.cod_tipo_evento = 9 THEN ');
        SQL.Add('          (select tp4.nom_pessoa ');
        SQL.Add('            from  tab_evento_venda_criador tev4 ');
        SQL.Add('               ,  tab_pessoa tp4 ');
        SQL.Add('            where tev4.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        SQL.Add('              and tev4.cod_evento          = te.cod_evento ');
        SQL.Add('              and tev4.cod_pessoa          = tp4.cod_pessoa ');
        SQL.Add('              and tp4.dta_fim_validade is null) ');
        SQL.Add('       ELSE ');
        SQL.Add('          (select tp4.nom_pessoa ');
        SQL.Add('            from  tab_evento_venda_frigorifico tef4 ');
        SQL.Add('               ,  tab_pessoa tp4 ');
        SQL.Add('            where tef4.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        SQL.Add('              and tef4.cod_evento          = te.cod_evento ');
        SQL.Add('              and tef4.cod_pessoa          = tp4.cod_pessoa ');
        SQL.Add('              and tp4.dta_fim_validade is null) ');
        SQL.Add('       END as nom_pessoa_destino ');
        SQL.Add('    -- ');
        SQL.Add('    -- CPF/CNPJ do produtor/Frigorifico de destino ');
        SQL.Add('    ,  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('          (select CASE WHEN tef5.cod_tipo_lugar_destino = 1 THEN ');
        SQL.Add('                			tpo.num_cnpj_cpf ');
        SQL.Add('		               ELSE ');
        SQL.Add('		                	tp5.num_cnpj_cpf ');
        SQL.Add('                  END ');
        SQL.Add('            from  tab_evento_transferencia tef5 ');
        SQL.Add('               ,  tab_pessoa tp5 ');
        SQL.Add('            where tef5.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        SQL.Add('              and tef5.cod_evento          = te.cod_evento ');
        SQL.Add('              and tef5.cod_pessoa_destino  *= tp5.cod_pessoa ');
        SQL.Add('              and tp5.dta_fim_validade is null) ');
        SQL.Add('       WHEN te.cod_tipo_evento = 9 THEN ');
        SQL.Add('          (select tp5.num_cnpj_cpf ');
        SQL.Add('            from  tab_evento_venda_criador tev5 ');
        SQL.Add('               ,  tab_pessoa tp5 ');
        SQL.Add('            where tev5.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        SQL.Add('              and tev5.cod_evento          = te.cod_evento ');
        SQL.Add('              and tev5.cod_pessoa          = tp5.cod_pessoa ');
        SQL.Add('              and tp5.dta_fim_validade is null) ');
        SQL.Add('       ELSE ');
        SQL.Add('          (select tp5.num_cnpj_cpf ');
        SQL.Add('            from  tab_evento_venda_frigorifico tef5 ');
        SQL.Add('               ,  tab_pessoa tp5 ');
        SQL.Add('            where tef5.cod_pessoa_produtor = te.cod_pessoa_produtor ');
        SQL.Add('              and tef5.cod_evento          = te.cod_evento ');
        SQL.Add('              and tef5.cod_pessoa          = tp5.cod_pessoa ');
        SQL.Add('              and tp5.dta_fim_validade is null) ');
        SQL.Add('       END as cpf_cnpj_destino ');
        SQL.Add('    -- ');
        SQL.Add('    -- Nome da propriedade destino ');
        SQL.Add('    ,  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('          (select tpr6.nom_propriedade_rural ');
        SQL.Add('            from  tab_evento_transferencia tef6 ');
        SQL.Add('               ,  tab_propriedade_rural tpr6 ');
        SQL.Add('            where tef6.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('              and tef6.cod_evento              = te.cod_evento ');
        SQL.Add('              and tef6.cod_propriedade_destino = tpr6.cod_propriedade_rural ');
        SQL.Add('              and tpr6.dta_fim_validade is null) ');
        SQL.Add('       ELSE ');
        SQL.Add('          (select tpr6.nom_propriedade_rural ');
        SQL.Add('            from  tab_evento_venda_criador tev6 ');
        SQL.Add('               ,  tab_propriedade_rural tpr6 ');
        SQL.Add('            where tev6.cod_pessoa_produtor   = te.cod_pessoa_produtor ');
        SQL.Add('              and tev6.cod_evento            = te.cod_evento ');
        SQL.Add('              and tev6.cod_propriedade_rural = tpr6.cod_propriedade_rural ');
        SQL.Add('              and tpr6.dta_fim_validade is null) ');
        SQL.Add('       END as nom_propriedade_destino ');
        SQL.Add('    -- ');
        SQL.Add('    -- Inscricao Estadual destino ');
        SQL.Add('    ,  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('          (select CASE WHEN tef7.cod_tipo_lugar_destino = 1 THEN ');
        SQL.Add('               			(select tf7.num_propriedade_rural ');
        SQL.Add('        		           from  tab_evento_transferencia tef7 ');
        SQL.Add('		                      ,  tab_fazenda tf7 ');
        SQL.Add('               	  	 where tef7.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('	              	       and tef7.cod_evento              = te.cod_evento ');
        SQL.Add('        	               and te.cod_pessoa_produtor       = tf7.cod_pessoa_produtor ');
        SQL.Add('		                     and tef7.cod_propriedade_destino = tf7.cod_propriedade_rural ');
        SQL.Add('		                     and tf7.dta_fim_validade is null) ');
        SQL.Add(' 	            	 ELSE ');
        SQL.Add('   		            	tf7.num_propriedade_rural ');
        SQL.Add('                  END ');
        SQL.Add('            from  tab_evento_transferencia tef7 ');
        SQL.Add('               ,  tab_fazenda tf7 ');
        SQL.Add('            where tef7.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('              and tef7.cod_evento              = te.cod_evento ');
        SQL.Add('              and tef7.cod_pessoa_destino      *= tf7.cod_pessoa_produtor ');
        SQL.Add('              and tef7.cod_propriedade_destino *= tf7.cod_propriedade_rural ');
        SQL.Add('              and tf7.dta_fim_validade is null) ');
        SQL.Add('       WHEN te.cod_tipo_evento = 9 THEN ');
        SQL.Add('          (select tf7.num_propriedade_rural ');
        SQL.Add('            from  tab_evento_venda_criador tev7 ');
        SQL.Add('               ,  tab_fazenda tf7 ');
        SQL.Add('            where tev7.cod_pessoa_produtor   = te.cod_pessoa_produtor ');
        SQL.Add('              and tev7.cod_evento            = te.cod_evento ');
        SQL.Add('              and tev7.cod_pessoa            = tf7.cod_pessoa_produtor ');
        SQL.Add('              and tev7.cod_propriedade_rural = tf7.cod_propriedade_rural ');
        SQL.Add('              and tf7.dta_fim_validade is null) ');
        SQL.Add('       ELSE ');
        SQL.Add('          '''' ');
        SQL.Add('       END as num_inscricao_destino ');
        SQL.Add('    -- ');
        SQL.Add('    -- Nome do municipio e estado da propriedade rural destino ');
        SQL.Add('    ,  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('          (select tm8.nom_municipio + '' - '' + te8.sgl_estado ');
        SQL.Add('            from  tab_evento_transferencia tef8 ');
        SQL.Add('               ,  tab_propriedade_rural tpr8 ');
        SQL.Add('               ,  tab_municipio tm8 ');
        SQL.Add('               ,  tab_estado te8 ');
        SQL.Add('            where tef8.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('              and tef8.cod_evento              = te.cod_evento ');
        SQL.Add('              and tef8.cod_propriedade_destino = tpr8.cod_propriedade_rural ');
        SQL.Add('              and tpr8.cod_municipio           = tm8.cod_municipio ');
        SQL.Add('              and tpr8.cod_estado              = te8.cod_estado ');
        SQL.Add('              and tpr8.dta_fim_validade is null) ');
        SQL.Add('       WHEN te.cod_tipo_evento = 9 THEN ');
        SQL.Add('          (select tm8.nom_municipio + '' - '' + te8.sgl_estado ');
        SQL.Add('            from  tab_evento_venda_criador tev8 ');
        SQL.Add('               ,  tab_propriedade_rural tpr8 ');
        SQL.Add('               ,  tab_municipio tm8 ');
        SQL.Add('               ,  tab_estado te8 ');
        SQL.Add('            where tev8.cod_pessoa_produtor   = te.cod_pessoa_produtor ');
        SQL.Add('              and tev8.cod_evento            = te.cod_evento ');
        SQL.Add('              and tev8.cod_propriedade_rural = tpr8.cod_propriedade_rural ');
        SQL.Add('              and tpr8.cod_municipio         = tm8.cod_municipio ');
        SQL.Add('              and tpr8.cod_estado            = te8.cod_estado ');
        SQL.Add('              and tpr8.dta_fim_validade is null) ');
        SQL.Add('        ELSE ');
        SQL.Add('          (select tm8.nom_municipio + '' - '' + te8.sgl_estado ');
        SQL.Add('            from  tab_evento_venda_frigorifico tef8 ');
        SQL.Add('               ,  tab_pessoa tp8 ');
        SQL.Add('               ,  tab_municipio tm8 ');
        SQL.Add('               ,  tab_estado te8 ');
        SQL.Add('            where tef8.cod_pessoa_produtor   = te.cod_pessoa_produtor ');
        SQL.Add('              and tef8.cod_evento            = te.cod_evento ');
        SQL.Add('              and tef8.cod_pessoa            = tp8.cod_pessoa ');
        SQL.Add('              and tp8.cod_municipio          = tm8.cod_municipio ');
        SQL.Add('              and tp8.cod_estado             = te8.cod_estado ');
        SQL.Add('              and tp8.dta_fim_validade is null) ');
        SQL.Add('       END as municipio_propriedade_destino ');
        SQL.Add('    -- ');
        SQL.Add('    -- Numero da GTA ');
        SQL.Add('    ,  CASE WHEN te.cod_tipo_evento = 8 THEN ');
        SQL.Add('          (select CASE WHEN tef9.cod_serie_gta is null THEN ');
        SQL.Add('                     CASE WHEN te9.sgl_estado is null THEN ');
        SQL.Add('                        tef9.num_gta ');
        SQL.Add('                     ELSE ');
        SQL.Add('                        te9.sgl_estado + ''-'' + tef9.num_gta ');
        SQL.Add('                     END ');
        SQL.Add('                  ELSE ');
        SQL.Add('                     CASE WHEN te9.sgl_estado is null THEN ');
        SQL.Add('                        tef9.cod_serie_gta + ''-'' + tef9.num_gta ');
        SQL.Add('                     ELSE ');
        SQL.Add('                        tef9.cod_serie_gta + ''-'' + te9.sgl_estado + ''-'' + tef9.num_gta ');
        SQL.Add('                     END ');
        SQL.Add('                  END ');
        SQL.Add('            from  tab_evento_transferencia tef9 ');
        SQL.Add('               ,  tab_estado te9 ');
        SQL.Add('            where tef9.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('              and tef9.cod_evento              = te.cod_evento ');
        SQL.Add('              and tef9.cod_estado_gta          *= te9.cod_estado) ');
        SQL.Add('       WHEN te.cod_tipo_evento = 9 THEN ');
        SQL.Add('          (select CASE WHEN tev9.cod_serie_gta is null THEN ');
        SQL.Add('                     CASE WHEN te9.sgl_estado is null THEN ');
        SQL.Add('                        tev9.num_gta ');
        SQL.Add('                     ELSE ');
        SQL.Add('                        te9.sgl_estado + ''-'' + tev9.num_gta ');
        SQL.Add('                     END ');
        SQL.Add('                  ELSE ');
        SQL.Add('                     CASE WHEN te9.sgl_estado is null THEN ');
        SQL.Add('                        tev9.cod_serie_gta + ''-'' + tev9.num_gta ');
        SQL.Add('                     ELSE ');
        SQL.Add('                        tev9.cod_serie_gta + ''-'' + te9.sgl_estado + ''-'' + tev9.num_gta ');
        SQL.Add('                     END ');
        SQL.Add('                  END ');
        SQL.Add('            from  tab_evento_venda_criador tev9 ');
        SQL.Add('               ,  tab_estado te9 ');
        SQL.Add('            where tev9.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('              and tev9.cod_evento              = te.cod_evento ');
        SQL.Add('              and tev9.cod_estado_gta          *= te9.cod_estado) ');
        SQL.Add('        ELSE ');
        SQL.Add('          (select CASE WHEN tef9.cod_serie_gta is null THEN ');
        SQL.Add('                     CASE WHEN te9.sgl_estado is null THEN ');
        SQL.Add('                        tef9.num_gta ');
        SQL.Add('                     ELSE ');
        SQL.Add('                        te9.sgl_estado + ''-'' + tef9.num_gta ');
        SQL.Add('                     END ');
        SQL.Add('                  ELSE ');
        SQL.Add('                     CASE WHEN te9.sgl_estado is null THEN ');
        SQL.Add('                        tef9.cod_serie_gta + ''-'' + tef9.num_gta ');
        SQL.Add('                     ELSE ');
        SQL.Add('                        tef9.cod_serie_gta + ''-'' + te9.sgl_estado + ''-'' + tef9.num_gta ');
        SQL.Add('                     END ');
        SQL.Add('                  END ');
        SQL.Add('            from  tab_evento_venda_frigorifico tef9 ');
        SQL.Add('               ,  tab_estado te9 ');
        SQL.Add('            where tef9.cod_pessoa_produtor     = te.cod_pessoa_produtor ');
        SQL.Add('              and tef9.cod_evento              = te.cod_evento ');
        SQL.Add('              and tef9.cod_estado_gta          *= te9.cod_estado) ');
        SQL.Add('       END as num_gta_evento ');
        SQL.Add('    -- ');
        SQL.Add('    ,  cast(ta.cod_pais_sisbov as varchar(3)) + right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + ');
        SQL.Add('	CASE ta.cod_micro_regiao_sisbov WHEN 0 THEN ');
        SQL.Add('	  ''00'' ');
        SQL.Add('	WHEN -1 THEN ');
        SQL.Add('          '''' ');
        SQL.Add('	ELSE ');
        SQL.Add('          right(''00'' + convert(varchar(2), ta.cod_micro_regiao_sisbov), 2) ');
        SQL.Add('	END + right(''000000000'' + convert(varchar(9), ta.cod_animal_sisbov), 9) + ');
        SQL.Add('       convert(varchar(1), ta.num_dv_sisbov) as cod_animal_sisbov ');
        SQL.Add(' from   tab_evento te ');
        SQL.Add('    ,  tab_pessoa tpo ');
        SQL.Add('    ,  tab_animal_evento tae ');
        SQL.Add('    ,  tab_animal ta ');
        SQL.Add(' where  te.cod_pessoa_produtor = :cod_pessoa_produtor ');
        SQL.Add('  and  te.cod_evento           = :cod_evento ');
        SQL.Add('  and  te.cod_pessoa_produtor  = tpo.cod_pessoa ');
        SQL.Add('  and  te.cod_pessoa_produtor  = tae.cod_pessoa_produtor ');
        SQL.Add('  and  te.cod_evento           = tae.cod_evento ');
        SQL.Add('  and  tae.cod_animal          = ta.cod_animal ');


        ParamByName('cod_pessoa_produtor').AsInteger := ProdutorTrabalho;
        ParamByName('cod_evento').AsInteger          := CodEvento;
   //     sql.SaveToFile('c:\super_query.sql');
        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(2010, Self.ClassName, NomeMetodo, [IntToStr(CodEvento)]);
          Exit;
        end;

        if (FieldByName('cpf_cnpj_origem').IsNull) or
           (FieldByName('num_inscricao_origem').IsNull) then begin
          Mensagens.Adicionar(2398, Self.ClassName, NomeMetodo, [IntToStr(CodEvento)]);
          Exit;
        end;

        if (FieldByName('cpf_cnpj_destino').IsNull) or
           ((FieldByName('cod_tipo_evento').AsInteger <> 10) and (FieldByName('num_inscricao_destino').IsNull)) then begin
          Mensagens.Adicionar(2399, Self.ClassName, NomeMetodo, [IntToStr(CodEvento)]);
          Exit;
        end;
      end;

      PDF := TPrintPDF.Create(nil);
      try
        PDF.Title := 'Certificados de Animais';
        PDF.Compress := True;


        Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
        Rel.BuscarNomeArquivo;

// Tratar nome do arquivo de relatorio

        PDF.FileName := Rel.NomeArquivo + '.pdf';
        PDF.beginDoc;

        PDF.PageWidth  := Round(21 * Coef);
        PDF.PageHeight := Round(30.5 * Coef);

        PDF.LineWidth := 1;
        PDF.LineStyle := TPDFLineStyle(2);
        PDF.Font.Name := TPDFFontName(2);
        PDF.Font.Size := 11;


        CodigoDeBarras := TCodigoDeBarras2De5Intercalado.Create(nil);
        CodigoDeBarras.Orientacao := oHorizontal;
        ImprimeCabecalho := true;

        try
          if not QueryLocal.Eof then begin
            // Recupera orientação e tamanho do papel
            Q.SQL.Clear;
            Q.SQL.Text :=
                ' select cod_formulario  ' +
                '    ,   cod_campo_formulario ' +
                '    ,   des_campo_formulario ' +
                '    ,   des_coluna_result_set  ' +
                '    ,   cod_fonte_campo  ' +
                '    ,   cod_posicao_campo ' +
                '    ,   num_posicao_x  ' +
                '    ,   num_posicao_y ' +
                ' from tab_campo_formulario_animal tcf ' +
                ' where tcf.cod_formulario = 1 ';
              Q.Open;

            if Q.IsEmpty then begin
              Mensagens.Adicionar(2397, Self.ClassName, NomeMetodo, [IntToStr(CodEvento)]);
              Exit;
            end;

            PDF.Font.Name := TPDFFontName(3);
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString);
            Q.Next;
            PDF.Font.Name := TPDFFontName(2);

            if QueryLocal.FieldByName('cod_tipo_evento').AsInteger = 10 then begin
              PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                          Q.FieldByName('des_campo_formulario').AsString + QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            end else begin
              PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                                Q.FieldByName('des_campo_formulario').AsString + QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            end;
            Q.Next;

            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' ' + QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString + ' ' + QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;

            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            Q.Next;
            PDF.TextOut(Trunc(Q.FieldByName('num_posicao_x').AsFloat * Coef), Trunc(Q.FieldByName('num_posicao_y').AsFloat * Coef),
                        Q.FieldByName('des_campo_formulario').AsString  + ' '+ QueryLocal.FieldByName(Q.FieldByName('des_coluna_result_set').AsString).AsString);
            LinhaImp := Q.FieldByName('num_posicao_y').AsFloat + 1;
            Q.Next;

            ImprimirRodape := true;
          end;

          while not QueryLocal.Eof do begin
            if ImprimeCabecalho then begin
              PDF.Font.Name := TPDFFontName(3);
              PDF.TextOut(Trunc(1  * Coef), Trunc(LinhaImp * Coef), 'Nº SISBOV');
              PDF.TextOut(Trunc(5  * Coef), Trunc(LinhaImp * Coef), 'CÓDIGO DE BARRAS');
              PDF.TextOut(Trunc(11 * Coef), Trunc(LinhaImp * Coef), 'Nº SISBOV');
              PDF.TextOut(Trunc(15 * Coef), Trunc(LinhaImp * Coef), 'CÓDIGO DE BARRAS');
              PDF.Font.Name := TPDFFontName(2);

              LinhaImp := LinhaImp + 1.7;
              ImprimeCabecalho := false;
            end;

            PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), QueryLocal.FieldByName('cod_animal_sisbov').AsString);
            //  Gera código de barras do código sisbov
            Bmp := CodigoDeBarras.GetBitmap(RetiraEspacosEmBranco(QueryLocal.FieldByName('cod_animal_sisbov').AsString));
            if Assigned(Bmp) then begin
              try
                LinhaImp := LinhaImp - 0.6;
                PDF.ReferenciarBitmap(Trunc(5 * Coef), Trunc(LinhaImp * Coef), PDF.EscreverBitmap(Bmp), 55);
                LinhaImp := LinhaImp + 0.6;
              Finally
                Bmp.Free;
              end;
            end;

            QueryLocal.Next;

            if not QueryLocal.Eof then begin
              PDF.TextOut(Trunc(11 * Coef), Trunc(LinhaImp * Coef), QueryLocal.FieldByName('cod_animal_sisbov').AsString);
              //  Gera código de barras do código sisbov
              Bmp := CodigoDeBarras.GetBitmap(RetiraEspacosEmBranco(QueryLocal.FieldByName('cod_animal_sisbov').AsString));
              if Assigned(Bmp) then begin
                try
                  LinhaImp := LinhaImp - 0.6;
                  PDF.ReferenciarBitmap(Trunc(15 * Coef), Trunc(LinhaImp * Coef), PDF.EscreverBitmap(Bmp), 55);
                  LinhaImp := LinhaImp + 0.6;
                Finally
                  Bmp.Free;
                end;
              end;

              QueryLocal.Next;
            end;

            LinhaImp := LinhaImp + 1.7;

            // Quebra a página e renicializa variaveis
            if (LinhaImp >= 30) and (not QueryLocal.Eof) then begin
              PDF.TextOut(Trunc(NroPagx), Trunc(NroPagy), IntToStr(QtdPaginas));

              PDF.NewPage;
              LinhaImp := 1;
              QtdPaginas := QtdPaginas + 1;
              ImprimeCabecalho := true;
            end;
          end;
        Finally
          CodigoDeBarras.Free;
        end;

        If ImprimirRodape then begin
          if LinhaImp+7 >= 30 then begin
            PDF.TextOut(Trunc(NroPagx), Trunc(NroPagy), IntToStr(QtdPaginas));
            QtdPaginas := QtdPaginas + 1;
            PDF.NewPage;
            LinhaImp := 4;
          end else begin
            LinhaImp := LinhaImp + 1;
          end;

          PDF.TextOut(Trunc(1.5 * Coef), Trunc(LinhaImp * Coef), '________________________________________    ______________________________________');
          LinhaImp := LinhaImp + 0.5;
          PDF.TextOut(Trunc(1.5 * Coef), Trunc(LinhaImp * Coef), '      ASSINATURA DO PRODUTOR RURAL                 ASSINATURA DO RESPONSÁVEL');

          LinhaImp := LinhaImp + 2;
          PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), 'Recebi a 1ª via em ____/____/_______,   __________________________________________');
          LinhaImp := LinhaImp + 0.5;
          PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), 'Assinatura do responsável pelo Órgão');
          LinhaImp := LinhaImp + 0.5;
          PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), 'Executor da Sanidade Animal nos Estados');

          LinhaImp := LinhaImp + 1;
          PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), '1ª via - Órgão Executor da Sanidade Animal nos Estados');
          LinhaImp := LinhaImp + 0.5;
          PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), '2ª via - Certificadora');
          LinhaImp := LinhaImp + 0.5;
          PDF.TextOut(Trunc(1 * Coef), Trunc(LinhaImp * Coef), '3ª via - Arquivo do Estabelecimento Rural Aprovado no SISBOV');

          PDF.TextOut(Trunc(NroPagx), Trunc(NroPagy), IntToStr(QtdPaginas));
        end;

        PDF.ENDDoc;
        FUltimoArquivoGerado := PDF.FileName;
      Finally
        PDF.Free;
      end;

      Result := ExtractFileName(Rel.NomeArquivo);
    finally
      QueryLocal.Free;
      Q.Free;
      Rel.Free;
    end;
  except
    on E: exception do
    begin
      Rollback;
      Mensagens.Adicionar(2396, Self.ClassName, NomeMetodo, [E.Message]);
      exit;
    end;
  end;
end;

function TIntEventos.RelatorioFormularioAnexoXI(CodFazenda, CodEvento: Integer; const CodAnimais: WideString; VerificaSISBOV: Integer): WideString;
const
  NomeMetodo: String = 'RelatorioFormularioAnexoXI';
var
  Q, QAni, QueryLocal: THerdomQuery;
  CodigoDeBarras: TCodigoDeBarras2De5Intercalado;
  PDF : TPrintPDF;
  NroPagx, NroPagy : Double;
  Coef: Extended;
  Bmp : TBitMap;
  QtdPaginas, ProdutorTrabalho: Integer;
  Rel: TRelatorioPadrao;
  _CodAnimaisNOT: String;
  NumSisbov: String;

  margem, xx,x,y,z: Integer;

  SoapSisbov: TIntSoapSisbov;
  Retorno: RetornoConsultarDadosAnimal;

  function RetiraEspacosEmBranco(Texto: String): String;
  var
    ipTxt: Integer;
  begin
    Result := '';
    for ipTxt := 1 to Length(Texto) do begin
      if Texto[ipTxt] <> #32 then begin
        Result := Result + Texto[ipTxt];
      end;
    end;
  end;

  function Preenche(Texto: String; Tamanho: Integer; Caracter: String): String;
  var i: Integer;
  begin
    Result := Texto;
    for i := 1 to Tamanho do
      Result := Result + Caracter;
  end;

  procedure Cabecalho;
  begin
    x := Trunc(11 * Coef);
    y := Trunc(2 * Coef);
    margem := 20;

    PDF.Font.Size := 14;
    PDF.TextOut( x, y, 'Planilha de Identificação Individual');
    PDF.LineWidth := 2;
    PDF.LineStyle := lsSolid;
    PDF.DrawLine( margem, y - margem, PDF.PageWidth - margem, y - margem);

    PDF.LineWidth := 1;
    PDF.Font.Size := 9;

    // PRODUTOR RURAL
    x  := Trunc(2 * Coef);
    xx := Trunc(4.4 * Coef);
    y  := Trunc(3 * Coef);
    PDF.TextOut( x, y, 'Produtor Rural: ');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('nom_pessoa').AsString);

    // CPF/CNPJ
    x  := Trunc(23 * Coef);
    xx := Trunc(25 * Coef);
    y  := Trunc(3 * Coef);
    PDF.TextOut( x, y, 'CPF/CNPJ: ');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('num_cnpj_cpf').AsString);

    // NOME ESTABELECIMENTO
    x  := Trunc(2 * Coef);
    xx := Trunc(10 * Coef);
    y  := Trunc(3.5 * Coef);
    PDF.TextOut( x, y, 'Nome do Estabelecimento Rural Aprovado no SisBov:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('nom_propriedade_rural').AsString);

    // CÓDIGO DO ESTABELECIMENTO
    x  := Trunc(2 * Coef);
    xx := Trunc(10 * Coef);
    y  := Trunc(4 * Coef);
    PDF.TextOut( x, y, 'Código do Estabelecimento Rural Aprovado no SisBov:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('cod_id_propriedade_sisbov').AsString);
    // NIRF
    x  := Trunc(23 * Coef);
    xx := Trunc(25 * Coef);
    y  := Trunc(4 * Coef);
    PDF.TextOut( x, y, 'Nirf/Incra:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('num_imovel_receita_federal').AsString);

    // MUNICIPIO
    x  := Trunc(2 * Coef);
    xx := Trunc(4.4 * Coef);
    y  := Trunc(4.5 * Coef);
    PDF.TextOut( x, y, 'Município:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('nom_municipio').AsString);
    // ESTADO
    x  := Trunc(23 * Coef);
    xx := Trunc(25 * Coef);
    y  := Trunc(4.5 * Coef);
    PDF.TextOut( x, y, 'Estado:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('sgl_estado').AsString);
    if (not QAni.Eof) then
    begin
      // CABECALHO ANIMAIS

      // MOLDURA
      PDF.DrawRectangle( Trunc(1.4 * Coef), Trunc(5.4 * Coef) ,
                         Trunc(29.4 * Coef), Trunc(6.3 * Coef));
      // COLUNAS
      PDF.Font.Name := poHelveticaBold;
      PDF.Font.Size := 10;
      y  := Trunc(6 * Coef);

      x  := Trunc(2.3 * Coef);  PDF.TextOut( x, y, 'Nr SisBov');
      x  := Trunc(4.9 * Coef);  PDF.TextOut( x, y, 'Nr Manejo');
      x  := Trunc(7 * Coef);    PDF.TextOut( x, y, 'Espécie');
      x  := Trunc(8.8 * Coef);  PDF.TextOut( x, y, 'Raça');
      x  := Trunc(12 * Coef);   PDF.TextOut( x, y, 'Sexo');
      x  := Trunc(13.3 * Coef); PDF.TextOut( x, y, 'Data Nasc.');

      y  := Trunc(5.8 * Coef);
      x  := Trunc(15.4 * Coef); PDF.TextOut( x, y, 'Idade em');
      y  := Trunc(6.2 * Coef);
      x  := Trunc(15.6 * Coef); PDF.TextOut( x, y, 'Meses');

      y  := Trunc(6 * Coef);
      x  := Trunc(18.85 * Coef); PDF.TextOut( x, y, 'Código de Barras');
      x  := Trunc(23.9 * Coef); PDF.TextOut( x, y, ' Data de Liberação para Abate ');
    end;
  end;
  procedure NumeroPagina;
  begin
    PDF.Font.Size := 8;
    PDF.TextOut( Trunc(NroPagx) - 8 , Trunc(NroPagy), IntToStr(QtdPaginas));
  end;
  procedure Rodape(Items: Double);
  begin
    if (Items = 9) or
       ((QAni.Eof) and (Items >= 7) ) then
    begin
      NumeroPagina;
      QtdPaginas := QtdPaginas + 1;
      PDF.NewPage;
      Cabecalho;
    end;
    PDF.Font.Size := 9;
    PDF.Font.Name := poHelveticaBold;
    if (QAni.Eof) then
    begin
      if (Items >= 7) then
        Items := -1;
      Items := Items + 1;
      y  := Trunc((6 + (Items * 1.5)) * Coef);
      x  := Trunc(7 * Coef);
      PDF.TextOut(x, y, 'Este relatório cumpre com o dispositivo na Instrução Normativa nº 17, de 13 de julho de 2006 - Anexo XI');

      Items := Items + 0.4;
      y  := Trunc((6 + (Items * 1.5)) * Coef);
      x  := Trunc(5.6 * Coef);
      PDF.Font.Name := poHelvetica;
      PDF.TextOut(x, y, 'Declaro que os animais acima identificados e relacionados encontram-se com os elementos de identificação devidamento afixados.');

      Items := Items + 1;
      y  := Trunc((6 + (Items * 1.5)) * Coef);
      x  := Trunc(3 * Coef);
      PDF.TextOut(x, y, '________________________________________');
      x  := Trunc(11 * Coef);
      PDF.TextOut(x, y, '________________________________________');
      x  := Trunc(19 * Coef);
      PDF.TextOut(x, y, '________________________________________');

      Items := Items + 0.3;
      y  := Trunc((6 + (Items * 1.5)) * Coef);
      x  := Trunc(5 * Coef);
      PDF.TextOut(x, y, 'Assinatura do Produtor');
      x  := Trunc(10.34 * Coef);
      PDF.TextOut(x, y, 'ou');
      x  := Trunc(12 * Coef);
      PDF.TextOut(x, y, 'Assinatura do Responsável Legal');
      x  := Trunc(21.5 * Coef);
      PDF.TextOut(x, y, 'Local e Data');
      NumeroPagina;
    end;
  end;
  function BuscaAnimais(RestringirAnimaisAtivos: Boolean = False): Boolean;
  begin
    with QAni do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT CAST(ani.cod_pais_sisbov AS VARCHAR(3)) + ');
      SQL.Add('       RIGHT(''00'' + CAST(ani.cod_estado_sisbov AS VARCHAR(2)),2) + ');
      SQL.Add('	      CASE ani.cod_micro_regiao_sisbov WHEN 0 THEN ''00'' WHEN -1 THEN '''' ');
      SQL.Add('	      ELSE RIGHT(''00'' + CONVERT(VARCHAR(2), ani.cod_micro_regiao_sisbov), 2) END + ');
      SQL.Add('       RIGHT(''000000000'' + CONVERT(VARCHAR(9), ani.cod_animal_sisbov), 9) + ');
      SQL.Add('       CONVERT(VARCHAR(1), ani.num_dv_sisbov) AS cod_animal_sisbov, ');
      SQL.Add('       ani.cod_animal_manejo,');
      SQL.Add('       ani.cod_animal,');
      SQL.Add('       ani.cod_pessoa_produtor,');
      SQL.Add('       esp.des_especie,');
      SQL.Add('       rac.des_raca,');
      SQL.Add('       CASE ani.ind_sexo');
      SQL.Add('         WHEN ''M'' THEN');
      SQL.Add('            ''Macho'' ');
      SQL.Add('         WHEN ''F'' THEN');
      SQL.Add('            ''Fêmea'' ');
      SQL.Add('       END AS ind_sexo,');
      SQL.Add('       ani.dta_nascimento,');
      SQL.Add('       dbo.fnt_idade_meses(ani.dta_nascimento, getdate()) AS idade_meses,'); // modificado a pedido do Eduardo da Arroba
      SQL.Add('       ani.txt_observacao,');
      SQL.Add('       ani.dta_insercao_sisbov,');
      SQL.Add('       ani.cod_autenticacao_sisbov');
      SQL.Add('FROM  tab_animal ani');
      SQL.Add('INNER JOIN tab_animal_evento aev ON (aev.cod_pessoa_produtor = ani.cod_pessoa_produtor AND aev.cod_evento = :cod_evento AND aev.cod_animal = ani.cod_animal)');
      SQL.Add('INNER JOIN tab_especie esp ON (esp.cod_especie = ani.cod_especie)');
      SQL.Add('INNER JOIN tab_raca rac ON (rac.cod_raca = ani.cod_raca)');
      SQL.Add('WHERE ani.cod_pessoa_produtor = :cod_pessoa_produtor');
      SQL.Add('AND ani.cod_fazenda_manejo = :cod_fazenda');
      SQL.Add('AND ani.dta_fim_validade IS NULL');
      if (RestringirAnimaisAtivos) then
        SQL.Add('AND NOT ( (ani.cod_autenticacao_sisbov IS NULL) OR (ani.cod_autenticacao_sisbov = '''') OR (ani.dta_insercao_sisbov IS NULL))');
      if (CodAnimais <> '') then
        SQL.Add('AND ani.cod_animal IN (' + CodAnimais + ')');
      if (_CodAnimaisNOT <> '') then
        SQL.Add('AND NOT ani.cod_animal IN (' + _CodAnimaisNOT + ')');
      ParamByName('cod_pessoa_produtor').AsInteger := ProdutorTrabalho;
      ParamByName('cod_fazenda').AsInteger         := CodFazenda;
      ParamByName('cod_evento').AsInteger          := CodEvento;
      Open;
      Result := not IsEmpty;
    end;
  end;

begin
  QueryLocal := nil;
  QAni       := nil;
  Q          := nil;
  Rel        := nil;
  SoapSisbov := nil;

  NroPagx        := 839;
  NroPagy        := 567;
  QtdPaginas     := 1;
  _CodAnimaisNOT := '';

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Result := '';
    Exit;
  end;

  ProdutorTrabalho := Conexao.CodProdutorTrabalho;

  try
    Coef := StrToFloat(ValorParametro(124));
  except
    Coef := 28.3501;
  end;

  QueryLocal := THerdomQuery.Create(Conexao, nil);
  Q          := THerdomQuery.Create(Conexao, nil);
  QAni       := THerdomQuery.Create(Conexao, nil);
  SoapSisbov := TIntSoapSisbov.Create;
  try
    // Conexão SOAP
    if (SoapSisbov.Inicializar(Conexao, Mensagens) <> 0) then
      Exit;
    if not SoapSisbov.conectado('Animais para impressão do Anexo XI') then
      Exit;

    try
      // Busca dados da Fazenda
      if (CodFazenda = 0) then
        with QueryLocal do
        begin
          SQL.Clear;
          SQL.Add('SELECT cod_fazenda FROM tab_evento');
          SQL.Add('WHERE cod_pessoa_produtor = :cod_pessoa_produtor');
          SQL.Add('AND cod_evento = :cod_evento');
          ParamByName('cod_pessoa_produtor').AsInteger := ProdutorTrabalho;
          ParamByName('cod_evento').AsInteger          := CodEvento;
          Open;
          CodFazenda := FieldByName('cod_fazenda').AsInteger;
          Close;
        end;

      // Busca dados do Produtor / Propriedade
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT pes.cod_pessoa,');
        SQL.Add('       pes.nom_pessoa,');
        SQL.Add('       pes.num_cnpj_cpf,');
        SQL.Add('       prop.cod_propriedade_rural,');
        SQL.Add('       prop.cod_id_propriedade_sisbov,');
        SQL.Add('       prop.nom_propriedade_rural,');
        SQL.Add('       prop.num_imovel_receita_federal,');
        SQL.Add('       mun.nom_municipio,');
        SQL.Add('       est.sgl_estado');
        SQL.Add('FROM   tab_pessoa pes');
        SQL.Add('INNER JOIN tab_fazenda faz ON (faz.cod_pessoa_produtor = pes.cod_pessoa)');
        SQL.Add('INNER JOIN tab_propriedade_rural prop ON (faz.cod_propriedade_rural = prop.cod_propriedade_rural)');
//        SQL.Add('INNER JOIN tab_propriedade_rural prop ON (prop.cod_pessoa_proprietario = pes.cod_pessoa)');
//        SQL.Add('INNER JOIN tab_fazenda faz ON (faz.cod_pessoa_produtor = prop.cod_pessoa_proprietario AND faz.cod_propriedade_rural = prop.cod_propriedade_rural)');
        SQL.Add('INNER JOIN tab_municipio mun ON (mun.cod_municipio = prop.cod_municipio)');
        SQL.Add('INNER JOIN tab_estado est ON (est.cod_estado = prop.cod_estado)');
        SQL.Add('WHERE pes.cod_pessoa = :cod_pessoa_produtor');
        SQL.Add('AND faz.cod_fazenda = :cod_fazenda');
        SQL.Add('AND pes.dta_fim_validade IS NULL');
        SQL.Add('AND faz.dta_fim_validade IS NULL');
        SQL.Add('AND prop.dta_fim_validade IS NULL');
        ParamByName('cod_pessoa_produtor').AsInteger := ProdutorTrabalho;
        ParamByName('cod_fazenda').AsInteger         := CodFazenda;
        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(2402, Self.ClassName, NomeMetodo, []);
          Exit;
        end;
      end;

      // Busca dados dos Animais sem restringir Autenticados pelo SisBov
      if not BuscaAnimais then
      begin
        Mensagens.Adicionar(2404, Self.ClassName, NomeMetodo, []);
        Exit;
      end;

      if (VerificaSISBOV <> -1) then
      begin
        // Verifica dados dos Animais
        QAni.First;
        while not QAni.Eof do
        begin
          Retorno := nil;
          // Tenta obter autenticação no SISBOV
          NumSisbov := QAni.FieldByName('cod_animal_sisbov').AsString;
          try
            Retorno := SoapSisbov.consultarDadosAnimal( Descriptografar(ValorParametro(118)),
                                                        Descriptografar(ValorParametro(119)),
                                                        NumSisbov );
          except
            on E: Exception do
            begin
              Mensagens.Adicionar(2401, Self.ClassName, NomeMetodo, [E.Message]);
              Exit;
            end;
          end;
          if (Retorno <> nil) and (Retorno.Status = 1) then
          begin
            if (Trim(Retorno.dia) <> '') then
            begin
              Q.SQL.Clear;
              {$IFDEF MSSQL}
              Q.SQL.Add('UPDATE tab_animal ' +
                        '   SET cod_autenticacao_sisbov = :cod_autenticacao_sisbov ' +
                        '    ,  dta_insercao_sisbov     = :dta_insercao_sisbov ' +
                        '    ,  cod_id_transacao_sisbov = :cod_id_transacao ' +
                        ' WHERE cod_pessoa_produtor     = :cod_pessoa_produtor ' +
                        '   AND cod_animal              = :cod_animal ');
              {$ENDIF}
              Q.ParamByName('cod_pessoa_produtor').AsInteger      := QAni.FieldByName('cod_pessoa_produtor').AsInteger;
              Q.ParamByName('cod_animal').AsInteger               := QAni.FieldByName('cod_animal').AsInteger;
              Q.ParamByName('cod_id_transacao').AsInteger         := Retorno.idTransacao;
              Q.ParamByName('cod_autenticacao_sisbov').AsString   := Retorno.dia;
              Q.ParamByName('dta_insercao_sisbov').AsString       := Retorno.dataInclusao;
              BeginTran;
              Q.ExecSQL;
              Commit;
            end;
          end
          else
            begin
              if (_CodAnimaisNOT <> '') then
                _CodAnimaisNOT := _CodAnimaisNOT + ',';
              _CodAnimaisNOT := _CodAnimaisNOT + IntToStr(QAni.FieldByName('cod_animal').AsInteger);
            end;
          QAni.Next;
        end;

        // Busca novamente os dados dos Animais
        if not BuscaAnimais(True) then
        begin
          Mensagens.Adicionar(2403, Self.ClassName, NomeMetodo, []);
          Exit;
        end;
      end;

      PDF := TPrintPDF.Create(nil);
      try
        PDF.Title := 'Planilha de Identificação Individual';
        PDF.Compress := True;

        Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
        Rel.BuscarNomeArquivo;

        // Tratar nome do arquivo de relatorio

        PDF.FileName    := Rel.NomeArquivo + '.pdf';
        PDF.Orientation := poLandscape;
        PDF.BeginDoc;
        PDF.PageWidth   := Round(30.5 * Coef);
        PDF.PageHeight  := Round(21 * Coef);
        PDF.Font.Name   := poHelvetica;

        CodigoDeBarras := TCodigoDeBarras2De5Intercalado.Create(nil);
        CodigoDeBarras.Orientacao := oHorizontal;

        try
          Cabecalho;

          QAni.First;
          z := 0;
          while not QAni.Eof do
          begin
            Inc(z);
            PDF.Font.Name := poHelvetica;
            PDF.Font.Size := 9;
            y   := Trunc((6 + (z * 1.5)) * Coef);
            x   := Trunc(1.75 * Coef);  PDF.TextOut( x, y, QAni.FieldByName('cod_animal_sisbov').AsString);
            x   := Trunc(5.15 * Coef);  PDF.TextOut( x, y, QAni.FieldByName('cod_animal_manejo').AsString);
            x   := Trunc(7 * Coef);     PDF.TextOut( x, y, QAni.FieldByName('des_especie').AsString);
            x   := Trunc(8.8 * Coef);   PDF.TextOut( x, y, QAni.FieldByName('des_raca').AsString);
            x   := Trunc(12 * Coef);    PDF.TextOut( x, y, QAni.FieldByName('ind_sexo').AsString);
            x   := Trunc(13.45 * Coef); PDF.TextOut( x, y, QAni.FieldByName('dta_nascimento').AsString);
            x   := Trunc(15.9 * Coef);  PDF.TextOut( x, y, QAni.FieldByName('idade_meses').AsString);
            x   := Trunc(23.9 * Coef);  PDF.TextOut( x, y, QAni.FieldByName('txt_observacao').AsString);
            y   := Trunc((5.5 + (z * 1.5)) * Coef);

            // CODIGO DE BARRAS
            x   := Trunc(18 * Coef);
            Bmp := CodigoDeBarras.GetBitmap(RetiraEspacosEmBranco(QAni.FieldByName('cod_animal_sisbov').AsString));
            if Assigned(Bmp) then
              try
                PDF.ReferenciarBitmap(x, y, PDF.EscreverBitmap(Bmp), 55);
              finally
                Bmp.Free;
              end;
            QAni.Next;
            Rodape(z);
            if (z = 9) then
              z := 0;
          end;
        finally
          CodigoDeBarras.Free;
        end;
        PDF.ENDDoc;
        FUltimoArquivoGerado := PDF.FileName;
      finally
        PDF.Free;
      end;
      Result := ExtractFileName(Rel.NomeArquivo);
    finally
      if (QueryLocal <> nil) then
        QueryLocal.Free;
      if (QAni <> nil) then
        QAni.Free;
      if (Q <> nil) then
        Q.Free;
      if (Rel <> nil) then
        Rel.Free;
      if (SoapSisBov <> nil) then
        SoapSisbov.Free;
    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(2400, Self.ClassName, NomeMetodo, [E.Message]);
      Exit;
    end;
  end;
end;

function TIntEventos.ExportarAnimaisAbcz(const CodAnimais: WideString;
                                         CodPaisSisbov, CodEstadoSisbov, CodMicroRegiaoSisbov, CodSisbovInicio,
                                         CodSisbovFim: Integer; DtaNascimentoInicio, DtaNascimentoFim: TDateTime;
                                         const CodRaca, CodCategoria: WideString; CodTipoLugar: Integer;
                                         const CodLocal, CodLote, CodManejoInicio, CodManejoFim,
                                         IndSexo: WideString; CodProdutor, CodTarefa: Integer): WideString;
const
  NomeMetodo: String = 'ExportarAnimaisAbcz';
  CodTipoTarefa: Integer = 8;
var Arquivo: TStrings;
    Rel: TRelatorioPadrao;
    NomeDoArquivo: String;
    _Serie, _Letras, _Registro, _Sexo, _Nascimento, _Raca, _NumeroSISBOV, _CNPJ, _CategoriaRegistro, _NomeProdutor: String;
    Query: THerdomQuery;
    CodProdutorTrabalho, Retorno: Integer;
  function CNPJCertificadora: String;
  var
    Q : THerdomQuery;
    Pessoa : String;
  begin
    Result := '';
    try
      Pessoa := ValorParametro(4);
    except
      Exit;
    end;
    Q := THerdomQuery.Create(Conexao, nil);
    try
      try
        Q.SQL.Clear;
        {$IFDEF MSSQL}
        Q.SQL.Add('SELECT num_cnpj_cpf FROM tab_pessoa WHERE cod_pessoa = :cod_pessoa AND dta_fim_validade IS NULL');
        {$ENDIF}
        Q.ParamByName('cod_pessoa').AsInteger := StrToInt(Pessoa);
        Q.Open;
        if Q.IsEmpty then
        begin
          Mensagens.Adicionar(1088, Self.ClassName, NomeMetodo, []);
          Exit;
        end;
        Result := Q.FieldByName('num_cnpj_cpf').AsString;
      except
        On E: Exception do begin
          Rollback;
          Mensagens.Adicionar(1089, Self.ClassName, NomeMetodo, [E.Message]);
          Result := '';
          Exit;
        end;
      end;
    finally
      Q.Free;
    end;
  end;
  function strTamanho(Texto: String; Tamanho: Integer): String;
  begin
    Result := Copy(Texto + '                                                                    ', 1, Tamanho);
  end;
  function numTamanho(Texto: String; Tamanho: Integer): String;
  begin
    Result := Texto;
    while not (Length(Result) = Tamanho) do
      Result := ' ' + Result;
  end;
  procedure ProcessaRGD(_RGD: String; var vSerie, vRegistro: String);
  var i, p: Integer;
  begin
    p := -1;
    vSerie    := '';
    vRegistro := '';
    for i := 1 to Length(_RGD) do
      if (StrToIntDef(_RGD[i], -1) = -1) then
        p := i;
    if (p = -1) then
    begin
      vSerie    := '';
      vRegistro := _RGD;
    end
    else
      begin
        vSerie    := Copy(_RGD, 1, p);
        vRegistro := Copy(_RGD, p+1, Length(_RGD)-p);
      end;
  end;
  procedure WhereAdicional;
  begin
    if (CodManejoInicio <> '') and (CodManejoFim <> '') then
      Query.SQL.Add('  and ta.cod_animal_manejo between :CodManejoInicio and :CodManejoFim');
    if (CodManejoInicio <> '') and (CodManejoFim = '') then
      Query.SQL.Add('  and ta.cod_animal_manejo >= :CodManejoInicio ');
    if (CodManejoInicio = '') and (CodManejoFim <> '') then
      Query.SQL.Add('  and ta.cod_animal_manejo <= :CodManejoFim ');
    if (CodPaisSisBov > 0) then
      Query.SQL.Add('  and ta.cod_pais_sisbov = :CodPaisSisBov');
    if (CodEstadoSisBov > 0) then
      Query.SQL.Add('  and ta.cod_estado_sisbov = :CodEstadoSisBov');
    if (CodMicroRegiaoSisBov > 0) then
    begin
      if (CodMicroRegiaoSisBov = 88) then //Parametro passado pelo ASP, indicando que o filtro deverá ser por micro regiao -1
        Query.SQL.Add('  and ta.cod_micro_regiao_sisbov = -1')
      else
        Query.SQL.Add('  and ta.cod_micro_regiao_sisbov = :CodMicroRegiaoSisBov');
    end;
    if (CodSisBovInicio > 0) and (CodSisBovFim > 0) then
      Query.SQL.Add('  and ta.cod_animal_sisbov between :CodSisBovInicio and :CodSisBovFim');
    if (CodSisBovInicio > 0) and (CodSisBovFim <= 0) then
      Query.SQL.Add('  and ta.cod_animal_sisbov >= :CodSisBovInicio ');
    if (CodSisBovInicio <= 0) and (CodSisBovFim > 0) then
      Query.SQL.Add('  and ta.cod_animal_sisbov <= :CodSisBovFim ');
    if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
      Query.SQL.Add('  and ta.dta_nascimento between :DtaNascimentoInicio and :DtaNascimentoFim');
    if (CodRaca <> '') then
      Query.SQL.Add('  and ta.cod_raca in (' + CodRaca + ')');
    if (IndSexo = 'M') or (IndSexo = 'F') then
      Query.SQL.Add('  and ta.ind_sexo =:IndSexo');
    if (CodLocal <> '') then
      Query.SQL.Add('  and ta.cod_fazenda_corrente in (' + CodLocal + ')');
    if (CodLote <> '') then
      Query.SQL.Add('  and ta.cod_lote_corrente in (' + CodLote + ')');
  end;
begin
  Result := '';
  _NomeProdutor := '';
  Query  := nil;
  CodProdutorTrabalho := CodProdutor;
  if (CodProdutorTrabalho = 0) then
    CodProdutorTrabalho := Conexao.CodProdutorTrabalho;

  if not Inicializado then
  begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;
  Rel     := nil;
  Arquivo := TStringList.Create;
  try
    try
      Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
      Rel.BuscarNomeArquivo;
      NomeDoArquivo := Rel.NomeArquivo + '_ABCZ_' + IntToStr(CodProdutorTrabalho) + '.txt';
      Rel.Free;
      Rel := nil;

      _CNPJ := CNPJCertificadora;
      if (_CNPJ = '') then
        Exit;

      Query := THerdomQuery.Create(Conexao, nil);
      {$IFDEF MSSQL}
      Query.SQL.Add('SELECT nom_pessoa FROM tab_pessoa WHERE cod_pessoa = :cod_pessoa');
      {$ENDIF}
      Query.ParamByName('cod_pessoa').AsInteger := CodProdutor;
      Query.Open;
      _NomeProdutor := Query.FieldByName('nom_pessoa').AsString;
      Query.Close;
      Query.SQL.Clear;
      
     {$IFDEF MSSQL}
      Query.SQL.Add('SELECT ' + //TOP 5000' +
                    '       CASE ta.cod_pais_sisbov  when null then null  else right(''000'' + cast(ta.cod_pais_sisbov as varchar(3)),3) end as CodPaisSisBov,');
      Query.SQL.Add('       CASE ta.cod_animal_sisbov  when null then ''''  else right(''00'' + cast(ta.cod_estado_sisbov as varchar(2)),2) + ' +
                    '       CASE ta.cod_micro_regiao_sisbov when -1 then '''' else right(''00'' + cast(ta.cod_micro_regiao_sisbov as varchar(2)),2) end + ' +
                    '       RIGHT(''000000000'' + cast(ta.cod_animal_sisbov as varchar(9)),9) + right(''0'' + cast(ta.num_dv_sisbov as varchar(1)),1) end as CodAnimalSisBov,');
      Query.SQL.Add('       ta.ind_sexo as IndSexo ,');
      Query.SQL.Add('       ta.num_rgd as NumRGD,');
      Query.SQL.Add('       ta.cod_raca as CodRaca,');
      Query.SQL.Add('       ta.dta_nascimento as DtaNascimento,');
      Query.SQL.Add('       tr.cod_raca_abcz as CodRacaAbcz,');
      Query.SQL.Add('       tgs.sgl_grau_sangue as SglGrauSangue');
      Query.SQL.Add('  FROM tab_animal AS ta WITH (NOLOCK)');
      Query.SQL.Add(' INNER JOIN tab_raca AS tr ON (tr.cod_raca = ta.cod_raca)');
      Query.SQL.Add('  LEFT JOIN tab_grau_sangue AS tgs ON (tgs.cod_grau_sangue = ta.cod_grau_sangue)');
      Query.SQL.Add(' WHERE ta.dta_fim_validade is null');
      Query.SQL.Add('   AND ta.cod_pessoa_produtor = ' + IntToStr(CodProdutorTrabalho));
      Query.SQL.Add('   AND ta.cod_tipo_origem <> 4');
      Query.SQL.Add('   AND ta.cod_categoria_animal IN (SELECT cod_categoria_animal FROM tab_categoria_animal WHERE ind_animal_ativo = ''S'' )');
      Query.SQL.Add('   AND ta.cod_associacao_raca = 1');
      if (CodTipoLugar > 0) then
        Query.SQL.Add('   AND ta.cod_tipo_lugar = ' + IntToStr(CodTipoLugar));
      WhereAdicional;
      Query.SQL.Add('UNION');
      Query.SQL.Add('SELECT CASE ta.cod_pais_sisbov  WHEN NULL THEN NULL  ELSE RIGHT(''000'' + CAST(ta.cod_pais_sisbov AS varchar(3)),3) END AS CodPaisSisBov,');
      Query.SQL.Add('       CASE ta.cod_animal_sisbov  WHEN NULL THEN ''''  ELSE RIGHT(''00'' + CAST(ta.cod_estado_sisbov AS varchar(2)),2) + ' +
                    '       CASE ta.cod_micro_regiao_sisbov WHEN -1 THEN '''' ELSE RIGHT(''00'' + CAST(ta.cod_micro_regiao_sisbov AS varchar(2)),2) END + ' +
                    '       RIGHT(''000000000'' + CAST(ta.cod_animal_sisbov AS VARCHAR(9)),9) + RIGHT(''0'' + cast(ta.num_dv_sisbov AS varchar(1)),1) END AS CodAnimalSisBov,');
      Query.SQL.Add('       ta.ind_sexo AS IndSexo ,');
      Query.SQL.Add('       ta.num_rgd AS NumRGD,');
      Query.SQL.Add('       ta.cod_raca AS CodRaca,');
      Query.SQL.Add('       ta.dta_nascimento AS DtaNascimento,');
      Query.SQL.Add('       tr.cod_raca_abcz AS CodRacaAbcz,');
      Query.SQL.Add('       tgs.sgl_grau_sangue as SglGrauSangue');
      Query.SQL.Add('  FROM tab_animal AS ta WITH (NOLOCK)');
      Query.SQL.Add(' INNER JOIN tab_raca AS tr ON (tr.cod_raca = ta.cod_raca)');
      Query.SQL.Add('  LEFT JOIN tab_grau_sangue AS tgs ON (tgs.cod_grau_sangue = ta.cod_grau_sangue)');
      Query.SQL.Add(' WHERE ta.dta_fim_validade IS NULL');
      Query.SQL.Add('   AND ta.cod_pessoa_produtor = ' + IntToStr(CodProdutorTrabalho));
      Query.SQL.Add('   AND ta.cod_tipo_origem <> 4');
      Query.SQL.Add('   AND ta.cod_categoria_animal IN (SELECT cod_categoria_animal FROM tab_categoria_animal WHERE ind_animal_ativo = ''S'' )');
      Query.SQL.Add('   AND ta.cod_associacao_raca = 1');
      if (CodTipoLugar > 0) then
        Query.SQL.Add('   AND ta.cod_tipo_lugar IN (2, 3)');
      WhereAdicional;
     {$ENDIF}

     // DEFINICAO DE VALORES PARA OS PARAMETROS DA QUERY
//      if (CodTipoLugar > 0) then
//        Query.ParamByName('CodTipoLugar').AsInteger := CodTipoLugar;
      if (CodManejoInicio <> '') then
        Query.ParamByName('CodManejoInicio').AsString := CodManejoInicio;
      if (CodManejoFim <> '') then
        Query.ParamByName('CodManejoFim').AsString := CodManejoFim;
      if (CodPaisSisBov > 0) then
        Query.ParamByName('CodPaisSisBov').AsInteger := CodPaisSisBov;
      if (CodEstadoSisBov > 0) then
        Query.ParamByName('CodEstadoSisBov').AsInteger := CodEstadoSisBov;
      if (CodMicroRegiaoSisBov > 0) then
        if (CodMicroRegiaoSisBov <> 88) then
          Query.ParamByName('CodMicroRegiaoSisBov').AsInteger := CodMicroRegiaoSisBov;
      if (CodSisBovInicio > 0) then
        Query.ParamByName('CodSisBovInicio').AsInteger := CodSisBovInicio;
      if (CodSisBovFim > 0) then
        Query.ParamByName('CodSisBovFim').AsInteger := CodSisBovFim;
      if (DtaNascimentoInicio <> 0) and (DtaNascimentoFim <> 0) then
      begin
        Query.ParamByName('DtaNascimentoInicio').AsDateTime := DtaNascimentoInicio;
        Query.ParamByName('DtaNascimentoFim').AsDateTime := DtaNascimentoFim;
      end;
      if (IndSexo = 'F') or (IndSexo = 'M') then
        Query.ParamByName('IndSexo').AsString := IndSexo;
   //   Query.SQL.SaveToFile('C:\Herdom\Consulta.sql');
      Query.Open;
      if (Query.IsEmpty) then
      begin
        Query.Close;
        Mensagens.Adicionar(9999, Self.Classname, NomeMetodo, ['A pequisa de dados não retornou nenhuma informação para a geração do Arquivo.']);
        Exit;
      end;

      if (CodTarefa <= 0) then
      begin
        Retorno := VerificarAgendamentoTarefa(CodTipoTarefa, [CodAnimais,
                                                              CodPaisSisbov,
                                                              CodEstadoSisbov,
                                                              CodMicroRegiaoSisbov,
                                                              CodSisbovInicio,
                                                              CodSisbovFim,
                                                              DtaNascimentoInicio,
                                                              DtaNascimentoFim,
                                                              CodRaca,
                                                              CodCategoria,
                                                              CodTipoLugar,
                                                              CodLocal,
                                                              CodLote,
                                                              CodManejoInicio,
                                                              CodManejoFim,
                                                              IndSexo,
                                                              CodProdutor,
                                                              _NomeProdutor]);
        if Retorno <= 0 then begin
          if Retorno = 0 then begin
            Mensagens.Adicionar(9999, Self.Classname, NomeMetodo, ['A GERAÇÃO DO ARQUIVO JÁ ESTÁ NA LISTA de tarefas agendadas por processamentos ANTERIORES. Para maiores informações consulte a página "Tarefas Agendadas".']);
          end;
          Exit;
        end;
        // Realiza o agendamento da tarefa para iniciar imediatamente ou tão logo possível
        Retorno := SolicitarAgendamentoTarefa(CodTipoTarefa, [CodAnimais,
                                                              CodPaisSisbov,
                                                              CodEstadoSisbov,
                                                              CodMicroRegiaoSisbov,
                                                              CodSisbovInicio,
                                                              CodSisbovFim,
                                                              DtaNascimentoInicio,
                                                              DtaNascimentoFim,
                                                              CodRaca,
                                                              CodCategoria,
                                                              CodTipoLugar,
                                                              CodLocal,
                                                              CodLote,
                                                              CodManejoInicio,
                                                              CodManejoFim,
                                                              IndSexo,
                                                              CodProdutor,
                                                              _NomeProdutor],
                                                              DtaSistema);
        // Trata o resultado da solicitação, gerando mensagem se bem sucedido
        if Retorno >= 0 then begin
          Mensagens.Adicionar(9999, Self.Classname, NomeMetodo, ['O geração do arquivo foi adicionada na lista de tarefas agendadas. Para maiores informações consulte a página "Tarefas Agendadas".']);
          Result := 'AGENDA';
        end;
        Exit;
      end;

      Query.First;
      while not Query.Eof do
      begin
        ProcessaRGD(Query.FieldByName('NumRGD').AsString, _Serie, _Registro);
        _Raca := Query.FieldByName('CodRacaAbcz').AsString;
        if (_Raca <> '') and (_Serie <> '') and (_Registro <> '') then
        begin
          _Serie             := strTamanho(_Serie, 4);
          _Letras            := '  ';
          _Registro          := numTamanho(_Registro, 7);
          _Sexo              := Query.FieldByName('IndSexo').AsString;
          _Nascimento        := FormatDateTime('ddMMyyyy', Query.FieldByName('DtaNascimento').AsDateTime);
          _NumeroSISBOV      := Query.FieldByName('CodPaisSisBov').AsString + Query.FieldByName('CodAnimalSisBov').AsString;
          _CategoriaRegistro := strTamanho( Copy(Query.FieldByName('SglGrauSangue').AsString, 1, 2), 2);
          Arquivo.Add(_Serie + _Letras + _Registro + _Sexo + _Nascimento + _Raca + _NumeroSISBOV + _CNPJ + _CategoriaRegistro);
        end;
        Query.Next;
      end;

      Arquivo.SaveToFile(NomeDoArquivo);
      Result := ExtractFileName(NomeDoArquivo);
    except
      on E: Exception do
      begin
        Result := '';
        Mensagens.Adicionar(2407, Self.ClassName, NomeMetodo, [E.Message]);
      end;
    end;
  finally
    Arquivo.Free;
    if (Rel <> nil) then
      Rel.Free;
    if (Query <> nil) then
      Query.Free;
  end;
end;

function TIntEventos.RelatorioFormularioAnexoVI(CodProdutor, CodPropriedade: Integer): WideString;
type
  PDadosMF = record
    TotalMacho,
    TotalFemea: Integer;
  end;
  PDadosFaixa = record
    Titulo: String;
    Valores: PDadosMF;
  end;
  PDadosEspecie = record
    Especie: String;
    Faixa  : array[1..5] of PDadosFaixa;
    Total  : Integer;
  end;
const
  NomeMetodo: String = 'RelatorioFormularioAnexoVI';
  ESP_BOVINO   = 0;
  ESP_BUBALINO = 1;
var
  Q, QAni, QueryLocal: THerdomQuery;
  PDF : TPrintPDF;
  Coef, CoefY: Extended;
  Rel: TRelatorioPadrao;
  Especies: array of PDadosEspecie;
  IdxEspecie, IdxFaixa, EspecieAnt: Integer;
  NomCertificadora, CNPJCertificadora: String;
  margem, xx,x,y,z, linha: Integer;
  function TamanhoCaracter(Carac: String): Integer;
  var c: TBitmap;
  begin
    c := TBitmap.Create;
    try
      Result := c.Canvas.TextWidth(Carac);
    finally
      c.Free;
    end;
  end;
  function RetiraEspacosEmBranco(Texto: String): String;
  var
    ipTxt: Integer;
  begin
    Result := '';
    for ipTxt := 1 to Length(Texto) do begin
      if Texto[ipTxt] <> #32 then begin
        Result := Result + Texto[ipTxt];
      end;
    end;
  end;

  function Preenche(Texto: String; Tamanho: Integer; Caracter: String): String;
  var i: Integer;
  begin
    Result := Texto;
    for i := 1 to Tamanho do
      Result := Result + Caracter;
  end;

  procedure Cabecalho;
  begin
    x := Trunc(6.5 * Coef);
    y := Trunc(2 * Coef);
    margem := 20;

    PDF.Font.Size := 14;
    PDF.TextOut( x, y, 'Formulário para Inventário de Animais');
    PDF.LineWidth := 2;
    PDF.LineStyle := lsSolid;
    PDF.DrawLine( margem, y - margem, PDF.PageWidth - margem, y - margem);

    PDF.LineWidth := 1;
    PDF.Font.Size := 9;

    // PRODUTOR RURAL
    x  := Trunc(2 * Coef);
    y  := Trunc(3 * Coef);
    PDF.Font.Name := poHelveticaBold;
    PDF.TextOut( x, y, 'PRODUTOR: ');

    PDF.Font.Name := poHelvetica;
    x  := Trunc(2 * Coef);
    xx := Trunc(5 * Coef);
    y  := Trunc(4 * Coef);
    PDF.TextOut( x, y, 'Nome: ');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('nom_pessoa').AsString);

    x  := Trunc(2 * Coef);
    xx := Trunc(5 * Coef);
    y  := Trunc(4.5 * Coef);
    PDF.TextOut( x, y, 'CPF/CNPJ: ');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('num_cnpj_cpf').AsString);

    x  := Trunc(2 * Coef);
    xx := Trunc(25 * Coef);
    y  := Trunc(5 * Coef);
    PDF.TextOut( x, y, 'Identificação do rebanho no Órgão Executor da Sanidade Animal nos Estados:');
    PDF.TextOut( xx, y, '123.456');

    x  := Trunc(2 * Coef);
    xx := Trunc(5 * Coef);
    y  := Trunc(5.5 * Coef);
    PDF.TextOut( x, y, 'Inscrição Estadual:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('num_inscricao_produtor').AsString);

    // PROPRIEDADE
    x  := Trunc(2 * Coef);
    y  := Trunc(7 * Coef);
    PDF.Font.Name := poHelveticaBold;
    PDF.TextOut( x, y, 'PROPRIEDADE: ');

    PDF.Font.Name := poHelvetica;
    x  := Trunc(2 * Coef);
    xx := Trunc(5 * Coef);
    y  := Trunc(8 * Coef);
    PDF.TextOut( x, y, 'Nome:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('nom_propriedade_rural').AsString);

    x  := Trunc(2 * Coef);
    xx := Trunc(5 * Coef);
    y  := Trunc(8.5 * Coef);
    PDF.TextOut( x, y, 'Nirf/Incra:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('num_imovel_receita_federal').AsString);

    x  := Trunc(2 * Coef);
    xx := Trunc(5 * Coef);
    y  := Trunc(9 * Coef);
    PDF.TextOut( x, y, 'Município:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('nom_municipio').AsString);

    x  := Trunc(17 * Coef);
    xx := Trunc(18.5 * Coef);
    y  := Trunc(9 * Coef);
    PDF.TextOut( x, y, 'Estado:');
    PDF.TextOut( xx, y, QueryLocal.FieldByName('sgl_estado').AsString);
  end;
  procedure Rodape;
  var Items: Double;
  begin
    PDF.Font.Size := 9;
    PDF.Font.Name := poHelvetica;
    Items := 9;
    y  := Trunc((6 + (Items * 1.5)) * Coef);
    x  := Trunc(2 * Coef);
    PDF.TextOut(x, y, 'Local e data:');
    x  := Trunc(9.5 * Coef);
    PDF.TextOut(x, y, '__________________________________, _____/_____/_______');

    Items := Items + 1;
    y  := Trunc((6 + (Items * 1.5)) * Coef);
    x  := Trunc(2 * Coef);
    PDF.TextOut(x, y, 'Assinatura do Produtor/Responsável cadastrado: ');
    x  := Trunc(9.5 * Coef);
    PDF.TextOut(x, y, '____________________________________________');

    Items := Items + 1;
    y  := Trunc((6 + (Items * 1.5)) * Coef);
    x  := Trunc(2 * Coef);
    PDF.TextOut(x, y, 'Certificadora Responsável: ');
    x  := Trunc(9.5 * Coef);
    PDF.TextOut(x, y, '____________________________________________');
    PDF.TextOut(x, y-1, '  ' + NomCertificadora);

    Items := Items + 1;
    y  := Trunc((6 + (Items * 1.5)) * Coef);
    x  := Trunc(2 * Coef);
    PDF.TextOut(x, y, 'Assinatura e carimbo do Supervisor da certificadora: ');
    x  := Trunc(9.5 * Coef);
    PDF.TextOut(x, y, '____________________________________________');

    PDF.Font.Size := 7;
    PDF.DrawRectangle( Trunc(2 * Coef), Trunc(26.2 * Coef)   , Trunc(6.6 * Coef)  , Trunc(26.65 * Coef));
    PDF.TextOut(Trunc(2.1 * Coef), Trunc(26.5 * Coef), 'ANEXO VI DA I.N. Nº17 DE 13/07/2006');

    PDF.Font.Size := 9;
  end;
  function AdicionaEspecie(sEspecie: String): Integer;
  var _i: Integer;
  begin
     Result := -1;
     for _i := Low(Especies) to High(Especies) do
        if (Especies[_i].Especie = sEspecie) then
        begin
          Result := _i;
          Break;
        end;
     if (Result >= 0) then
       Exit;
     SetLength(Especies, Length(Especies)+1);
     Result := High(Especies);
     Especies[Result].Especie         := sEspecie;
     Especies[Result].Total           := 0;
     Especies[Result].Faixa[1].Titulo := '0 a 12';
     Especies[Result].Faixa[2].Titulo := '13 a 24';
     Especies[Result].Faixa[3].Titulo := '25 a 36';
     Especies[Result].Faixa[4].Titulo := 'acima de 36';
     Especies[Result].Faixa[5].Titulo := 'TOTAL';
     for _i := 1 to 5 do
     begin
       Especies[Result].Faixa[_i].Valores.TotalMacho := 0;
       Especies[Result].Faixa[_i].Valores.TotalFemea := 0;
     end;
  end;
  procedure ImprimeValor(x, y: Integer; Valor: Integer);
  begin
    PDF.TextOut( x + (20 div 2) - (TamanhoCaracter(IntToStr(Valor)) div 2) + 1, y, IntToStr(Valor));
  end;
begin

  Rel := nil;
linha := 30473;
  try
    Coef := StrToFloat(ValorParametro(124));
  except
    Coef := 28.3501;
  end;

  try
    QueryLocal := THerdomQuery.Create(Conexao, nil);
    Q          := THerdomQuery.Create(Conexao, nil);
    QAni       := THerdomQuery.Create(Conexao, nil);
    try

linha := 30486;
      if (CodProdutor = 0) then
        CodProdutor := Conexao.CodProdutorTrabalho;
      if (CodPropriedade = 0) then
      begin
        // Busca código da Propriedade
        with QueryLocal do
        begin
          SQL.Clear;
          SQL.Add('SELECT cod_propriedade_rural FROM tab_fazenda WHERE cod_pessoa_produtor = ' + IntToStr(CodProdutor) + ' AND cod_fazenda = ' + IntToStr(Conexao.CodFazendaTrabalho));
          Open;
          if IsEmpty then
          begin
            Mensagens.Adicionar(1210, Self.ClassName, NomeMetodo, []);
            Exit;
          end;
          CodPropriedade  := FieldByName('cod_propriedade_rural').AsInteger;
          Close;
        end;
      end;

linha := 30507;
      // Busca dados da Certificadora
      with QueryLocal do
      begin
        SQL.Clear;
        SQL.Add('SELECT tp.nom_pessoa as NomCertificadora, tp.num_cnpj_cpf AS NumCNPJCertificadora ');
        SQL.Add(' FROM tab_pessoa tp, tab_parametro_sistema tps ');
        SQL.Add('WHERE tp.cod_pessoa = CAST(tps.val_parametro_sistema AS int)');
        SQL.Add('AND tps.cod_parametro_sistema = 4');
        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(1210, Self.ClassName, NomeMetodo, []);
          Exit;
        end;
        NomCertificadora  := FieldByName('NomCertificadora').AsString;
        CNPJCertificadora := FieldByName('NumCNPJCertificadora').AsString;
        Close;
      end;
linha := 30526;
      // Busca dados do Produtor / Propriedade
      with QueryLocal do
      begin
        // Identifica procedimento como bem sucedido
        SQL.Clear;
        SQL.Add('SELECT pes.cod_pessoa,');
        SQL.Add('       pes.nom_pessoa,');
        SQL.Add('       pes.num_cnpj_cpf,');
        SQL.Add('       faz.num_propriedade_rural as num_inscricao_produtor,');
        SQL.Add('       prop.cod_propriedade_rural,');
        SQL.Add('       prop.cod_id_propriedade_sisbov,');
        SQL.Add('       prop.nom_propriedade_rural,');
        SQL.Add('       prop.num_imovel_receita_federal,');
        SQL.Add('       mun.nom_municipio,');
        SQL.Add('       est.sgl_estado');
        SQL.Add('FROM   tab_pessoa pes');
        SQL.Add('INNER JOIN tab_fazenda faz ON (faz.cod_pessoa_produtor = pes.cod_pessoa)');
        SQL.Add('INNER JOIN tab_propriedade_rural prop ON (prop.cod_propriedade_rural = faz.cod_propriedade_rural)');
        SQL.Add('INNER JOIN tab_municipio mun ON (mun.cod_municipio = prop.cod_municipio)');
        SQL.Add('INNER JOIN tab_estado est ON (est.cod_estado = prop.cod_estado)');
        SQL.Add('WHERE pes.cod_pessoa = :cod_pessoa_produtor');
        SQL.Add('AND faz.cod_fazenda = :cod_fazenda');
        ParamByName('cod_pessoa_produtor').AsInteger := CodProdutor;
        ParamByName('cod_fazenda').AsInteger         := Conexao.CodFazendaTrabalho;
        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Dados do Produtor/Propriedade não encontrados.']);
          Exit;
        end;
      end;

linha := 30559;
      // Busca dados
      with QAni do
      begin
        SQL.Clear;
        SQL.Add('SELECT a.cod_especie,');
        SQL.Add('       e.des_especie,');
        SQL.Add('       a.ind_sexo,');
        SQL.Add('       (dbo.fnt_idade_dias(a.dta_nascimento, getdate()) / 30) as idade, count(*) as qtde');
        SQL.Add('FROM tab_animal a');
        SQL.Add('    ,tab_especie e');
        SQL.Add('WHERE a.cod_pessoa_produtor = :cod_pessoa_produtor');
        SQL.Add('  AND a.cod_fazenda_corrente = :cod_fazenda');
        SQL.Add('  AND a.cod_especie = e.cod_especie');
        SQL.Add('  AND a.dta_fim_validade IS NULL');
        SQL.Add('  AND a.cod_categoria_animal IN (SELECT cod_categoria_animal FROM tab_categoria_animal WHERE ind_animal_ativo = ''S'')');
        SQL.Add('GROUP BY a.cod_especie, e.des_especie, a.ind_sexo, (dbo.fnt_idade_dias(a.dta_nascimento, getdate()) / 30)');
        SQL.Add('ORDER BY a.cod_especie, (dbo.fnt_idade_dias(a.dta_nascimento, getdate()) / 30)');
        ParamByName('cod_pessoa_produtor').AsInteger := CodProdutor;
        ParamByName('cod_fazenda').AsInteger         := Conexao.CodFazendaTrabalho;                     
        Open;
        if IsEmpty then
        begin
          Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Nenhum animal foi encontrado para o Produtor/Propriedade.']);
          Exit;
        end;
        EspecieAnt := -1;
        SetLength(Especies, 0);
linha := 30584;
        AdicionaEspecie('Bovino');
        AdicionaEspecie('Bubalino');
linha := 30587;
        while not Eof do
        begin
          if (EspecieAnt <> FieldByName('cod_especie').AsInteger) then
          begin
            IdxEspecie := AdicionaEspecie(FieldByName('des_especie').AsString);
            EspecieAnt := FieldByName('cod_especie').AsInteger;
          end;

          case FieldByName('idade').AsInteger of
             0..12 : IdxFaixa := 1;
            13..24 : IdxFaixa := 2;
            25..36 : IdxFaixa := 3;
            else
              IdxFaixa := 4;
          end;
linha := 30603;
          if (FieldByName('ind_sexo').AsString = 'M') then
          begin
            Especies[IdxEspecie].Faixa[IdxFaixa].Valores.TotalMacho := Especies[IdxEspecie].Faixa[IdxFaixa].Valores.TotalMacho + FieldByName('qtde').AsInteger;
            Especies[IdxEspecie].Faixa[5].Valores.TotalMacho        := Especies[IdxEspecie].Faixa[5].Valores.TotalMacho + FieldByName('qtde').AsInteger;
          end
          else
            begin
              Especies[IdxEspecie].Faixa[IdxFaixa].Valores.TotalFemea := Especies[IdxEspecie].Faixa[IdxFaixa].Valores.TotalFemea + FieldByName('qtde').AsInteger;
              Especies[IdxEspecie].Faixa[5].Valores.TotalFemea        := Especies[IdxEspecie].Faixa[5].Valores.TotalFemea + FieldByName('qtde').AsInteger;
            end;
          Especies[IdxEspecie].Total := Especies[IdxEspecie].Total + FieldByName('qtde').AsInteger;

          Next;
        end;
        Close;
      end;

linha := 30621;
      PDF := TPrintPDF.Create(nil);
      try
        PDF.Title := 'Formulário para Inventário de Animais';
        PDF.Compress := True;


        Rel := TRelatorioPadrao.Create(nil, Conexao, Mensagens);
linha := 30629;
        Rel.BuscarNomeArquivo;

linha := 30632;
        // Tratar nome do arquivo de relatorio

        PDF.FileName    := Rel.NomeArquivo + '.pdf';
        PDF.Orientation := poPortrait;
        PDF.BeginDoc;
        PDF.PageHeight  := Round(30.5 * Coef);
        PDF.PageWidth   := Round(21 * Coef);
        PDF.Font.Name   := poHelvetica;
        PDF.Font.Size   := 9;


linha := 30643;
        Cabecalho;



        PDF.Font.Size := 9;
        PDF.DrawRectangle( Trunc(2 * Coef)  , Trunc(10 * Coef)   , Trunc(10 * Coef)  , Trunc(10.8 * Coef));
        PDF.TextOut( Trunc(2.2 * Coef), Trunc(10.53 * Coef), 'Espécie: ' + Especies[ESP_BOVINO].Especie);
        for z := 0 to 3 do
        begin
          CoefY := z * 1.2;
          PDF.DrawRectangle( Trunc(2 * Coef)  , Trunc((10.9 + CoefY) * Coef) , Trunc(5.2 * Coef)   , Trunc((12 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(6.5 * Coef), Trunc((10.9 + CoefY) * Coef) , Trunc(5.3 * Coef) , Trunc((11.4 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(6.5 * Coef), Trunc((11.5 + CoefY) * Coef) , Trunc(5.3 * Coef) , Trunc((12 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(10 * Coef) , Trunc((10.9 + CoefY) * Coef) , Trunc(6.6 * Coef) , Trunc((11.4 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(10 * Coef) , Trunc((11.5 + CoefY) * Coef) , Trunc(6.6 * Coef) , Trunc((12 + CoefY) * Coef));
        end;
          CoefY := 4.8;
          PDF.DrawRectangle( Trunc(2 * Coef)  , Trunc((10.9 + CoefY) * Coef) , Trunc(5.2 * Coef) , Trunc((12.6 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(6.5 * Coef), Trunc((10.9 + CoefY) * Coef) , Trunc(5.3 * Coef) , Trunc((11.4 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(6.5 * Coef), Trunc((11.5 + CoefY) * Coef) , Trunc(5.3 * Coef) , Trunc((12 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(10 * Coef) , Trunc((10.9 + CoefY) * Coef) , Trunc(6.6 * Coef) , Trunc((11.4 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(10 * Coef) , Trunc((11.5 + CoefY) * Coef) , Trunc(6.6 * Coef) , Trunc((12 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(10 * Coef), Trunc((12.08 + CoefY) * Coef) , Trunc(5.3 * Coef) , Trunc((12.6 + CoefY) * Coef));

        PDF.Font.Size := 8;
        PDF.TextOut( Trunc(2.3 * Coef), Trunc(11.54 * Coef), '0 - 12 meses');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(11.27 * Coef), 'Macho');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(11.87 * Coef), 'Fêmea');

linha := 30673;
        ImprimeValor(Trunc(8   * Coef), Trunc(11.27 * Coef), Especies[ESP_BOVINO].Faixa[1].Valores.TotalMacho);
        ImprimeValor(Trunc(8   * Coef), Trunc(11.87 * Coef), Especies[ESP_BOVINO].Faixa[1].Valores.TotalFemea);

        PDF.TextOut( Trunc(2.3 * Coef), Trunc(12.74 * Coef), '13 - 24 meses');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(12.47 * Coef), 'Macho');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(13.07 * Coef), 'Fêmea');

        ImprimeValor(Trunc(8   * Coef), Trunc(12.47 * Coef), Especies[ESP_BOVINO].Faixa[2].Valores.TotalMacho);
        ImprimeValor(Trunc(8   * Coef), Trunc(13.07 * Coef), Especies[ESP_BOVINO].Faixa[2].Valores.TotalFemea);

        PDF.TextOut( Trunc(2.3 * Coef), Trunc(13.94 * Coef), '25 - 36 meses');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(13.67 * Coef), 'Macho');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(14.27 * Coef), 'Fêmea');

        ImprimeValor(Trunc(8   * Coef), Trunc(13.67 * Coef), Especies[ESP_BOVINO].Faixa[3].Valores.TotalMacho);
        ImprimeValor(Trunc(8   * Coef), Trunc(14.27 * Coef), Especies[ESP_BOVINO].Faixa[3].Valores.TotalFemea);

        PDF.TextOut( Trunc(2.3 * Coef), Trunc(15.14 * Coef), 'ACIMA DE 36 meses');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(14.87 * Coef), 'Macho');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(15.47 * Coef), 'Fêmea');

        ImprimeValor(Trunc(8   * Coef), Trunc(14.87 * Coef), Especies[ESP_BOVINO].Faixa[4].Valores.TotalMacho);
        ImprimeValor(Trunc(8   * Coef), Trunc(15.47 * Coef), Especies[ESP_BOVINO].Faixa[4].Valores.TotalFemea);

        PDF.TextOut( Trunc(2.3 * Coef), Trunc(16.34 * Coef), 'TOTAL');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(16.07 * Coef), 'Macho');
        PDF.TextOut( Trunc(5.5 * Coef), Trunc(16.67 * Coef), 'Fêmea');

linha := 30702;
        ImprimeValor(Trunc(8   * Coef), Trunc(16.07 * Coef), (Especies[ESP_BOVINO].Faixa[1].Valores.TotalMacho +
                                                                      Especies[ESP_BOVINO].Faixa[2].Valores.TotalMacho +
                                                                      Especies[ESP_BOVINO].Faixa[3].Valores.TotalMacho +
                                                                      Especies[ESP_BOVINO].Faixa[4].Valores.TotalMacho ));
        ImprimeValor(Trunc(8   * Coef), Trunc(16.67 * Coef), (Especies[ESP_BOVINO].Faixa[1].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[2].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[3].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[4].Valores.TotalFemea ));
        ImprimeValor(Trunc(8   * Coef), Trunc(17.27 * Coef), (Especies[ESP_BOVINO].Faixa[1].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[2].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[3].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[4].Valores.TotalFemea +
                                                                      Especies[ESP_BOVINO].Faixa[1].Valores.TotalMacho +
                                                                      Especies[ESP_BOVINO].Faixa[2].Valores.TotalMacho +
                                                                      Especies[ESP_BOVINO].Faixa[3].Valores.TotalMacho +
                                                                      Especies[ESP_BOVINO].Faixa[4].Valores.TotalMacho ));

linha := 30721;
        PDF.Font.Size := 9;
        CoefY := 0;
        PDF.DrawRectangle( Trunc(11.0 * Coef) , Trunc((10.0 + CoefY) * Coef) , Trunc(19.0 * Coef) , Trunc((10.8 + CoefY) * Coef));
        PDF.TextOut( Trunc(11.2 * Coef), Trunc(10.53 * Coef), 'Espécie: ' + Especies[ESP_BUBALINO].Especie);
        for z := 0 to 3 do
        begin
          CoefY := z * 1.2;
          PDF.DrawRectangle( Trunc(11.0 * Coef) , Trunc((12.0 + CoefY) * Coef) , Trunc(14.2 * Coef) , Trunc((10.9 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(14.3 * Coef) , Trunc((11.4 + CoefY) * Coef) , Trunc(15.6 * Coef) , Trunc((10.9 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(14.3 * Coef) , Trunc((12.0 + CoefY) * Coef) , Trunc(15.6 * Coef) , Trunc((11.5 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(15.7 * Coef) , Trunc((11.4 + CoefY) * Coef) , Trunc(19.0 * Coef) , Trunc((10.9 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(15.7 * Coef) , Trunc((12.0 + CoefY) * Coef) , Trunc(19.0 * Coef) , Trunc((11.5 + CoefY) * Coef));
        end;
          CoefY := 4.8;
          PDF.DrawRectangle( Trunc(11.0 * Coef) , Trunc((12.6 + CoefY) * Coef) , Trunc(14.2 * Coef) , Trunc((10.9 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(14.3 * Coef) , Trunc((11.4 + CoefY) * Coef) , Trunc(15.6 * Coef) , Trunc((10.9 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(14.3 * Coef) , Trunc((12.0 + CoefY) * Coef) , Trunc(15.6 * Coef) , Trunc((11.5 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(15.7 * Coef) , Trunc((11.4 + CoefY) * Coef) , Trunc(19.0 * Coef) , Trunc((10.9 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(15.7 * Coef) , Trunc((12.0 + CoefY) * Coef) , Trunc(19.0 * Coef) , Trunc((11.5 + CoefY) * Coef));
          PDF.DrawRectangle( Trunc(14.3 * Coef) , Trunc((12.6 + CoefY) * Coef) , Trunc(19.0 * Coef) , Trunc((12.08 + CoefY) * Coef));


linha := 30744;
        PDF.Font.Size := 8;
        PDF.TextOut( Trunc(11.3 * Coef), Trunc(11.54 * Coef), '0 - 12 meses');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(11.27 * Coef), 'Macho');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(11.87 * Coef), 'Fêmea');

        ImprimeValor(Trunc(17  * Coef), Trunc(11.27 * Coef), Especies[ESP_BUBALINO].Faixa[1].Valores.TotalMacho);
        ImprimeValor(Trunc(17  * Coef), Trunc(11.87 * Coef), Especies[ESP_BUBALINO].Faixa[1].Valores.TotalFemea);

        PDF.TextOut( Trunc(11.3 * Coef), Trunc(12.74 * Coef), '13 - 24 meses');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(12.47 * Coef), 'Macho');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(13.07 * Coef), 'Fêmea');

        ImprimeValor(Trunc(17  * Coef), Trunc(12.47 * Coef), Especies[ESP_BUBALINO].Faixa[2].Valores.TotalMacho);
        ImprimeValor(Trunc(17  * Coef), Trunc(13.07 * Coef), Especies[ESP_BUBALINO].Faixa[2].Valores.TotalFemea);

        PDF.TextOut( Trunc(11.3 * Coef), Trunc(13.94 * Coef), '25 - 36 meses');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(13.67 * Coef), 'Macho');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(14.27 * Coef), 'Fêmea');

        ImprimeValor(Trunc(17  * Coef), Trunc(13.67 * Coef), Especies[ESP_BUBALINO].Faixa[3].Valores.TotalMacho);
        ImprimeValor(Trunc(17  * Coef), Trunc(14.27 * Coef), Especies[ESP_BUBALINO].Faixa[3].Valores.TotalFemea);

        PDF.TextOut( Trunc(11.3 * Coef), Trunc(15.14 * Coef), 'ACIMA DE 36 meses');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(14.87 * Coef), 'Macho');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(15.47 * Coef), 'Fêmea');

        ImprimeValor(Trunc(17  * Coef), Trunc(14.87 * Coef), Especies[ESP_BUBALINO].Faixa[4].Valores.TotalMacho);
        ImprimeValor(Trunc(17  * Coef), Trunc(15.47 * Coef), Especies[ESP_BUBALINO].Faixa[4].Valores.TotalFemea);

linha := 30774;
        PDF.TextOut( Trunc(11.3 * Coef), Trunc(16.34 * Coef), 'TOTAL');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(16.07 * Coef), 'Macho');
        PDF.TextOut( Trunc(14.5 * Coef), Trunc(16.67 * Coef), 'Fêmea');
        ImprimeValor(Trunc(17  * Coef), Trunc(16.07 * Coef), (Especies[ESP_BUBALINO].Faixa[1].Valores.TotalMacho +
                                                                       Especies[ESP_BUBALINO].Faixa[2].Valores.TotalMacho +
                                                                       Especies[ESP_BUBALINO].Faixa[3].Valores.TotalMacho +
                                                                       Especies[ESP_BUBALINO].Faixa[4].Valores.TotalMacho ));
        ImprimeValor(Trunc(17  * Coef), Trunc(16.67 * Coef), (Especies[ESP_BUBALINO].Faixa[1].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[2].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[3].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[4].Valores.TotalFemea ));

        ImprimeValor(Trunc(17  * Coef), Trunc(17.27 * Coef), (Especies[ESP_BUBALINO].Faixa[1].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[2].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[3].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[4].Valores.TotalFemea +
                                                                       Especies[ESP_BUBALINO].Faixa[1].Valores.TotalMacho +
                                                                       Especies[ESP_BUBALINO].Faixa[2].Valores.TotalMacho +
                                                                       Especies[ESP_BUBALINO].Faixa[3].Valores.TotalMacho +
                                                                       Especies[ESP_BUBALINO].Faixa[4].Valores.TotalMacho ));

        Rodape;

linha := 30798;
        PDF.ENDDoc;
        FUltimoArquivoGerado := PDF.FileName;
      except
        on E: exception do
        begin
          Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Ocorreu um problema ao gerar o Relatório Formulário Anexo VI da IN17. (' + IntToStr(linha) + ') Descrição do Problema: ' + E.Message]);
          Exit;
        end;
      end;
      Result := ExtractFileName(Rel.NomeArquivo);
    finally
      SetLength(Especies, 0);
        PDF.Free;
linha := 30806;
      if QueryLocal <> nil then FreeAndNil(QueryLocal);
linha := 30808;
      if QAni <> nil then FreeAndNil(QAni);
linha := 30810;
      if Q <> nil then FreeAndNil(Q);
linha := 30812;
      if Rel <> nil then FreeAndNil(Rel);

    end;
  except
    on E: exception do
    begin
      Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, ['Ocorreu um problema ao gerar o Relatório Formulário Anexo VI da IN17. (' + IntToStr(linha) + ') Descrição do Problema: ' + E.Message]);
      Exit;
    end;
  end;

end;

function TIntEventos.PossuiCodigosSemelhantes(CodEvento: Integer): Integer;
const
  NomeMetodo: String = 'PossuiCodigosSemelhantes';
var
  Q: THerdomQuery;
  DadosEvento: TInfoEvento;
begin
  Result := -1;

  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;

  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  Result := VerificaEvento(CodEvento, True, 'Evento', DadosEvento);
  if Result < 0 then begin
    Exit;
  end;

  Q := THerdomQuery.Create(Conexao, nil);
  try
    try

      Q.SQL.Clear;

      {$IFDEF MSSQL}
      Q.SQL.Add('select count(*) as qtd_ocorrencias ' +
                '  from tmp_aplica_evento ' +
                ' where cod_pessoa_produtor = :cod_pessoa_produtor ' +
                '   and cod_evento = :cod_evento ');
      {$ENDIF}
      Q.ParamByName('cod_pessoa_produtor').AsInteger := Conexao.CodProdutorTrabalho;
      Q.ParamByName('cod_evento').AsInteger := CodEvento;
      Q.Open;

      if Q.FieldByName('qtd_ocorrencias').AsInteger > 0 then begin
        Result := 1;
        Exit;
      end;

      Result := 0;
    except
      On E: exception do begin
        Rollback;
        Mensagens.Adicionar(9999, Self.ClassName, NomeMetodo, [E.Message]);
        Result := -9999;
        Exit;
      end;
    end;
  Finally
    Q.Free;
  end;
end;

procedure TIntEventos.InsereMorteAnimal(CodTipoMorte,
  CodCausaMorte: integer; CodAnimalManejo, DataMorteAnimal: string);
begin
  try
    FDatasetTemporario.Insert;
    FDatasetTemporario.FieldByName('COD_TIPO_MORTE').AsInteger        :=  CodTipoMorte;
    FDatasetTemporario.FieldByName('COD_CAUSA_MORTE').AsInteger       :=  CodCausaMorte;
    FDatasetTemporario.FieldByName('COD_ANIMAL_MANEJO').AsString      :=  TRIM(CodAnimalManejo);
    FDatasetTemporario.FieldByName('DTA_APLICACAO_EVENTO').AsDateTime :=  StrToDateTime(TRIM(DataMorteAnimal));
    FDatasetTemporario.Post;
  except
    FDatasetTemporario.Cancel;
  end;
end;

procedure TIntEventos.LimpaListaMorteAnimais;
begin
  FDatasetTemporario.EmptyDataSet;
end;

function TIntEventos.EfetivaEventosMorte: integer;
const
  NomeMetodo:string           = 'EfetivaEventosMorte';
  CCodTipoEventoMorte:integer = 12;
var
  Q,QI,QI2,QU,QU2: THerdomQuery;
  VCodTipoMorteAux,VCodCausaMorteAux,CodRegistroLog,vCodEVento,vcont:integer;
  VDataAplicacaoEvento:TDateTime;
  SQLGetProxCodEvento,SQLTipoCausaMorte,SqlInsereEvento,SqlInsereEventoMorte,
  SQLInsertAnimalEvento:string;
begin
  Result      :=  -1;
  vCodEVento  :=  -1;
  if not Inicializado then begin
    RaiseNaoInicializado(NomeMetodo);
    Exit;
  end;
  // Verifica se produtor de trabalho foi definido
  if Conexao.CodProdutorTrabalho = -1 then
  begin
    Mensagens.Adicionar(307, Self.ClassName, NomeMetodo, []);
    Result := -307;
    Exit;
  end;

  if FDatasetTemporario.IsEmpty then
  begin
    Mensagens.Adicionar(10260, Self.ClassName, NomeMetodo, []);
    Result := -10260;
    Exit;
  end;

  q   :=  THerdomQuery.Create(conexao,nil);
  qi  :=  THerdomQuery.Create(Conexao,nil);
  qi2 :=  THerdomQuery.Create(Conexao,nil);
  qu  :=  THerdomQuery.Create(Conexao,nil);
  qu2 :=  THerdomQuery.Create(Conexao,nil);

  try
    SQLGetProxCodEvento :=  'SELECT ISNULL(MAX(COD_EVENTO), 0) + 1 AS COD_EVENTO ' +
                            '  FROM TAB_EVENTO ' +
                            ' WHERE COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR ';

    SQLTipoCausaMorte  :=  'SELECT TM.COD_TIPO_MORTE, '  +
                           '        TM.SGL_TIPO_MORTE, '  +
                           '        TM.DES_TIPO_MORTE, '  +
                           '        CM.SGL_CAUSA_MORTE, '  +
                           '        CM.COD_CAUSA_MORTE,         '  +
                           '        CM.DES_CAUSA_MORTE '  +
                           ' FROM TAB_TIPO_MORTE TM, '  +
                           '      TAB_CAUSA_MORTE CM, '  +
                           '      TAB_TIPO_CAUSA_MORTE TCM '  +
                           ' WHERE TCM.COD_CAUSA_MORTE = CM.COD_CAUSA_MORTE '  +
                           '       AND TCM.COD_TIPO_MORTE = TM.COD_TIPO_MORTE '  +
                           '       AND TCM.COD_CAUSA_MORTE=:COD_CAUSA_MORTE '  +
                           '       AND TCM.COD_TIPO_MORTE=:COD_TIPO_MORTE';

      // Tenta Inserir Registro
     SqlInsereEvento  :=  'INSERT INTO TAB_EVENTO ' +
                          '  (COD_PESSOA_PRODUTOR ' +
                          '   , COD_EVENTO ' +
                          '   , COD_TIPO_EVENTO ' +
                          '   , DTA_INICIO ' +
                          '   , DTA_FIM ' +
                          '   , COD_FAZENDA ' +
                          '   , TXT_DADOS ' +
                          '   , TXT_OBSERVACAO ' +
                          '   , COD_SITUACAO_SISBOV ' +
                          '   , QTD_ANIMAIS ' +
                          '   , DTA_CADASTRAMENTO ' +
                          '   , DTA_EFETIVACAO_CADASTRO ' +
                          '   , COD_ARQUIVO_SISBOV ' +
                          '   , COD_REGISTRO_LOG) ' +
                          'VALUES ' +
                          '  (:COD_PESSOA_PRODUTOR ' +
                          '   , :COD_EVENTO ' +
                          '   , :COD_TIPO_EVENTO ' +
                          '   , :DTA_INICIO ' +
                          '   , :DTA_FIM ' +
                          '   , :COD_FAZENDA ' +
                          '   , :TXT_DADOS ' +
                          '   , :TXT_OBSERVACAO ' +
                          '   , ''P'' ' +
                          '   , 0 ' +
                          '   , GETDATE() ' +
                          '   , NULL ' +
                          '   , NULL ' +
                          '   , :COD_REGISTRO_LOG)';

    SqlInsereEventoMorte  :=  'INSERT INTO TAB_EVENTO_MORTE ' +
                              '  (COD_PESSOA_PRODUTOR ' +
                              '   , COD_EVENTO ' +
                              '   , COD_TIPO_MORTE ' +
                              '   , COD_CAUSA_MORTE) ' +
                              'VALUES ' +
                              '  (:COD_PESSOA_PRODUTOR ' +
                              '   , :COD_EVENTO ' +
                              '   , :COD_TIPO_MORTE ' +
                              '   , :COD_CAUSA_MORTE) ';

    SQLInsertAnimalEvento  :=  'INSERT INTO TAB_ANIMAL_EVENTO(COD_PESSOA_PRODUTOR, COD_EVENTO, COD_ANIMAL, '  +
                               ' IND_ANIMAL_CADASTRADO, COD_REGIME_ALIMENTAR, COD_CATEGORIA_ANIMAL, '  +
                               '  COD_TIPO_LUGAR, COD_LOCAL_CORRENTE, COD_FAZENDA_CORRENTE, IND_APTO_COBERTURA, '  +
                               '   DTA_APLICACAO_EVENTO, COD_ARQUIVO_SISBOV) '  +
                               ' SELECT TOP 1 TA.COD_PESSOA_PRODUTOR, '  +
                               '        3 COD_EVENTO, '  +
                               '        TA.COD_ANIMAL, '  +
                               '        TA.IND_ANIMAL_CASTRADO, '  +
                               '        TA.COD_REGIME_ALIMENTAR, '  +
                               '        TA.COD_CATEGORIA_ANIMAL, '  +
                               '        TA.COD_TIPO_LUGAR, '  +
                               '        TA.COD_LOCAL_CORRENTE, '  +
                               '        TA.COD_FAZENDA_CORRENTE, '  +
                               '        TA.IND_APTO_COBERTURA, '  +
                               '        CONVERT(DATETIME,:DTA_APLICACAO_EVENTO,103) DTA_APLICACAO_EVENTO, '  +
                               '        TA.COD_ARQUIVO_SISBOV '  +
                               ' FROM TAB_ANIMAL TA '  +
                               ' WHERE TA.COD_FAZENDA_MANEJO = :COD_FAZENDA_MANEJO '  +
                               '       AND TA.COD_ANIMAL_MANEJO = :COD_ANIMAL_MANEJO '  +
                               '       AND TA.COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR '  +
                               '       AND TA.DTA_FIM_VALIDADE IS NULL';

    qu.sql.text  :=  'UPDATE TAB_EVENTO '  +
                     ' SET QTD_ANIMAIS = '  +
                     '     (SELECT COUNT(*) FROM TAB_ANIMAL_EVENTO WHERE COD_EVENTO = :COD_EVENTO AND '  +
                     '      COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR) '  +
                     ' WHERE COD_EVENTO = :COD_EVENTO '  +
                     '       AND COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR';

    qu2.SQL.Text  :=  'UPDATE TAB_ANIMAL SET DTA_ULTIMO_EVENTO=:DTA_ULTIMO_EVENTO, '+
                      'DTA_APLICACAO_ULTIMO_EVENTO=:DTA_APLICACAO_ULTIMO_EVENTO, '+
                      'DTA_DESATIVACAO = GETDATE(),  '+
                      'COD_CATEGORIA_ANIMAL = 13 '+
                      ' WHERE COD_FAZENDA_MANEJO = :COD_FAZENDA_MANEJO '  +
                      '       AND COD_ANIMAL_MANEJO = :COD_ANIMAL_MANEJO '  +
                      '       AND COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR '  +
                      '       AND DTA_FIM_VALIDADE IS NULL';
    FDatasetTemporario.First;
    vcont :=  1;
    VDataAplicacaoEvento  :=  0;
    conexao.beginTran;

    while not FDatasetTemporario.Eof do
    begin
      if  (VCodTipoMorteAux <> FDatasetTemporario.fieldbyname('COD_TIPO_MORTE').AsInteger)   or
          (VCodCausaMorteAux <> FDatasetTemporario.fieldbyname('COD_CAUSA_MORTE').AsInteger) or
          (VDataAplicacaoEvento <> FDatasetTemporario.fieldbyname('DTA_APLICACAO_EVENTO').AsDateTime) then
          begin
            if (vCodEVento <> -1) then
            begin
              qu.ParamByName('COD_EVENTO').AsInteger           :=  vCodEVento;
              qu.ParamByName('COD_PESSOA_PRODUTOR').AsInteger  :=  conexao.CodProdutorTrabalho;
              qu.ExecSQL();
            end;

            VCodTipoMorteAux     :=  FDatasetTemporario.fieldbyname('COD_TIPO_MORTE').AsInteger;
            VCodCausaMorteAux    :=  FDatasetTemporario.fieldbyname('COD_CAUSA_MORTE').AsInteger;
            VDataAplicacaoEvento :=  trunc(FDatasetTemporario.fieldbyname('DTA_APLICACAO_EVENTO').AsDateTime);

            qi.SQL.Text          := SqlInsereEvento;
            CodRegistroLog       := ProximoCodRegistroLog;
            
            //pega o proximo código do evento
            q.Close;
            Q.SQL.Text  :=  (SQLGetProxCodEvento);
            q.ParamByName('COD_PESSOA_PRODUTOR').AsInteger  :=  conexao.CodProdutorTrabalho;
            q.Open;

            vCodEVento                                      :=  q.fieldbyname('COD_EVENTO').AsInteger;
            qi.ParamByName('COD_EVENTO').AsInteger          :=  vCodEVento;

            q.Close;
            q.SQL.Text  :=  SQLTipoCausaMorte;
            q.ParamByName('COD_TIPO_MORTE').AsInteger       :=  VCodTipoMorteAux;
            q.ParamByName('COD_CAUSA_MORTE').AsInteger      :=  VCodCausaMorteAux;
            q.Open;

            qi.ParamByName('TXT_DADOS').AsString            :=  'Tipo: '+q.fieldbyname('SGL_TIPO_MORTE').AsString+' - '+q.fieldbyname('DES_TIPO_MORTE').AsString+#10+#13+
                                                                'Causa: '+q.fieldbyname('SGL_CAUSA_MORTE').AsString+' - '+q.fieldbyname('DES_CAUSA_MORTE').AsString;

            qi.ParamByName('COD_PESSOA_PRODUTOR').AsInteger :=  Conexao.CodProdutorTrabalho;
            qi.ParamByName('COD_TIPO_EVENTO').AsInteger     :=  CCodTipoEventoMorte;

            //druzo 23-03-2010 
//          qi.ParamByName('DTA_INICIO').AsDate             :=  trunc(now);
//          qi.ParamByName('DTA_FIM').AsDate                :=  trunc(now);

            qi.ParamByName('DTA_INICIO').AsDate             :=  VDataAplicacaoEvento;
            qi.ParamByName('DTA_FIM').AsDate                :=  VDataAplicacaoEvento;

            qi.ParamByName('COD_FAZENDA').AsInteger         :=  Conexao.CodFazendaTrabalho;
            qi.ParamByName('TXT_OBSERVACAO').AsString       :=  'Gerado automáticamente';
            qi.ParamByName('COD_REGISTRO_LOG').AsInteger    :=  CodRegistroLog;
            qi.ExecSQL();

            qi.SQL.Text   :=  SqlInsereEventoMorte;
            qi.ParamByName('COD_PESSOA_PRODUTOR').AsInteger := Conexao.CodProdutorTrabalho;
            qi.ParamByName('COD_EVENTO').AsInteger          := vCodEvento;
            qi.ParamByName('COD_TIPO_MORTE').AsInteger      := VCodTipoMorteAux;
            qi.ParamByName('COD_CAUSA_MORTE').AsInteger     := VCodCausaMorteAux;
            qi.ExecSQL;
            qi2.SQL.Text  :=  'INSERT INTO TAB_ANIMAL_EVENTO(COD_PESSOA_PRODUTOR, COD_EVENTO, COD_ANIMAL, '  +
                               ' IND_ANIMAL_CASTRADO, COD_REGIME_ALIMENTAR, COD_CATEGORIA_ANIMAL, '  +
                               '  COD_TIPO_LUGAR, COD_LOCAL_CORRENTE, COD_FAZENDA_CORRENTE, IND_APTO_COBERTURA, '  +
                               '   DTA_APLICACAO_EVENTO, COD_PESSOA_CORRENTE,DTA_APLICACAO_ULTIMO_EVENTO) '  +
                               ' SELECT TOP 1 TA.COD_PESSOA_PRODUTOR, '  +
                               '        '+IntToStr(vCodEVento)+' COD_EVENTO, '  +
                               '        TA.COD_ANIMAL, '  +
                               '        TA.IND_ANIMAL_CASTRADO, '  +
                               '        TA.COD_REGIME_ALIMENTAR, '  +
                               '        TA.COD_CATEGORIA_ANIMAL, '  +
                               '        TA.COD_TIPO_LUGAR, '  +
                               '        TA.COD_LOCAL_CORRENTE, '  +
                               '        TA.COD_FAZENDA_CORRENTE, '  +
                               '        TA.IND_APTO_COBERTURA, '  +
                               '        CONVERT(DATETIME,:DTA_APLICACAO_EVENTO,103) DTA_APLICACAO_EVENTO, '  +
                               '        TA.COD_PESSOA_PRODUTOR, '  +
                               '        CONVERT(DATETIME,:DTA_APLICACAO_EVENTO,103) DTA_APLICACAO_EVENTO '  +
                               ' FROM TAB_ANIMAL TA '  +
                               ' WHERE TA.COD_FAZENDA_MANEJO = :COD_FAZENDA_MANEJO '  +
                               '       AND TA.COD_ANIMAL_MANEJO = :COD_ANIMAL_MANEJO '  +
                               '       AND TA.COD_PESSOA_PRODUTOR = :COD_PESSOA_PRODUTOR '  +
                               '       AND TA.DTA_FIM_VALIDADE IS NULL';

      end;
      qi2.ParamByName('DTA_APLICACAO_EVENTO').AsString     :=  FDatasetTemporario.fieldbyname('DTA_APLICACAO_EVENTO').AsString;
      qi2.ParamByName('COD_FAZENDA_MANEJO').AsInteger      :=  Conexao.CodFazendaTrabalho;
      qi2.ParamByName('COD_PESSOA_PRODUTOR').AsInteger     :=  Conexao.CodProdutorTrabalho;
      qi2.ParamByName('COD_ANIMAL_MANEJO').AsString        :=  FDatasetTemporario.fieldbyname('COD_ANIMAL_MANEJO').AsString;
      qi2.ExecSQL();

      //atualizando a data do fim de validade
      qu2.ParamByName('DTA_ULTIMO_EVENTO').AsDateTime             :=  FDatasetTemporario.fieldbyname('DTA_APLICACAO_EVENTO').AsDateTime;
      qu2.ParamByName('DTA_APLICACAO_ULTIMO_EVENTO').AsDateTime   :=  FDatasetTemporario.fieldbyname('DTA_APLICACAO_EVENTO').AsDateTime;
      qu2.ParamByName('COD_FAZENDA_MANEJO').AsInteger             :=  Conexao.CodFazendaTrabalho;
      qu2.ParamByName('COD_PESSOA_PRODUTOR').AsInteger            :=  Conexao.CodProdutorTrabalho;
      qu2.ParamByName('COD_ANIMAL_MANEJO').AsString               :=  FDatasetTemporario.fieldbyname('COD_ANIMAL_MANEJO').AsString;
      QU2.ExecSQL();
      vcont :=  vcont+1;
      FDatasetTemporario.Next;
    end;

    if (vCodEVento <> -1) then
    begin
      qu.ParamByName('COD_EVENTO').AsInteger           :=  vCodEVento;
      qu.ParamByName('COD_PESSOA_PRODUTOR').AsInteger  :=  conexao.CodProdutorTrabalho;
      qu.ExecSQL();
    end;

    Conexao.Commit;
    result  :=  1;
  finally
    q.Free;
    qi.Free;
    qi2.free;
    qu.Free;
    qu2.Free;
  end;
end;
end.
